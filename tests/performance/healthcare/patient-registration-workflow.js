/**\n * Patient Registration Workflow Performance Test\n * Hospital Management System\n * \n * This test simulates the complete patient registration workflow,\n * measuring performance under realistic healthcare scenarios.\n * \n * Test Scenarios:\n * - New patient registration\n * - Patient information verification\n * - Insurance validation\n * - Appointment scheduling\n * - Medical history collection\n * \n * Healthcare Compliance:\n * - HIPAA-compliant data handling\n * - Audit trail validation\n * - Security controls verification\n */\n\nimport http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Rate, Trend, Counter } from 'k6/metrics';\nimport { randomItem, randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.2.0/index.js';\n\n// Custom metrics for healthcare workflows\nconst registrationSuccessRate = new Rate('registration_success_rate');\nconst registrationDuration = new Trend('registration_duration');\nconst hipaaValidationTime = new Trend('hipaa_validation_time');\nconst auditLogCreation = new Counter('audit_log_entries');\nconst patientDataValidation = new Trend('patient_data_validation_time');\nconst insuranceVerificationTime = new Trend('insurance_verification_time');\n\n// Test configuration\nexport const options = {\n  stages: [\n    // Ramp-up: Simulate morning patient registration peak\n    { duration: '5m', target: 10 }, // Start of day\n    { duration: '10m', target: 25 }, // Morning appointments\n    { duration: '15m', target: 50 }, // Peak registration period\n    { duration: '10m', target: 25 }, // Afternoon slowdown\n    { duration: '5m', target: 0 },   // End of day\n  ],\n  thresholds: {\n    // Healthcare-specific performance requirements\n    'http_req_duration': ['p(95)<2000'], // 95% of requests under 2s\n    'http_req_duration{name:patient_registration}': ['p(99)<5000'], // Critical path\n    'http_req_duration{name:hipaa_validation}': ['p(95)<1000'], // Security checks\n    'registration_success_rate': ['rate>0.99'], // 99% success rate\n    'registration_duration': ['p(95)<10000'], // Complete workflow under 10s\n    'hipaa_validation_time': ['p(95)<500'], // HIPAA checks under 500ms\n    'patient_data_validation_time': ['p(90)<1000'], // Data validation\n    'insurance_verification_time': ['p(95)<3000'], // Insurance checks\n    'http_req_failed': ['rate<0.01'], // Less than 1% failures\n  },\n  // Environment-specific configuration\n  ext: {\n    loadimpact: {\n      projectID: 3666077,\n      name: 'HMS - Patient Registration Workflow'\n    }\n  }\n};\n\n// Base URL configuration\nconst BASE_URL = __ENV.HMS_BASE_URL || 'http://localhost:3000';\nconst API_BASE = `${BASE_URL}/api`;\n\n// Healthcare test data generators\nclass HealthcareDataGenerator {\n  static generatePatientData() {\n    const firstNames = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emily', 'Robert', 'Lisa', 'William', 'Jennifer'];\n    const lastNames = ['Smith', 'Johnson', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas'];\n    const insuranceProviders = ['BlueCross BlueShield', 'Aetna', 'Humana', 'Cigna', 'United Healthcare'];\n    const medicalConditions = ['Hypertension', 'Diabetes Type 2', 'Asthma', 'Arthritis', 'Depression', 'None'];\n    \n    return {\n      firstName: randomItem(firstNames),\n      lastName: randomItem(lastNames),\n      dateOfBirth: this.generateRandomDate(),\n      ssn: this.generateSSN(),\n      phoneNumber: this.generatePhoneNumber(),\n      email: this.generateEmail(),\n      address: this.generateAddress(),\n      emergencyContact: this.generateEmergencyContact(),\n      insuranceProvider: randomItem(insuranceProviders),\n      insurancePolicyNumber: this.generatePolicyNumber(),\n      medicalHistory: {\n        conditions: [randomItem(medicalConditions)],\n        allergies: this.generateAllergies(),\n        medications: this.generateMedications(),\n        familyHistory: this.generateFamilyHistory()\n      },\n      preferredLanguage: randomItem(['English', 'Spanish', 'French', 'Chinese']),\n      maritalStatus: randomItem(['Single', 'Married', 'Divorced', 'Widowed']),\n      occupation: this.generateOccupation(),\n      pharmacyPreference: this.generatePharmacy()\n    };\n  }\n  \n  static generateRandomDate() {\n    const start = new Date(1940, 0, 1);\n    const end = new Date(2005, 11, 31);\n    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n    return date.toISOString().split('T')[0];\n  }\n  \n  static generateSSN() {\n    // Generate test SSN (not real)\n    return `${randomIntBetween(100, 999)}-${randomIntBetween(10, 99)}-${randomIntBetween(1000, 9999)}`;\n  }\n  \n  static generatePhoneNumber() {\n    return `+1-${randomIntBetween(200, 999)}-${randomIntBetween(200, 999)}-${randomIntBetween(1000, 9999)}`;\n  }\n  \n  static generateEmail() {\n    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\n    const username = `patient${randomIntBetween(1000, 9999)}`;\n    return `${username}@${randomItem(domains)}`;\n  }\n  \n  static generateAddress() {\n    const streets = ['Main St', 'Oak Ave', 'Park Rd', 'First St', 'Second Ave'];\n    const cities = ['Springfield', 'Franklin', 'Georgetown', 'Madison', 'Riverside'];\n    const states = ['CA', 'NY', 'TX', 'FL', 'IL'];\n    \n    return {\n      street: `${randomIntBetween(100, 9999)} ${randomItem(streets)}`,\n      city: randomItem(cities),\n      state: randomItem(states),\n      zipCode: `${randomIntBetween(10000, 99999)}`,\n      country: 'USA'\n    };\n  }\n  \n  static generateEmergencyContact() {\n    return {\n      name: 'Emergency Contact',\n      relationship: randomItem(['Spouse', 'Parent', 'Sibling', 'Child', 'Friend']),\n      phoneNumber: this.generatePhoneNumber()\n    };\n  }\n  \n  static generatePolicyNumber() {\n    return `POL${randomIntBetween(100000, 999999)}`;\n  }\n  \n  static generateAllergies() {\n    const allergies = ['Penicillin', 'Shellfish', 'Peanuts', 'Latex', 'None'];\n    return [randomItem(allergies)];\n  }\n  \n  static generateMedications() {\n    const medications = ['Lisinopril', 'Metformin', 'Atorvastatin', 'Levothyroxine', 'None'];\n    return [randomItem(medications)];\n  }\n  \n  static generateFamilyHistory() {\n    const conditions = ['Heart Disease', 'Cancer', 'Diabetes', 'Hypertension', 'None'];\n    return {\n      motherSide: [randomItem(conditions)],\n      fatherSide: [randomItem(conditions)]\n    };\n  }\n  \n  static generateOccupation() {\n    const occupations = ['Teacher', 'Engineer', 'Nurse', 'Manager', 'Retired', 'Student'];\n    return randomItem(occupations);\n  }\n  \n  static generatePharmacy() {\n    const pharmacies = ['CVS Pharmacy', 'Walgreens', 'Rite Aid', 'Kroger Pharmacy', 'Target Pharmacy'];\n    return {\n      name: randomItem(pharmacies),\n      address: this.generateAddress(),\n      phoneNumber: this.generatePhoneNumber()\n    };\n  }\n}\n\n// Authentication helper\nfunction authenticate() {\n  const loginData = {\n    email: 'test.registrar@hospital.com',\n    password: 'SecurePassword123!',\n    role: 'REGISTRAR'\n  };\n  \n  const loginResponse = http.post(`${API_BASE}/auth/login`, JSON.stringify(loginData), {\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': 'K6-HMS-Performance-Test'\n    },\n    tags: { name: 'authentication' }\n  });\n  \n  check(loginResponse, {\n    'authentication successful': (r) => r.status === 200,\n    'auth token received': (r) => r.json('token') !== undefined\n  });\n  \n  return loginResponse.json('token');\n}\n\n// Main test scenario\nexport default function() {\n  // Authenticate as registrar\n  const authToken = authenticate();\n  if (!authToken) {\n    console.error('Authentication failed, skipping test iteration');\n    return;\n  }\n  \n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${authToken}`,\n    'User-Agent': 'K6-HMS-Performance-Test',\n    'X-Test-Session': `perf-test-${__VU}-${__ITER}`\n  };\n  \n  // Step 1: Generate patient data\n  const patientData = HealthcareDataGenerator.generatePatientData();\n  \n  // Step 2: Validate patient data (HIPAA compliance check)\n  const hipaaValidationStart = Date.now();\n  const validationResponse = http.post(\n    `${API_BASE}/patients/validate`,\n    JSON.stringify({ patientData }),\n    { \n      headers,\n      tags: { name: 'hipaa_validation' }\n    }\n  );\n  \n  const hipaaValidationEnd = Date.now();\n  hipaaValidationTime.add(hipaaValidationEnd - hipaaValidationStart);\n  \n  check(validationResponse, {\n    'patient data validation successful': (r) => r.status === 200,\n    'hipaa compliance confirmed': (r) => r.json('hipaaCompliant') === true,\n    'validation response time acceptable': (r) => r.timings.duration < 1000\n  });\n  \n  // Step 3: Check for duplicate patients\n  const duplicateCheckResponse = http.get(\n    `${API_BASE}/patients/duplicate-check?ssn=${encodeURIComponent(patientData.ssn)}&dob=${patientData.dateOfBirth}`,\n    { \n      headers,\n      tags: { name: 'duplicate_check' }\n    }\n  );\n  \n  check(duplicateCheckResponse, {\n    'duplicate check completed': (r) => r.status === 200,\n    'duplicate check response time': (r) => r.timings.duration < 500\n  });\n  \n  // Step 4: Verify insurance information\n  const insuranceValidationStart = Date.now();\n  const insuranceResponse = http.post(\n    `${API_BASE}/insurance/verify`,\n    JSON.stringify({\n      provider: patientData.insuranceProvider,\n      policyNumber: patientData.insurancePolicyNumber,\n      patientInfo: {\n        firstName: patientData.firstName,\n        lastName: patientData.lastName,\n        dateOfBirth: patientData.dateOfBirth\n      }\n    }),\n    { \n      headers,\n      tags: { name: 'insurance_verification' }\n    }\n  );\n  \n  const insuranceValidationEnd = Date.now();\n  insuranceVerificationTime.add(insuranceValidationEnd - insuranceValidationStart);\n  \n  check(insuranceResponse, {\n    'insurance verification completed': (r) => r.status === 200,\n    'insurance verification time acceptable': (r) => r.timings.duration < 3000,\n    'insurance status received': (r) => r.json('status') !== undefined\n  });\n  \n  // Step 5: Register patient (main registration workflow)\n  const registrationStart = Date.now();\n  const registrationResponse = http.post(\n    `${API_BASE}/patients/register`,\n    JSON.stringify({\n      ...patientData,\n      registrationDate: new Date().toISOString(),\n      registeredBy: 'test.registrar@hospital.com',\n      facility: 'Main Hospital',\n      department: 'Registration'\n    }),\n    { \n      headers,\n      tags: { name: 'patient_registration' }\n    }\n  );\n  \n  const registrationEnd = Date.now();\n  const registrationTime = registrationEnd - registrationStart;\n  registrationDuration.add(registrationTime);\n  \n  const registrationSuccess = check(registrationResponse, {\n    'patient registration successful': (r) => r.status === 201,\n    'patient ID assigned': (r) => r.json('patientId') !== undefined,\n    'registration audit trail created': (r) => r.json('auditTrailId') !== undefined,\n    'registration time acceptable': (r) => r.timings.duration < 5000,\n    'hipaa audit log created': (r) => r.json('hipaaAuditLog') === true\n  });\n  \n  registrationSuccessRate.add(registrationSuccess);\n  \n  if (registrationSuccess) {\n    auditLogCreation.add(1);\n    \n    const patientId = registrationResponse.json('patientId');\n    \n    // Step 6: Schedule initial appointment\n    const appointmentResponse = http.post(\n      `${API_BASE}/appointments/schedule`,\n      JSON.stringify({\n        patientId: patientId,\n        appointmentType: 'New Patient Consultation',\n        preferredDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n        preferredTime: '09:00',\n        department: 'General Medicine',\n        priority: 'routine',\n        notes: 'New patient registration - initial consultation'\n      }),\n      { \n        headers,\n        tags: { name: 'appointment_scheduling' }\n      }\n    );\n    \n    check(appointmentResponse, {\n      'appointment scheduling successful': (r) => r.status === 201,\n      'appointment ID assigned': (r) => r.json('appointmentId') !== undefined,\n      'appointment time acceptable': (r) => r.timings.duration < 2000\n    });\n    \n    // Step 7: Generate patient welcome packet\n    const welcomePacketResponse = http.post(\n      `${API_BASE}/patients/${patientId}/welcome-packet`,\n      JSON.stringify({\n        includePortalAccess: true,\n        includeInsuranceInfo: true,\n        includeHipaaNotice: true,\n        deliveryMethod: 'email'\n      }),\n      { \n        headers,\n        tags: { name: 'welcome_packet' }\n      }\n    );\n    \n    check(welcomePacketResponse, {\n      'welcome packet generated': (r) => r.status === 200,\n      'portal credentials created': (r) => r.json('portalCredentials') !== undefined,\n      'welcome packet time acceptable': (r) => r.timings.duration < 1500\n    });\n    \n    // Step 8: Log completion of registration workflow\n    const workflowLogResponse = http.post(\n      `${API_BASE}/audit/workflow-completion`,\n      JSON.stringify({\n        workflowType: 'patient_registration',\n        patientId: patientId,\n        totalTime: registrationTime,\n        steps: [\n          'hipaa_validation',\n          'duplicate_check',\n          'insurance_verification',\n          'patient_registration',\n          'appointment_scheduling',\n          'welcome_packet_generation'\n        ],\n        completedBy: 'test.registrar@hospital.com',\n        facilityId: 'main-hospital',\n        complianceFlags: {\n          hipaaCompliant: true,\n          auditTrailComplete: true,\n          dataEncrypted: true\n        }\n      }),\n      { \n        headers,\n        tags: { name: 'workflow_audit' }\n      }\n    );\n    \n    check(workflowLogResponse, {\n      'workflow audit logged': (r) => r.status === 200,\n      'audit log time acceptable': (r) => r.timings.duration < 500\n    });\n  }\n  \n  // Simulate realistic user behavior\n  sleep(randomIntBetween(1, 3)); // Time between registrations\n}\n\n// Setup function\nexport function setup() {\n  console.log('Starting Patient Registration Workflow Performance Test');\n  console.log(`Base URL: ${BASE_URL}`);\n  console.log('Test will simulate realistic patient registration scenarios');\n  \n  // Verify API connectivity\n  const healthCheck = http.get(`${API_BASE}/health`);\n  if (healthCheck.status !== 200) {\n    throw new Error(`API health check failed: ${healthCheck.status}`);\n  }\n  \n  console.log('API connectivity verified');\n  return {};\n}\n\n// Teardown function\nexport function teardown(data) {\n  console.log('Patient Registration Workflow Performance Test completed');\n  console.log('Check the metrics for detailed performance analysis');\n}\n\n// Handle summary\nexport function handleSummary(data) {\n  const summary = {\n    timestamp: new Date().toISOString(),\n    test_type: 'patient_registration_workflow',\n    duration: data.state.testRunDurationMs,\n    iterations: data.metrics.iterations.values.count,\n    virtual_users: data.metrics.vus_max.values.max,\n    \n    // HTTP metrics\n    http_req_duration_p95: data.metrics.http_req_duration.values['p(95)'],\n    http_req_duration_p99: data.metrics.http_req_duration.values['p(99)'],\n    http_req_failed_rate: data.metrics.http_req_failed.values.rate,\n    http_reqs_per_second: data.metrics.http_reqs.values.rate,\n    \n    // Healthcare-specific metrics\n    registration_success_rate: data.metrics.registration_success_rate?.values.rate || 0,\n    registration_duration_p95: data.metrics.registration_duration?.values['p(95)'] || 0,\n    hipaa_validation_time_p95: data.metrics.hipaa_validation_time?.values['p(95)'] || 0,\n    insurance_verification_time_p95: data.metrics.insurance_verification_time?.values['p(95)'] || 0,\n    audit_log_entries: data.metrics.audit_log_entries?.values.count || 0,\n    \n    // Performance assessment\n    performance_grade: calculatePerformanceGrade(data),\n    healthcare_compliance: assessHealthcareCompliance(data),\n    recommendations: generateRecommendations(data)\n  };\n  \n  return {\n    'patient-registration-results.json': JSON.stringify(summary, null, 2),\n    stdout: generateTextSummary(summary)\n  };\n}\n\nfunction calculatePerformanceGrade(data) {\n  const p95 = data.metrics.http_req_duration?.values['p(95)'] || Infinity;\n  const errorRate = data.metrics.http_req_failed?.values.rate || 1;\n  const registrationSuccess = data.metrics.registration_success_rate?.values.rate || 0;\n  \n  if (p95 < 1000 && errorRate < 0.01 && registrationSuccess > 0.99) return 'A';\n  if (p95 < 2000 && errorRate < 0.02 && registrationSuccess > 0.98) return 'B';\n  if (p95 < 3000 && errorRate < 0.05 && registrationSuccess > 0.95) return 'C';\n  return 'D';\n}\n\nfunction assessHealthcareCompliance(data) {\n  const hipaaValidation = data.metrics.hipaa_validation_time?.values['p(95)'] || Infinity;\n  const auditLogs = data.metrics.audit_log_entries?.values.count || 0;\n  const registrationSuccess = data.metrics.registration_success_rate?.values.rate || 0;\n  \n  return {\n    hipaaValidationCompliant: hipaaValidation < 1000,\n    auditTrailComplete: auditLogs > 0,\n    registrationReliability: registrationSuccess > 0.99,\n    overallCompliance: hipaaValidation < 1000 && auditLogs > 0 && registrationSuccess > 0.99\n  };\n}\n\nfunction generateRecommendations(data) {\n  const recommendations = [];\n  \n  const p95 = data.metrics.http_req_duration?.values['p(95)'] || 0;\n  const errorRate = data.metrics.http_req_failed?.values.rate || 0;\n  const registrationSuccess = data.metrics.registration_success_rate?.values.rate || 0;\n  \n  if (p95 > 2000) {\n    recommendations.push('Consider optimizing database queries and implementing caching');\n  }\n  \n  if (errorRate > 0.01) {\n    recommendations.push('Investigate and fix causes of HTTP errors');\n  }\n  \n  if (registrationSuccess < 0.99) {\n    recommendations.push('Improve registration workflow reliability and error handling');\n  }\n  \n  const hipaaValidation = data.metrics.hipaa_validation_time?.values['p(95)'] || 0;\n  if (hipaaValidation > 1000) {\n    recommendations.push('Optimize HIPAA validation processes for better performance');\n  }\n  \n  return recommendations;\n}\n\nfunction generateTextSummary(summary) {\n  return `\n================================================================================\nPATIENT REGISTRATION WORKFLOW PERFORMANCE SUMMARY\n================================================================================\nTest Completed: ${summary.timestamp}\nDuration: ${(summary.duration / 1000).toFixed(1)}s\nIterations: ${summary.iterations}\nMax VUs: ${summary.virtual_users}\n\nPERFORMANCE METRICS:\n• HTTP Request P95: ${summary.http_req_duration_p95?.toFixed(1)}ms\n• HTTP Request P99: ${summary.http_req_duration_p99?.toFixed(1)}ms\n• Error Rate: ${(summary.http_req_failed_rate * 100)?.toFixed(2)}%\n• Requests/sec: ${summary.http_reqs_per_second?.toFixed(1)}\n\nHEALTHCARE WORKFLOW METRICS:\n• Registration Success Rate: ${(summary.registration_success_rate * 100)?.toFixed(2)}%\n• Registration Duration P95: ${summary.registration_duration_p95?.toFixed(1)}ms\n• HIPAA Validation P95: ${summary.hipaa_validation_time_p95?.toFixed(1)}ms\n• Insurance Verification P95: ${summary.insurance_verification_time_p95?.toFixed(1)}ms\n• Audit Log Entries: ${summary.audit_log_entries}\n\nASSESSMENT:\n• Performance Grade: ${summary.performance_grade}\n• Healthcare Compliance: ${summary.healthcare_compliance.overallCompliance ? 'COMPLIANT' : 'NON-COMPLIANT'}\n\nRECOMMENDATIONS:\n${summary.recommendations.map(r => `• ${r}`).join('\\n')}\n================================================================================\n`;\n}\n"
      }
    }
  ]
}