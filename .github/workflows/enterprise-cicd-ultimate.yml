name: 🏥⚡ HMS Ultimate Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging, release/*, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop, staging ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scans at 2 AM UTC
    - cron: '0 6 * * MON'  # Weekly comprehensive analysis every Monday
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip Tests (Emergency Only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  JAVA_VERSION: '21'
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: 'ghcr.io'
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NEWRELIC_API_KEY: ${{ secrets.NEWRELIC_API_KEY }}
  KUBERNETES_NAMESPACE: 'hms-production'
  HIPAA_COMPLIANCE_ENDPOINT: ${{ secrets.HIPAA_COMPLIANCE_ENDPOINT }}
  FHIR_VALIDATION_ENDPOINT: ${{ secrets.FHIR_VALIDATION_ENDPOINT }}

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  statuses: write

jobs:
  # ================================================================
  # PHASE 1: PIPELINE INITIALIZATION & SECURITY VALIDATION
  # ================================================================
  pipeline-init:
    name: 🚀 Pipeline Initialization
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      changed_services: ${{ steps.changes.outputs.services }}
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔍 Detect Changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          frontend:
            - 'src/**'
            - 'apps/hms-web/**'
            - 'components/**'
          microservices:
            - 'microservices/**'
            - 'apps/microservices/**'
          infrastructure:
            - 'k8s/**'
            - 'docker-compose.yml'
            - 'Dockerfile'
          security:
            - '.github/workflows/**'
            - 'scripts/security/**'
          should_deploy:
            - 'src/**'
            - 'microservices/**'
            - 'k8s/**'
            
    - name: 🏷️ Generate Version
      id: version
      run: |
        VERSION="v$(date +'%Y.%m.%d')-${GITHUB_SHA::8}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: 🌍 Determine Environment
      id: env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi

  # ================================================================
  # PHASE 2: ULTIMATE CODE QUALITY & SECURITY ANALYSIS
  # ================================================================
  enterprise-code-quality:
    name: 🔍 Enterprise Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: pipeline-init
    
    strategy:
      matrix:
        analysis: [frontend, backend, microservices]
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏗️ Setup Multi-Language Environment
      uses: ./.github/actions/setup-environment
      
    - name: 📦 Install Dependencies
      run: |
        npm ci --include=dev
        pip install -r requirements-dev.txt || echo "No Python requirements"
        
    - name: 🧹 ESLint Enterprise Analysis
      if: matrix.analysis == 'frontend'
      run: |
        npm run lint:enterprise -- --format=json --output-file=eslint-report.json
        npm run lint:security -- --format=sarif --output-file=eslint-security.sarif
        
    - name: 💅 Prettier Enterprise Formatting
      if: matrix.analysis == 'frontend'
      run: |
        npm run prettier:check:enterprise
        npm run prettier:write:safe
        
    - name: 📋 TypeScript Ultra-Strict Check
      if: matrix.analysis == 'frontend'
      run: |
        npm run type-check:strict
        npm run type-check:coverage
        
    - name: ☕ Java Code Quality (SpotBugs + PMD)
      if: matrix.analysis == 'backend' || matrix.analysis == 'microservices'
      run: |
        cd microservices
        ./mvnw spotbugs:check pmd:check
        ./mvnw checkstyle:check
        
    - name: 🔒 Advanced Security Analysis
      run: |
        # Semgrep Security Analysis
        python -m semgrep --config=auto --json --output=semgrep-report.json .
        
        # Trivy Filesystem Scan
        trivy fs --format sarif --output trivy-fs.sarif .
        
        # OWASP Dependency Check
        dependency-check --project "HMS" --scan . --format JSON --out dependency-check-report.json
        
    - name: 📊 SonarQube Ultimate Analysis
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: target/sonar/report-task.txt
        
    - name: 🛡️ CodeQL Advanced Security Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript,typescript,java,python
        queries: security-extended,security-and-quality
        ram: 8192
        threads: 4
        
    - name: 📈 Upload Security Reports
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          eslint-security.sarif
          trivy-fs.sarif
          
    - name: 📋 Quality Gate Enforcement
      run: |
        # Enforce quality gates
        python scripts/quality/enforce-quality-gates.py \
          --eslint-report=eslint-report.json \
          --semgrep-report=semgrep-report.json \
          --dependency-check=dependency-check-report.json \
          --fail-on-high-severity

  # ================================================================
  # PHASE 3: COMPREHENSIVE TESTING SUITE
  # ================================================================
  comprehensive-testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [pipeline-init, enterprise-code-quality]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        test-suite: 
          - unit-frontend
          - unit-backend
          - integration-api
          - integration-database
          - e2e-critical-flows
          - e2e-healthcare-workflows
          - performance-load
          - performance-stress
          - security-penetration
          - accessibility-compliance
          
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Test Environment
      uses: ./.github/actions/setup-test-environment
      with:
        test-suite: ${{ matrix.test-suite }}
        
    - name: 🧪 Run Unit Tests (Frontend)
      if: matrix.test-suite == 'unit-frontend'
      run: |
        npm run test:unit:coverage -- --ci --maxWorkers=4
        npm run test:component:coverage
        
    - name: ☕ Run Unit Tests (Backend/Microservices)
      if: matrix.test-suite == 'unit-backend'
      run: |
        cd microservices
        ./mvnw test -DargLine="-Xmx2g" -Dspring.profiles.active=test
        ./mvnw jacoco:report
        
    - name: 🔗 Run Integration Tests (API)
      if: matrix.test-suite == 'integration-api'
      run: |
        npm run test:api:integration
        newman run tests/postman/HMS-API-Tests.postman_collection.json \
          --environment tests/postman/test-environment.json \
          --reporters cli,json \
          --reporter-json-export newman-report.json
          
    - name: 🗃️ Run Integration Tests (Database)
      if: matrix.test-suite == 'integration-database'
      run: |
        npm run test:database:integration
        npm run test:migration:validation
        
    - name: 🎭 Run E2E Tests (Critical Flows)
      if: matrix.test-suite == 'e2e-critical-flows'
      run: |
        npm run test:e2e:critical
        npx playwright test --config=playwright.critical.config.ts
        
    - name: 🏥 Run E2E Tests (Healthcare Workflows)
      if: matrix.test-suite == 'e2e-healthcare-workflows'
      run: |
        npx playwright test --config=playwright.healthcare.config.ts
        npm run test:fhir:compliance
        
    - name: ⚡ Run Performance Tests (Load)
      if: matrix.test-suite == 'performance-load'
      run: |
        k6 run tests/performance/load-test.js \
          --duration=10m \
          --vus=50 \
          --max-vus=100 \
          --out json=load-test-results.json
          
    - name: 💥 Run Performance Tests (Stress)
      if: matrix.test-suite == 'performance-stress'
      run: |
        k6 run tests/performance/stress-test.js \
          --duration=5m \
          --vus=100 \
          --max-vus=500 \
          --out json=stress-test-results.json
          
    - name: 🛡️ Run Security Penetration Tests
      if: matrix.test-suite == 'security-penetration'
      run: |
        # OWASP ZAP Security Testing
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable \
          zap-full-scan.py -t http://localhost:3000 \
          -J zap-report.json \
          -r zap-report.html
          
    - name: ♿ Run Accessibility Compliance Tests
      if: matrix.test-suite == 'accessibility-compliance'
      run: |
        npm run test:accessibility:axe
        npm run test:accessibility:lighthouse
        
    - name: 📊 Generate Test Reports
      if: always()
      run: |
        npm run test:report:merge
        npm run test:report:html
        
    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          coverage/
          test-results/
          *.json
          *.html

  # ================================================================
  # PHASE 4: HEALTHCARE COMPLIANCE VALIDATION
  # ================================================================
  healthcare-compliance:
    name: 🏥 Healthcare Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pipeline-init]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Compliance Environment
      uses: ./.github/actions/setup-environment
      
    - name: 🛡️ HIPAA Compliance Validation
      run: |
        python scripts/compliance/hipaa-validation.py \
          --source-path=. \
          --output-format=json \
          --output-file=hipaa-compliance-report.json \
          --strict-mode
          
    - name: 📋 FHIR R4 Compliance Check
      run: |
        npm run fhir:validate:r4
        npm run fhir:structure:validation
        
    - name: 🔒 PHI Data Protection Audit
      run: |
        python scripts/compliance/phi-audit.py \
          --scan-code \
          --scan-config \
          --output=phi-audit-report.json
          
    - name: 📊 Generate Compliance Dashboard
      run: |
        python scripts/compliance/generate-dashboard.py \
          --hipaa-report=hipaa-compliance-report.json \
          --phi-audit=phi-audit-report.json \
          --output=compliance-dashboard.html
          
    - name: 📈 Upload Compliance Reports
      uses: actions/upload-artifact@v4
      with:
        name: compliance-reports
        path: |
          *-compliance-report.json
          compliance-dashboard.html

  # ================================================================
  # PHASE 5: CONTAINER BUILD & SECURITY SCANNING
  # ================================================================
  container-security:
    name: 🐳 Container Build & Security
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [pipeline-init, comprehensive-testing]
    if: ${{ needs.pipeline-init.outputs.should_deploy == 'true' }}
    
    strategy:
      matrix:
        service: 
          - frontend
          - api-gateway
          - patient-management
          - clinical-notes
          - billing
          - analytics-data-ingestion
          
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
        
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_TOKEN }}
        
    - name: 🏷️ Extract Container Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ needs.pipeline-init.outputs.version }}
          
    - name: 🔨 Build Container Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./microservices/${{ matrix.service }}/Dockerfile
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: 🔍 Container Security Scan (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ needs.pipeline-init.outputs.version }}
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: 🛡️ Container Security Scan (Snyk)
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ needs.pipeline-init.outputs.version }}
        args: --severity-threshold=high --file=./microservices/${{ matrix.service }}/Dockerfile
        
    - name: 📋 Container Image Analysis
      run: |
        # Dive analysis for image efficiency
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          wagoodman/dive:latest \
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:${{ needs.pipeline-init.outputs.version }} \
          --ci \
          --json dive-analysis-${{ matrix.service }}.json
          
    - name: 📤 Push Container Image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./microservices/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 📈 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-${{ matrix.service }}.sarif

  # ================================================================
  # PHASE 6: INFRASTRUCTURE VALIDATION & DEPLOYMENT
  # ================================================================
  infrastructure-validation:
    name: 🏗️ Infrastructure Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pipeline-init]
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: 🔧 Setup Kubernetes Tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
    - name: 🔍 Terraform Validation
      run: |
        terraform fmt -check -recursive
        terraform validate
        
    - name: 🔍 Kubernetes Manifest Validation
      run: |
        # Validate all Kubernetes manifests
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl apply --dry-run=client -f {}
        
        # Security policy validation with OPA
        opa test k8s/policies/ --verbose
        
    - name: 🛡️ Infrastructure Security Scan
      run: |
        # Checkov for Terraform security
        checkov -d . --framework terraform --output sarif --output-file checkov-terraform.sarif
        
        # Kubesec for Kubernetes security
        find k8s/ -name "*.yaml" | xargs -I {} kubesec scan {} > kubesec-report.json

  # ================================================================
  # PHASE 7: DEPLOYMENT & MONITORING
  # ================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pipeline-init, comprehensive-testing, container-security, infrastructure-validation]
    if: ${{ needs.pipeline-init.outputs.should_deploy == 'true' && github.ref == 'refs/heads/develop' }}
    environment: staging
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Kubernetes Access
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: 🚀 Deploy to Staging
      run: |
        helm upgrade --install hms-staging ./helm/hms \
          --namespace hms-staging \
          --create-namespace \
          --set image.tag=${{ needs.pipeline-init.outputs.version }} \
          --set environment=staging \
          --wait \
          --timeout=10m
          
    - name: 🧪 Post-Deployment Validation
      run: |
        # Health checks
        kubectl wait --for=condition=ready pod -l app=hms -n hms-staging --timeout=300s
        
        # Smoke tests
        npm run test:smoke:staging
        
    - name: 📊 Update Monitoring
      run: |
        # Update Grafana dashboards
        curl -X POST "${{ secrets.GRAFANA_API_URL }}/api/dashboards/db" \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d @monitoring/grafana-dashboard.json

  deploy-production:
    name: 🏆 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [pipeline-init, comprehensive-testing, container-security, infrastructure-validation, healthcare-compliance]
    if: ${{ needs.pipeline-init.outputs.should_deploy == 'true' && github.ref == 'refs/heads/main' }}
    environment: production
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Production Environment
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: 🚀 Blue-Green Deployment
      run: |
        # Deploy to green environment
        helm upgrade --install hms-green ./helm/hms \
          --namespace hms-production \
          --set image.tag=${{ needs.pipeline-init.outputs.version }} \
          --set environment=production \
          --set deployment.strategy=blue-green \
          --set deployment.color=green \
          --wait \
          --timeout=15m
          
    - name: 🧪 Production Validation
      run: |
        # Comprehensive production validation
        npm run test:production:validation
        npm run test:fhir:production
        
    - name: 🔄 Traffic Switch
      run: |
        # Switch traffic to green deployment
        kubectl patch service hms-frontend -n hms-production \
          -p '{"spec":{"selector":{"deployment":"green"}}}'
          
        # Wait for traffic switch
        sleep 60
        
    - name: 🧹 Cleanup Blue Environment
      run: |
        # Remove blue deployment after successful switch
        helm uninstall hms-blue -n hms-production || true
        
    - name: 📊 Update Production Monitoring
      run: |
        # Update all monitoring and alerting
        curl -X POST "${{ secrets.DATADOG_API_URL }}/api/v1/events" \
          -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "title": "HMS Production Deployment",
            "text": "HMS ${{ needs.pipeline-init.outputs.version }} successfully deployed to production",
            "priority": "normal",
            "tags": ["hms", "deployment", "production"]
          }'

  # ================================================================
  # PHASE 8: POST-DEPLOYMENT MONITORING & REPORTING
  # ================================================================
  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deploy-production]
    if: ${{ always() && contains(needs.*.result, 'success') }}
    
    steps:
    - name: 📊 Generate Deployment Report
      run: |
        python scripts/reporting/generate-deployment-report.py \
          --version=${{ needs.pipeline-init.outputs.version }} \
          --environment=production \
          --pipeline-url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
    - name: 🔔 Notify Teams
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🏥 HMS Enterprise Deployment Complete",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Version",
                    "value": "${{ needs.pipeline-init.outputs.version }}",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "Production",
                    "short": true
                  },
                  {
                    "title": "Pipeline",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Pipeline>",
                    "short": true
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================================================
  # CLEANUP & ARTIFACT MANAGEMENT
  # ================================================================
  cleanup:
    name: 🧹 Cleanup & Artifact Management
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [post-deployment-monitoring]
    if: always()
    
    steps:
    - name: 🗂️ Consolidate Artifacts
      run: |
        mkdir -p final-artifacts
        # Collect all important artifacts
        
    - name: 📊 Generate Final Report
      run: |
        python scripts/reporting/generate-final-report.py \
          --pipeline-id=${{ github.run_id }} \
          --output=final-artifacts/pipeline-report.html
          
    - name: 📈 Upload Final Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hms-enterprise-pipeline-artifacts
        path: final-artifacts/
        retention-days: 90
