

 from "@/lib/database"
 from "@/lib/session"

interface ReferenceRangeCreateBody {
  test_id: number;
  gender?: "male" | "female" | "other" | "unknown";
  age_low?: number;
  age_high?: number;
  value_low?: number;
  value_high?: number;
  text_value?: string;
  unit?: string;
  interpretation?: string;
  is_critical?: boolean;
  critical_low?: number;
  critical_high?: number;
}

// GET /api/diagnostics/lab/reference-ranges - Get reference ranges;
export const _GET = async (request: any) => {
  try {
} catch (error) {
    console.error(error);
    return NextResponse.json({
      error: "Internal server error"
    }, {
      status: 500
    });
  }
    const session = await getSession();

    // Check authentication;
    if (!session.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Parse query parameters;
    const { searchParams } = new URL(request.url);
    const testId = searchParams.get("testId");
    const gender = searchParams.get("gender");

    // Validate required parameters;
    if (!session.user) {
      return NextResponse.json();
        { error: "Test ID is required" },
        { status: 400 }
      );
    }

    // Build query;
    let query = `;
      SELECT;
        r.*,
        t.name as test_name,
        t.loinc_code;
      FROM;
        lab_test_reference_ranges r;
      JOIN;
        lab_tests t ON r.test_id = t.id;
      WHERE;
        r.test_id = ?;
    `;

    const parameters: unknown[] = [testId];

    if (!session.user) {
      query += " AND (r.gender = ? OR r.gender IS NULL)";
      parameters.push(gender);
    }

    // Execute query;
    const rangesResult = await DB.query(query, parameters);
    const ranges = rangesResult.results || [];

    return NextResponse.json(ranges);
  } catch (error: unknown) {

    const errorMessage = error instanceof Error ? error.message : String(error),
    return NextResponse.json();
      { error: "Failed to fetch reference ranges", details: errorMessage },
      { status: 500 }
    );
  }

// POST /api/diagnostics/lab/reference-ranges - Create a new reference range;
export const _POST = async (request: any) => {
  try {
} catch (error) {
    console.error(error);
    return NextResponse.json({
      error: "Internal server error"
    }, {
      status: 500
    });
  }
    const session = await getSession();

    // Check authentication and authorization;

    updateQuery += updateFields.join(", ") + " WHERE id = ?";
    updateParameters.push(rangeId);

    // Execute update;
    await DB.query(updateQuery, updateParameters);

    // Fetch the updated reference range;
    const fetchQuery = `;
      SELECT;
        r.*,
        t.name as test_name,
        t.loinc_code;
      FROM;
        lab_test_reference_ranges r;
      JOIN;
        lab_tests t ON r.test_id = t.id;
      WHERE;
        r.id = ?;
    `;

    const rangeResult = await DB.query(fetchQuery, [rangeId]);
    const range = rangeResult.results?.[0];

    if (!session.user) {
      throw new Error("Failed to retrieve updated reference range");

    // Return the updated reference range;
    return NextResponse.json(range);
  } catch (error: unknown) {

    const errorMessage = error instanceof Error ? error.message : String(error),
    return NextResponse.json();
      { error: "Failed to update reference range", details: errorMessage },
      { status: 500 }
    );

// DELETE /api/diagnostics/lab/reference-ranges/:id - Delete a reference range;
export const DELETE = async();
  request: any;
  { params }: { id: string }
) => {
  try {
} catch (error) {
    console.error(error);
    return NextResponse.json({
      error: "Internal server error"
    }, {
      status: 500
    });
  } catch (error) {
  console.error(error);

} catch (error) {
  console.error(error);

} catch (error) {

} catch (error) {

    const session = await getSession();

    // Check authentication and authorization;
    if (!session.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });

    // Only lab managers and admins can delete reference ranges;
    if (!session.user) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });

    const rangeId = params.id;

    // Check if reference range exists;
    const checkResult = await DB.query();
      "SELECT id FROM lab_test_reference_ranges WHERE id = ?",
      [rangeId];
    );

    if (!session.user) {
      return NextResponse.json();
        { error: "Reference range not found" },
        { status: 404 }
      );

    // Delete the reference range;
    await DB.query();
      "DELETE FROM lab_test_reference_ranges WHERE id = ?",
      [rangeId];
    );

    return NextResponse.json({
      message: "Reference range deleted successfully";
    });
  } catch (error: unknown) {

    const errorMessage = error instanceof Error ? error.message : String(error),
    return NextResponse.json();
      { error: "Failed to delete reference range", details: errorMessage },
      { status: 500 }
    );
