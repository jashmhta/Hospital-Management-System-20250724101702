"use strict";
/*
 * eslint-plugin-sonarjs
 * Copyright (C) 2018-2021 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
// https://sonarsource.github.io/rspec/#/rspec/S3776
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const nodes_1 = require("../utils/nodes");
const locations_1 = require("../utils/locations");
const docs_url_1 = __importDefault(require("../utils/docs-url"));
const jsx_1 = require("../utils/jsx");
const DEFAULT_THRESHOLD = 15;
const message = 'Refactor this function to reduce its Cognitive Complexity from {{complexityAmount}} to the {{threshold}} allowed.';
const rule = {
    defaultOptions: [],
    meta: {
        messages: {
            refactorFunction: message,
            sonarRuntime: '{{sonarRuntimeData}}',
            fileComplexity: '{{complexityAmount}}',
        },
        type: 'suggestion',
        docs: {
            description: 'Cognitive Complexity of functions should not be too high',
            url: (0, docs_url_1.default)(__filename),
        },
        schema: [
            { type: 'integer', minimum: 0 },
            {
                // internal parameter
                type: 'string',
                enum: ['sonar-runtime', 'metric'],
            },
        ],
    },
    create(context) {
        const { options } = context;
        /** Complexity threshold */
        const threshold = typeof options[0] === 'number' ? options[0] : DEFAULT_THRESHOLD;
        /** Indicator if the file complexity should be reported */
        const isFileComplexity = context.options.includes('metric');
        /** Set of already considered (with already computed complexity) logical expressions */
        const consideredLogicalExpressions = new Set();
        /** Stack of scopes that are either functions or the program */
        const scopes = [];
        return {
            ':function': (node) => {
                onEnterFunction(node);
            },
            ':function:exit'(node) {
                onLeaveFunction(node);
            },
            '*'(node) {
                if (scopes[scopes.length - 1]?.nestingNodes.has(node)) {
                    scopes[scopes.length - 1].nestingLevel++;
                }
            },
            '*:exit'(node) {
                if (scopes[scopes.length - 1]?.nestingNodes.has(node)) {
                    scopes[scopes.length - 1].nestingLevel--;
                    scopes[scopes.length - 1].nestingNodes.delete(node);
                }
            },
            Program(node) {
                scopes.push({
                    node,
                    nestingLevel: 0,
                    nestingNodes: new Set(),
                    complexityPoints: [],
                });
            },
            'Program:exit'(node) {
                const programComplexity = scopes.pop();
                if (isFileComplexity) {
                    // value from the message will be saved in SonarQube as file complexity metric
                    context.report({
                        node,
                        messageId: 'fileComplexity',
                        data: {
                            complexityAmount: programComplexity.complexityPoints.reduce((acc, cur) => acc + cur.complexity, 0),
                        },
                    });
                }
            },
            IfStatement(node) {
                visitIfStatement(node);
            },
            ForStatement(node) {
                visitLoop(node);
            },
            ForInStatement(node) {
                visitLoop(node);
            },
            ForOfStatement(node) {
                visitLoop(node);
            },
            DoWhileStatement(node) {
                visitLoop(node);
            },
            WhileStatement(node) {
                visitLoop(node);
            },
            SwitchStatement(node) {
                visitSwitchStatement(node);
            },
            ContinueStatement(node) {
                visitContinueOrBreakStatement(node);
            },
            BreakStatement(node) {
                visitContinueOrBreakStatement(node);
            },
            CatchClause(node) {
                visitCatchClause(node);
            },
            LogicalExpression(node) {
                visitLogicalExpression(node);
            },
            ConditionalExpression(node) {
                visitConditionalExpression(node);
            },
        };
        function onEnterFunction(node) {
            scopes.push({ node, nestingLevel: 0, nestingNodes: new Set(), complexityPoints: [] });
        }
        function onLeaveFunction(node) {
            const functionComplexity = scopes.pop();
            checkFunction(functionComplexity.complexityPoints, (0, locations_1.getMainFunctionTokenLocation)(node, node.parent, context));
        }
        function visitIfStatement(ifStatement) {
            const { parent } = ifStatement;
            const { loc: ifLoc } = (0, locations_1.getFirstToken)(ifStatement, context);
            // if the current `if` statement is `else if`, do not count it in structural complexity
            if ((0, nodes_1.isIfStatement)(parent) && parent.alternate === ifStatement) {
                addComplexity(ifLoc);
            }
            else {
                addStructuralComplexity(ifLoc);
            }
            // always increase nesting level inside `then` statement
            scopes[scopes.length - 1].nestingNodes.add(ifStatement.consequent);
            // if `else` branch is not `else if` then
            // - increase nesting level inside `else` statement
            // - add +1 complexity
            if (ifStatement.alternate && !(0, nodes_1.isIfStatement)(ifStatement.alternate)) {
                scopes[scopes.length - 1].nestingNodes.add(ifStatement.alternate);
                const elseTokenLoc = (0, locations_1.getFirstTokenAfter)(ifStatement.consequent, context).loc;
                addComplexity(elseTokenLoc);
            }
        }
        function visitLoop(loop) {
            addStructuralComplexity((0, locations_1.getFirstToken)(loop, context).loc);
            scopes[scopes.length - 1].nestingNodes.add(loop.body);
        }
        function visitSwitchStatement(switchStatement) {
            addStructuralComplexity((0, locations_1.getFirstToken)(switchStatement, context).loc);
            for (const switchCase of switchStatement.cases) {
                scopes[scopes.length - 1].nestingNodes.add(switchCase);
            }
        }
        function visitContinueOrBreakStatement(statement) {
            if (statement.label) {
                addComplexity((0, locations_1.getFirstToken)(statement, context).loc);
            }
        }
        function visitCatchClause(catchClause) {
            addStructuralComplexity((0, locations_1.getFirstToken)(catchClause, context).loc);
      