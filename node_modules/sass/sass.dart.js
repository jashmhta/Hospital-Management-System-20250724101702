// Because of vitejs/vite#12340, there's no way to reliably detect whether we're
// running as a (possibly bundled/polyfilled) ESM module or as a CommonJS
// module. In order to work everywhere, we have to provide the load function via
// a side channel on the global object. We write it as a stack so that multiple
// cli_pkg packages can depend on one another without clobbering their exports.
if (!globalThis._cliPkgExports) {
  globalThis._cliPkgExports = [];
}
let _cliPkgExports = {};
globalThis._cliPkgExports.push(_cliPkgExports);

_cliPkgExports.load = function(_cliPkgRequires, _cliPkgExportParam) {
var dartNodeIsActuallyNode = typeof process !== "undefined" && (process.versions || {}).hasOwnProperty('node');

// make sure to keep this as 'var'
// we don't want block scoping
var self = dartNodeIsActuallyNode ? Object.create(globalThis) : globalThis;

self.scheduleImmediate = typeof setImmediate !== "undefined"
    ? function (cb) {
        setImmediate(cb);
      }
    : function(cb) {
        setTimeout(cb, 0);
      };

// CommonJS globals.
if (typeof require !== "undefined") {
  self.require = require;
}
self.exports = _cliPkgExportParam || _cliPkgExports;

// Node.js specific exports, check to see if they exist & or polyfilled

if (typeof process !== "undefined") {
  self.process = process;
}

if (typeof __dirname !== "undefined") {
  self.__dirname = __dirname;
}

if (typeof __filename !== "undefined") {
  self.__filename = __filename;
}

if (typeof Buffer !== "undefined") {
  self.Buffer = Buffer;
}

// if we're running in a browser, Dart supports most of this out of box
// make sure we only run these in Node.js environment

if (dartNodeIsActuallyNode) {
  // This line is to:
  // 1) Prevent Webpack from bundling.
  // 2) In Webpack on Node.js, make sure we're using the native Node.js require, which is available via __non_webpack_require__
  // https://github.com/mbullington/node_preamble.dart/issues/18#issuecomment-527305561
  var url = ("undefined" !== typeof __webpack_require__ ? __non_webpack_require__ : require)("url");

  // Setting `self.location=` in Electron throws a `TypeError`, so we define it
  // as a property instead to be safe.
  Object.defineProperty(self, "location", {
    value: {
      get href() {
        if (url.pathToFileURL) {
          return url.pathToFileURL(process.cwd()).href + "/";
        } else {
          // This isn't really a correct transformation, but it's the best we have
          // for versions of Node <10.12.0 which introduced `url.pathToFileURL()`.
          // For example, it will fail for paths that contain characters that need
          // to be escaped in URLs.
          return "file://" + (function() {
            var cwd = process.cwd();
            if (process.platform != "win32") return cwd;
            return "/" + cwd.replace(/\\/g, "/");
          })() + "/"
        }
      }
    }
  });

  (function() {
    function computeCurrentScript() {
      try {
        throw new Error();
      } catch(e) {
        var stack = e.stack;
        var re = new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "mg");
        var lastMatch = null;
        do {
          var match = re.exec(stack);
          if (match != null) lastMatch = match;
        } while (match != null);
        return lastMatch[1];
      }
    }

    // Setting `self.document=` isn't known to throw an error anywhere like
    // `self.location=` does on Electron, but it's better to be future-proof
    // just in case..
    var cachedCurrentScript = null;
    Object.defineProperty(self, "document", {
      value: {
        get currentScript() {
          if (cachedCurrentScript == null) {
            cachedCurrentScript = {src: computeCurrentScript()};
          }
          return cachedCurrentScript;
        }
      }
    });
  })();

  self.dartDeferredLibraryLoader = function(uri, successCallback, errorCallback) {
    try {
     load(uri);
      successCallback();
    } catch (error) {
      errorCallback(error);
    }
  };
}

Object.defineProperty(self, 'parcel_watcher', { get: _cliPkgRequires.parcel_watcher });
self.immutable = _cliPkgRequires.immutable;
self.chokidar = _cliPkgRequires.chokidar;
self.readline = _cliPkgRequires.readline;
self.fs = _cliPkgRequires.fs;
self.nodeModule = _cliPkgRequires.nodeModule;
self.stream = _cliPkgRequires.stream;
self.util = _cliPkgRequires.util;
// Generated by dart2js (, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$allocateFixed($length, $E) {
      if ($length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSArray__compareAny(a, b) {
      return J.compareTo$1$ns(a, b);
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$in(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$AsyncCompiler$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$AsyncCompiler(receiver, value);
    },
    set$CalculationInterpolation$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$CalculationInterpolation(receiver, value);
    },
    set$CalculationOperation$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$CalculationOperation(receiver, value);
    },
    set$Compiler$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$Compiler(receiver, value);
    },
    set$Exception$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$Exception(receiver, value);
    },
    set$FALSE$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$FALSE(receiver, value);
    },
    set$Logger$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$Logger(receiver, value);
    },
    set$NULL$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$NULL(receiver, value);
    },
    set$NodePackageImporter$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$NodePackageImporter(receiver, value);
    },
    set$SassArgumentList$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassArgumentList(receiver, value);
    },
    set$SassBoolean$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassBoolean(receiver, value);
    },
    set$SassCalculation$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassCalculation(receiver, value);
    },
    set$SassColor$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassColor(receiver, value);
    },
    set$SassFunction$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassFunction(receiver, value);
    },
    set$SassList$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassList(receiver, value);
    },
    set$SassMap$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassMap(receiver, value);
    },
    set$SassMixin$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassMixin(receiver, value);
    },
    set$SassNumber$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassNumber(receiver, value);
    },
    set$SassString$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$SassString(receiver, value);
    },
    set$TRUE$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$TRUE(receiver, value);
    },
    set$Value$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$Value(receiver, value);
    },
    set$Version$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$Version(receiver, value);
    },
    set$cli_pkg_main_0_$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$cli_pkg_main_0_(receiver, value);
    },
    set$compile$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$compile(receiver, value);
    },
    set$compileAsync$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$compileAsync(receiver, value);
    },
    set$compileString$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$compileString(receiver, value);
    },
    set$compileStringAsync$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$compileStringAsync(receiver, value);
    },
    set$context$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$context(receiver, value);
    },
    set$dartValue$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$dartValue(receiver, value);
    },
    set$deprecations$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$deprecations(receiver, value);
    },
    set$exitCode$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$exitCode(receiver, value);
    },
    set$info$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$info(receiver, value);
    },
    set$initAsyncCompiler$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$initAsyncCompiler(receiver, value);
    },
    set$initCompiler$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$initCompiler(receiver, value);
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    set$loadParserExports_$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$loadParserExports_(receiver, value);
    },
    set$render$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$render(receiver, value);
    },
    set$renderSync$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$renderSync(receiver, value);
    },
    set$sassFalse$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$sassFalse(receiver, value);
    },
    set$sassNull$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$sassNull(receiver, value);
    },
    set$sassTrue$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$sassTrue(receiver, value);
    },
    set$types$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$types(receiver, value);
    },
    get$$prototype$x(receiver) {
      return J.getInterceptor$x(receiver).get$$prototype(receiver);
    },
    get$_dartException$x(receiver) {
      return J.getInterceptor$x(receiver).get$_dartException(receiver);
    },
    get$alertAscii$x(receiver) {
      return J.getInterceptor$x(receiver).get$alertAscii(receiver);
    },
    get$alertColor$x(receiver) {
      return J.getInterceptor$x(receiver).get$alertColor(receiver);
    },
    get$argv$x(receiver) {
      return J.getInterceptor$x(receiver).get$argv(receiver);
    },
    get$brackets$x(receiver) {
      return J.getInterceptor$x(receiver).get$brackets(receiver);
    },
    get$charset$x(receiver) {
      return J.getInterceptor$x(receiver).get$charset(receiver);
    },
    get$code$x(receiver) {
      return J.getInterceptor$x(receiver).get$code(receiver);
    },
    get$current$x(receiver) {
      return J.getInterceptor$x(receiver).get$current(receiver);
    },
    get$dartValue$x(receiver) {
      return J.getInterceptor$x(receiver).get$dartValue(receiver);
    },
    get$debug$x(receiver) {
      return J.getInterceptor$x(receiver).get$debug(receiver);
    },
    get$denominatorUnits$x(receiver) {
      return J.getInterceptor$x(receiver).get$denominatorUnits(receiver);
    },
    get$end$z(receiver) {
      return J.getInterceptor$z(receiver).get$end(receiver);
    },
    get$env$x(receiver) {
      return J.getInterceptor$x(receiver).get$env(receiver);
    },
    get$exitCode$x(receiver) {
      return J.getInterceptor$x(receiver).get$exitCode(receiver);
    },
    get$fatalDeprecations$x(receiver) {
      return J.getInterceptor$x(receiver).get$fatalDeprecations(receiver);
    },
    get$fiber$x(receiver) {
      return J.getInterceptor$x(receiver).get$fiber(receiver);
    },
    get$file$x(receiver) {
      return J.getInterceptor$x(receiver).get$file(receiver);
    },
    get$filename$x(receiver) {
      return J.getInterceptor$x(receiver).get$filename(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$functions$x(receiver) {
      return J.getInterceptor$x(receiver).get$functions(receiver);
    },
    get$futureDeprecations$x(receiver) {
      return J.getInterceptor$x(receiver).get$futureDeprecations(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$id$x(receiver) {
      return J.getInterceptor$x(receiver).get$id(receiver);
    },
    get$importer$x(receiver) {
      return J.getInterceptor$x(receiver).get$importer(receiver);
    },
    get$importers$x(receiver) {
      return J.getInterceptor$x(receiver).get$importers(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$isTTY$x(receiver) {
      return J.getInterceptor$x(receiver).get$isTTY(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$z(receiver) {
      return J.getInterceptor$z(receiver).get$keys(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$loadPaths$x(receiver) {
      return J.getInterceptor$x(receiver).get$loadPaths(receiver);
    },
    get$logger$x(receiver) {
      return J.getInterceptor$x(receiver).get$logger(receiver);
    },
    get$message$x(receiver) {
      return J.getInterceptor$x(receiver).get$message(receiver);
    },
    get$method$x(receiver) {
      return J.getInterceptor$x(receiver).get$method(receiver);
    },
    get$mtime$x(receiver) {
      return J.getInterceptor$x(receiver).get$mtime(receiver);
    },
    get$name$x(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    get$numeratorUnits$x(receiver) {
      return J.getInterceptor$x(receiver).get$numeratorUnits(receiver);
    },
    get$options$x(receiver) {
      return J.getInterceptor$x(receiver).get$options(receiver);
    },
    get$parent$z(receiver) {
      return J.getInterceptor$z(receiver).get$parent(receiver);
    },
    get$path$x(receiver) {
      return J.getInterceptor$x(receiver).get$path(receiver);
    },
    get$platform$x(receiver) {
      return J.getInterceptor$x(receiver).get$platform(receiver);
    },
    get$quietDeps$x(receiver) {
      return J.getInterceptor$x(receiver).get$quietDeps(receiver);
    },
    get$quotes$x(receiver) {
      return J.getInterceptor$x(receiver).get$quotes(receiver);
    },
    get$realpathSync$x(receiver) {
      return J.getInterceptor$x(receiver).get$realpathSync(receiver);
    },
    get$release$x(receiver) {
      return J.getInterceptor$x(receiver).get$release(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$separator$x(receiver) {
      return J.getInterceptor$x(receiver).get$separator(receiver);
    },
    get$sign$in(receiver) {
      if (typeof receiver === "number")
        return receiver > 0 ? 1 : receiver < 0 ? -1 : receiver;
      return J.getInterceptor$in(receiver).get$sign(receiver);
    },
    get$silenceDeprecations$x(receiver) {
      return J.getInterceptor$x(receiver).get$silenceDeprecations(receiver);
    },
    get$single$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$single(receiver);
    },
    get$sourceMap$x(receiver) {
      return J.getInterceptor$x(receiver).get$sourceMap(receiver);
    },
    get$sourceMapIncludeSources$x(receiver) {
      return J.getInterceptor$x(receiver).get$sourceMapIncludeSources(receiver);
    },
    get$space$x(receiver) {
      return J.getInterceptor$x(receiver).get$space(receiver);
    },
    get$span$z(receiver) {
      return J.getInterceptor$z(receiver).get$span(receiver);
    },
    get$stderr$x(receiver) {
      return J.getInterceptor$x(receiver).get$stderr(receiver);
    },
    get$stdout$x(receiver) {
      return J.getInterceptor$x(receiver).get$stdout(receiver);
    },
    get$style$x(receiver) {
      return J.getInterceptor$x(receiver).get$style(receiver);
    },
    get$syntax$x(receiver) {
      return J.getInterceptor$x(receiver).get$syntax(receiver);
    },
    get$trace$z(receiver) {
      return J.getInterceptor$z(receiver).get$trace(receiver);
    },
    get$url$x(receiver) {
      return J.getInterceptor$x(receiver).get$url(receiver);
    },
    get$verbose$x(receiver) {
      return J.getInterceptor$x(receiver).get$verbose(receiver);
    },
    get$warn$x(receiver) {
      return J.getInterceptor$x(receiver).get$warn(receiver);
    },
    get$weight$x(receiver) {
      return J.getInterceptor$x(receiver).get$weight(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      if (typeof a0 === "number")
        if ((Array.isArray(receiver) || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !(receiver.$flags & 2) && a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0] = a1;
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $set$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).$set$2(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    any$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    apply$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).apply$2(receiver, a0, a1);
    },
    asImmutable$0$x(receiver) {
      return J.getInterceptor$x(receiver).asImmutable$0(receiver);
    },
    asMutable$0$x(receiver) {
      return J.getInterceptor$x(receiver).asMutable$0(receiver);
    },
    canonicalize$4$baseImporter$baseUrl$forImport$x(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).canonicalize$4$baseImporter$baseUrl$forImport(receiver, a0, a1, a2, a3);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    close$0$x(receiver) {
      return J.getInterceptor$x(receiver).close$0(receiver);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    createInterface$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).createInterface$1(receiver, a0);
    },
    createRequire$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).createRequire$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    error$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).error$1(receiver, a0);
    },
    every$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).every$1(receiver, a0);
    },
    existsSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).existsSync$1(receiver, a0);
    },
    expand$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    fold$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    getTime$0$x(receiver) {
      return J.getInterceptor$x(receiver).getTime$0(receiver);
    },
    isDirectory$0$x(receiver) {
      return J.getInterceptor$x(receiver).isDirectory$0(receiver);
    },
    isFile$0$x(receiver) {
      return J.getInterceptor$x(receiver).isFile$0(receiver);
    },
    isSymbolicLink$0$x(receiver) {
      return J.getInterceptor$x(receiver).isSymbolicLink$0(receiver);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    listen$1$z(receiver, a0) {
      return J.getInterceptor$z(receiver).listen$1(receiver, a0);
    },
    log$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).log$1(receiver, a0);
    },
    lstatSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).lstatSync$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    mkdirSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).mkdirSync$1(receiver, a0);
    },
    native$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).native$1(receiver, a0);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    on$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).on$2(receiver, a0, a1);
    },
    parse$0$z(receiver) {
      return J.getInterceptor$z(receiver).parse$0(receiver);
    },
    readFileSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).readFileSync$2(receiver, a0, a1);
    },
    readdirSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).readdirSync$1(receiver, a0);
    },
    remove$1$z(receiver, a0) {
      return J.getInterceptor$z(receiver).remove$1(receiver, a0);
    },
    removeRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).removeRange$2(receiver, a0, a1);
    },
    replaceFirst$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
    },
    resolve$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).resolve$1(receiver, a0);
    },
    run$0$x(receiver) {
      return J.getInterceptor$x(receiver).run$0(receiver);
    },
    run$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).run$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    statSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).statSync$1(receiver, a0);
    },
    sublist$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    then$1$2$onError$x(receiver, a0, a1, $T1) {
      return J.getInterceptor$x(receiver).then$1$2$onError(receiver, a0, a1, $T1);
    },
    then$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).then$2(receiver, a0, a1);
    },
    toArray$0$x(receiver) {
      return J.getInterceptor$x(receiver).toArray$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toSet$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toSet$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toString$1$color$(receiver, a0) {
      return J.getInterceptor$(receiver).toString$1$color(receiver, a0);
    },
    trim$0$s(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    unlinkSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).unlinkSync$1(receiver, a0);
    },
    visitAtRootRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitAtRootRule$1(receiver, a0);
    },
    visitAtRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitAtRule$1(receiver, a0);
    },
    visitBinaryOperationExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitBinaryOperationExpression$1(receiver, a0);
    },
    visitBooleanExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitBooleanExpression$1(receiver, a0);
    },
    visitColorExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitColorExpression$1(receiver, a0);
    },
    visitContentBlock$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitContentBlock$1(receiver, a0);
    },
    visitContentRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitContentRule$1(receiver, a0);
    },
    visitDebugRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitDebugRule$1(receiver, a0);
    },
    visitDeclaration$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitDeclaration$1(receiver, a0);
    },
    visitEachRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitEachRule$1(receiver, a0);
    },
    visitErrorRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitErrorRule$1(receiver, a0);
    },
    visitExtendRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitExtendRule$1(receiver, a0);
    },
    visitForRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitForRule$1(receiver, a0);
    },
    visitForwardRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitForwardRule$1(receiver, a0);
    },
    visitFunctionExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitFunctionExpression$1(receiver, a0);
    },
    visitFunctionRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitFunctionRule$1(receiver, a0);
    },
    visitIfExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitIfExpression$1(receiver, a0);
    },
    visitIfRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitIfRule$1(receiver, a0);
    },
    visitImportRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitImportRule$1(receiver, a0);
    },
    visitIncludeRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitIncludeRule$1(receiver, a0);
    },
    visitInterpolatedFunctionExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitInterpolatedFunctionExpression$1(receiver, a0);
    },
    visitListExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitListExpression$1(receiver, a0);
    },
    visitLoudComment$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitLoudComment$1(receiver, a0);
    },
    visitMapExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitMapExpression$1(receiver, a0);
    },
    visitMediaRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitMediaRule$1(receiver, a0);
    },
    visitMixinRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitMixinRule$1(receiver, a0);
    },
    visitNullExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitNullExpression$1(receiver, a0);
    },
    visitNumberExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitNumberExpression$1(receiver, a0);
    },
    visitParenthesizedExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitParenthesizedExpression$1(receiver, a0);
    },
    visitReturnRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitReturnRule$1(receiver, a0);
    },
    visitSelectorExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitSelectorExpression$1(receiver, a0);
    },
    visitSilentComment$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitSilentComment$1(receiver, a0);
    },
    visitStringExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitStringExpression$1(receiver, a0);
    },
    visitStyleRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitStyleRule$1(receiver, a0);
    },
    visitStylesheet$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitStylesheet$1(receiver, a0);
    },
    visitSupportsExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitSupportsExpression$1(receiver, a0);
    },
    visitSupportsRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitSupportsRule$1(receiver, a0);
    },
    visitUnaryOperationExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitUnaryOperationExpression$1(receiver, a0);
    },
    visitUseRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitUseRule$1(receiver, a0);
    },
    visitValueExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitValueExpression$1(receiver, a0);
    },
    visitVariableDeclaration$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitVariableDeclaration$1(receiver, a0);
    },
    visitVariableExpression$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitVariableExpression$1(receiver, a0);
    },
    visitWarnRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitWarnRule$1(receiver, a0);
    },
    visitWhileRule$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).visitWhileRule$1(receiver, a0);
    },
    watch$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).watch$2(receiver, a0, a1);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    write$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).write$1(receiver, a0);
    },
    writeFileSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).writeFileSync$2(receiver, a0, a1);
    },
    yield$0$x(receiver) {
      return J.getInterceptor$x(receiver).yield$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
      if (type$.EfficientLengthIterable_dynamic._is(second))
        return new A.EfficientLengthFollowedByIterable(first, second, $E._eval$1("EfficientLengthFollowedByIterable<0>"));
      return new A.FollowedByIterable(first, second, $E._eval$1("FollowedByIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort__doSort(a, left, right, compare) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare);
    },
    Sort__insertionSort(a, left, right, compare) {
      var i, t1, el, j, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && compare.call$2(t1.$index(a, j - 1), el) > 0))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare) {
      var t0, less, great, pivots_are_equal, k, ak, comp, great0, less0, t2,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5);
      if (compare.call$2(el1, el2) > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (compare.call$2(el1, el3) > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el1, el4) > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (compare.call$2(el3, el4) > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (compare.call$2(el2, el5) > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (compare.call$2(el2, el3) > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (compare.call$2(el4, el5) > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      pivots_are_equal = J.$eq$(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare);
      A.Sort__doSort(a, great + 2, right, compare);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare);
      } else
        A.Sort__doSort(a, less, great, compare);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet(t0, t1, t2) {
      this._source = t0;
      this._emptySet = t1;
      this.$ti = t2;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1) {
      this._iterator = t0;
      this._f = t1;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1) {
      this._iterator = t0;
      this._skipCount = t1;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1) {
      this._iterator = t0;
      this._f = t1;
      this._hasSkipped = false;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator() {
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1) {
      this._currentIterator = t0;
      this._nextIterable = t1;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterable: function NonNullsIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterator: function NonNullsIterator(t0) {
      this._source = t0;
      this.__internal$_current = null;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, map,
        keys = A.List_List$from(other.get$keys(other), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          other.$index(0, k);
          index0 = index + 1;
          object[k] = index;
        }
        map = new A.ConstantStringMap(object, A.List_List$from(other.get$values(other), true, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    ConstantSet__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify constant Set"));
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    JSInvocationMirror$(_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount) {
      return new A.JSInvocationMirror(_memberName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount);
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          a.push(i);
        else if (i <= 1114111) {
          a.push(55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          a.push(56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, t2;
      if (Array.isArray(positionalArguments))
        $arguments = positionalArguments;
      else
        $arguments = A.List_List$_of(positionalArguments, type$.dynamic);
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$_of($arguments, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$_of($arguments, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[keys[_i]];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            t2 = keys[_i];
            if (namedArguments.containsKey$1(t2)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else {
              defaultValue = defaultValues[t2];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = new Error();
        A.initializeExceptionWrapper(error, jsError);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_, null);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace)
        return A.saveStackTrace(ex, ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(message, match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null)
            return A.saveStackTrace(ex, new A.NullError());
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      switch (numberOfArguments) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(new A._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = $.getTagFunction.call$1(obj),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = $.alternateTagFunction.call$2(obj, tag);
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    _RecordN__equalValues(a, b) {
      var i;
      for (i = 0; i < a.length; ++i)
        if (!J.$eq$(a[i], b[i]))
          return false;
      return true;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, extraFlags) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + extraFlags);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(0), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current(t1);
        t2 = t2 + receiver.substring(startIndex, match.get$start(match)) + replacement;
        startIndex = match.get$end(match);
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current(matches);
      return B.JSString_methods.replaceRange$3(receiver, match.get$start(match), match.get$end(match), replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_1: function _Record_1(t0) {
      this._0 = t0;
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_forImport: function _Record_2_forImport(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_imports_modules: function _Record_2_imports_modules(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_loadedUrls_stylesheet: function _Record_2_loadedUrls_stylesheet(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_sourceMap: function _Record_2_sourceMap(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_3: function _Record_3(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_3_deprecation_message_span: function _Record_3_deprecation_message_span(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_3_forImport: function _Record_3_forImport(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_3_importer_isDependency: function _Record_3_importer_isDependency(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_3_originalUrl: function _Record_3_originalUrl(t0, t1, t2) {
      this._0 = t0;
      this._1 = t1;
      this._2 = t2;
    },
    _Record_5_named_namedNodes_positional_positionalNodes_separator: function _Record_5_named_namedNodes_positional_positionalNodes_separator(t0) {
      this._values = t0;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    ConstantSet: function ConstantSet() {
    },
    ConstantStringSet: function ConstantStringSet(t0, t1, t2) {
      this._jsIndex = t0;
      this.__js_helper$_length = t1;
      this.$ti = t2;
    },
    GeneralConstantSet: function GeneralConstantSet(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeysIterable: function LinkedHashMapKeysIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
    },
    LinkedHashMapValuesIterable: function LinkedHashMapValuesIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapValueIterator: function LinkedHashMapValueIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
    },
    LinkedHashMapEntriesIterable: function LinkedHashMapEntriesIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapEntryIterator: function LinkedHashMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    JsIdentityLinkedHashMap: function JsIdentityLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    _Record1: function _Record1() {
    },
    _Record3: function _Record3() {
    },
    _RecordN: function _RecordN() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._hasCapturesCache = _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldADI(fieldName), new Error());
    },
    throwUnnamedLateFieldNI() {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(""), new Error());
    },
    throwUnnamedLateFieldAI() {
      throw A.initializeExceptionWrapper(A.LateError$fieldAI(""), new Error());
    },
    throwUnnamedLateFieldADI() {
      throw A.initializeExceptionWrapper(A.LateError$fieldADI(""), new Error());
    },
    _Cell$() {
      var t1 = new A._Cell();
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell() {
      this.__late_helper$_value = null;
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeFloat64List_NativeFloat64List$fromList(elements) {
      return new Float64Array(A._ensureNativeList(elements));
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    pairwiseIsTest(fieldRtis, values) {
      var i,
        $length = values.length;
      for (i = 0; i < $length; ++i)
        if (!fieldRtis[i]._is(values[i]))
          return false;
      return true;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return A.evaluateRtiForRecord(object.$recipe, object._getFieldValues$0());
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i)
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var kind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.isTopType(testRti))
        return A._finishIsFn(testRti, object, A._isTop);
      kind = testRti._kind;
      if (kind === 6)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (kind === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (kind === 7)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (testRti === type$.int)
        isFn = A._isInt;
      else if (testRti === type$.double || testRti === type$.num)
        isFn = A._isNum;
      else if (testRti === type$.String)
        isFn = A._isString;
      else
        isFn = testRti === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti))
        asFn = A._generalNullableAsCheckImplementation;
      if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.nullable_int)
        asFn = A._asIntQ;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.nullable_String)
        asFn = A._asStringQ;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.nullable_bool)
        asFn = A._asBoolQ;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.nullable_num)
        asFn = A._asNumQ;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.nullable_double)
        asFn = A._asDoubleQ;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          genericContext.push("T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText = typeParametersText + typeSep + genericContext[genericContext.length - 1 - i];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        return genericContext[genericContext.length - 1 - t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, callback);
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_OdL;
    },
    Future_Future$value(value, $T) {
      var t1;
      $T._as(value);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncComplete$1(value);
      return t1;
    },
    Future_wait(futures, eagerError, $T) {
      var handleError, future, pos, e, s, t1, t2, exception, t3, t4, _box_0 = {}, cleanUp = null,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t1 = J.get$iterator$ax(futures), t2 = type$.Null; t1.moveNext$0();) {
          future = t1.get$current(t1);
          pos = _box_0.remaining;
          J.then$1$2$onError$x(future, new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t2);
          ++_box_0.remaining;
        }
        t1 = _box_0.remaining;
        if (t1 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t1, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError) {
          t1 = _future;
          t2 = e;
          t3 = s;
          t4 = A._interceptError(t2, t3);
          if (t4 == null)
            t2 = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
          else
            t2 = t4;
          t1._asyncCompleteErrorObject$1(t2);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = s;
        }
      }
      return _future;
    },
    _interceptError(error, stackTrace) {
      var replacement, t1, t2,
        zone = $.Zone__current;
      if (zone === B.C__RootZone)
        return null;
      replacement = zone.errorCallback$2(error, stackTrace);
      if (replacement == null)
        return null;
      t1 = replacement.error;
      t2 = replacement.stackTrace;
      if (type$.Error._is(t1))
        A.Primitives_trySetStackTrace(t1, t2);
      return replacement;
    },
    _interceptUserError(error, stackTrace) {
      var replacement;
      if ($.Zone__current !== B.C__RootZone) {
        replacement = A._interceptError(error, stackTrace);
        if (replacement != null)
          return replacement;
      }
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A.Primitives_trySetStackTrace(error, B._StringStackTrace_OdL);
            stackTrace = B._StringStackTrace_OdL;
          }
        } else
          stackTrace = B._StringStackTrace_OdL;
      else if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      return new A.AsyncError(error, stackTrace);
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture(source, target, sync) {
      var t2, ignoreError, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (; t2 = t1._state, (t2 & 4) !== 0;) {
        t1 = t1._resultOrListeners;
        _box_0.source = t1;
      }
      if (t1 === target) {
        t2 = A.StackTrace_current();
        target._asyncCompleteErrorObject$1(new A.AsyncError(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), t2));
        return;
      }
      ignoreError = target._state & 1;
      t2 = t1._state = t2 | ignoreError;
      if ((t2 & 24) === 0) {
        listeners = target._resultOrListeners;
        target._state = target._state & 1 | 4;
        target._resultOrListeners = t1;
        t1._prependListeners$1(listeners);
        return;
      }
      if (!sync)
        if (target._resultOrListeners == null)
          t1 = (t2 & 16) === 0 || ignoreError !== 0;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(_box_0.source);
        A._Future__propagateToListeners(target, listeners);
        return;
      }
      target._state ^= 2;
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFuture_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var _box_0, t2, t3, hasError, nextListener, nextListener0, sourceResult, t4, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        t2 = t1._state;
        t3 = (t2 & 16) === 0;
        hasError = !t3;
        if (listeners == null) {
          if (hasError && (t2 & 1) === 0) {
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t2 = _box_1.source;
        sourceResult = t2._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t3) {
          t4 = t1.state;
          t4 = (t4 & 1) !== 0 || (t4 & 15) === 8;
        } else
          t4 = true;
        if (t4) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t2._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            t2 = t1._resultOrListeners;
            t1._zone.handleUncaughtError$2(t2.error, t2.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t3) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t2 = _box_0.listener.$ti;
            t2 = t2._eval$1("Future<2>")._is(t1) || !t2._rest[1]._is(t1);
          } else
            t2 = false;
          if (t2) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = result._resultOrListeners;
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result, true);
            return;
          }
        }
        result = _box_0.listener.result;
        current = result._resultOrListeners;
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          result._state = 8;
          result._resultOrListeners = t2;
        } else {
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromFuture(future, $T) {
      var _null = null,
        t1 = $T._eval$1("_SyncStreamController<0>"),
        controller = new A._SyncStreamController(_null, _null, _null, _null, t1);
      future.then$1$2$onError(0, new A.Stream_Stream$fromFuture_closure(controller, $T), new A.Stream_Stream$fromFuture_closure0(controller), type$.Null);
      return new A._ControllerStream(controller, t1._eval$1("_ControllerStream<1>"));
    },
    StreamIterator_StreamIterator(stream) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0,
        t4 = A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T),
        t5 = A._BufferingStreamSubscription__registerErrorHandler(t1, onError),
        t6 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      return new A._ControllerSubscription(_controller, t4, t5, t1.registerCallback$1$1(t6, type$.void), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _AddStreamState_makeErrorHandler(controller) {
      return new A._AddStreamState_makeErrorHandler_closure(controller);
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(error, stackTrace);
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f) {
      return f;
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      var milliseconds;
      if (B.C__RootZone !== zone)
        callback = zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer);
      milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(line);
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, handleUncaughtError;
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_Ipa;
      if (zoneValues == null)
        valueMap = zone.get$_async$_map();
      else {
        t1 = type$.nullable_Object;
        valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      }
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1._handleUncaughtError = new A._ZoneFunction(t1, handleUncaughtError);
      return t1;
    },
    runZoned(body, zoneValues, $R) {
      return A._runZoned(body, zoneValues, null, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(0, body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainCoreFuture_closure: function _Future__chainCoreFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteErrorObject_closure: function _Future__asyncCompleteErrorObject_closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.joinedResult = t0;
      this.originalSource = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(t0) {
      this.joinedResult = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromFuture_closure: function Stream_Stream$fromFuture_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    Stream_Stream$fromFuture_closure0: function Stream_Stream$fromFuture_closure0(t0) {
      this.controller = t0;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_makeErrorHandler_closure: function _AddStreamState_makeErrorHandler_closure(t0) {
      this.controller = t0;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2) {
      this._varData = t0;
      this.addStreamFuture = t1;
      this.addSubscription = t2;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0) {
      this.value = t0;
      this.next = null;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
      this._state = 0;
      this.lastPendingEvent = this.firstPendingEvent = null;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this._subscription = null;
      this._stateData = t0;
      this._async$_hasValue = false;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1) {
      this.zone = t0;
      this.$function = t1;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap($K, $V) {
      return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A.JsIdentityLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsIdentityLinkedHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>")));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
      return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>")));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    UnmodifiableListView$(source, $E) {
      return new A.UnmodifiableListView(source, $E._eval$1("UnmodifiableListView<0>"));
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap($K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableExtensions_get_firstOrNull(_this) {
      var t2,
        t1 = A._arrayInstanceType(_this),
        iterator = new J.ArrayIterator(_this, _this.length, t1._eval$1("ArrayIterator<1>"));
      if (iterator.moveNext$0()) {
        t2 = iterator._current;
        return t2 == null ? t1._precomputed1._as(t2) : t2;
      }
      return null;
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        $.toStringVisiting.push(m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithIterables(map, keys, values) {
      var keyIterator = keys.get$iterator(keys),
        valueIterator = values.get$iterator(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(keyIterator), valueIterator.get$current(valueIterator));
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw A.wrapException(A.ArgumentError$("Iterables do not have same length.", null));
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    ListQueue__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _ListQueueIterator$(queue, $E) {
      return new A._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, $E._eval$1("_ListQueueIterator<0>"));
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedIdentityHashSet: function _LinkedIdentityHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_addAll_closure: function MapBase_addAll_closure(t0) {
      this.$this = t0;
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._collection$_end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _UnmodifiableSetView_SetBase__UnmodifiableSetMixin: function _UnmodifiableSetView_SetBase__UnmodifiableSetMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (!Array.isArray(object))
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, i, byteOr, byte, outputIndex0, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = output.$flags | 0, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t2 & 2 && A.throwUnsupportedOperation(output);
          output[outputIndex] = alphabet.charCodeAt(bits >>> 18 & 63);
          outputIndex = outputIndex0 + 1;
          output[outputIndex0] = alphabet.charCodeAt(bits >>> 12 & 63);
          outputIndex0 = outputIndex + 1;
          output[outputIndex] = alphabet.charCodeAt(bits >>> 6 & 63);
          outputIndex = outputIndex0 + 1;
          output[outputIndex0] = alphabet.charCodeAt(bits & 63);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t2 & 2 && A.throwUnsupportedOperation(output);
            output[outputIndex] = alphabet.charCodeAt(bits >>> 2 & 63);
            output[outputIndex0] = alphabet.charCodeAt(bits << 4 & 63);
            output[outputIndex1] = 61;
            output[outputIndex1 + 1] = 61;
          } else {
            t2 & 2 && A.throwUnsupportedOperation(output);
            output[outputIndex] = alphabet.charCodeAt(bits >>> 10 & 63);
            output[outputIndex0] = alphabet.charCodeAt(bits >>> 4 & 63);
            output[outputIndex1] = alphabet.charCodeAt(bits << 2 & 63);
            output[outputIndex1 + 1] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + B.JSInt_methods.toRadixString$1(t1.$index(bytes, i), 16), null));
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer(""),
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMap_addAll_closure: function _JsonMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
      this._sink = t0;
      this._encoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    StringConversionSink: function StringConversionSink() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink(t0) {
      this._stringSink = t0;
    },
    _StringCallbackSink: function _StringCallbackSink(t0, t1) {
      this._convert$_callback = t0;
      this._stringSink = t1;
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter(t0, t1, t2) {
      this._decoder = t0;
      this._sink = t1;
      this._stringSink = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Function_apply($function, positionalArguments) {
      return A.Primitives_applyFunction($function, positionalArguments, null);
    },
    Expando$() {
      return new A.Expando(new WeakMap());
    },
    Expando__checkType(object) {
      if (A._isBool(object) || typeof object == "number" || typeof object == "string" || object instanceof A._Record)
        A.Expando__badExpandoKey(object);
    },
    Expando__badExpandoKey(object) {
      throw A.wrapException(A.ArgumentError$value(object, "object", "Expandos are not allowed on strings, numbers, bools, records or null"));
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source, null));
    },
    Error__throw(error, stackTrace) {
      error = A.initializeExceptionWrapper(error, new Error());
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        t1 = A.List_List$_of(elements, $E);
      else {
        t1 = A.List_List$_of(elements, $E);
        t1.$flags = 1;
        t1 = t1;
      }
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        list.push(t1.get$current(t1));
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.$flags = 3;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      t1 = A.List_List$_of(charCodes, type$.int);
      return A.Primitives_stringFromCharCodes(t1);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, true, false, false, ""));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, invocation) {
      return new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments());
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalMask, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = B.C_Utf8Encoder.convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (string$.x00_____.charCodeAt(byte) & canonicalMask) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(microseconds, milliseconds) {
      return new A.Duration(microseconds + 1000 * milliseconds);
    },
    EnumByName_byName(_this, $name) {
      var _i, value;
      for (_i = 0; _i < 4; ++_i) {
        value = _this[_i];
        if (value._name === $name)
          return value;
      }
      throw A.wrapException(A.ArgumentError$value($name, "name", "No enum value with that name"));
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name, message) {
      return new A.RangeError(null, null, true, value, $name, message == null ? "Value not in range" : message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, message == null ? "Invalid value" : message);
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    IndexError_check(index, $length, indexable, message, $name) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, message, $name == null ? "index" : $name));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_Iterable$generate(count, generator, $E) {
      if (count <= 0)
        return new A.EmptyIterable($E._eval$1("EmptyIterable<0>"));
      return new A._GeneratorIterable(count, generator, $E._eval$1("_GeneratorIterable<0>"));
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      $.toStringVisiting.push(iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, parts, ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      $.toStringVisiting.push(iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current(it));
        parts.push(next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        ultimateString = parts.pop();
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            parts.push(A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                $length -= parts.pop().length + 2;
                --count;
              }
              parts.push("...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        parts.push(elision);
      parts.push(penultimateString);
      parts.push(ultimateString);
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    Object_hashAll(objects) {
      var t1, _i,
        hash = $.$get$_hashSeed();
      for (t1 = objects.length, _i = 0; _i < objects.length; objects.length === t1 || (0, A.throwConcurrentModificationError)(objects), ++_i)
        hash = A.SystemHash_combine(hash, J.get$hashCode$(objects[_i]));
      return A.SystemHash_finish(hash);
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    Set_Set$unmodifiable(elements, $E) {
      return new A.UnmodifiableSetView(A.LinkedHashSet_LinkedHashSet$of(elements, $E), $E._eval$1("UnmodifiableSetView<0>"));
    },
    Set_castFrom(source, newSet, $S, $T) {
      return new A.CastSet(source, newSet, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastSet<1,2>"));
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_Uri$dataFromString($content, encoding, mimeType) {
      var encodingName, t1,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      if (encoding == null)
        encodingName = null;
      else
        encodingName = "utf-8";
      if (encoding == null)
        encoding = B.C_AsciiCodec;
      A.UriData__writeUri(mimeType, encodingName, null, buffer, indices);
      indices.push(buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(256, encoding.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      indices[0] = 0;
      indices[1] = -1;
      indices[2] = -1;
      indices[7] = -1;
      indices[3] = 0;
      indices[4] = 0;
      indices[5] = end;
      indices[6] = end;
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        indices[7] = end;
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t1 = portStart > 0;
          if (!(t1 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (!t2) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (!t2)
                if (schemeEnd === 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      queryStart += delta;
                      fragmentStart += delta;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                }
              isSimple = !t2;
            }
          }
        }
      }
      if (isSimple)
        return new A._SimpleUri(end < uri.length ? B.JSString_methods.substring$2(uri, 0, end) : uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            parts.push(-1);
            wildcardSeen = true;
          } else
            parts.push(parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          parts.push(parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          parts.push((last[0] << 8 | last[1]) >>> 0);
          parts.push((last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            bytes[index] = 0;
            bytes[index + 1] = 0;
            index += 2;
          }
        else {
          bytes[index] = B.JSInt_methods._shrOtherPositive$1(value, 8);
          bytes[index + 1] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return windows ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (A.stringContainsUnchecked(segment, "/", 0)) {
          t1 = A.UnsupportedError$("Illegal path character " + segment);
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3, t4;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        t4 = A.RegExp_RegExp('["*/:<>?\\\\|]', false);
        if (A.stringContainsUnchecked(t3, t4, 0))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, "file");
      else
        return A._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          if (path.length < 3 || path.charCodeAt(1) !== 58 || path.charCodeAt(2) !== 92)
            throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && path.charCodeAt(1) === 58) {
        A._Uri__checkWindowsDriveLetter(path.charCodeAt(0), true);
        if (t1 === 2 || path.charCodeAt(2) !== 92)
          throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with drive letter must be absolute"));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        return A._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (host.charCodeAt(start) === 91) {
        t1 = end - 1;
        if (host.charCodeAt(t1) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t2 = start + 1;
        index = A._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t2, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t2 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (string$.x00_____.charCodeAt(char) & 1) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = host.charCodeAt(index + 1);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t2 = A._Uri__escapeChar(char);
          t1._contents += t2;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail,
        _s128_ = string$.x00_____;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t2 = buffer._contents += slice;
          sourceLength = 3;
          if (t1)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (_s128_.charCodeAt(char) & 32) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            tail = host.charCodeAt(index + 1);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t1 = buffer;
          } else
            t1 = buffer;
          t1._contents += slice;
          t2 = A._Uri__escapeChar(char);
          t1._contents += t2;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = scheme.charCodeAt(i);
        if (!(codeUnit < 128 && (string$.x00_____.charCodeAt(codeUnit) & 8) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, 16, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        result = new A.MappedListIterable(pathSegments, new A._Uri__makePath_closure(), A._arrayInstanceType(pathSegments)._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, 128, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, 256, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, 256, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = source.charCodeAt(index + 1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127 && (string$.x00_____.charCodeAt(value) & 1) !== 0)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char <= 127) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = _s16_.charCodeAt(char >>> 4);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        codeUnits = new Uint8Array(3 * encodedBytes);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          codeUnits[index] = 37;
          codeUnits[index + 1] = _s16_.charCodeAt(byte >>> 4);
          codeUnits[index + 2] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1, index, sectionStart, buffer, char, sourceLength, replacement, t2, tail, _null = null,
        _s128_ = string$.x00_____;
      for (t1 = !escapeDelimiters, index = start, sectionStart = index, buffer = _null; index < end;) {
        char = component.charCodeAt(index);
        if (char < 127 && (_s128_.charCodeAt(char) & charMask) !== 0)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else if (t1 && char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t2 = index + 1;
              if (t2 < end) {
                tail = component.charCodeAt(t2);
                if ((tail & 64512) === 56320) {
                  char = 65536 + ((char & 1023) << 10) + (tail & 1023);
                  sourceLength = 2;
                }
              }
            }
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents = (t2._contents += B.JSString_methods.substring$2(component, sectionStart, index)) + replacement;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (segment === "..") {
          if (output.length !== 0) {
            output.pop();
            if (output.length === 0)
              output.push("");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            output.push(segment);
        }
      }
      if (appendSlash)
        output.push("");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash)
            output.pop();
          else
            output.push("..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            output.push(segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        t1 = t1 === 1 && output[0].length === 0;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        output.push("");
      if (!allowScheme)
        output[0] = A._Uri__escapeScheme(output[0]);
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char > 127 || (string$.x00_____.charCodeAt(char) & 8) === 0)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var t2, hasDriveLetter, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0) {
        t2 = segments[0];
        hasDriveLetter = t2.length === 2 && t2.charCodeAt(1) === 58;
      } else
        hasDriveLetter = false;
      if (hasDriveLetter) {
        A._Uri__checkWindowsDriveLetter(segments[0].charCodeAt(0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
      } else
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host();
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = s.charCodeAt(pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t1, bytes,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          t1 = codeUnit === 37;
        else
          t1 = true;
        if (t1) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (t1 = text.length, i = start; i < end; ++i) {
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            bytes.push(A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            bytes.push(codeUnit);
        }
      }
      return B.Utf8Decoder_false.convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      var t1, slashIndex;
      if (mimeType != null)
        t1 = 10 === mimeType.length && A._caseInsensitiveCompareStart("text/plain", mimeType, 0) >= 0;
      else
        t1 = true;
      if (t1)
        mimeType = "";
      if (mimeType.length === 0 || mimeType === "application/octet-stream")
        t1 = buffer._contents += mimeType;
      else {
        slashIndex = A.UriData__validateMimeType(mimeType);
        if (slashIndex < 0)
          throw A.wrapException(A.ArgumentError$value(mimeType, "mimeType", "Invalid MIME type"));
        t1 = A._Uri__uriEncode(512, B.JSString_methods.substring$2(mimeType, 0, slashIndex), B.C_Utf8Codec, false);
        buffer._contents = (buffer._contents += t1) + "/";
        t1 = A._Uri__uriEncode(512, B.JSString_methods.substring$1(mimeType, slashIndex + 1), B.C_Utf8Codec, false);
        t1 = buffer._contents += t1;
      }
      if (charsetName != null) {
        indices.push(t1.length);
        indices.push(buffer._contents.length + 8);
        buffer._contents += ";charset=";
        t1 = A._Uri__uriEncode(512, charsetName, B.C_Utf8Codec, false);
        buffer._contents += t1;
      }
    },
    UriData__validateMimeType(mimeType) {
      var t1, slashIndex, i;
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (mimeType.charCodeAt(i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        indices.push(i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          indices.push(equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      indices.push(i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, 256, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalMask, bytes, buffer) {
      var t1, byteOr, i, byte, t2,
        _s16_ = "0123456789ABCDEF";
      for (t1 = bytes.length, byteOr = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        byteOr |= byte;
        if (byte < 128 && (string$.x00_____.charCodeAt(byte) & canonicalMask) !== 0) {
          t2 = A.Primitives_stringFromCharCode(byte);
          buffer._contents += t2;
        } else {
          t2 = A.Primitives_stringFromCharCode(37);
          buffer._contents += t2;
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(byte >>> 4));
          buffer._contents += t2;
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(byte & 15));
          buffer._contents += t2;
        }
      }
      if ((byteOr & 4294967040) !== 0)
        for (i = 0; i < t1; ++i) {
          byte = bytes[i];
          if (byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _scan(uri, start, end, state, indices) {
      var i, char, transition;
      for (i = start; i < end; ++i) {
        char = uri.charCodeAt(i) ^ 96;
        if (char > 95)
          char = 31;
        transition = '\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe3\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0e\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\n\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\xeb\xeb\x8b\xeb\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x83\xeb\xeb\x8b\xeb\x8b\xeb\xcd\x8b\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x92\x83\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x8b\xeb\x8b\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xebD\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12D\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe8\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\x05\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x10\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\f\xec\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\xec\f\xec\f\xec\xcd\f\xec\f\f\f\f\f\f\f\f\f\xec\f\f\f\f\f\f\f\f\f\f\xec\f\xec\f\xec\f\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\r\xed\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\xed\r\xed\r\xed\xed\r\xed\r\r\r\r\r\r\r\r\r\xed\r\r\r\r\r\r\r\r\r\r\xed\r\xed\r\xed\r\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0f\xea\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe9\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\t\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x11\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xe9\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\t\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x13\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\xf5\x15\x15\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5'.charCodeAt(state * 96 + char);
        state = transition & 31;
        indices[transition >>> 5] = i;
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, result, i, stringChar, delta, lowerChar;
      for (t1 = prefix.length, result = 0, i = 0; i < t1; ++i) {
        stringChar = string.charCodeAt(start + i);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0) {
      this._jsWeakMap = t0;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _convertDartFunctionFastCaptureThis(f) {
      var ret,
        existing = f._$dart_jsFunctionCaptureThis;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, this, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFastCaptureThis, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f._$dart_jsFunctionCaptureThis = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      return A.Function_apply(callback, $arguments);
    },
    _callDartFunctionFastCaptureThis(callback, $self, $arguments) {
      var t1 = [$self];
      B.JSArray_methods.addAll$1(t1, $arguments);
      return A.Function_apply(callback, t1);
    },
    allowInterop(f) {
      if (typeof f == "function")
        return f;
      else
        return A._convertDartFunctionFast(f);
    },
    allowInteropCaptureThis(f) {
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Function is already a JS function so cannot capture this.", null));
      else
        return A._convertDartFunctionFastCaptureThis(f);
    },
    _callDartFunctionFast2(callback, arg1, arg2, $length) {
      if ($length >= 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    _callMethodUnchecked0(o, method) {
      return o[method]();
    },
    callConstructor(constr, $arguments) {
      var args, factoryFunction;
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return new constr();
          case 1:
            return new constr($arguments[0]);
          case 2:
            return new constr($arguments[0], $arguments[1]);
          case 3:
            return new constr($arguments[0], $arguments[1], $arguments[2]);
          case 4:
            return new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        }
      args = [null];
      B.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return new factoryFunction();
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0) {
      this.completer = t0;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    max(a, b) {
      return Math.max(a, b);
    },
    pow(x, exponent) {
      return Math.pow(x, exponent);
    },
    Random_Random() {
      return B.C__JSRandom;
    },
    _JSRandom: function _JSRandom() {
    },
    ArgParser: function ArgParser(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._arg_parser$_options = t0;
      _._aliases = t1;
      _.options = t2;
      _.commands = t3;
      _._optionsAndSeparators = t4;
      _.allowTrailingOptions = t5;
      _.usageLineLength = t6;
    },
    ArgParser__addOption_closure: function ArgParser__addOption_closure(t0) {
      this.$this = t0;
    },
    ArgParserException$(message, commands, argumentName, source, offset) {
      return new A.ArgParserException(commands == null ? B.List_empty : A.List_List$unmodifiable(commands, type$.String), argumentName, message, source, offset);
    },
    ArgParserException: function ArgParserException(t0, t1, t2, t3, t4) {
      var _ = this;
      _.commands = t0;
      _.argumentName = t1;
      _.message = t2;
      _.source = t3;
      _.offset = t4;
    },
    ArgResults: function ArgResults(t0, t1, t2, t3) {
      var _ = this;
      _._parser = t0;
      _._parsed = t1;
      _.name = t2;
      _.rest = t3;
    },
    Option: function Option(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.name = t0;
      _.abbr = t1;
      _.help = t2;
      _.valueHelp = t3;
      _.allowed = t4;
      _.allowedHelp = t5;
      _.defaultsTo = t6;
      _.negatable = t7;
      _.hideNegatedUsage = t8;
      _.callback = t9;
      _.type = t10;
      _.splitCommas = t11;
      _.mandatory = t12;
      _.hide = t13;
    },
    OptionType: function OptionType(t0) {
      this.name = t0;
    },
    Parser$(_commandName, _grammar, _args, _parent, rest) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      if (rest != null)
        B.JSArray_methods.addAll$1(t1, rest);
      return new A.Parser0(_commandName, _parent, _grammar, _args, t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic));
    },
    _isLetterOrDigit(codeUnit) {
      var t1 = true;
      if (!(codeUnit >= 65 && codeUnit <= 90))
        if (!(codeUnit >= 97 && codeUnit <= 122))
          t1 = codeUnit >= 48 && codeUnit <= 57;
      return t1;
    },
    Parser0: function Parser0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._commandName = t0;
      _._parser$_parent = t1;
      _._grammar = t2;
      _._args = t3;
      _._parser$_rest = t4;
      _._results = t5;
    },
    Parser_parse_closure: function Parser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser__setOption_closure: function Parser__setOption_closure() {
    },
    _Usage: function _Usage(t0, t1, t2) {
      var _ = this;
      _._usage$_optionsAndSeparators = t0;
      _._usage$_buffer = t1;
      _._currentColumn = 0;
      _.___Usage__columnWidths_FI = $;
      _._newlinesNeeded = 0;
      _.lineLength = t2;
    },
    _Usage__writeOption_closure: function _Usage__writeOption_closure() {
    },
    _Usage__buildAllowedList_closure: function _Usage__buildAllowedList_closure(t0) {
      this.option = t0;
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._future_group$_closed = false;
      _._future_group$_completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    ErrorResult: function ErrorResult(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ValueResult: function ValueResult(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StreamCompleter: function StreamCompleter(t0, t1) {
      this._stream_completer$_stream = t0;
      this.$ti = t1;
    },
    _CompleterStream: function _CompleterStream(t0) {
      this._sourceStream = this._stream_completer$_controller = null;
      this.$ti = t0;
    },
    StreamGroup: function StreamGroup(t0, t1, t2) {
      var _ = this;
      _.__StreamGroup__controller_A = $;
      _._closed = false;
      _._stream_group$_state = t0;
      _._subscriptions = t1;
      _.$ti = t2;
    },
    StreamGroup_add_closure: function StreamGroup_add_closure() {
    },
    StreamGroup_add_closure0: function StreamGroup_add_closure0(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    StreamGroup__onListen_closure: function StreamGroup__onListen_closure() {
    },
    StreamGroup__onCancel_closure: function StreamGroup__onCancel_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__listenToStream_closure: function StreamGroup__listenToStream_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamGroupState: function _StreamGroupState(t0) {
      this.name = t0;
    },
    StreamQueue: function StreamQueue(t0, t1, t2, t3) {
      var _ = this;
      _._stream_queue$_source = t0;
      _._stream_queue$_subscription = null;
      _._isDone = false;
      _._eventsReceived = 0;
      _._eventQueue = t1;
      _._requestQueue = t2;
      _.$ti = t3;
    },
    StreamQueue__ensureListening_closure: function StreamQueue__ensureListening_closure(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure1: function StreamQueue__ensureListening_closure1(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure0: function StreamQueue__ensureListening_closure0(t0) {
      this.$this = t0;
    },
    _NextRequest: function _NextRequest(t0, t1) {
      this._completer = t0;
      this.$ti = t1;
    },
    isNodeJs() {
      var t1 = self.process;
      if (t1 == null)
        t1 = null;
      else {
        t1 = J.get$release$x(t1);
        t1 = t1 == null ? null : J.get$name$x(t1);
      }
      return J.$eq$(t1, "node");
    },
    isBrowser() {
      return !A.isNodeJs() && self.document != null && typeof self.document.querySelector == "function";
    },
    wrapJSExceptions(callback) {
      var error, error0, error1, error2, t1, exception;
      if (!$.$get$_isStrictMode())
        return callback.call$0();
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (typeof t1 == "string") {
          error = t1;
          throw A.wrapException(error);
        } else if (A._isBool(t1)) {
          error0 = t1;
          throw A.wrapException(error0);
        } else if (typeof t1 == "number") {
          error1 = t1;
          throw A.wrapException(error1);
        } else {
          error2 = t1;
          if (typeof error2 == "symbol" || typeof error2 == "bigint" || error2 == null)
            throw A.wrapException(A._callMethodUnchecked0(error2, "toString"));
          throw exception;
        }
      }
    },
    _isStrictMode_closure: function _isStrictMode_closure() {
    },
    Repl: function Repl(t0, t1, t2, t3) {
      var _ = this;
      _.prompt = t0;
      _.continuation = t1;
      _.validator = t2;
      _.__Repl__adapter_A = $;
      _.history = t3;
    },
    alwaysValid_closure: function alwaysValid_closure() {
    },
    ReplAdapter: function ReplAdapter(t0) {
      this.repl = t0;
      this.rl = null;
    },
    ReplAdapter_runAsync_closure: function ReplAdapter_runAsync_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.rl = t2;
      _.runController = t3;
    },
    ReplAdapter_runAsync__closure: function ReplAdapter_runAsync__closure(t0) {
      this.lineController = t0;
    },
    Stdin: function Stdin() {
    },
    Stdout: function Stdout() {
    },
    ReadlineModule: function ReadlineModule() {
    },
    ReadlineOptions: function ReadlineOptions() {
    },
    ReadlineInterface: function ReadlineInterface() {
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet(t0) {
      this.$ti = t0;
    },
    _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin: function _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin() {
    },
    DefaultEquality: function DefaultEquality() {
    },
    IterableEquality: function IterableEquality() {
    },
    ListEquality: function ListEquality() {
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality(t0) {
      this.$ti = t0;
    },
    QueueList$(initialCapacity, $E) {
      return new A.QueueList(A.List_List$filled(A.QueueList__computeInitialCapacity(initialCapacity), null, false, $E._eval$1("0?")), 0, 0, $E._eval$1("QueueList<0>"));
    },
    QueueList_QueueList$from(source, $E) {
      var $length, queue, t1;
      if (type$.List_dynamic._is(source)) {
        $length = J.get$length$asx(source);
        queue = A.QueueList$($length + 1, $E);
        J.setRange$4$ax(queue._queue_list$_table, 0, $length, source, 0);
        queue._queue_list$_tail = $length;
        return queue;
      } else {
        t1 = A.QueueList$(null, $E);
        t1.addAll$1(0, source);
        return t1;
      }
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      if (initialCapacity == null || initialCapacity < 8)
        return 8;
      ++initialCapacity;
      if ((initialCapacity & initialCapacity - 1) >>> 0 === 0)
        return initialCapacity;
      return A.QueueList__nextPowerOf2(initialCapacity);
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._queue_list$_table = t0;
      _._queue_list$_head = t1;
      _._queue_list$_tail = t2;
      _.$ti = t3;
    },
    _CastQueueList: function _CastQueueList(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue_list$_delegate = t0;
      _._queue_list$_table = t1;
      _._queue_list$_head = t2;
      _._queue_list$_tail = t3;
      _.$ti = t4;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnionSet: function UnionSet(t0, t1) {
      this._sets = t0;
      this.$ti = t1;
    },
    UnionSet__iterable_closure: function UnionSet__iterable_closure(t0) {
      this.$this = t0;
    },
    UnionSet_contains_closure: function UnionSet_contains_closure(t0, t1) {
      this.$this = t0;
      this.element = t1;
    },
    _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    },
    UnmodifiableSetMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Set"));
    },
    UnmodifiableSetView0: function UnmodifiableSetView0(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    MapKeySet: function MapKeySet(t0, t1) {
      this._baseMap = t0;
      this.$ti = t1;
    },
    MapKeySet_difference_closure: function MapKeySet_difference_closure(t0, t1) {
      this.$this = t0;
      this.other = t1;
    },
    _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {
    },
    BufferModule: function BufferModule() {
    },
    BufferConstants: function BufferConstants() {
    },
    Buffer: function Buffer() {
    },
    ConsoleModule: function ConsoleModule() {
    },
    Console: function Console() {
    },
    EventEmitter: function EventEmitter() {
    },
    fs() {
      var t1 = $._fs;
      return t1 == null ? $._fs = self.fs : t1;
    },
    FS: function FS() {
    },
    FSConstants: function FSConstants() {
    },
    Realpath: function Realpath() {
    },
    RealpathSync: function RealpathSync() {
    },
    FSWatcher: function FSWatcher() {
    },
    ReadStream: function ReadStream() {
    },
    ReadStreamOptions: function ReadStreamOptions() {
    },
    WriteStream: function WriteStream() {
    },
    WriteStreamOptions: function WriteStreamOptions() {
    },
    FileOptions: function FileOptions() {
    },
    StatOptions: function StatOptions() {
    },
    MkdirOptions: function MkdirOptions() {
    },
    RmdirOptions: function RmdirOptions() {
    },
    WatchOptions: function WatchOptions() {
    },
    WatchFileOptions: function WatchFileOptions() {
    },
    Stats: function Stats() {
    },
    Promise: function Promise() {
    },
    Date: function Date() {
    },
    JsError: function JsError() {
    },
    Atomics: function Atomics() {
    },
    Modules: function Modules() {
    },
    Module: function Module() {
    },
    Net: function Net() {
    },
    Socket: function Socket() {
    },
    NetAddress: function NetAddress() {
    },
    NetServer: function NetServer() {
    },
    NodeJsError: function NodeJsError() {
    },
    JsAssertionError: function JsAssertionError() {
    },
    JsRangeError: function JsRangeError() {
    },
    JsReferenceError: function JsReferenceError() {
    },
    JsSyntaxError: function JsSyntaxError() {
    },
    JsTypeError: function JsTypeError() {
    },
    JsSystemError: function JsSystemError() {
    },
    Process: function Process() {
    },
    CPUUsage: function CPUUsage() {
    },
    Release: function Release() {
    },
    StreamModule: function StreamModule() {
    },
    Readable: function Readable() {
    },
    Writable: function Writable() {
    },
    Duplex: function Duplex() {
    },
    Transform: function Transform() {
    },
    WritableOptions: function WritableOptions() {
    },
    ReadableOptions: function ReadableOptions() {
    },
    Immediate: function Immediate() {
    },
    Timeout: function Timeout() {
    },
    TTY: function TTY() {
    },
    TTYReadStream: function TTYReadStream() {
    },
    TTYWriteStream: function TTYWriteStream() {
    },
    jsify0(dartObject) {
      if (A._isBasicType(dartObject))
        return dartObject;
      return A.jsify(dartObject);
    },
    _isBasicType(value) {
      return false;
    },
    promiseToFuture0(promise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._SyncCompleter(t1, $T._eval$1("_SyncCompleter<0>"));
      J.then$2$x(promise, A.allowInterop(new A.promiseToFuture_closure1(completer)), A.allowInterop(new A.promiseToFuture_closure2(completer)));
      return t1;
    },
    futureToPromise(future, $T) {
      return new self.Promise(A.allowInterop(new A.futureToPromise_closure(future, $T)));
    },
    Util: function Util() {
    },
    promiseToFuture_closure1: function promiseToFuture_closure1(t0) {
      this.completer = t0;
    },
    promiseToFuture_closure2: function promiseToFuture_closure2(t0) {
      this.completer = t0;
    },
    futureToPromise_closure: function futureToPromise_closure(t0, t1) {
      this.future = t0;
      this.T = t1;
    },
    futureToPromise__closure: function futureToPromise__closure(t0, t1) {
      this.resolve = t0;
      this.T = t1;
    },
    Context_Context(style) {
      return new A.Context(style, ".");
    },
    _parseUri(uri) {
      if (typeof uri == "string")
        return A.Uri_parse(uri);
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, new A._validateArgList_closure(), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection(t0) {
      this.name = t0;
    },
    _PathRelation: function _PathRelation(t0) {
      this.name = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path),
        isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(path.charCodeAt(0))) {
        separators.push(path[0]);
        start = 1;
      } else {
        separators.push("");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          parts.push(B.JSString_methods.substring$2(path, start, i));
          separators.push(path[i]);
          start = i + 1;
        }
      if (start < t1) {
        parts.push(B.JSString_methods.substring$1(path, start));
        separators.push("");
      }
      return new A.ParsedPath(style, root, isRootRelative, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.isRootRelative = t2;
      _.parts = t3;
      _.separators = t4;
    },
    ParsedPath__splitExtension_closure: function ParsedPath__splitExtension_closure() {
    },
    ParsedPath__splitExtension_closure0: function ParsedPath__splitExtension_closure0() {
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    PathMap__create(context, $V) {
      var t1 = {};
      t1.context = context;
      t1.context = $.$get$context();
      return A.LinkedHashMap_LinkedHashMap(new A.PathMap__create_closure(t1), new A.PathMap__create_closure0(t1), new A.PathMap__create_closure1(), type$.nullable_String, $V);
    },
    PathMap: function PathMap(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    PathMap__create_closure: function PathMap__create_closure(t0) {
      this._box_0 = t0;
    },
    PathMap__create_closure0: function PathMap__create_closure0(t0) {
      this._box_0 = t0;
    },
    PathMap__create_closure1: function PathMap__create_closure1() {
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = A.Uri_base();
      if (!B.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    Version$_(major, minor, patch, preRelease, build, _text) {
      var t1 = preRelease == null || preRelease.length === 0 ? A._setArrayType([], type$.JSArray_Object) : A.Version__splitParts(preRelease),
        t2 = build == null || build.length === 0 ? A._setArrayType([], type$.JSArray_Object) : A.Version__splitParts(build);
      if (major < 0)
        A.throwExpression(A.ArgumentError$("Major version must be non-negative.", null));
      if (minor < 0)
        A.throwExpression(A.ArgumentError$("Minor version must be non-negative.", null));
      if (patch < 0)
        A.throwExpression(A.ArgumentError$("Patch version must be non-negative.", null));
      return new A.Version(major, minor, patch, t1, t2, _text);
    },
    Version_Version(major, minor, patch, pre) {
      var text = "" + major + "." + minor + "." + patch;
      if (pre != null)
        text += "-" + pre;
      return A.Version$_(major, minor, patch, pre, null, text);
    },
    Version___parse_tearOff(text) {
      return A.Version_Version$parse(text);
    },
    Version_Version$parse(text) {
      var major, minor, patch, preRelease, build, t1, exception, _null = null,
        _s17_ = 'Could not parse "',
        match = $.$get$completeVersion().firstMatch$1(text);
      if (match == null)
        throw A.wrapException(A.FormatException$(_s17_ + text + '".', _null, _null));
      try {
        t1 = match._match[1];
        t1.toString;
        major = A.int_parse(t1, _null);
        t1 = match._match[2];
        t1.toString;
        minor = A.int_parse(t1, _null);
        t1 = match._match[3];
        t1.toString;
        patch = A.int_parse(t1, _null);
        preRelease = match._match[5];
        build = match._match[8];
        t1 = A.Version$_(major, minor, patch, preRelease, build, text);
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          throw A.wrapException(A.FormatException$(_s17_ + text + '".', _null, _null));
        else
          throw exception;
      }
    },
    Version__splitParts(text) {
      var t1 = type$.MappedListIterable_String_Object;
      t1 = A.List_List$_of(new A.MappedListIterable(A._setArrayType(text.split("."), type$.JSArray_String), new A.Version__splitParts_closure(), t1), t1._eval$1("ListIterable.E"));
      return t1;
    },
    Version: function Version(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.patch = t2;
      _.preRelease = t3;
      _.build = t4;
      _._version$_text = t5;
    },
    Version__splitParts_closure: function Version__splitParts_closure() {
    },
    VersionRange_VersionRange(includeMax, max) {
      return new A.VersionRange(null, max, false, true);
    },
    VersionRange: function VersionRange(t0, t1, t2, t3) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.includeMin = t2;
      _.includeMax = t3;
    },
    CssMediaQuery$type(type, conditions, modifier) {
      return new A.CssMediaQuery(modifier, type, true, conditions == null ? B.List_empty : A.List_List$unmodifiable(conditions, type$.String));
    },
    CssMediaQuery$condition(conditions, conjunction) {
      var t1 = A.List_List$unmodifiable(conditions, type$.String);
      if (t1.length > 1 && conjunction == null)
        A.throwExpression(A.ArgumentError$(string$.If_con, null));
      return new A.CssMediaQuery(null, null, conjunction !== false, t1);
    },
    CssMediaQuery: function CssMediaQuery(t0, t1, t2, t3) {
      var _ = this;
      _.modifier = t0;
      _.type = t1;
      _.conjunction = t2;
      _.conditions = t3;
    },
    _SingletonCssMediaQueryMergeResult: function _SingletonCssMediaQueryMergeResult(t0) {
      this._name = t0;
    },
    MediaQuerySuccessfulMergeResult: function MediaQuerySuccessfulMergeResult(t0) {
      this.query = t0;
    },
    ModifiableCssAtRule$($name, span, childless, value) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssAtRule($name, value, childless, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssAtRule: function ModifiableCssAtRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.isChildless = t2;
      _.span = t3;
      _.children = t4;
      _._children = t5;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssComment: function ModifiableCssComment(t0, t1) {
      var _ = this;
      _.text = t0;
      _.span = t1;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssDeclaration$($name, value, span, interleavedRules, parsedAsCustomProperty, trace, valueSpanForMap) {
      var t3,
        t1 = interleavedRules == null ? B.List_empty13 : A.List_List$unmodifiable(interleavedRules, type$.CssStyleRule),
        t2 = valueSpanForMap == null ? value.span : valueSpanForMap;
      if (parsedAsCustomProperty)
        if (!J.startsWith$1$s($name.value, "--"))
          A.throwExpression(A.ArgumentError$(string$.parsed, null));
        else {
          t3 = value.value;
          if (!(t3 instanceof A.SassString))
            A.throwExpression(A.ArgumentError$(string$.If_par + value.toString$0(0) + "` of type " + A.getRuntimeTypeOfDartObject(t3).toString$0(0) + ").", null));
        }
      return new A.ModifiableCssDeclaration($name, value, parsedAsCustomProperty, t1, trace, t2, span);
    },
    ModifiableCssDeclaration: function ModifiableCssDeclaration(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.parsedAsCustomProperty = t2;
      _.interleavedRules = t3;
      _.trace = t4;
      _.valueSpanForMap = t5;
      _.span = t6;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssImport: function ModifiableCssImport(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _.modifiers = t1;
      _.span = t2;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssKeyframeBlock$(selector, span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssKeyframeBlock(selector, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssKeyframeBlock: function ModifiableCssKeyframeBlock(t0, t1, t2, t3) {
      var _ = this;
      _.selector = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssMediaRule$(queries, span) {
      var t1 = A.List_List$unmodifiable(queries, type$.CssMediaQuery),
        t2 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      if (J.get$isEmpty$asx(queries))
        A.throwExpression(A.ArgumentError$value(queries, "queries", "may not be empty."));
      return new A.ModifiableCssMediaRule(t1, span, new A.UnmodifiableListView(t2, type$.UnmodifiableListView_ModifiableCssNode), t2);
    },
    ModifiableCssMediaRule: function ModifiableCssMediaRule(t0, t1, t2, t3) {
      var _ = this;
      _.queries = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssNode: function ModifiableCssNode() {
    },
    ModifiableCssNode_hasFollowingSibling_closure: function ModifiableCssNode_hasFollowingSibling_closure() {
    },
    ModifiableCssParentNode: function ModifiableCssParentNode() {
    },
    ModifiableCssStyleRule$(_selector, span, fromPlainCss, originalSelector) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssStyleRule(_selector, originalSelector, span, fromPlainCss, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssStyleRule: function ModifiableCssStyleRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._style_rule$_selector = t0;
      _.originalSelector = t1;
      _.span = t2;
      _.fromPlainCss = t3;
      _.children = t4;
      _._children = t5;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssStylesheet$(span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssStylesheet(span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssStylesheet: function ModifiableCssStylesheet(t0, t1, t2) {
      var _ = this;
      _.span = t0;
      _.children = t1;
      _._children = t2;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    ModifiableCssSupportsRule$(condition, span) {
      var t1 = A._setArrayType([], type$.JSArray_ModifiableCssNode);
      return new A.ModifiableCssSupportsRule(condition, span, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_ModifiableCssNode), t1);
    },
    ModifiableCssSupportsRule: function ModifiableCssSupportsRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _._children = t3;
      _._indexInParent = _._parent = null;
      _.isGroupEnd = false;
    },
    CssNode: function CssNode() {
    },
    CssParentNode: function CssParentNode() {
    },
    _IsInvisibleVisitor: function _IsInvisibleVisitor(t0, t1) {
      this.includeBogus = t0;
      this.includeComments = t1;
    },
    __IsInvisibleVisitor_Object_EveryCssVisitor: function __IsInvisibleVisitor_Object_EveryCssVisitor() {
    },
    CssStylesheet: function CssStylesheet(t0, t1) {
      this.children = t0;
      this.span = t1;
    },
    CssValue: function CssValue(t0, t1, t2) {
      this.value = t0;
      this.span = t1;
      this.$ti = t2;
    },
    _FakeAstNode: function _FakeAstNode(t0) {
      this._callback = t0;
    },
    ArgumentList$empty(span) {
      return new A.ArgumentList(B.List_empty9, B.Map_empty4, null, null, span);
    },
    ArgumentList: function ArgumentList(t0, t1, t2, t3, t4) {
      var _ = this;
      _.positional = t0;
      _.named = t1;
      _.rest = t2;
      _.keywordRest = t3;
      _.span = t4;
    },
    AtRootQuery: function AtRootQuery(t0, t1, t2, t3) {
      var _ = this;
      _.include = t0;
      _.names = t1;
      _._all = t2;
      _._at_root_query$_rule = t3;
    },
    ConfiguredVariable: function ConfiguredVariable(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.expression = t1;
      _.isGuarded = t2;
      _.span = t3;
    },
    Expression: function Expression() {
    },
    BinaryOperationExpression: function BinaryOperationExpression(t0, t1, t2, t3) {
      var _ = this;
      _.operator = t0;
      _.left = t1;
      _.right = t2;
      _.allowsSlash = t3;
    },
    BinaryOperator: function BinaryOperator(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.operator = t1;
      _.precedence = t2;
      _.isAssociative = t3;
      _._name = t4;
    },
    BooleanExpression: function BooleanExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    ColorExpression: function ColorExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    FunctionExpression: function FunctionExpression(t0, t1, t2, t3, t4) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.originalName = t2;
      _.$arguments = t3;
      _.span = t4;
    },
    IfExpression: function IfExpression(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    InterpolatedFunctionExpression: function InterpolatedFunctionExpression(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    ListExpression: function ListExpression(t0, t1, t2, t3) {
      var _ = this;
      _.contents = t0;
      _.separator = t1;
      _.hasBrackets = t2;
      _.span = t3;
    },
    ListExpression_toString_closure: function ListExpression_toString_closure(t0) {
      this.$this = t0;
    },
    MapExpression: function MapExpression(t0, t1) {
      this.pairs = t0;
      this.span = t1;
    },
    NullExpression: function NullExpression(t0) {
      this.span = t0;
    },
    NumberExpression: function NumberExpression(t0, t1, t2) {
      this.value = t0;
      this.unit = t1;
      this.span = t2;
    },
    ParenthesizedExpression: function ParenthesizedExpression(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SelectorExpression: function SelectorExpression(t0) {
      this.span = t0;
    },
    StringExpression_quoteText(text) {
      var t1,
        quote = A.StringExpression__bestQuote(A._setArrayType([text], type$.JSArray_String)),
        buffer = new A.StringBuffer("");
      buffer._contents = "" + A.Primitives_stringFromCharCode(quote);
      A.StringExpression__quoteInnerText(text, quote, buffer, true);
      t1 = A.Primitives_stringFromCharCode(quote);
      t1 = buffer._contents += t1;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringExpression__quoteInnerText(text, quote, buffer, $static) {
      var t1, t2, i, _1_0, _0_0, t3, t4, t5, t0;
      for (t1 = text.length, t2 = t1 - 1, i = 0; i < t1; ++i) {
        _1_0 = text.charCodeAt(i);
        if (_1_0 === 10 || _1_0 === 13 || _1_0 === 12) {
          buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(97);
          if (i !== t2) {
            _0_0 = text.charCodeAt(i + 1);
            t3 = true;
            if (!(_0_0 === 32 || _0_0 === 9 || _0_0 === 10 || _0_0 === 13 || _0_0 === 12))
              if (!(_0_0 >= 48 && _0_0 <= 57))
                if (!(_0_0 >= 97 && _0_0 <= 102))
                  t3 = _0_0 >= 65 && _0_0 <= 70;
            if (t3)
              buffer.writeCharCode$1(32);
          }
          continue;
        }
        t3 = 92 === _1_0;
        if (t3)
          t4 = _1_0;
        else
          t4 = null;
        if (!t3) {
          t3 = false;
          t5 = _1_0 === quote;
          if (t5)
            t4 = _1_0;
          if (!t5)
            if (35 === _1_0)
              if ($static)
                if (i < t2) {
                  t3 = text.charCodeAt(i + 1) === 123;
                  if (t3)
                    t4 = _1_0;
                  t0 = t4;
                  t4 = t3;
                  t3 = t0;
                } else {
                  t0 = t4;
                  t4 = t3;
                  t3 = t0;
                }
              else {
                t0 = t4;
                t4 = t3;
                t3 = t0;
              }
            else {
              t0 = t4;
              t4 = t3;
              t3 = t0;
            }
          else {
            t3 = t4;
            t4 = true;
          }
        } else {
          t3 = t4;
          t4 = true;
        }
        if (t4) {
          buffer.writeCharCode$1(92);
          buffer.writeCharCode$1(t3);
          continue;
        }
        buffer.writeCharCode$1(_1_0);
      }
    },
    StringExpression__bestQuote(strings) {
      var t1, t2, t3, containsDoubleQuote, t4, t5;
      for (t1 = J.get$iterator$ax(strings), t2 = type$.CodeUnits, t3 = t2._eval$1("ListIterator<ListBase.E>"), t2 = t2._eval$1("ListBase.E"), containsDoubleQuote = false; t1.moveNext$0();)
        for (t4 = new A.CodeUnits(t1.get$current(t1)), t4 = new A.ListIterator(t4, t4.get$length(0), t3); t4.moveNext$0();) {
          t5 = t4.__internal$_current;
          if (t5 == null)
            t5 = t2._as(t5);
          if (t5 === 39)
            return 34;
          if (t5 === 34)
            containsDoubleQuote = true;
        }
      return containsDoubleQuote ? 39 : 34;
    },
    StringExpression: function StringExpression(t0, t1) {
      this.text = t0;
      this.hasQuotes = t1;
    },
    SupportsExpression: function SupportsExpression(t0) {
      this.condition = t0;
    },
    UnaryOperationExpression: function UnaryOperationExpression(t0, t1, t2) {
      this.operator = t0;
      this.operand = t1;
      this.span = t2;
    },
    UnaryOperator: function UnaryOperator(t0, t1, t2) {
      this.name = t0;
      this.operator = t1;
      this._name = t2;
    },
    ValueExpression: function ValueExpression(t0, t1) {
      this.value = t0;
      this.span = t1;
    },
    VariableExpression: function VariableExpression(t0, t1, t2) {
      this.namespace = t0;
      this.name = t1;
      this.span = t2;
    },
    DynamicImport: function DynamicImport(t0, t1) {
      this.urlString = t0;
      this.span = t1;
    },
    StaticImport: function StaticImport(t0, t1, t2) {
      this.url = t0;
      this.modifiers = t1;
      this.span = t2;
    },
    Interpolation$(contents, spans, span) {
      var t1 = new A.Interpolation(A.List_List$unmodifiable(contents, type$.Object), A.List_List$unmodifiable(spans, type$.nullable_FileSpan), span);
      t1.Interpolation$3(contents, spans, span);
      return t1;
    },
    Interpolation: function Interpolation(t0, t1, t2) {
      this.contents = t0;
      this.spans = t1;
      this.span = t2;
    },
    Interpolation_toString_closure: function Interpolation_toString_closure() {
    },
    Parameter: function Parameter(t0, t1, t2) {
      this.name = t0;
      this.defaultValue = t1;
      this.span = t2;
    },
    ParameterList_ParameterList$parse(contents, url) {
      return A.ScssParser$(contents, url).parseParameterList$0();
    },
    ParameterList: function ParameterList(t0, t1, t2) {
      this.parameters = t0;
      this.restParameter = t1;
      this.span = t2;
    },
    ParameterList_verify_closure: function ParameterList_verify_closure() {
    },
    ParameterList_verify_closure0: function ParameterList_verify_closure0() {
    },
    Statement: function Statement() {
    },
    AtRootRule$(children, span, query) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRootRule(query, span, t1, t2);
    },
    AtRootRule: function AtRootRule(t0, t1, t2, t3) {
      var _ = this;
      _.query = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    AtRule$($name, span, children, value) {
      var t1 = children == null ? null : A.List_List$unmodifiable(children, type$.Statement),
        t2 = t1 == null ? null : B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.AtRule($name, value, span, t1, t2 === true);
    },
    AtRule: function AtRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    CallableDeclaration: function CallableDeclaration() {
    },
    ContentBlock$(parameters, children, span) {
      var _s8_ = "@content",
        t1 = A.stringReplaceAllUnchecked(_s8_, "_", "-"),
        t2 = A.List_List$unmodifiable(children, type$.Statement),
        t3 = B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.ContentBlock(t1, _s8_, parameters, span, t2, t3);
    },
    ContentBlock: function ContentBlock(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.originalName = t1;
      _.parameters = t2;
      _.span = t3;
      _.children = t4;
      _.hasDeclarations = t5;
    },
    ContentRule: function ContentRule(t0, t1) {
      this.$arguments = t0;
      this.span = t1;
    },
    DebugRule: function DebugRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    Declaration$($name, value, span) {
      return new A.Declaration($name, value, span, null, false);
    },
    Declaration$nested($name, children, span, value) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.Declaration($name, value, span, t1, t2);
    },
    Declaration: function Declaration(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.value = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    EachRule$(variables, list, children, span) {
      var t1 = A.List_List$unmodifiable(variables, type$.String),
        t2 = A.List_List$unmodifiable(children, type$.Statement),
        t3 = B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.EachRule(t1, list, span, t2, t3);
    },
    EachRule: function EachRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.variables = t0;
      _.list = t1;
      _.span = t2;
      _.children = t3;
      _.hasDeclarations = t4;
    },
    EachRule_toString_closure: function EachRule_toString_closure() {
    },
    ErrorRule: function ErrorRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    ExtendRule: function ExtendRule(t0, t1, t2) {
      this.selector = t0;
      this.isOptional = t1;
      this.span = t2;
    },
    ForRule$(variable, from, to, children, span, exclusive) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.ForRule(variable, from, to, exclusive, span, t1, t2);
    },
    ForRule: function ForRule(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.variable = t0;
      _.from = t1;
      _.to = t2;
      _.isExclusive = t3;
      _.span = t4;
      _.children = t5;
      _.hasDeclarations = t6;
    },
    ForwardRule: function ForwardRule(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.url = t0;
      _.shownMixinsAndFunctions = t1;
      _.shownVariables = t2;
      _.hiddenMixinsAndFunctions = t3;
      _.hiddenVariables = t4;
      _.prefix = t5;
      _.configuration = t6;
      _.span = t7;
    },
    FunctionRule$($name, parameters, children, span, comment) {
      var t1 = A.stringReplaceAllUnchecked($name, "_", "-"),
        t2 = A.List_List$unmodifiable(children, type$.Statement),
        t3 = B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.FunctionRule(t1, $name, parameters, span, t2, t3);
    },
    FunctionRule: function FunctionRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.originalName = t1;
      _.parameters = t2;
      _.span = t3;
      _.children = t4;
      _.hasDeclarations = t5;
    },
    IfClause$(expression, children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      return new A.IfClause(expression, t1, B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure()));
    },
    ElseClause$(children) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement);
      return new A.ElseClause(t1, B.JSArray_methods.any$1(t1, new A.IfRuleClause$__closure()));
    },
    IfRule: function IfRule(t0, t1, t2) {
      this.clauses = t0;
      this.lastClause = t1;
      this.span = t2;
    },
    IfRule_toString_closure: function IfRule_toString_closure() {
    },
    IfRuleClause: function IfRuleClause() {
    },
    IfRuleClause$__closure: function IfRuleClause$__closure() {
    },
    IfRuleClause$___closure: function IfRuleClause$___closure() {
    },
    IfClause: function IfClause(t0, t1, t2) {
      this.expression = t0;
      this.children = t1;
      this.hasDeclarations = t2;
    },
    ElseClause: function ElseClause(t0, t1) {
      this.children = t0;
      this.hasDeclarations = t1;
    },
    ImportRule: function ImportRule(t0, t1) {
      this.imports = t0;
      this.span = t1;
    },
    IncludeRule: function IncludeRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.originalName = t2;
      _.$arguments = t3;
      _.content = t4;
      _.span = t5;
    },
    LoudComment: function LoudComment(t0) {
      this.text = t0;
    },
    MediaRule$(query, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.MediaRule(query, span, t1, t2);
    },
    MediaRule: function MediaRule(t0, t1, t2, t3) {
      var _ = this;
      _.query = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    MixinRule$($name, parameters, children, span, comment) {
      var t1 = A.stringReplaceAllUnchecked($name, "_", "-"),
        t2 = A.List_List$unmodifiable(children, type$.Statement),
        t3 = B.JSArray_methods.any$1(t2, new A.ParentStatement_closure());
      return new A.MixinRule(t1, $name, parameters, span, t2, t3);
    },
    MixinRule: function MixinRule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.__MixinRule_hasContent_FI = $;
      _.name = t0;
      _.originalName = t1;
      _.parameters = t2;
      _.span = t3;
      _.children = t4;
      _.hasDeclarations = t5;
    },
    _HasContentVisitor: function _HasContentVisitor() {
    },
    __HasContentVisitor_Object_StatementSearchVisitor: function __HasContentVisitor_Object_StatementSearchVisitor() {
    },
    ParentStatement: function ParentStatement() {
    },
    ParentStatement_closure: function ParentStatement_closure() {
    },
    ParentStatement__closure: function ParentStatement__closure() {
    },
    ReturnRule: function ReturnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SilentComment: function SilentComment(t0, t1) {
      this.text = t0;
      this.span = t1;
    },
    StyleRule$(selector, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.StyleRule(selector, span, t1, t2);
    },
    StyleRule: function StyleRule(t0, t1, t2, t3) {
      var _ = this;
      _.selector = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    Stylesheet$(children, span) {
      var t1 = A._setArrayType([], type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span),
        t2 = A._setArrayType([], type$.JSArray_UseRule),
        t3 = A._setArrayType([], type$.JSArray_ForwardRule),
        t4 = A.List_List$unmodifiable(children, type$.Statement),
        t5 = B.JSArray_methods.any$1(t4, new A.ParentStatement_closure());
      t2 = new A.Stylesheet(span, false, t2, t3, new A.UnmodifiableListView(t1, type$.UnmodifiableListView_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span), B.Map_empty6, t4, t5);
      t2.Stylesheet$internal$5$globalVariables$plainCss(children, span, t1, null, false);
      return t2;
    },
    Stylesheet$internal(children, span, parseTimeWarnings, globalVariables, plainCss) {
      var t1 = A._setArrayType([], type$.JSArray_UseRule),
        t2 = A._setArrayType([], type$.JSArray_ForwardRule),
        t3 = globalVariables == null ? B.Map_empty6 : A.ConstantMap_ConstantMap$from(globalVariables, type$.String, type$.FileSpan),
        t4 = A.List_List$unmodifiable(children, type$.Statement),
        t5 = B.JSArray_methods.any$1(t4, new A.ParentStatement_closure());
      t1 = new A.Stylesheet(span, plainCss, t1, t2, new A.UnmodifiableListView(parseTimeWarnings, type$.UnmodifiableListView_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span), t3, t4, t5);
      t1.Stylesheet$internal$5$globalVariables$plainCss(children, span, parseTimeWarnings, globalVariables, plainCss);
      return t1;
    },
    Stylesheet_Stylesheet$parse(contents, syntax, url) {
      var error, stackTrace, url0, t1, exception, t2;
      try {
        switch (syntax) {
          case B.Syntax_Sass_sass:
            t1 = new A.SassParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.FileSpan), A._setArrayType([], type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span), A.SpanScanner$(contents, url), null).parse$0(0);
            return t1;
          case B.Syntax_SCSS_scss:
            t1 = A.ScssParser$(contents, url).parse$0(0);
            return t1;
          case B.Syntax_CSS_css:
            t1 = new A.CssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.FileSpan), A._setArrayType([], type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span), A.SpanScanner$(contents, url), null).parse$0(0);
            return t1;
        }
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SassException) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = error;
          t2 = J.getInterceptor$z(t1);
          t1 = A.SourceSpanException.prototype.get$span.call(t2, t1);
          url0 = t1.get$sourceUrl(t1);
          if (url0 == null || url0.toString$0(0) === "stdin")
            throw exception;
          t1 = type$.Uri;
          throw A.wrapException(A.throwWithTrace(error.withLoadedUrls$1(A.Set_Set$unmodifiable(A.LinkedHashSet_LinkedHashSet$_literal([url0], t1), t1)), error, stackTrace));
        } else
          throw exception;
      }
    },
    Stylesheet: function Stylesheet(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.span = t0;
      _.plainCss = t1;
      _._uses = t2;
      _._forwards = t3;
      _.parseTimeWarnings = t4;
      _.globalVariables = t5;
      _.children = t6;
      _.hasDeclarations = t7;
    },
    SupportsRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.SupportsRule(condition, span, t1, t2);
    },
    SupportsRule: function SupportsRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    UseRule: function UseRule(t0, t1, t2, t3) {
      var _ = this;
      _.url = t0;
      _.namespace = t1;
      _.configuration = t2;
      _.span = t3;
    },
    VariableDeclaration$($name, expression, span, comment, global, guarded, namespace) {
      if (namespace != null && global)
        A.throwExpression(A.ArgumentError$(string$.Other_, null));
      return new A.VariableDeclaration(namespace, $name, expression, guarded, global, span);
    },
    VariableDeclaration: function VariableDeclaration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.namespace = t0;
      _.name = t1;
      _.expression = t2;
      _.isGuarded = t3;
      _.isGlobal = t4;
      _.span = t5;
    },
    WarnRule: function WarnRule(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    WhileRule$(condition, children, span) {
      var t1 = A.List_List$unmodifiable(children, type$.Statement),
        t2 = B.JSArray_methods.any$1(t1, new A.ParentStatement_closure());
      return new A.WhileRule(condition, span, t1, t2);
    },
    WhileRule: function WhileRule(t0, t1, t2, t3) {
      var _ = this;
      _.condition = t0;
      _.span = t1;
      _.children = t2;
      _.hasDeclarations = t3;
    },
    SupportsAnything: function SupportsAnything(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    SupportsDeclaration: function SupportsDeclaration(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this.span = t2;
    },
    SupportsFunction: function SupportsFunction(t0, t1, t2) {
      this.name = t0;
      this.$arguments = t1;
      this.span = t2;
    },
    SupportsInterpolation: function SupportsInterpolation(t0, t1) {
      this.expression = t0;
      this.span = t1;
    },
    SupportsNegation: function SupportsNegation(t0, t1) {
      this.condition = t0;
      this.span = t1;
    },
    SupportsOperation$(left, right, operator, span) {
      var lowerOperator = operator.toLowerCase();
      if (lowerOperator !== "and" && lowerOperator !== "or")
        A.throwExpression(A.ArgumentError$value(operator, "operator", 'may only be "and" or "or".'));
      return new A.SupportsOperation(left, right, operator, span);
    },
    SupportsOperation: function SupportsOperation(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.operator = t2;
      _.span = t3;
    },
    Selector: function Selector() {
    },
    _IsInvisibleVisitor0: function _IsInvisibleVisitor0(t0) {
      this.includeBogus = t0;
    },
    _IsBogusVisitor: function _IsBogusVisitor(t0) {
      this.includeLeadingCombinator = t0;
    },
    _IsBogusVisitor_visitComplexSelector_closure: function _IsBogusVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    _IsUselessVisitor: function _IsUselessVisitor() {
    },
    _IsUselessVisitor_visitComplexSelector_closure: function _IsUselessVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    _ContainsParentSelectorVisitor: function _ContainsParentSelectorVisitor() {
    },
    __ContainsParentSelectorVisitor_Object_AnySelectorVisitor: function __ContainsParentSelectorVisitor_Object_AnySelectorVisitor() {
    },
    __IsBogusVisitor_Object_AnySelectorVisitor: function __IsBogusVisitor_Object_AnySelectorVisitor() {
    },
    __IsInvisibleVisitor_Object_AnySelectorVisitor: function __IsInvisibleVisitor_Object_AnySelectorVisitor() {
    },
    __IsUselessVisitor_Object_AnySelectorVisitor: function __IsUselessVisitor_Object_AnySelectorVisitor() {
    },
    AttributeSelector: function AttributeSelector(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.op = t1;
      _.value = t2;
      _.modifier = t3;
      _.span = t4;
    },
    AttributeOperator: function AttributeOperator(t0, t1) {
      this._attribute$_text = t0;
      this._name = t1;
    },
    ClassSelector: function ClassSelector(t0, t1) {
      this.name = t0;
      this.span = t1;
    },
    Combinator: function Combinator(t0, t1) {
      this._combinator$_text = t0;
      this._name = t1;
    },
    ComplexSelector$(leadingCombinators, components, span, lineBreak) {
      var t1 = A.List_List$unmodifiable(leadingCombinators, type$.CssValue_Combinator),
        t2 = A.List_List$unmodifiable(components, type$.ComplexSelectorComponent);
      if (t1.length === 0 && t2.length === 0)
        A.throwExpression(A.ArgumentError$(string$.leadin, null));
      return new A.ComplexSelector(t1, t2, lineBreak, span);
    },
    ComplexSelector: function ComplexSelector(t0, t1, t2, t3) {
      var _ = this;
      _.leadingCombinators = t0;
      _.components = t1;
      _.lineBreak = t2;
      _.__ComplexSelector_specificity_FI = $;
      _.span = t3;
    },
    ComplexSelector_specificity_closure: function ComplexSelector_specificity_closure() {
    },
    ComplexSelectorComponent: function ComplexSelectorComponent(t0, t1, t2) {
      this.selector = t0;
      this.combinators = t1;
      this.span = t2;
    },
    ComplexSelectorComponent_toString_closure: function ComplexSelectorComponent_toString_closure() {
    },
    CompoundSelector$(components, span) {
      var t1 = A.List_List$unmodifiable(components, type$.SimpleSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.CompoundSelector(t1, span);
    },
    CompoundSelector: function CompoundSelector(t0, t1) {
      var _ = this;
      _.components = t0;
      _.__CompoundSelector_hasComplicatedSuperselectorSemantics_FI = _.__CompoundSelector_specificity_FI = $;
      _.span = t1;
    },
    CompoundSelector_specificity_closure: function CompoundSelector_specificity_closure() {
    },
    CompoundSelector_hasComplicatedSuperselectorSemantics_closure: function CompoundSelector_hasComplicatedSuperselectorSemantics_closure() {
    },
    IDSelector: function IDSelector(t0, t1) {
      this.name = t0;
      this.span = t1;
    },
    IDSelector_unify_closure: function IDSelector_unify_closure(t0) {
      this.$this = t0;
    },
    SelectorList$(components, span) {
      var t1 = A.List_List$unmodifiable(components, type$.ComplexSelector);
      if (t1.length === 0)
        A.throwExpression(A.ArgumentError$("components may not be empty.", null));
      return new A.SelectorList(t1, span);
    },
    SelectorList_SelectorList$parse(contents, allowParent, interpolationMap, plainCss) {
      return new A.SelectorParser(allowParent, plainCss, A.SpanScanner$(contents, null), interpolationMap).parse$0(0);
    },
    SelectorList: function SelectorList(t0, t1) {
      this.components = t0;
      this.span = t1;
    },
    SelectorList_asSassList_closure: function SelectorList_asSassList_closure() {
    },
    SelectorList_nestWithin_closure: function SelectorList_nestWithin_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.preserveParentSelectors = t1;
      _.implicitParent = t2;
      _.parent = t3;
    },
    SelectorList_nestWithin__closure: function SelectorList_nestWithin__closure(t0) {
      this.complex = t0;
    },
    SelectorList_nestWithin__closure0: function SelectorList_nestWithin__closure0(t0) {
      this.complex = t0;
    },
    SelectorList__nestWithinCompound_closure: function SelectorList__nestWithinCompound_closure() {
    },
    SelectorList__nestWithinCompound_closure0: function SelectorList__nestWithinCompound_closure0(t0) {
      this.parent = t0;
    },
    SelectorList__nestWithinCompound_closure1: function SelectorList__nestWithinCompound_closure1(t0, t1, t2) {
      this.parentSelector = t0;
      this.resolvedSimples = t1;
      this.component = t2;
    },
    SelectorList_withAdditionalCombinators_closure: function SelectorList_withAdditionalCombinators_closure(t0) {
      this.combinators = t0;
    },
    _ParentSelectorVisitor: function _ParentSelectorVisitor() {
    },
    __ParentSelectorVisitor_Object_SelectorSearchVisitor: function __ParentSelectorVisitor_Object_SelectorSearchVisitor() {
    },
    ParentSelector: function ParentSelector(t0, t1) {
      this.suffix = t0;
      this.span = t1;
    },
    PlaceholderSelector: function PlaceholderSelector(t0, t1) {
      this.name = t0;
      this.span = t1;
    },
    PseudoSelector$($name, span, argument, element, selector) {
      var t1 = !element,
        t2 = t1 && !A.PseudoSelector__isFakePseudoElement($name);
      return new A.PseudoSelector($name, A.unvendor($name), t2, t1, argument, selector, span);
    },
    PseudoSelector__isFakePseudoElement($name) {
      switch ($name.charCodeAt(0)) {
        case 97:
        case 65:
          return A.equalsIgnoreCase($name, "after");
        case 98:
        case 66:
          return A.equalsIgnoreCase($name, "before");
        case 102:
        case 70:
          return A.equalsIgnoreCase($name, "first-line") || A.equalsIgnoreCase($name, "first-letter");
        default:
          return false;
      }
    },
    PseudoSelector: function PseudoSelector(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.normalizedName = t1;
      _.isClass = t2;
      _.isSyntacticClass = t3;
      _.argument = t4;
      _.selector = t5;
      _.__PseudoSelector_specificity_FI = $;
      _.span = t6;
    },
    PseudoSelector_specificity_closure: function PseudoSelector_specificity_closure(t0) {
      this.$this = t0;
    },
    PseudoSelector_specificity__closure: function PseudoSelector_specificity__closure() {
    },
    PseudoSelector_specificity__closure0: function PseudoSelector_specificity__closure0() {
    },
    PseudoSelector_unify_closure: function PseudoSelector_unify_closure() {
    },
    QualifiedName: function QualifiedName(t0, t1) {
      this.name = t0;
      this.namespace = t1;
    },
    SimpleSelector: function SimpleSelector() {
    },
    SimpleSelector_isSuperselector_closure: function SimpleSelector_isSuperselector_closure(t0) {
      this.$this = t0;
    },
    SimpleSelector_isSuperselector__closure: function SimpleSelector_isSuperselector__closure(t0) {
      this.$this = t0;
    },
    TypeSelector: function TypeSelector(t0, t1) {
      this.name = t0;
      this.span = t1;
    },
    UniversalSelector: function UniversalSelector(t0, t1) {
      this.namespace = t0;
      this.span = t1;
    },
    compileAsync(path, charset, fatalDeprecations, futureDeprecations, importCache, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose) {
      return A.compileAsync$body(path, charset, fatalDeprecations, futureDeprecations, importCache, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose);
    },
    compileAsync$body(path, charset, fatalDeprecations, futureDeprecations, importCache, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, t3, t4, t0, stylesheet, result, t1, t2;
      var $async$compileAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Deprecation;
              t2 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t2.addAll$1(0, silenceDeprecations);
              t3 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t3.addAll$1(0, fatalDeprecations);
              t4 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t4.addAll$1(0, futureDeprecations);
              logger = new A.DeprecationProcessingLogger(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int), logger, t2, t3, t4, !verbose);
              logger.validate$0();
              t1 = syntax === A.Syntax_forPath(path);
              $async$goto = t1 ? 3 : 5;
              break;
            case 3:
              // then
              t1 = $.$get$FilesystemImporter_cwd();
              t2 = A.isNodeJs() ? self.process : null;
              if (!J.$eq$(t2 == null ? null : J.get$platform$x(t2), "win32")) {
                t2 = A.isNodeJs() ? self.process : null;
                t2 = J.$eq$(t2 == null ? null : J.get$platform$x(t2), "darwin");
              } else
                t2 = true;
              if (t2) {
                t2 = A.absolute(path, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                t3 = $.$get$context();
                t2 = A._realCasePath(t3.normalize$1(t2));
              } else {
                t2 = $.$get$context();
                t3 = t2.canonicalize$1(0, path);
                t0 = t3;
                t3 = t2;
                t2 = t0;
              }
              $async$goto = 6;
              return A._asyncAwait(importCache.importCanonical$3$originalUrl(t1, t3.toUri$1(t2), t3.toUri$1(path)), $async$compileAsync);
            case 6:
              // returning from await.
              t3 = $async$result;
              t3.toString;
              stylesheet = t3;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              t1 = A.readFile(path);
              stylesheet = A.Stylesheet_Stylesheet$parse(t1, syntax, $.$get$context().toUri$1(path));
            case 4:
              // join
              $async$goto = 7;
              return A._asyncAwait(A._compileStylesheet0(stylesheet, logger, importCache, null, $.$get$FilesystemImporter_cwd(), null, style, true, null, null, quietDeps, sourceMap, charset), $async$compileAsync);
            case 7:
              // returning from await.
              result = $async$result;
              logger.summarize$1$js(false);
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$compileAsync, $async$completer);
    },
    compileStringAsync(source, charset, fatalDeprecations, futureDeprecations, importCache, importer, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose) {
      return A.compileStringAsync$body(source, charset, fatalDeprecations, futureDeprecations, importCache, importer, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose);
    },
    compileStringAsync$body(source, charset, fatalDeprecations, futureDeprecations, importCache, importer, logger, quietDeps, silenceDeprecations, sourceMap, style, syntax, verbose) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, t3, t4, stylesheet, _0_0, result, t1, t2;
      var $async$compileStringAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.Deprecation;
              t2 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t2.addAll$1(0, silenceDeprecations);
              t3 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t3.addAll$1(0, fatalDeprecations);
              t4 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
              t4.addAll$1(0, futureDeprecations);
              logger = new A.DeprecationProcessingLogger(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int), logger, t2, t3, t4, !verbose);
              logger.validate$0();
              stylesheet = A.Stylesheet_Stylesheet$parse(source, syntax, null);
              t1 = stylesheet.span;
              _0_0 = t1.get$sourceUrl(t1);
              if (type$.Uri._is(_0_0))
                t2 = "" === _0_0.get$scheme();
              else
                t2 = false;
              if (t2)
                A.WarnForDeprecation_warnForDeprecation(logger, B.Deprecation_eJq, "Passing a relative `url` argument (" + A.S(t1.get$sourceUrl(t1)) + string$.x29x20to_cm, null, null);
              $async$goto = 3;
              return A._asyncAwait(A._compileStylesheet0(stylesheet, logger, importCache, null, importer, null, style, true, null, null, quietDeps, sourceMap, charset), $async$compileStringAsync);
            case 3:
              // returning from await.
              result = $async$result;
              logger.summarize$1$js(false);
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$compileStringAsync, $async$completer);
    },
    _compileStylesheet0(stylesheet, logger, importCache, nodeImporter, importer, functions, style, useSpaces, indentWidth, lineFeed, quietDeps, sourceMap, charset) {
      return A._compileStylesheet$body(stylesheet, logger, importCache, nodeImporter, importer, functions, style, true, indentWidth, lineFeed, quietDeps, sourceMap, charset);
    },
    _compileStylesheet$body(stylesheet, logger, importCache, nodeImporter, importer, functions, style, useSpaces, indentWidth, lineFeed, quietDeps, sourceMap, charset) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CompileResult),
        $async$returnValue, evaluateResult, serializeResult, resultSourceMap;
      var $async$_compileStylesheet0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A._EvaluateVisitor$0(functions, importCache, logger, nodeImporter, quietDeps, sourceMap).run$2(0, importer, stylesheet), $async$_compileStylesheet0);
            case 3:
              // returning from await.
              evaluateResult = $async$result;
              serializeResult = A.serialize(evaluateResult._1, charset, indentWidth, false, lineFeed, logger, sourceMap, style, true);
              resultSourceMap = serializeResult._1;
              if (resultSourceMap != null)
                A.mapInPlace(resultSourceMap.urls, new A._compileStylesheet_closure0(stylesheet, importCache));
              evaluateResult.toString;
              $async$returnValue = new A.CompileResult(serializeResult);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_compileStylesheet0, $async$completer);
    },
    _compileStylesheet_closure0: function _compileStylesheet_closure0(t0, t1) {
      this.stylesheet = t0;
      this.importCache = t1;
    },
    AsyncEnvironment$() {
      var t1 = type$.String,
        t2 = type$.Module_AsyncCallable,
        t3 = type$.AstNode,
        t4 = type$.int,
        t5 = type$.AsyncCallable,
        t6 = type$.JSArray_Map_String_AsyncCallable;
      return new A.AsyncEnvironment(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), null, null, A._setArrayType([], type$.JSArray_Module_AsyncCallable), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)], type$.JSArray_Map_String_Value), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t3)], type$.JSArray_Map_String_AstNode), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), null);
    },
    AsyncEnvironment$_(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, _functions, _mixins, _content) {
      var t1 = type$.String,
        t2 = type$.int;
      return new A.AsyncEnvironment(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _functions, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _mixins, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _content);
    },
    _EnvironmentModule__EnvironmentModule0(environment, css, preModuleComments, extensionStore, forwarded) {
      var t1, t2, t3, t4, t5, t6, module, result, t7;
      if (forwarded == null)
        forwarded = B.Set_empty2;
      t1 = type$.dynamic;
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t2 = type$.Module_AsyncCallable, t3 = type$.List_CssComment, t4 = A.MapExtensions_get_pairs(preModuleComments, t2, t3), t4 = t4.get$iterator(t4), t5 = type$.CssComment; t4.moveNext$0();) {
        t6 = t4.get$current(t4);
        module = t6._0;
        result = A.List_List$from(t6._1, false, t5);
        result.$flags = 3;
        t1.$indexSet(0, module, result);
      }
      t1 = A.ConstantMap_ConstantMap$from(t1, t2, t3);
      t2 = A._EnvironmentModule__makeModulesByVariable0(forwarded);
      t3 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_variables), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure5(), type$.Map_String_Value), type$.Value);
      t4 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_variableNodes), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure6(), type$.Map_String_AstNode), type$.AstNode);
      t5 = type$.Map_String_AsyncCallable;
      t6 = type$.AsyncCallable;
      t7 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_functions), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure7(), t5), t6);
      t6 = A._EnvironmentModule__memberMap0(B.JSArray_methods.get$first(environment._async_environment$_mixins), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure8(), t5), t6);
      t5 = J.get$isNotEmpty$asx(css.get$children(css)) || preModuleComments.get$isNotEmpty(preModuleComments) || B.JSArray_methods.any$1(environment._async_environment$_allModules, new A._EnvironmentModule__EnvironmentModule_closure9());
      return A._EnvironmentModule$_0(environment, css, t1, extensionStore, t2, t3, t4, t7, t6, t5, !extensionStore.get$isEmpty(extensionStore) || B.JSArray_methods.any$1(environment._async_environment$_allModules, new A._EnvironmentModule__EnvironmentModule_closure10()));
    },
    _EnvironmentModule__makeModulesByVariable0(forwarded) {
      var modulesByVariable, t1, t2, t3, t4, t5;
      if (forwarded.get$isEmpty(forwarded))
        return B.Map_empty8;
      modulesByVariable = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Module_AsyncCallable);
      for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (t2 instanceof A._EnvironmentModule0) {
          for (t3 = t2._async_environment$_modulesByVariable, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            t5 = t4.get$variables();
            A.setAll(modulesByVariable, t5.get$keys(t5), t4);
          }
          A.setAll(modulesByVariable, J.get$keys$z(B.JSArray_methods.get$first(t2._async_environment$_environment._async_environment$_variables)), t2);
        } else {
          t3 = t2.get$variables();
          A.setAll(modulesByVariable, t3.get$keys(t3), t2);
        }
      }
      return modulesByVariable;
    },
    _EnvironmentModule__memberMap0(localMap, otherMaps, $V) {
      var t1, t2, t3;
      localMap = new A.PublicMemberMapView(localMap, $V._eval$1("PublicMemberMapView<0>"));
      if (otherMaps.get$isEmpty(otherMaps))
        return localMap;
      t1 = A._setArrayType([], $V._eval$1("JSArray<Map<String,0>>"));
      for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.get$isNotEmpty(t3))
          t1.push(t3);
      }
      t1.push(localMap);
      if (t1.length === 1)
        return localMap;
      return A.MergedMapView$(t1, type$.String, $V);
    },
    _EnvironmentModule$_0(_environment, css, preModuleComments, extensionStore, _modulesByVariable, variables, variableNodes, functions, mixins, transitivelyContainsCss, transitivelyContainsExtensions) {
      return new A._EnvironmentModule0(_environment._async_environment$_allModules, variables, variableNodes, functions, mixins, extensionStore, css, preModuleComments, transitivelyContainsCss, transitivelyContainsExtensions, _environment, _modulesByVariable);
    },
    AsyncEnvironment: function AsyncEnvironment(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._async_environment$_modules = t0;
      _._async_environment$_namespaceNodes = t1;
      _._async_environment$_globalModules = t2;
      _._async_environment$_importedModules = t3;
      _._async_environment$_forwardedModules = t4;
      _._async_environment$_nestedForwardedModules = t5;
      _._async_environment$_allModules = t6;
      _._async_environment$_variables = t7;
      _._async_environment$_variableNodes = t8;
      _._async_environment$_variableIndices = t9;
      _._async_environment$_functions = t10;
      _._async_environment$_functionIndices = t11;
      _._async_environment$_mixins = t12;
      _._async_environment$_mixinIndices = t13;
      _._async_environment$_content = t14;
      _._async_environment$_inMixin = false;
      _._async_environment$_inSemiGlobalScope = true;
      _._async_environment$_lastVariableIndex = _._async_environment$_lastVariableName = null;
    },
    AsyncEnvironment__getVariableFromGlobalModule_closure: function AsyncEnvironment__getVariableFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment_setVariable_closure: function AsyncEnvironment_setVariable_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    AsyncEnvironment_setVariable_closure0: function AsyncEnvironment_setVariable_closure0(t0) {
      this.name = t0;
    },
    AsyncEnvironment_setVariable_closure1: function AsyncEnvironment_setVariable_closure1(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    AsyncEnvironment__getFunctionFromGlobalModule_closure: function AsyncEnvironment__getFunctionFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment__getMixinFromGlobalModule_closure: function AsyncEnvironment__getMixinFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    AsyncEnvironment_toModule_closure: function AsyncEnvironment_toModule_closure() {
    },
    AsyncEnvironment_toDummyModule_closure: function AsyncEnvironment_toDummyModule_closure() {
    },
    _EnvironmentModule0: function _EnvironmentModule0(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.upstream = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.extensionStore = t5;
      _.css = t6;
      _.preModuleComments = t7;
      _.transitivelyContainsCss = t8;
      _.transitivelyContainsExtensions = t9;
      _._async_environment$_environment = t10;
      _._async_environment$_modulesByVariable = t11;
    },
    _EnvironmentModule__EnvironmentModule_closure5: function _EnvironmentModule__EnvironmentModule_closure5() {
    },
    _EnvironmentModule__EnvironmentModule_closure6: function _EnvironmentModule__EnvironmentModule_closure6() {
    },
    _EnvironmentModule__EnvironmentModule_closure7: function _EnvironmentModule__EnvironmentModule_closure7() {
    },
    _EnvironmentModule__EnvironmentModule_closure8: function _EnvironmentModule__EnvironmentModule_closure8() {
    },
    _EnvironmentModule__EnvironmentModule_closure9: function _EnvironmentModule__EnvironmentModule_closure9() {
    },
    _EnvironmentModule__EnvironmentModule_closure10: function _EnvironmentModule__EnvironmentModule_closure10() {
    },
    AsyncImportCache__toImporters(importers, loadPaths, packageConfig) {
      var t1, t2, t3, t4, _i, path, _null = null,
        sassPath = A.getEnvironmentVariable("SASS_PATH");
      if (A.isBrowser()) {
        t1 = A._setArrayType([], type$.JSArray_AsyncImporter_2);
        B.JSArray_methods.addAll$1(t1, importers);
        return t1;
      }
      t1 = A._setArrayType([], type$.JSArray_AsyncImporter_2);
      B.JSArray_methods.addAll$1(t1, importers);
      for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t1.push(new A.FilesystemImporter($.$get$context().absolute$15(t3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false));
      }
      if (sassPath != null) {
        t2 = A.isNodeJs() ? self.process : _null;
        t3 = sassPath.split(J.$eq$(t2 == null ? _null : J.get$platform$x(t2), "win32") ? ";" : ":");
        t4 = t3.length;
        _i = 0;
        for (; _i < t4; ++_i) {
          path = t3[_i];
          t1.push(new A.FilesystemImporter($.$get$context().absolute$15(path, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false));
        }
      }
      return t1;
    },
    AsyncImportCache: function AsyncImportCache(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async_import_cache$_importers = t0;
      _._async_import_cache$_canonicalizeCache = t1;
      _._async_import_cache$_perImporterCanonicalizeCache = t2;
      _._async_import_cache$_nonCanonicalRelativeUrls = t3;
      _._async_import_cache$_importCache = t4;
      _._async_import_cache$_resultsCache = t5;
      _._async_import_cache$_loadTimes = t6;
    },
    AsyncImportCache_canonicalize_closure: function AsyncImportCache_canonicalize_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.baseImporter = t1;
      _.resolvedUrl = t2;
      _.baseUrl = t3;
      _.forImport = t4;
      _.key = t5;
      _.url = t6;
    },
    AsyncImportCache__canonicalize_closure: function AsyncImportCache__canonicalize_closure(t0, t1) {
      this.importer = t0;
      this.url = t1;
    },
    AsyncImportCache_importCanonical_closure: function AsyncImportCache_importCanonical_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
    },
    AsyncImportCache_humanize_closure: function AsyncImportCache_humanize_closure(t0) {
      this.canonicalUrl = t0;
    },
    AsyncImportCache_humanize_closure0: function AsyncImportCache_humanize_closure0() {
    },
    AsyncImportCache_humanize_closure1: function AsyncImportCache_humanize_closure1() {
    },
    AsyncImportCache_humanize_closure2: function AsyncImportCache_humanize_closure2(t0) {
      this.canonicalUrl = t0;
    },
    AsyncBuiltInCallable$mixin($name, parameters, callback, acceptsContent, url) {
      return new A.AsyncBuiltInCallable($name, A.ScssParser$("@mixin " + $name + "(" + parameters + ") {", url).parseParameterList$0(), new A.AsyncBuiltInCallable$mixin_closure(callback), false);
    },
    AsyncBuiltInCallable: function AsyncBuiltInCallable(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _._parameters = t1;
      _._async_built_in$_callback = t2;
      _.acceptsContent = t3;
    },
    AsyncBuiltInCallable$mixin_closure: function AsyncBuiltInCallable$mixin_closure(t0) {
      this.callback = t0;
    },
    AsyncBuiltInCallable_withDeprecationWarning_closure: function AsyncBuiltInCallable_withDeprecationWarning_closure(t0, t1, t2) {
      this.$this = t0;
      this.module = t1;
      this.newName = t2;
    },
    BuiltInCallable$function($name, parameters, callback, url) {
      return new A.BuiltInCallable($name, A._setArrayType([new A._Record_2(A.ScssParser$("@function " + $name + "(" + parameters + ") {", url).parseParameterList$0(), callback)], type$.JSArray_Record_2_ParameterList_and_Value_Function_List_Value), false);
    },
    BuiltInCallable$mixin($name, parameters, callback, acceptsContent, url) {
      return new A.BuiltInCallable($name, A._setArrayType([new A._Record_2(A.ScssParser$("@mixin " + $name + "(" + parameters + ") {", url).parseParameterList$0(), new A.BuiltInCallable$mixin_closure(callback))], type$.JSArray_Record_2_ParameterList_and_Value_Function_List_Value), acceptsContent);
    },
    BuiltInCallable$overloadedFunction($name, overloads) {
      var t2, t3, t4, t5, t6, t7, args, callback,
        t1 = A._setArrayType([], type$.JSArray_Record_2_ParameterList_and_Value_Function_List_Value);
      for (t2 = type$.String, t3 = A.MapExtensions_get_pairs(overloads, t2, type$.Value_Function_List_Value), t3 = t3.get$iterator(t3), t4 = "@function " + $name + "(", t5 = type$.FileSpan, t6 = type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span; t3.moveNext$0();) {
        t7 = t3.get$current(t3);
        args = t7._0;
        callback = t7._1;
        t1.push(new A._Record_2(new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t2, t5), A._setArrayType([], t6), A.SpanScanner$(t4 + args + ") {", null), null).parseParameterList$0(), callback));
      }
      return new A.BuiltInCallable($name, t1, false);
    },
    BuiltInCallable: function BuiltInCallable(t0, t1, t2) {
      this.name = t0;
      this._overloads = t1;
      this.acceptsContent = t2;
    },
    BuiltInCallable$mixin_closure: function BuiltInCallable$mixin_closure(t0) {
      this.callback = t0;
    },
    BuiltInCallable_withDeprecationWarning_closure: function BuiltInCallable_withDeprecationWarning_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.module = t2;
      _.newName = t3;
    },
    PlainCssCallable: function PlainCssCallable(t0) {
      this.name = t0;
    },
    UserDefinedCallable: function UserDefinedCallable(t0, t1, t2, t3) {
      var _ = this;
      _.declaration = t0;
      _.environment = t1;
      _.inDependency = t2;
      _.$ti = t3;
    },
    _compileStylesheet(stylesheet, logger, importCache, nodeImporter, importer, functions, style, useSpaces, indentWidth, lineFeed, quietDeps, sourceMap, charset) {
      var serializeResult = A.serialize(A._EvaluateVisitor$(functions, importCache, logger, nodeImporter, quietDeps, sourceMap).run$2(0, importer, stylesheet)._1, charset, indentWidth, false, lineFeed, logger, sourceMap, style, true),
        resultSourceMap = serializeResult._1;
      if (resultSourceMap != null)
        A.mapInPlace(resultSourceMap.urls, new A._compileStylesheet_closure(stylesheet, importCache));
      return new A.CompileResult(serializeResult);
    },
    _compileStylesheet_closure: function _compileStylesheet_closure(t0, t1) {
      this.stylesheet = t0;
      this.importCache = t1;
    },
    CompileResult: function CompileResult(t0) {
      this._serialize = t0;
    },
    Configuration: function Configuration(t0, t1) {
      this._configuration$_values = t0;
      this.__originalConfiguration = t1;
    },
    ExplicitConfiguration: function ExplicitConfiguration(t0, t1, t2) {
      this.nodeWithSpan = t0;
      this._configuration$_values = t1;
      this.__originalConfiguration = t2;
    },
    ConfiguredValue: function ConfiguredValue(t0, t1, t2) {
      this.value = t0;
      this.configurationSpan = t1;
      this.assignmentNode = t2;
    },
    Deprecation_fromId(id) {
      return A.IterableExtension_firstWhereOrNull(B.List_rYe, new A.Deprecation_fromId_closure(id));
    },
    Deprecation_forVersion(version) {
      var t2, _i, deprecation, $self, t3,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.Deprecation);
      for (t2 = A.VersionRange_VersionRange(true, version).get$allows(), _i = 0; _i < 26; ++_i) {
        deprecation = B.List_rYe[_i];
        $self = deprecation._deprecatedIn;
        t3 = $self == null ? null : A.Version___parse_tearOff($self);
        t3 = t3 == null ? null : t2.call$1(t3);
        if (t3 == null ? false : t3)
          t1.add$1(0, deprecation);
      }
      return t1;
    },
    Deprecation: function Deprecation(t0, t1, t2) {
      this.id = t0;
      this._deprecatedIn = t1;
      this._name = t2;
    },
    Deprecation_fromId_closure: function Deprecation_fromId_closure(t0) {
      this.id = t0;
    },
    Environment$() {
      var t1 = type$.String,
        t2 = type$.Module_Callable,
        t3 = type$.AstNode,
        t4 = type$.int,
        t5 = type$.Callable,
        t6 = type$.JSArray_Map_String_Callable;
      return new A.Environment(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), null, null, A._setArrayType([], type$.JSArray_Module_Callable), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Value)], type$.JSArray_Map_String_Value), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t3)], type$.JSArray_Map_String_AstNode), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), A._setArrayType([A.LinkedHashMap_LinkedHashMap$_empty(t1, t5)], t6), A.LinkedHashMap_LinkedHashMap$_empty(t1, t4), null);
    },
    Environment$_(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, _functions, _mixins, _content) {
      var t1 = type$.String,
        t2 = type$.int;
      return new A.Environment(_modules, _namespaceNodes, _globalModules, _importedModules, _forwardedModules, _nestedForwardedModules, _allModules, _variables, _variableNodes, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _functions, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _mixins, A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), _content);
    },
    _EnvironmentModule__EnvironmentModule(environment, css, preModuleComments, extensionStore, forwarded) {
      var t1, t2, t3, t4, t5, t6, module, result, t7;
      if (forwarded == null)
        forwarded = B.Set_empty0;
      t1 = type$.dynamic;
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t2 = type$.Module_Callable, t3 = type$.List_CssComment, t4 = A.MapExtensions_get_pairs(preModuleComments, t2, t3), t4 = t4.get$iterator(t4), t5 = type$.CssComment; t4.moveNext$0();) {
        t6 = t4.get$current(t4);
        module = t6._0;
        result = A.List_List$from(t6._1, false, t5);
        result.$flags = 3;
        t1.$indexSet(0, module, result);
      }
      t1 = A.ConstantMap_ConstantMap$from(t1, t2, t3);
      t2 = A._EnvironmentModule__makeModulesByVariable(forwarded);
      t3 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._variables), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure(), type$.Map_String_Value), type$.Value);
      t4 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._variableNodes), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure0(), type$.Map_String_AstNode), type$.AstNode);
      t5 = type$.Map_String_Callable;
      t6 = type$.Callable;
      t7 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._functions), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure1(), t5), t6);
      t6 = A._EnvironmentModule__memberMap(B.JSArray_methods.get$first(environment._mixins), forwarded.map$1$1(0, new A._EnvironmentModule__EnvironmentModule_closure2(), t5), t6);
      t5 = J.get$isNotEmpty$asx(css.get$children(css)) || preModuleComments.get$isNotEmpty(preModuleComments) || B.JSArray_methods.any$1(environment._allModules, new A._EnvironmentModule__EnvironmentModule_closure3());
      return A._EnvironmentModule$_(environment, css, t1, extensionStore, t2, t3, t4, t7, t6, t5, !extensionStore.get$isEmpty(extensionStore) || B.JSArray_methods.any$1(environment._allModules, new A._EnvironmentModule__EnvironmentModule_closure4()));
    },
    _EnvironmentModule__makeModulesByVariable(forwarded) {
      var modulesByVariable, t1, t2, t3, t4, t5;
      if (forwarded.get$isEmpty(forwarded))
        return B.Map_empty0;
      modulesByVariable = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Module_Callable);
      for (t1 = forwarded.get$iterator(forwarded); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (t2 instanceof A._EnvironmentModule) {
          for (t3 = t2._modulesByVariable, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
            t4 = t3.get$current(t3);
            t5 = t4.get$variables();
            A.setAll(modulesByVariable, t5.get$keys(t5), t4);
          }
          A.setAll(modulesByVariable, J.get$keys$z(B.JSArray_methods.get$first(t2._environment$_environment._variables)), t2);
        } else {
          t3 = t2.get$variables();
          A.setAll(modulesByVariable, t3.get$keys(t3), t2);
        }
      }
      return modulesByVariable;
    },
    _EnvironmentModule__memberMap(localMap, otherMaps, $V) {
      var t1, t2, t3;
      localMap = new A.PublicMemberMapView(localMap, $V._eval$1("PublicMemberMapView<0>"));
      if (otherMaps.get$isEmpty(otherMaps))
        return localMap;
      t1 = A._setArrayType([], $V._eval$1("JSArray<Map<String,0>>"));
      for (t2 = otherMaps.get$iterator(otherMaps); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.get$isNotEmpty(t3))
          t1.push(t3);
      }
      t1.push(localMap);
      if (t1.length === 1)
        return localMap;
      return A.MergedMapView$(t1, type$.String, $V);
    },
    _EnvironmentModule$_(_environment, css, preModuleComments, extensionStore, _modulesByVariable, variables, variableNodes, functions, mixins, transitivelyContainsCss, transitivelyContainsExtensions) {
      return new A._EnvironmentModule(_environment._allModules, variables, variableNodes, functions, mixins, extensionStore, css, preModuleComments, transitivelyContainsCss, transitivelyContainsExtensions, _environment, _modulesByVariable);
    },
    Environment: function Environment(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._environment$_modules = t0;
      _._namespaceNodes = t1;
      _._globalModules = t2;
      _._importedModules = t3;
      _._forwardedModules = t4;
      _._nestedForwardedModules = t5;
      _._allModules = t6;
      _._variables = t7;
      _._variableNodes = t8;
      _._variableIndices = t9;
      _._functions = t10;
      _._functionIndices = t11;
      _._mixins = t12;
      _._mixinIndices = t13;
      _._content = t14;
      _._inMixin = false;
      _._inSemiGlobalScope = true;
      _._lastVariableIndex = _._lastVariableName = null;
    },
    Environment__getVariableFromGlobalModule_closure: function Environment__getVariableFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment_setVariable_closure: function Environment_setVariable_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Environment_setVariable_closure0: function Environment_setVariable_closure0(t0) {
      this.name = t0;
    },
    Environment_setVariable_closure1: function Environment_setVariable_closure1(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Environment__getFunctionFromGlobalModule_closure: function Environment__getFunctionFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment__getMixinFromGlobalModule_closure: function Environment__getMixinFromGlobalModule_closure(t0) {
      this.name = t0;
    },
    Environment_toModule_closure: function Environment_toModule_closure() {
    },
    Environment_toDummyModule_closure: function Environment_toDummyModule_closure() {
    },
    _EnvironmentModule: function _EnvironmentModule(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.upstream = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.extensionStore = t5;
      _.css = t6;
      _.preModuleComments = t7;
      _.transitivelyContainsCss = t8;
      _.transitivelyContainsExtensions = t9;
      _._environment$_environment = t10;
      _._modulesByVariable = t11;
    },
    _EnvironmentModule__EnvironmentModule_closure: function _EnvironmentModule__EnvironmentModule_closure() {
    },
    _EnvironmentModule__EnvironmentModule_closure0: function _EnvironmentModule__EnvironmentModule_closure0() {
    },
    _EnvironmentModule__EnvironmentModule_closure1: function _EnvironmentModule__EnvironmentModule_closure1() {
    },
    _EnvironmentModule__EnvironmentModule_closure2: function _EnvironmentModule__EnvironmentModule_closure2() {
    },
    _EnvironmentModule__EnvironmentModule_closure3: function _EnvironmentModule__EnvironmentModule_closure3() {
    },
    _EnvironmentModule__EnvironmentModule_closure4: function _EnvironmentModule__EnvironmentModule_closure4() {
    },
    SassException$(message, span, loadedUrls) {
      return new A.SassException(loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    MultiSpanSassException$(message, span, primaryLabel, secondarySpans, loadedUrls) {
      var t1 = A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String);
      return new A.MultiSpanSassException(primaryLabel, t1, loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    SassRuntimeException$(message, span, trace, loadedUrls) {
      return new A.SassRuntimeException(trace, loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    MultiSpanSassRuntimeException$(message, span, primaryLabel, secondarySpans, trace, loadedUrls) {
      var t1 = A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String);
      return new A.MultiSpanSassRuntimeException(trace, primaryLabel, t1, loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    SassFormatException$(message, span, loadedUrls) {
      return new A.SassFormatException(loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    MultiSpanSassFormatException$(message, span, primaryLabel, secondarySpans, loadedUrls) {
      var t1 = A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String);
      return new A.MultiSpanSassFormatException(primaryLabel, t1, loadedUrls == null ? B.Set_empty : A.Set_Set$unmodifiable(loadedUrls, type$.Uri), message, span);
    },
    SassScriptException$(message, argumentName) {
      return new A.SassScriptException(argumentName == null ? message : "$" + argumentName + ": " + message);
    },
    MultiSpanSassScriptException$(message, primaryLabel, secondarySpans) {
      var t1 = A.ConstantMap_ConstantMap$from(secondarySpans, type$.FileSpan, type$.String);
      return new A.MultiSpanSassScriptException(primaryLabel, t1, message);
    },
    SassException: function SassException(t0, t1, t2) {
      this.loadedUrls = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    MultiSpanSassException: function MultiSpanSassException(t0, t1, t2, t3, t4) {
      var _ = this;
      _.primaryLabel = t0;
      _.secondarySpans = t1;
      _.loadedUrls = t2;
      _._span_exception$_message = t3;
      _._span = t4;
    },
    SassRuntimeException: function SassRuntimeException(t0, t1, t2, t3) {
      var _ = this;
      _.trace = t0;
      _.loadedUrls = t1;
      _._span_exception$_message = t2;
      _._span = t3;
    },
    MultiSpanSassRuntimeException: function MultiSpanSassRuntimeException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.trace = t0;
      _.primaryLabel = t1;
      _.secondarySpans = t2;
      _.loadedUrls = t3;
      _._span_exception$_message = t4;
      _._span = t5;
    },
    SassFormatException: function SassFormatException(t0, t1, t2) {
      this.loadedUrls = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    MultiSpanSassFormatException: function MultiSpanSassFormatException(t0, t1, t2, t3, t4) {
      var _ = this;
      _.primaryLabel = t0;
      _.secondarySpans = t1;
      _.loadedUrls = t2;
      _._span_exception$_message = t3;
      _._span = t4;
    },
    SassScriptException: function SassScriptException(t0) {
      this.message = t0;
    },
    MultiSpanSassScriptException: function MultiSpanSassScriptException(t0, t1, t2) {
      this.primaryLabel = t0;
      this.secondarySpans = t1;
      this.message = t2;
    },
    compileStylesheet(options, graph, source, destination, ifModified) {
      return A.compileStylesheet$body(options, graph, source, destination, ifModified);
    },
    compileStylesheet$body(options, graph, source, destination, ifModified) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Record_3_int_and_String_and_nullable_String),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], error, stackTrace, message, error0, stackTrace0, path, message0, exception, t1, $async$exception;
      var $async$compileStylesheet = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A._compileStylesheetWithoutErrorHandling(options, graph, source, destination, ifModified), $async$compileStylesheet);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.SassException) {
                error = t1;
                stackTrace = A.getTraceFromException($async$exception);
                if (destination != null && !options.get$emitErrorCss())
                  A._tryDelete(destination);
                message = J.toString$1$color$(error, options.get$color());
                if (A._asBool(options._options.$index(0, "trace"))) {
                  t1 = A.getTrace(error);
                  if (t1 == null)
                    t1 = stackTrace;
                } else
                  t1 = null;
                $async$returnValue = A._getErrorWithStackTrace(65, message, t1);
                // goto return
                $async$goto = 1;
                break;
              } else if (t1 instanceof A.FileSystemException) {
                error0 = t1;
                stackTrace0 = A.getTraceFromException($async$exception);
                path = error0.path;
                message0 = path == null ? error0.message : "Error reading " + $.$get$context().relative$2$from(path, null) + ": " + error0.message + ".";
                if (A._asBool(options._options.$index(0, "trace"))) {
                  t1 = A.getTrace(error0);
                  if (t1 == null)
                    t1 = stackTrace0;
                } else
                  t1 = null;
                $async$returnValue = A._getErrorWithStackTrace(66, message0, t1);
                // goto return
                $async$goto = 1;
                break;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$compileStylesheet, $async$completer);
    },
    _compileStylesheetWithoutErrorHandling(options, graph, source, destination, ifModified) {
      return A._compileStylesheetWithoutErrorHandling$body(options, graph, source, destination, ifModified);
    },
    _compileStylesheetWithoutErrorHandling$body(options, graph, source, destination, ifModified) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], syntax, result, importCache, error, t1, exception, t2, t3, t4, t5, t6, t7, t8, t9, t10, result0, t11, t12, t13, t14, logger, stylesheet, _0_0, t0, css, buffer, sourceName, destinationName, nowStr, timestamp, importer, $async$exception;
      var $async$_compileStylesheetWithoutErrorHandling = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              importer = $.$get$FilesystemImporter_cwd();
              if (ifModified)
                try {
                  t1 = false;
                  if (source != null)
                    if (destination != null) {
                      t1 = A.absolute(source, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                      t1 = !graph.modifiedSince$3($.$get$context().toUri$1(t1), A.modificationTime(destination), importer);
                    }
                  if (t1) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                } catch (exception) {
                  if (!(A.unwrapException(exception) instanceof A.FileSystemException))
                    throw exception;
                }
              syntax = null;
              if (A._asBoolQ(options._ifParsed$1("indented")) === true)
                syntax = B.Syntax_Sass_sass;
              else if (source != null)
                syntax = A.Syntax_forPath(source);
              else
                syntax = B.Syntax_SCSS_scss;
              result = null;
              $async$handler = 4;
              t1 = options._options;
              $async$goto = A._asBool(t1.$index(0, "async")) ? 7 : 9;
              break;
            case 7:
              // then
              t2 = type$.nullable_Record_3_AsyncImporter_and_Uri_and_Uri_originalUrl;
              t3 = type$.Record_3_AsyncImporter_and_Uri_and_bool_forImport;
              t4 = type$.Uri;
              importCache = new A.AsyncImportCache(A.AsyncImportCache__toImporters(options.get$pkgImporters(), type$.List_String._as(t1.$index(0, "load-path")), null), A.LinkedHashMap_LinkedHashMap$_empty(type$.Record_2_Uri_and_bool_forImport, t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.nullable_Stylesheet), A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.ImporterResult), A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.DateTime));
              $async$goto = source == null ? 10 : 12;
              break;
            case 10:
              // then
              $async$goto = 13;
              return A._asyncAwait(A.readStdin(), $async$_compileStylesheetWithoutErrorHandling);
            case 13:
              // returning from await.
              t2 = $async$result;
              t3 = syntax;
              t4 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t5 = $.$get$FilesystemImporter_cwd();
              t6 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_1 : B.OutputStyle_0;
              t7 = A._asBool(t1.$index(0, "quiet-deps"));
              t8 = A._asBool(t1.$index(0, "verbose"));
              t9 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              t10 = options.get$silenceDeprecations(0);
              $async$goto = 14;
              return A._asyncAwait(A.compileStringAsync(t2, t1, options.get$fatalDeprecations(0), options.get$futureDeprecations(0), importCache, t5, t4, t7, t10, t9, t6, t3, t8), $async$_compileStylesheetWithoutErrorHandling);
            case 14:
              // returning from await.
              result0 = $async$result;
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              t2 = syntax;
              t3 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t4 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_1 : B.OutputStyle_0;
              t5 = A._asBool(t1.$index(0, "quiet-deps"));
              t6 = A._asBool(t1.$index(0, "verbose"));
              t7 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              t8 = options.get$silenceDeprecations(0);
              $async$goto = 15;
              return A._asyncAwait(A.compileAsync(source, t1, options.get$fatalDeprecations(0), options.get$futureDeprecations(0), importCache, t3, t5, t8, t7, t4, t2, t6), $async$_compileStylesheetWithoutErrorHandling);
            case 15:
              // returning from await.
              result0 = $async$result;
            case 11:
              // join
              result = result0;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              graph.reloadAllModified$0();
              $async$goto = source == null ? 16 : 18;
              break;
            case 16:
              // then
              $async$goto = 19;
              return A._asyncAwait(A.readStdin(), $async$_compileStylesheetWithoutErrorHandling);
            case 19:
              // returning from await.
              t2 = $async$result;
              t3 = syntax;
              t4 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              t5 = $.$get$FilesystemImporter_cwd();
              t6 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_1 : B.OutputStyle_0;
              t7 = A._asBool(t1.$index(0, "quiet-deps"));
              t8 = A._asBool(t1.$index(0, "verbose"));
              t9 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              t10 = options.get$silenceDeprecations(0);
              t11 = options.get$fatalDeprecations(0);
              t12 = options.get$futureDeprecations(0);
              t13 = type$.Deprecation;
              t14 = A.LinkedHashSet_LinkedHashSet$_empty(t13);
              t14.addAll$1(0, t10);
              t10 = A.LinkedHashSet_LinkedHashSet$_empty(t13);
              t10.addAll$1(0, t11);
              t11 = A.LinkedHashSet_LinkedHashSet$_empty(t13);
              t11.addAll$1(0, t12);
              logger = new A.DeprecationProcessingLogger(A.LinkedHashMap_LinkedHashMap$_empty(t13, type$.int), t4, t14, t10, t11, !t8);
              logger.validate$0();
              stylesheet = A.Stylesheet_Stylesheet$parse(t2, t3 == null ? B.Syntax_SCSS_scss : t3, null);
              t2 = stylesheet.span;
              _0_0 = t2.get$sourceUrl(t2);
              if (type$.Uri._is(_0_0))
                t3 = "" === _0_0.get$scheme();
              else
                t3 = false;
              if (t3)
                A.WarnForDeprecation_warnForDeprecation(logger, B.Deprecation_eJq, "Passing a relative `url` argument (" + A.S(t2.get$sourceUrl(t2)) + string$.x29x20to_cm, null, null);
              result0 = A._compileStylesheet(stylesheet, logger, graph.importCache, null, t5, null, t6, true, null, null, t7, t9, t1);
              logger.summarize$1$js(false);
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              t2 = syntax;
              t3 = A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color());
              importCache = graph.importCache;
              t4 = J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_1 : B.OutputStyle_0;
              t5 = A._asBool(t1.$index(0, "quiet-deps"));
              t6 = A._asBool(t1.$index(0, "verbose"));
              t7 = options.get$emitSourceMap();
              t1 = A._asBool(t1.$index(0, "charset"));
              t8 = options.get$silenceDeprecations(0);
              t9 = options.get$fatalDeprecations(0);
              t10 = options.get$futureDeprecations(0);
              t11 = type$.Deprecation;
              t12 = A.LinkedHashSet_LinkedHashSet$_empty(t11);
              t12.addAll$1(0, t8);
              t8 = A.LinkedHashSet_LinkedHashSet$_empty(t11);
              t8.addAll$1(0, t9);
              t9 = A.LinkedHashSet_LinkedHashSet$_empty(t11);
              t9.addAll$1(0, t10);
              logger = new A.DeprecationProcessingLogger(A.LinkedHashMap_LinkedHashMap$_empty(t11, type$.int), t3, t12, t8, t9, !t6);
              logger.validate$0();
              t3 = t2 == null || t2 === A.Syntax_forPath(source);
              if (t3) {
                t2 = $.$get$FilesystemImporter_cwd();
                t3 = A.isNodeJs() ? self.process : null;
                if (!J.$eq$(t3 == null ? null : J.get$platform$x(t3), "win32")) {
                  t3 = A.isNodeJs() ? self.process : null;
                  t3 = J.$eq$(t3 == null ? null : J.get$platform$x(t3), "darwin");
                } else
                  t3 = true;
                if (t3) {
                  t3 = A.absolute(source, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
                  t6 = $.$get$context();
                  t3 = A._realCasePath(t6.normalize$1(t3));
                } else {
                  t3 = $.$get$context();
                  t6 = t3.canonicalize$1(0, source);
                  t0 = t6;
                  t6 = t3;
                  t3 = t0;
                }
                t6 = importCache.importCanonical$3$originalUrl(t2, t6.toUri$1(t3), t6.toUri$1(source));
                t6.toString;
                stylesheet = t6;
              } else {
                t3 = A.readFile(source);
                if (t2 == null)
                  t2 = A.Syntax_forPath(source);
                stylesheet = A.Stylesheet_Stylesheet$parse(t3, t2, $.$get$context().toUri$1(source));
              }
              result0 = A._compileStylesheet(stylesheet, logger, importCache, null, $.$get$FilesystemImporter_cwd(), null, t4, true, null, null, t5, t7, t1);
              logger.summarize$1$js(false);
            case 17:
              // join
              result = result0;
            case 8:
              // join
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.SassException) {
                error = t1;
                if (options.get$emitErrorCss())
                  if (destination == null)
                    A.print(error.toCssString$0());
                  else {
                    A.ensureDir($.$get$context().dirname$1(destination));
                    A.writeFile(destination, error.toCssString$0() + "\n");
                  }
                throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              css = result._serialize._0 + A._writeSourceMap(options, result._serialize._1, destination);
              if (destination == null) {
                if (css.length !== 0)
                  A.print(css);
              } else {
                A.ensureDir($.$get$context().dirname$1(destination));
                A.writeFile(destination, css + "\n");
              }
              t1 = options._options;
              if (!A._asBool(t1.$index(0, "quiet")))
                t1 = !A._asBool(t1.$index(0, "update")) && !A._asBool(t1.$index(0, "watch"));
              else
                t1 = true;
              if (t1) {
                // goto return
                $async$goto = 1;
                break;
              }
              buffer = new A.StringBuffer("");
              if (source == null)
                sourceName = "stdin";
              else {
                t1 = $.$get$context();
                sourceName = t1.prettyUri$1(t1.toUri$1(source));
              }
              destination.toString;
              t1 = $.$get$context();
              destinationName = t1.prettyUri$1(t1.toUri$1(destination));
              nowStr = new A.DateTime(Date.now(), 0, false).toString$0(0);
              timestamp = B.JSString_methods.substring$2(nowStr, 0, nowStr.length - 7);
              t1 = options.get$color() ? buffer._contents = "" + "\x1b[90m" : "";
              t1 = buffer._contents = t1 + ("[" + timestamp + "] ");
              if (options.get$color())
                t1 = buffer._contents = t1 + "\x1b[32m";
              t1 += "Compiled " + sourceName + " to " + destinationName + ".";
              buffer._contents = t1;
              if (options.get$color())
                buffer._contents = t1 + "\x1b[0m";
              t1 = A.isNodeJs() ? self.process : null;
              if (t1 != null) {
                t1 = J.get$stdout$x(t1);
                J.write$1$x(t1, buffer.toString$0(0) + "\n");
              } else {
                t1 = self.console;
                J.log$1$x(t1, buffer);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_compileStylesheetWithoutErrorHandling, $async$completer);
    },
    _writeSourceMap(options, sourceMap, destination) {
      var t1, sourceMapText, url, sourceMapPath, t2, escapedUrl;
      if (sourceMap == null)
        return "";
      if (destination != null) {
        t1 = $.$get$context();
        sourceMap.targetUrl = t1.toUri$1(A.ParsedPath_ParsedPath$parse(destination, t1.style).get$basename()).toString$0(0);
      }
      A.mapInPlace(sourceMap.urls, new A._writeSourceMap_closure(options, destination));
      t1 = options._options;
      sourceMapText = B.C_JsonCodec.encode$2$toEncodable(sourceMap.toJson$1$includeSourceContents(A._asBool(t1.$index(0, "embed-sources"))), null);
      if (A._asBool(t1.$index(0, "embed-source-map")))
        url = A.Uri_Uri$dataFromString(sourceMapText, B.C_Utf8Codec, "application/json");
      else {
        destination.toString;
        sourceMapPath = destination + ".map";
        t2 = $.$get$context();
        A.ensureDir(t2.dirname$1(sourceMapPath));
        A.writeFile(sourceMapPath, sourceMapText);
        url = t2.toUri$1(t2.relative$2$from(sourceMapPath, t2.dirname$1(destination)));
      }
      t2 = url.toString$0(0);
      escapedUrl = A.stringReplaceAllUnchecked(t2, "*/", "%2A/");
      t1 = (J.$eq$(t1.$index(0, "style"), "compressed") ? B.OutputStyle_1 : B.OutputStyle_0) === B.OutputStyle_1 ? "" : "\n\n";
      return t1 + ("/*# sourceMappingURL=" + escapedUrl + " */");
    },
    _tryDelete(path) {
      var exception;
      try {
        A.deleteFile(path);
      } catch (exception) {
        if (!(A.unwrapException(exception) instanceof A.FileSystemException))
          throw exception;
      }
    },
    _getErrorWithStackTrace(exitCode, error, stackTrace) {
      return new A._Record_3(exitCode, error, stackTrace != null ? B.JSString_methods.trimRight$0(A.Trace_Trace$from(stackTrace).get$terse().toString$0(0)) : null);
    },
    _writeSourceMap_closure: function _writeSourceMap_closure(t0, t1) {
      this.options = t0;
      this.destination = t1;
    },
    ExecutableOptions__separator(text) {
      var t1 = $.$get$ExecutableOptions__separatorBar(),
        t2 = B.JSString_methods.$mul(t1, 3),
        t3 = A.hasTerminal() ? "\x1b[1m" : "",
        t4 = A.hasTerminal() ? "\x1b[0m" : "";
      return t2 + " " + t3 + text + t4 + " " + B.JSString_methods.$mul(t1, 35 - text.length);
    },
    ExecutableOptions__fail(message) {
      return A.throwExpression(A.UsageException$(message));
    },
    ExecutableOptions_ExecutableOptions$parse(args) {
      var options, error, t1, t2, exception;
      try {
        t1 = $.$get$ExecutableOptions__parser();
        t2 = A.ListQueue$(type$.String);
        t2.addAll$1(0, args);
        t2 = A.Parser$(null, t1, t2, null, null).parse$0(0);
        if (t2.wasParsed$1("poll") && !A._asBool(t2.$index(0, "watch")))
          A.ExecutableOptions__fail("--poll may not be passed without --watch.");
        options = new A.ExecutableOptions(t2);
        if (A._asBool(options._options.$index(0, "help")))
          A.ExecutableOptions__fail("Compile Sass to CSS.");
        return options;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          A.ExecutableOptions__fail(J.get$message$x(error));
        } else
          throw exception;
      }
    },
    UsageException$(message) {
      return new A.UsageException(message);
    },
    ExecutableOptions: function ExecutableOptions(t0) {
      var _ = this;
      _._options = t0;
      _.__ExecutableOptions_interactive_FI = $;
      _._sourcesToDestinations = null;
      _.__ExecutableOptions__sourceDirectoriesToDestinations_F = $;
      _._fatalDeprecations = null;
    },
    ExecutableOptions__parser_closure: function ExecutableOptions__parser_closure() {
    },
    ExecutableOptions_interactive_closure: function ExecutableOptions_interactive_closure(t0) {
      this.$this = t0;
    },
    ExecutableOptions_emitErrorCss_closure: function ExecutableOptions_emitErrorCss_closure() {
    },
    ExecutableOptions_fatalDeprecations_closure: function ExecutableOptions_fatalDeprecations_closure(t0) {
      this.$this = t0;
    },
    UsageException: function UsageException(t0) {
      this.message = t0;
    },
    repl(options) {
      return A.repl$body(options);
    },
    repl$body(options) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$errorStack = [], $async$next = [], repl, trackingLogger, warn, evaluator, line, node, warnings, _1_0, node0, warnings0, _2_0, node1, warnings1, _3_0, error, stackTrace, logger, t4, t5, t6, t7, t8, t9, line0, toZone, exception, t1, t2, t3, repl0;
      var $async$repl = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._setArrayType([], type$.JSArray_String);
              t2 = B.JSString_methods.$mul(" ", 3);
              t3 = $.$get$alwaysValid();
              repl0 = new A.Repl(">> ", t2, t3, t1);
              repl0.__Repl__adapter_A = new A.ReplAdapter(repl0);
              repl = repl0;
              t1 = options._options;
              trackingLogger = new A.TrackingLogger(A._asBool(t1.$index(0, "quiet")) ? $.$get$Logger_quiet() : new A.StderrLogger(options.get$color()));
              logger = new A.DeprecationProcessingLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.Deprecation, type$.int), trackingLogger, options.get$silenceDeprecations(0), options.get$fatalDeprecations(0), options.get$futureDeprecations(0), !A._asBool(t1.$index(0, "verbose")));
              logger.validate$0();
              warn = new A.repl_warn(logger);
              t2 = $.$get$FilesystemImporter_cwd();
              evaluator = new A.Evaluator(A._EvaluateVisitor$(null, A.ImportCache$(options.get$pkgImporters(), type$.List_String._as(t1.$index(0, "load-path"))), logger, null, false, false), t2);
              t2 = repl.__Repl__adapter_A;
              t2 === $ && A.throwUnnamedLateFieldNI();
              t2 = new A._StreamIterator(A.checkNotNullable(t2.runAsync$0(), "stream", type$.Object));
              $async$handler = 2;
              t1 = type$.String, t3 = type$.FileSpan, t4 = type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span, t5 = type$.Expression;
            case 5:
              // for condition
              $async$goto = 7;
              return A._asyncAwait(t2.moveNext$0(), $async$repl);
            case 7:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 6;
                break;
              }
              line = t2.get$current(0);
              if (J.trim$0$s(line).length === 0) {
                // goto for condition
                $async$goto = 5;
                break;
              }
              try {
                if (J.startsWith$1$s(line, "@")) {
                  node = null;
                  warnings = null;
                  _1_0 = new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A._setArrayType([], t4), A.SpanScanner$(line, null), null).parseUseRule$0();
                  node = _1_0._0;
                  warnings = _1_0._1;
                  J.forEach$1$ax(warnings, warn);
                  t6 = evaluator;
                  t7 = node;
                  t6._visitor.runStatement$2(t6._importer, t7);
                  // goto for condition
                  $async$goto = 5;
                  break;
                }
                if (new A.Parser(A.SpanScanner$(line, null), null)._isVariableDeclarationLike$0()) {
                  node0 = null;
                  warnings0 = null;
                  _2_0 = new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), A._setArrayType([], t4), A.SpanScanner$(line, null), null).parseVariableDeclaration$0();
                  node0 = _2_0._0;
                  warnings0 = _2_0._1;
                  J.forEach$1$ax(warnings0, warn);
                  t6 = evaluator;
                  t7 = node0;
                  t6._visitor.runStatement$2(t6._importer, t7);
                  t7 = evaluator;
                  t6 = node0.name;
                  t8 = node0.span;
                  t9 = node0.namespace;
                  line0 = t7._visitor.runExpression$2(t7._importer, new A.VariableExpression(t9, t6, t8)).toString$0(0);
                  toZone = $.printToZone;
                  if (toZone == null)
                    A.printString(line0);
                  else
                    toZone.call$1(line0);
                } else {
                  node1 = null;
                  warnings1 = null;
                  t6 = A._setArrayType([], t4);
                  t7 = new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(t1, t3), t6, A.SpanScanner$(line, null), null);
                  _3_0 = new A._Record_2(t7._parseSingleProduction$1$1(t7.get$_expression(), t5), t6);
                  node1 = _3_0._0;
                  warnings1 = _3_0._1;
                  J.forEach$1$ax(warnings1, warn);
                  t6 = evaluator;
                  t7 = node1;
                  line0 = t6._visitor.runExpression$2(t6._importer, t7).toString$0(0);
                  toZone = $.printToZone;
                  if (toZone == null)
                    A.printString(line0);
                  else
                    toZone.call$1(line0);
                }
              } catch (exception) {
                t6 = A.unwrapException(exception);
                if (t6 instanceof A.SassException) {
                  error = t6;
                  stackTrace = A.getTraceFromException(exception);
                  t6 = error;
                  t7 = typeof t6 != "string";
                  if (!t7 || typeof t6 == "number" || A._isBool(t6))
                    t6 = null;
                  else {
                    t8 = $.$get$_traces();
                    if (A._isBool(t6) || typeof t6 == "number" || !t7 || t6 instanceof A._Record)
                      A.Expando__badExpandoKey(t6);
                    t6 = t8._jsWeakMap.get(t6);
                  }
                  if (t6 == null)
                    t6 = stackTrace;
                  A._logError(error, t6, line, repl, options, trackingLogger);
                } else
                  throw exception;
              }
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$goto = 8;
              return A._asyncAwait(t2.cancel$0(), $async$repl);
            case 8:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$repl, $async$completer);
    },
    _logError(error, stackTrace, line, repl, options, logger) {
      var t2, spacesBeforeError, t3,
        t1 = A.SourceSpanException.prototype.get$span.call(error, 0);
      if (t1.get$sourceUrl(t1) == null)
        if (!A._asBool(options._options.$index(0, "quiet")))
          t1 = logger._emittedDebug || logger._emittedWarning;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        A.print(error.toString$1$color(0, options.get$color()));
        return;
      }
      t1 = options.get$color() ? "" + "\x1b[31m" : "";
      t2 = A.SourceSpanException.prototype.get$span.call(error, 0);
      t2 = t2.get$start(t2);
      spacesBeforeError = repl.prompt.length + t2.file.getColumn$1(t2.offset);
      if (options.get$color()) {
        t2 = A.SourceSpanException.prototype.get$span.call(error, 0);
        t2 = t2.get$start(t2);
        t2 = t2.file.getColumn$1(t2.offset) < line.length;
      } else
        t2 = false;
      if (t2)
        t1 = t1 + ("\x1b[1F\x1b[" + spacesBeforeError + "C") + (A.SourceSpanException.prototype.get$span.call(error, 0).get$text() + "\n");
      t2 = B.JSString_methods.$mul(" ", spacesBeforeError);
      t3 = A.SourceSpanException.prototype.get$span.call(error, 0);
      t3 = t1 + t2 + (B.JSString_methods.$mul("^", Math.max(1, t3.get$length(t3))) + "\n");
      t1 = options.get$color() ? t3 + "\x1b[0m" : t3;
      t1 += "Error: " + error._span_exception$_message + "\n";
      if (A._asBool(options._options.$index(0, "trace")))
        t1 += A.Trace_Trace$from(stackTrace).get$terse().toString$0(0);
      A.print(B.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1));
    },
    repl_warn: function repl_warn(t0) {
      this.logger = t0;
    },
    watch(options, graph) {
      return A.watch$body(options, graph);
    },
    watch$body(options, graph) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1, t2, t3, t4, t5, t6, dirWatcher, sourcesToDestinations, t7, t0;
      var $async$watch = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              options._ensureSources$0();
              t1 = options.__ExecutableOptions__sourceDirectoriesToDestinations_F;
              t1 === $ && A.throwUnnamedLateFieldNI();
              t2 = type$.String;
              t1 = t1.cast$2$0(0, t2, t2);
              t1 = A.List_List$_of(t1.get$keys(t1), t2);
              for (options._ensureSources$0(), t3 = options._sourcesToDestinations.cast$2$0(0, t2, t2), t3 = J.get$iterator$ax(t3.get$keys(t3)); t3.moveNext$0();) {
                t4 = t3.get$current(t3);
                t1.push($.$get$context().dirname$1(t4));
              }
              t3 = options._options;
              B.JSArray_methods.addAll$1(t1, type$.List_String._as(t3.$index(0, "load-path")));
              t4 = A._asBool(t3.$index(0, "poll"));
              t5 = type$.Stream_WatchEvent;
              t6 = A.PathMap__create(null, t5);
              t5 = new A.StreamGroup(B._StreamGroupState_dormant, A.LinkedHashMap_LinkedHashMap$_empty(t5, type$.nullable_StreamSubscription_WatchEvent), type$.StreamGroup_WatchEvent);
              t5.__StreamGroup__controller_A = A.StreamController_StreamController(t5.get$_onCancel(), t5.get$_onListen(), t5.get$_onPause(), t5.get$_onResume(), true, type$.WatchEvent);
              dirWatcher = new A.MultiDirWatcher(new A.PathMap(t6, type$.PathMap_Stream_WatchEvent), t5, t4);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(t1, new A.watch_closure(dirWatcher), A._arrayInstanceType(t1)._eval$1("MappedListIterable<1,Future<~>>")), false, type$.void), $async$watch);
            case 3:
              // returning from await.
              options._ensureSources$0();
              sourcesToDestinations = options._sourcesToDestinations.cast$2$0(0, t2, t2);
              for (t1 = J.get$iterator$ax(sourcesToDestinations.get$keys(sourcesToDestinations)); t1.moveNext$0();) {
                t4 = t1.get$current(t1);
                t5 = $.$get$FilesystemImporter_cwd();
                t6 = self.process;
                if (t6 == null)
                  t6 = null;
                else {
                  t6 = J.get$release$x(t6);
                  t6 = t6 == null ? null : J.get$name$x(t6);
                }
                t6 = J.$eq$(t6, "node") ? self.process : null;
                if (!J.$eq$(t6 == null ? null : J.get$platform$x(t6), "win32")) {
                  t6 = self.process;
                  if (t6 == null)
                    t6 = null;
                  else {
                    t6 = J.get$release$x(t6);
                    t6 = t6 == null ? null : J.get$name$x(t6);
                  }
                  t6 = J.$eq$(t6, "node") ? self.process : null;
                  t6 = J.$eq$(t6 == null ? null : J.get$platform$x(t6), "darwin");
                } else
                  t6 = true;
                if (t6) {
                  t6 = $.$get$context();
                  t7 = A._realCasePath(t6.normalize$1(t6.absolute$15(t4, null, null, null, null, null, null, null, null, null, null, null, null, null, null)));
                  t0 = t7;
                  t7 = t6;
                  t6 = t0;
                } else {
                  t6 = $.$get$context();
                  t7 = t6.canonicalize$1(0, t4);
                  t0 = t7;
                  t7 = t6;
                  t6 = t0;
                }
                graph.addCanonical$4$recanonicalize(t5, t7.toUri$1(t6), t7.toUri$1(t4), false);
              }
              $async$goto = 4;
              return A._asyncAwait(A.compileStylesheets(options, graph, sourcesToDestinations, true), $async$watch);
            case 4:
              // returning from await.
              if (!$async$result && A._asBool(t3.$index(0, "stop-on-error"))) {
                t1 = dirWatcher._group.__StreamGroup__controller_A;
                t1 === $ && A.throwUnnamedLateFieldNI();
                new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$1(0, null).cancel$0();
                // goto return
                $async$goto = 1;
                break;
              }
              A.print("Sass is watching for changes. Press Ctrl-C to stop.\n");
              $async$goto = 5;
              return A._asyncAwait(new A._Watcher(options, graph, A.LinkedHashMap_LinkedHashMap$_empty(t2, t2)).watch$1(0, dirWatcher), $async$watch);
            case 5:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$watch, $async$completer);
    },
    watch_closure: function watch_closure(t0) {
      this.dirWatcher = t0;
    },
    _Watcher: function _Watcher(t0, t1, t2) {
      this._watch$_options = t0;
      this._graph = t1;
      this._toRecompile = t2;
    },
    _Watcher__debounceEvents_closure: function _Watcher__debounceEvents_closure() {
    },
    EmptyExtensionStore: function EmptyExtensionStore() {
    },
    Extension: function Extension(t0, t1, t2, t3, t4) {
      var _ = this;
      _.extender = t0;
      _.target = t1;
      _.mediaContext = t2;
      _.isOptional = t3;
      _.span = t4;
    },
    Extender: function Extender(t0, t1) {
      this.selector = t0;
      this.isOriginal = t1;
      this._extension = null;
    },
    ExtensionStore__extendOrReplace(selector, source, targets, mode, span) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _i, complex, compound, t9, t10, t11, _i0, simple, t12, _i1, t13, t14,
        extender = A.ExtensionStore$_mode(mode);
      if (!selector.accept$1(B._IsInvisibleVisitor_true))
        extender._originals.addAll$1(0, selector.components);
      for (t1 = targets.components, t2 = t1.length, t3 = source.components, t4 = t3.length, t5 = type$.ComplexSelector, t6 = type$.Extension, t7 = type$.SimpleSelector, t8 = type$.Map_ComplexSelector_Extension, _i = 0; _i < t2; ++_i) {
        complex = t1[_i];
        compound = complex.get$singleCompound();
        if (compound == null)
          throw A.wrapException(A.SassScriptException$("Can't extend complex selector " + complex.toString$0(0) + ".", null));
        t9 = A.LinkedHashMap_LinkedHashMap$_empty(t7, t8);
        for (t10 = compound.components, t11 = t10.length, _i0 = 0; _i0 < t11; ++_i0) {
          simple = t10[_i0];
          t12 = A.LinkedHashMap_LinkedHashMap$_empty(t5, t6);
          for (_i1 = 0; _i1 < t4; ++_i1) {
            complex = t3[_i1];
            complex.get$specificity();
            t13 = new A.Extender(complex, false);
            t14 = new A.Extension(t13, simple, null, true, span);
            t13._extension = t14;
            t12.$indexSet(0, complex, t14);
          }
          t9.$indexSet(0, simple, t12);
        }
        selector = extender._extendList$2(selector, t9);
      }
      return selector;
    },
    ExtensionStore$() {
      var t1 = type$.SimpleSelector;
      return new A.ExtensionStore(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_ModifiableBox_SelectorList), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_ComplexSelector_Extension), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension), A.LinkedHashMap_LinkedHashMap$_empty(type$.ModifiableBox_SelectorList, type$.List_CssMediaQuery), new A.JsIdentityLinkedHashMap(type$.JsIdentityLinkedHashMap_SimpleSelector_int), new A._LinkedIdentityHashSet(type$._LinkedIdentityHashSet_ComplexSelector), B.ExtendMode_normal_normal);
    },
    ExtensionStore$_mode(_mode) {
      var t1 = type$.SimpleSelector;
      return new A.ExtensionStore(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Set_ModifiableBox_SelectorList), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_ComplexSelector_Extension), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Extension), A.LinkedHashMap_LinkedHashMap$_empty(type$.ModifiableBox_SelectorList, type$.List_CssMediaQuery), new A.JsIdentityLinkedHashMap(type$.JsIdentityLinkedHashMap_SimpleSelector_int), new A._LinkedIdentityHashSet(type$._LinkedIdentityHashSet_ComplexSelector), _mode);
    },
    ExtensionStore: function ExtensionStore(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._selectors = t0;
      _._extensions = t1;
      _._extensionsByExtender = t2;
      _._mediaContexts = t3;
      _._sourceSpecificity = t4;
      _._originals = t5;
      _._mode = t6;
    },
    ExtensionStore_extensionsWhereTarget_closure: function ExtensionStore_extensionsWhereTarget_closure() {
    },
    ExtensionStore__registerSelector_closure: function ExtensionStore__registerSelector_closure() {
    },
    ExtensionStore_addExtension_closure: function ExtensionStore_addExtension_closure() {
    },
    ExtensionStore_addExtension_closure0: function ExtensionStore_addExtension_closure0() {
    },
    ExtensionStore_addExtension_closure1: function ExtensionStore_addExtension_closure1(t0) {
      this.complex = t0;
    },
    ExtensionStore__extendExistingExtensions_closure: function ExtensionStore__extendExistingExtensions_closure() {
    },
    ExtensionStore__extendExistingExtensions_closure0: function ExtensionStore__extendExistingExtensions_closure0() {
    },
    ExtensionStore_addExtensions_closure: function ExtensionStore_addExtensions_closure() {
    },
    ExtensionStore__extendComplex_closure: function ExtensionStore__extendComplex_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.complex = t2;
    },
    ExtensionStore__extendComplex__closure: function ExtensionStore__extendComplex__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.complex = t2;
    },
    ExtensionStore__extendCompound_closure: function ExtensionStore__extendCompound_closure() {
    },
    ExtensionStore__extendCompound_closure0: function ExtensionStore__extendCompound_closure0() {
    },
    ExtensionStore__extendCompound_closure1: function ExtensionStore__extendCompound_closure1(t0) {
      this.original = t0;
    },
    ExtensionStore__extendSimple_withoutPseudo: function ExtensionStore__extendSimple_withoutPseudo(t0, t1, t2) {
      this.$this = t0;
      this.extensions = t1;
      this.targetsUsed = t2;
    },
    ExtensionStore__extendSimple_closure: function ExtensionStore__extendSimple_closure(t0, t1) {
      this.$this = t0;
      this.withoutPseudo = t1;
    },
    ExtensionStore__extendSimple_closure0: function ExtensionStore__extendSimple_closure0() {
    },
    ExtensionStore__extendPseudo_closure: function ExtensionStore__extendPseudo_closure() {
    },
    ExtensionStore__extendPseudo_closure0: function ExtensionStore__extendPseudo_closure0() {
    },
    ExtensionStore__extendPseudo_closure1: function ExtensionStore__extendPseudo_closure1() {
    },
    ExtensionStore__extendPseudo_closure2: function ExtensionStore__extendPseudo_closure2(t0) {
      this.pseudo = t0;
    },
    ExtensionStore__extendPseudo_closure3: function ExtensionStore__extendPseudo_closure3(t0, t1) {
      this.pseudo = t0;
      this.selector = t1;
    },
    ExtensionStore__trim_closure: function ExtensionStore__trim_closure(t0, t1) {
      this._box_0 = t0;
      this.complex1 = t1;
    },
    ExtensionStore__trim_closure0: function ExtensionStore__trim_closure0(t0, t1) {
      this._box_0 = t0;
      this.complex1 = t1;
    },
    ExtensionStore_clone_closure: function ExtensionStore_clone_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.newSelectors = t1;
      _.oldToNewSelectors = t2;
      _.newMediaContexts = t3;
    },
    unifyComplex(complexes, span) {
      var t2, trailingCombinator, leadingCombinator, unifiedBase, t3, t4, _0_6_isSet, _0_6, t5, newLeadingCombinator, base, _1_1, newTrailingCombinator, unifiedBase0, t6, t7, t8, _null = null,
        t1 = J.getInterceptor$asx(complexes);
      if (t1.get$length(complexes) === 1)
        return complexes;
      for (t2 = t1.get$iterator(complexes), trailingCombinator = _null, leadingCombinator = trailingCombinator, unifiedBase = leadingCombinator; t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        if (t3.accept$1(B.C__IsUselessVisitor))
          return _null;
        t4 = t3.components;
        _0_6_isSet = t4.length === 1;
        if (_0_6_isSet) {
          _0_6 = t3.leadingCombinators;
          t5 = _0_6.length === 1;
        } else {
          _0_6 = _null;
          t5 = false;
        }
        if (t5) {
          newLeadingCombinator = (_0_6_isSet ? _0_6 : t3.leadingCombinators)[0];
          if (leadingCombinator == null)
            leadingCombinator = newLeadingCombinator;
          else if (!(leadingCombinator.$ti._is(newLeadingCombinator) && J.$eq$(newLeadingCombinator.value, leadingCombinator.value)))
            return _null;
        }
        base = B.JSArray_methods.get$last(t4);
        _1_1 = base.combinators;
        if (_1_1.length === 1) {
          newTrailingCombinator = _1_1[0];
          if (trailingCombinator != null)
            t3 = !(trailingCombinator.$ti._is(newTrailingCombinator) && J.$eq$(newTrailingCombinator.value, trailingCombinator.value));
          else
            t3 = false;
          if (t3)
            return _null;
          trailingCombinator = newTrailingCombinator;
        }
        unifiedBase0 = base.selector;
        if (unifiedBase == null)
          unifiedBase = unifiedBase0;
        else {
          unifiedBase = A.unifyCompound(unifiedBase, unifiedBase0);
          if (unifiedBase == null)
            return _null;
        }
      }
      t2 = type$.JSArray_ComplexSelector;
      t3 = A._setArrayType([], t2);
      for (t4 = t1.get$iterator(complexes); t4.moveNext$0();) {
        t5 = t4.get$current(t4);
        t6 = t5.components;
        t7 = t6.length;
        if (t7 > 1) {
          t8 = t5.leadingCombinators;
          t3.push(A.ComplexSelector$(t8, B.JSArray_methods.take$1(t6, t7 - 1), t5.span, t5.lineBreak));
        }
      }
      t4 = leadingCombinator == null ? B.List_empty0 : A._setArrayType([leadingCombinator], type$.JSArray_CssValue_Combinator);
      unifiedBase.toString;
      t5 = trailingCombinator == null ? B.List_empty0 : A._setArrayType([trailingCombinator], type$.JSArray_CssValue_Combinator);
      base = A.ComplexSelector$(t4, A._setArrayType([new A.ComplexSelectorComponent(unifiedBase, A.List_List$unmodifiable(t5, type$.CssValue_Combinator), span)], type$.JSArray_ComplexSelectorComponent), span, t1.any$1(complexes, new A.unifyComplex_closure()));
      if (t3.length === 0)
        t1 = A._setArrayType([base], t2);
      else {
        t1 = A.List_List$_of(A.IterableExtension_get_exceptLast(t3), type$.ComplexSelector);
        t1.push(B.JSArray_methods.get$last(t3).concatenate$2(base, span));
      }
      return A.weave(t1, span, false);
    },
    unifyCompound(compound1, compound2) {
      var t1, t2, pseudoElementFound, _i, simple, unified,
        result = compound1.components,
        pseudoResult = A._setArrayType([], type$.JSArray_SimpleSelector);
      for (t1 = compound2.components, t2 = t1.length, pseudoElementFound = false, _i = 0; _i < t2; ++_i) {
        simple = t1[_i];
        if (pseudoElementFound && simple instanceof A.PseudoSelector) {
          unified = simple.unify$1(pseudoResult);
          if (unified == null)
            return null;
          pseudoResult = unified;
        } else {
          pseudoElementFound = B.JSBool_methods.$or(pseudoElementFound, simple instanceof A.PseudoSelector && !simple.isClass);
          unified = simple.unify$1(result);
          if (unified == null)
            return null;
          result = unified;
        }
      }
      t1 = A.List_List$_of(result, type$.SimpleSelector);
      B.JSArray_methods.addAll$1(t1, pseudoResult);
      return A.CompoundSelector$(t1, compound1.span);
    },
    unifyUniversalAndElement(selector1, selector2) {
      var namespace, $name, t1,
        _0_0 = A._namespaceAndName(selector1, "selector1"),
        namespace1 = _0_0._0,
        name1 = _0_0._1,
        _1_0 = A._namespaceAndName(selector2, "selector2"),
        namespace2 = _1_0._0,
        name2 = _1_0._1;
      if (namespace1 == namespace2 || namespace2 === "*")
        namespace = namespace1;
      else {
        if (namespace1 !== "*")
          return null;
        namespace = namespace2;
      }
      if (name1 == name2 || name2 == null)
        $name = name1;
      else {
        if (!(name1 == null || name1 === "*"))
          return null;
        $name = name2;
      }
      t1 = selector1.span;
      return $name == null ? new A.UniversalSelector(namespace, t1) : new A.TypeSelector(new A.QualifiedName($name, namespace), t1);
    },
    _namespaceAndName(selector, $name) {
      var t1, _0_4;
      $label0$0: {
        if (selector instanceof A.UniversalSelector) {
          t1 = new A._Record_2(selector.namespace, null);
          break $label0$0;
        }
        if (selector instanceof A.TypeSelector) {
          _0_4 = selector.name;
          t1 = new A._Record_2(_0_4.namespace, _0_4.name);
          break $label0$0;
        }
        t1 = A.throwExpression(A.ArgumentError$value(selector, $name, string$.must_b));
      }
      return t1;
    },
    weave(complexes, span, forceLineBreak) {
      var complex, t2, prefixes, t3, t4, t5, t6, i, t7, t8, _i, t9, t10, _i0, parentPrefix, t11, t12,
        t1 = J.getInterceptor$asx(complexes);
      if (t1.get$length(complexes) === 1) {
        complex = t1.$index(complexes, 0);
        if (!forceLineBreak || complex.lineBreak)
          return complexes;
        return A._setArrayType([A.ComplexSelector$(complex.leadingCombinators, complex.components, complex.span, true)], type$.JSArray_ComplexSelector);
      }
      t2 = type$.JSArray_ComplexSelector;
      prefixes = A._setArrayType([t1.get$first(complexes)], t2);
      for (t1 = t1.skip$1(complexes, 1), t3 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t3._eval$1("ListIterator<ListIterable.E>")), t4 = type$.ComplexSelectorComponent, t3 = t3._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t5 = t1.__internal$_current;
        if (t5 == null)
          t5 = t3._as(t5);
        t6 = t5.components;
        if (t6.length === 1) {
          for (i = 0; i < prefixes.length; ++i)
            prefixes[i] = prefixes[i].concatenate$3$forceLineBreak(t5, span, forceLineBreak);
          continue;
        }
        t7 = A._setArrayType([], t2);
        for (t8 = prefixes.length, _i = 0; _i < prefixes.length; prefixes.length === t8 || (0, A.throwConcurrentModificationError)(prefixes), ++_i) {
          t9 = A._weaveParents(prefixes[_i], t5, span);
          if (t9 == null)
            t9 = B.List_empty1;
          t10 = t9.length;
          _i0 = 0;
          for (; _i0 < t9.length; t9.length === t10 || (0, A.throwConcurrentModificationError)(t9), ++_i0) {
            parentPrefix = t9[_i0];
            t11 = B.JSArray_methods.get$last(t6);
            t12 = A.List_List$_of(parentPrefix.components, t4);
            t12.push(t11);
            t11 = parentPrefix.lineBreak || forceLineBreak;
            t7.push(A.ComplexSelector$(parentPrefix.leadingCombinators, t12, span, t11));
          }
        }
        prefixes = t7;
      }
      return prefixes;
    },
    _weaveParents(prefix, base, span) {
      var t1, queue1, queue2, trailingCombinators, _0_1, _0_3, _0_3_isSet, _0_30, rootish2, t2, rootish1, rootish, t3, t0, rootish_case_1, groups1, groups2, lcs, choices, t4, _i, group, t5, t6, t7, _i0, chunk, t8, t9, _null = null,
        leadingCombinators = A._mergeLeadingCombinators(prefix.leadingCombinators, base.leadingCombinators);
      if (leadingCombinators == null)
        return _null;
      t1 = type$.ComplexSelectorComponent;
      queue1 = A.QueueList_QueueList$from(prefix.components, t1);
      queue2 = A.QueueList_QueueList$from(A.IterableExtension_get_exceptLast(base.components), t1);
      trailingCombinators = A._mergeTrailingCombinators(queue1, queue2, span, _null);
      if (trailingCombinators == null)
        return _null;
      $label0$0: {
        _0_1 = A._firstIfRootish(queue1);
        _0_3 = A._firstIfRootish(queue2);
        _0_3_isSet = _0_1 != null;
        _0_30 = _null;
        rootish2 = _null;
        t2 = false;
        if (_0_3_isSet) {
          rootish1 = _0_1 == null ? t1._as(_0_1) : _0_1;
          t2 = _0_3 != null;
          if (t2)
            rootish2 = _0_3 == null ? t1._as(_0_3) : _0_3;
          _0_30 = _0_3;
        } else
          rootish1 = _null;
        if (t2) {
          rootish = A.unifyCompound(rootish1.selector, rootish2.selector);
          if (rootish == null)
            return _null;
          t1 = rootish1.combinators;
          t2 = rootish1.span;
          t3 = type$.CssValue_Combinator;
          queue1.addFirst$1(new A.ComplexSelectorComponent(rootish, A.List_List$unmodifiable(t1, t3), t2));
          queue2.addFirst$1(new A.ComplexSelectorComponent(rootish, A.List_List$unmodifiable(rootish2.combinators, t3), t2));
          break $label0$0;
        }
        t2 = _null;
        t3 = false;
        if (_0_1 != null) {
          if (_0_3_isSet)
            t2 = _0_30;
          else {
            t2 = _0_3;
            _0_30 = t2;
            _0_3_isSet = true;
          }
          t2 = t2 == null;
          t3 = t2 ? _0_1 : _null;
          t0 = t3;
          t3 = t2;
          t2 = t0;
        }
        if (!t3)
          if (_0_1 == null) {
            if (_0_3_isSet)
              t3 = _0_30;
            else {
              t3 = _0_3;
              _0_30 = t3;
              _0_3_isSet = true;
            }
            t3 = t3 != null;
            if (t3) {
              rootish_case_1 = _0_3_isSet ? _0_30 : _0_3;
              if (rootish_case_1 == null)
                rootish_case_1 = t1._as(rootish_case_1);
              t1 = rootish_case_1;
            } else
              t1 = t2;
            t2 = t3;
          } else {
            t1 = t2;
            t2 = false;
          }
        else {
          t1 = t2;
          t2 = true;
        }
        if (t2) {
          queue1.addFirst$1(t1);
          queue2.addFirst$1(t1);
        }
      }
      groups1 = A._groupSelectors(queue1);
      groups2 = A._groupSelectors(queue2);
      t1 = type$.List_ComplexSelectorComponent;
      lcs = A.longestCommonSubsequence(groups2, groups1, new A._weaveParents_closure(span), t1);
      choices = A._setArrayType([], type$.JSArray_List_Iterable_ComplexSelectorComponent);
      for (t2 = lcs.length, t3 = type$.JSArray_Iterable_ComplexSelectorComponent, t4 = type$.JSArray_ComplexSelectorComponent, _i = 0; _i < lcs.length; lcs.length === t2 || (0, A.throwConcurrentModificationError)(lcs), ++_i) {
        group = lcs[_i];
        t5 = A._setArrayType([], t3);
        for (t6 = A._chunks(groups1, groups2, new A._weaveParents_closure0(group), t1), t7 = t6.length, _i0 = 0; _i0 < t6.length; t6.length === t7 || (0, A.throwConcurrentModificationError)(t6), ++_i0) {
          chunk = t6[_i0];
          t8 = A._setArrayType([], t4);
          for (t9 = B.JSArray_methods.get$iterator(chunk); t9.moveNext$0();)
            B.JSArray_methods.addAll$1(t8, t9.get$current(0));
          t5.push(t8);
        }
        choices.push(t5);
        choices.push(A._setArrayType([group], t3));
        groups1.removeFirst$0();
        groups2.removeFirst$0();
      }
      t2 = A._setArrayType([], t3);
      for (t1 = A._chunks(groups1, groups2, new A._weaveParents_closure1(), t1), t3 = t1.length, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        chunk = t1[_i];
        t5 = A._setArrayType([], t4);
        for (t6 = B.JSArray_methods.get$iterator(chunk); t6.moveNext$0();)
          B.JSArray_methods.addAll$1(t5, t6.get$current(0));
        t2.push(t5);
      }
      choices.push(t2);
      B.JSArray_methods.addAll$1(choices, trailingCombinators);
      t1 = A._setArrayType([], type$.JSArray_ComplexSelector);
      for (t2 = J.get$iterator$ax(A.paths(new A.WhereIterable(choices, new A._weaveParents_closure2(), type$.WhereIterable_List_Iterable_ComplexSelectorComponent), type$.Iterable_ComplexSelectorComponent)), t3 = !prefix.lineBreak, t5 = base.lineBreak; t2.moveNext$0();) {
        t6 = t2.get$current(t2);
        t7 = A._setArrayType([], t4);
        for (t6 = J.get$iterator$ax(t6); t6.moveNext$0();)
          B.JSArray_methods.addAll$1(t7, t6.get$current(t6));
        t1.push(A.ComplexSelector$(leadingCombinators, t7, span, !t3 || t5));
      }
      return t1;
    },
    _firstIfRootish(queue) {
      var first, t1, t2, _i, simple, t3;
      if (queue.get$length(0) >= 1) {
        first = queue.$index(0, 0);
        for (t1 = first.selector.components, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          simple = t1[_i];
          t3 = false;
          if (simple instanceof A.PseudoSelector)
            if (simple.isClass)
              t3 = $._rootishPseudoClasses.contains$1(0, simple.normalizedName);
          if (t3) {
            queue.removeFirst$0();
            return first;
          }
        }
      }
      return null;
    },
    _mergeLeadingCombinators(combinators1, combinators2) {
      var _0_4, t1, t2, _0_7, t3, _0_11, _0_11_isSet, combinators, _null = null;
      $label0$0: {
        _0_4 = combinators2;
        t1 = _null;
        t2 = type$.List_dynamic;
        _0_7 = combinators1.length;
        t3 = _0_7;
        t3 = t3 > 1;
        _0_11 = _null;
        if (!t3) {
          t3 = _0_4;
          _0_11_isSet = t2._is(t3);
          if (_0_11_isSet) {
            t3 = _0_4;
            _0_11 = (t3 == null ? type$.List_CssValue_Combinator._as(t3) : t3).length;
            t3 = _0_11;
            t3 = t3 > 1;
          } else
            t3 = false;
        } else {
          _0_11_isSet = false;
          t3 = true;
        }
        if (t3)
          break $label0$0;
        t3 = _0_7;
        t3 = t3 <= 0;
        if (t3)
          combinators = _0_4;
        else
          combinators = t1;
        t1 = t3;
        if (!t1) {
          t1 = false;
          t3 = _0_4;
          if (t2._is(t3)) {
            if (_0_11_isSet)
              t1 = _0_11;
            else {
              t1 = _0_4;
              _0_11 = (t1 == null ? type$.List_CssValue_Combinator._as(t1) : t1).length;
              t1 = _0_11;
            }
            t1 = t1 <= 0;
          }
          combinators = combinators1;
        } else
          t1 = true;
        if (t1) {
          t1 = combinators;
          break $label0$0;
        }
        t1 = B.C_ListEquality.equals$2(0, combinators1, combinators2) ? combinators1 : _null;
        break $label0$0;
      }
      return t1;
    },
    _mergeTrailingCombinators(components1, components2, span, result) {
      var _0_1, t1, _1_1, t2, t3, _4_1, _4_3, _4_5_isSet, _4_4, _4_5, component1, component2, t4, t5, choices, _2_0, _4_6, _4_7, followingComponents, nextComponents, _4_4_isSet, _4_9, _4_6_isSet, _4_7_isSet, _4_10_isSet, _4_10, next, following, _3_0, _4_4_isSet0, siblingComponents_case_0, siblingComponents_case_1, t6, combinator2, unified, t7, combinatorComponents_case_0, descendantComponents_case_0, t0, combinator_case_1, descendantComponents_case_1, combinatorComponents_case_1, _null = null;
      if (result == null)
        result = A.QueueList$(_null, type$.List_List_ComplexSelectorComponent);
      $label0$0: {
        _0_1 = components1.get$length(0);
        if (_0_1 >= 1) {
          t1 = components1.$index(0, _0_1 - 1).combinators;
          break $label0$0;
        }
        t1 = B.List_empty0;
        break $label0$0;
      }
      $label1$1: {
        _1_1 = components2.get$length(0);
        if (_1_1 >= 1) {
          t2 = components2.$index(0, _1_1 - 1).combinators;
          break $label1$1;
        }
        t2 = B.List_empty0;
        break $label1$1;
      }
      t3 = t1.length;
      if (t3 === 0 && t2.length === 0)
        return result;
      if (t3 > 1 || t2.length > 1)
        return _null;
      $label2$2: {
        t3 = A.IterableExtension_get_firstOrNull(t1);
        t3 = t3 == null ? _null : t3.value;
        t2 = A.IterableExtension_get_firstOrNull(t2);
        t2 = [t3, t2 == null ? _null : t2.value, components1, components2];
        _4_1 = t2[0];
        _4_3 = B.Combinator_55N === _4_1;
        _4_5_isSet = _4_3;
        if (_4_5_isSet) {
          _4_4 = t2[1];
          _4_5 = B.Combinator_55N === _4_4;
          t3 = _4_5;
        } else {
          _4_4 = _null;
          _4_5 = _4_4;
          t3 = false;
        }
        if (t3) {
          component1 = components1.removeLast$0(0);
          component2 = components2.removeLast$0(0);
          t2 = component1.selector;
          t3 = component2.selector;
          if (A.compoundIsSuperselector(t2, t3, _null))
            result.addFirst$1(A._setArrayType([A._setArrayType([component2], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          else {
            t4 = type$.JSArray_ComplexSelectorComponent;
            t5 = type$.JSArray_List_ComplexSelectorComponent;
            if (A.compoundIsSuperselector(t3, t2, _null))
              result.addFirst$1(A._setArrayType([A._setArrayType([component1], t4)], t5));
            else {
              choices = A._setArrayType([A._setArrayType([component1, component2], t4), A._setArrayType([component2, component1], t4)], t5);
              _2_0 = A.unifyCompound(t2, t3);
              if (_2_0 != null)
                choices.push(A._setArrayType([new A.ComplexSelectorComponent(_2_0, A.List_List$unmodifiable(A._setArrayType([B.JSArray_methods.get$first(t1)], type$.JSArray_CssValue_Combinator), type$.CssValue_Combinator), span)], t4));
              result.addFirst$1(choices);
            }
          }
          break $label2$2;
        }
        _4_6 = _null;
        _4_7 = _null;
        followingComponents = _null;
        nextComponents = _null;
        if (_4_3) {
          if (_4_5_isSet) {
            t3 = _4_4;
            _4_4_isSet = _4_5_isSet;
          } else {
            _4_4 = t2[1];
            t3 = _4_4;
            _4_4_isSet = true;
          }
          _4_9 = B.Combinator_bOP === t3;
          _4_6_isSet = _4_9;
          if (_4_6_isSet) {
            _4_6 = t2[2];
            _4_7 = t2[3];
            nextComponents = _4_7;
            followingComponents = _4_6;
          }
          t3 = _4_6_isSet;
          _4_7_isSet = t3;
        } else {
          _4_9 = _null;
          _4_4_isSet = _4_5_isSet;
          _4_6_isSet = false;
          _4_7_isSet = false;
          t3 = false;
        }
        _4_10_isSet = !t3;
        if (_4_10_isSet) {
          _4_10 = B.Combinator_bOP === _4_1;
          t3 = _4_10;
          if (t3) {
            if (_4_5_isSet)
              t3 = _4_5;
            else {
              if (_4_4_isSet)
                t3 = _4_4;
              else {
                _4_4 = t2[1];
                t3 = _4_4;
                _4_4_isSet = true;
              }
              _4_5 = B.Combinator_55N === t3;
              t3 = _4_5;
              _4_5_isSet = true;
            }
            if (t3) {
              if (_4_6_isSet)
                nextComponents = _4_6;
              else {
                _4_6 = t2[2];
                nextComponents = _4_6;
                _4_6_isSet = true;
              }
              if (_4_7_isSet)
                followingComponents = _4_7;
              else {
                _4_7 = t2[3];
                followingComponents = _4_7;
                _4_7_isSet = true;
              }
            }
          } else
            t3 = false;
        } else {
          _4_10 = _null;
          t3 = true;
        }
        if (t3) {
          next = nextComponents.removeLast$0(0);
          following = followingComponents.removeLast$0(0);
          t1 = following.selector;
          t2 = next.selector;
          t3 = type$.JSArray_ComplexSelectorComponent;
          t4 = type$.JSArray_List_ComplexSelectorComponent;
          if (A.compoundIsSuperselector(t1, t2, _null))
            result.addFirst$1(A._setArrayType([A._setArrayType([next], t3)], t4));
          else {
            t4 = A._setArrayType([A._setArrayType([following, next], t3)], t4);
            _3_0 = A.unifyCompound(t1, t2);
            if (_3_0 != null)
              t4.push(A._setArrayType([new A.ComplexSelectorComponent(_3_0, A.List_List$unmodifiable(next.combinators, type$.CssValue_Combinator), span)], t3));
            result.addFirst$1(t4);
          }
          break $label2$2;
        }
        t3 = _null;
        if (B.Combinator_0mp === _4_1) {
          _4_4_isSet0 = true;
          if (_4_3)
            t4 = _4_9;
          else {
            if (_4_4_isSet)
              t4 = _4_4;
            else {
              _4_4 = t2[1];
              t4 = _4_4;
              _4_4_isSet = _4_4_isSet0;
            }
            _4_9 = B.Combinator_bOP === t4;
            t4 = _4_9;
          }
          if (!t4)
            if (_4_5_isSet)
              t4 = _4_5;
            else {
              if (_4_4_isSet)
                t4 = _4_4;
              else {
                _4_4 = t2[1];
                t4 = _4_4;
                _4_4_isSet = _4_4_isSet0;
              }
              _4_5 = B.Combinator_55N === t4;
              t4 = _4_5;
            }
          else
            t4 = true;
          if (t4) {
            if (_4_7_isSet)
              siblingComponents_case_0 = _4_7;
            else {
              _4_7 = t2[3];
              siblingComponents_case_0 = _4_7;
              _4_7_isSet = true;
            }
            t3 = siblingComponents_case_0;
          }
        } else
          t4 = false;
        if (!t4) {
          if (_4_10_isSet)
            t4 = _4_10;
          else {
            _4_10 = B.Combinator_bOP === _4_1;
            t4 = _4_10;
          }
          if (!t4)
            t4 = _4_3;
          else
            t4 = true;
          if (t4) {
            if (_4_4_isSet)
              t4 = _4_4;
            else {
              _4_4 = t2[1];
              t4 = _4_4;
              _4_4_isSet = true;
            }
            t4 = B.Combinator_0mp === t4;
            if (t4) {
              if (_4_6_isSet)
                siblingComponents_case_1 = _4_6;
              else {
                _4_6 = t2[2];
                siblingComponents_case_1 = _4_6;
                _4_6_isSet = true;
              }
              t3 = siblingComponents_case_1;
            }
          } else
            t4 = false;
        } else
          t4 = true;
        if (t4) {
          result.addFirst$1(A._setArrayType([A._setArrayType([t3.removeLast$0(0)], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          break $label2$2;
        }
        t3 = _4_1 == null;
        t4 = !t3;
        t5 = false;
        if (t4) {
          _4_4_isSet0 = true;
          if (_4_4_isSet)
            t6 = _4_4;
          else {
            _4_4 = t2[1];
            t6 = _4_4;
            _4_4_isSet = _4_4_isSet0;
          }
          if (t6 != null) {
            if (_4_4_isSet)
              combinator2 = _4_4;
            else {
              _4_4 = t2[1];
              combinator2 = _4_4;
              _4_4_isSet = _4_4_isSet0;
            }
            t5 = _4_1 === (combinator2 == null ? type$.Combinator._as(combinator2) : combinator2);
          }
        }
        if (t5) {
          unified = A.unifyCompound(components1.removeLast$0(0).selector, components2.removeLast$0(0).selector);
          if (unified == null)
            return _null;
          result.addFirst$1(A._setArrayType([A._setArrayType([new A.ComplexSelectorComponent(unified, A.List_List$unmodifiable(A._setArrayType([B.JSArray_methods.get$first(t1)], type$.JSArray_CssValue_Combinator), type$.CssValue_Combinator), span)], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          break $label2$2;
        }
        t1 = _null;
        t5 = _null;
        t6 = _null;
        t7 = false;
        if (t4) {
          if (_4_4_isSet)
            t4 = _4_4;
          else {
            _4_4 = t2[1];
            t4 = _4_4;
            _4_4_isSet = true;
          }
          t4 = t4 == null;
          if (t4) {
            if (_4_6_isSet)
              combinatorComponents_case_0 = _4_6;
            else {
              _4_6 = t2[2];
              combinatorComponents_case_0 = _4_6;
              _4_6_isSet = true;
            }
            if (_4_7_isSet)
              descendantComponents_case_0 = _4_7;
            else {
              _4_7 = t2[3];
              descendantComponents_case_0 = _4_7;
              _4_7_isSet = true;
            }
            t1 = descendantComponents_case_0;
            t6 = t1;
            t1 = _4_1;
            t5 = combinatorComponents_case_0;
          }
          t0 = t6;
          t6 = t4;
          t4 = t5;
          t5 = t0;
        } else {
          t4 = t5;
          t5 = t6;
          t6 = t7;
        }
        if (!t6)
          if (t3) {
            if (_4_4_isSet)
              t3 = _4_4;
            else {
              _4_4 = t2[1];
              t3 = _4_4;
              _4_4_isSet = true;
            }
            t3 = t3 != null;
            if (t3) {
              combinator_case_1 = _4_4_isSet ? _4_4 : t2[1];
              if (combinator_case_1 == null)
                combinator_case_1 = type$.Combinator._as(combinator_case_1);
              descendantComponents_case_1 = _4_6_isSet ? _4_6 : t2[2];
              combinatorComponents_case_1 = _4_7_isSet ? _4_7 : t2[3];
              t1 = combinatorComponents_case_1;
              t2 = descendantComponents_case_1;
              t4 = t2;
              t2 = t1;
              t1 = combinator_case_1;
            } else {
              t2 = t4;
              t4 = t5;
            }
            t0 = t4;
            t4 = t3;
            t3 = t0;
          } else {
            t3 = t5;
            t2 = t4;
            t4 = false;
          }
        else {
          t3 = t5;
          t2 = t4;
          t4 = true;
        }
        if (t4) {
          if (t1 === B.Combinator_0mp) {
            t1 = A.IterableExtension_get_lastOrNull(t3);
            t1 = t1 == null ? _null : A.compoundIsSuperselector(t1.selector, t2.get$last(t2).selector, _null);
            t1 = t1 === true;
          } else
            t1 = false;
          if (t1)
            t3.removeLast$0(0);
          result.addFirst$1(A._setArrayType([A._setArrayType([t2.removeLast$0(0)], type$.JSArray_ComplexSelectorComponent)], type$.JSArray_List_ComplexSelectorComponent));
          break $label2$2;
        }
        return _null;
      }
      return A._mergeTrailingCombinators(components1, components2, span, result);
    },
    _mustUnify(complex1, complex2) {
      var t2, t3, t4,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.SimpleSelector);
      for (t2 = J.get$iterator$ax(complex1); t2.moveNext$0();)
        for (t3 = B.JSArray_methods.get$iterator(t2.get$current(t2).selector.components), t4 = new A.WhereIterator(t3, A.functions___isUnique$closure()); t4.moveNext$0();)
          t1.add$1(0, t3.get$current(0));
      if (t1._collection$_length === 0)
        return false;
      return J.any$1$ax(complex2, new A._mustUnify_closure(t1));
    },
    _isUnique(simple) {
      var t1;
      if (!(simple instanceof A.IDSelector))
        t1 = simple instanceof A.PseudoSelector && !simple.isClass;
      else
        t1 = true;
      return t1;
    },
    _chunks(queue1, queue2, done, $T) {
      var chunk2, _0_4, _0_7_isSet, _0_1, _0_7, _0_5, chunk, _0_5_isSet, t2,
        t1 = $T._eval$1("JSArray<0>"),
        chunk1 = A._setArrayType([], t1);
      for (; !done.call$1(queue1);)
        chunk1.push(queue1.removeFirst$0());
      chunk2 = A._setArrayType([], t1);
      for (; !done.call$1(queue2);)
        chunk2.push(queue2.removeFirst$0());
      $label0$0: {
        _0_4 = chunk1.length <= 0;
        _0_7_isSet = _0_4;
        _0_1 = chunk1;
        if (_0_7_isSet) {
          _0_7 = chunk2.length <= 0;
          t1 = _0_7;
          _0_5 = chunk2;
        } else {
          _0_7 = null;
          _0_5 = null;
          t1 = false;
        }
        if (t1) {
          t1 = A._setArrayType([], $T._eval$1("JSArray<List<0>>"));
          break $label0$0;
        }
        if (_0_4)
          if (_0_7_isSet) {
            chunk = _0_5;
            _0_5_isSet = _0_7_isSet;
          } else {
            chunk = chunk2;
            _0_5 = chunk;
            _0_5_isSet = true;
          }
        else {
          _0_5_isSet = _0_7_isSet;
          chunk = null;
        }
        if (!_0_4) {
          if (_0_7_isSet)
            t1 = _0_7;
          else {
            _0_7 = (_0_5_isSet ? _0_5 : chunk2).length <= 0;
            t1 = _0_7;
          }
          chunk = _0_1;
        } else
          t1 = true;
        if (t1) {
          t1 = A._setArrayType([chunk], $T._eval$1("JSArray<List<0>>"));
          break $label0$0;
        }
        t1 = A.List_List$_of(chunk1, $T);
        B.JSArray_methods.addAll$1(t1, chunk2);
        t2 = A.List_List$_of(chunk2, $T);
        B.JSArray_methods.addAll$1(t2, chunk1);
        t1 = A._setArrayType([t1, t2], $T._eval$1("JSArray<List<0>>"));
        break $label0$0;
      }
      return t1;
    },
    paths(choices, $T) {
      return J.fold$2$ax(choices, A._setArrayType([A._setArrayType([], $T._eval$1("JSArray<0>"))], $T._eval$1("JSArray<List<0>>")), new A.paths_closure($T));
    },
    _groupSelectors(complex) {
      var t2, t3, t4,
        groups = A.QueueList$(null, type$.List_ComplexSelectorComponent),
        t1 = type$.JSArray_ComplexSelectorComponent,
        group = A._setArrayType([], t1);
      for (t2 = complex.$ti, t3 = new A.ListIterator(complex, complex.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"); t3.moveNext$0();) {
        t4 = t3.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        group.push(t4);
        if (t4.combinators.length === 0) {
          groups._queue_list$_add$1(group);
          group = A._setArrayType([], t1);
        }
      }
      if (group.length !== 0)
        groups._queue_list$_add$1(group);
      return groups;
    },
    listIsSuperselector(list1, list2) {
      return B.JSArray_methods.every$1(list2, new A.listIsSuperselector_closure(list1));
    },
    _complexIsParentSuperselector(complex1, complex2) {
      var t1, base, t2;
      if (J.get$length$asx(complex1) > J.get$length$asx(complex2))
        return false;
      t1 = $.$get$bogusSpan();
      base = new A.ComplexSelectorComponent(A.CompoundSelector$(A._setArrayType([new A.PlaceholderSelector("<temp>", t1)], type$.JSArray_SimpleSelector), t1), A.List_List$unmodifiable(B.List_empty0, type$.CssValue_Combinator), t1);
      t1 = type$.ComplexSelectorComponent;
      t2 = A.List_List$_of(complex1, t1);
      t2.push(base);
      t1 = A.List_List$_of(complex2, t1);
      t1.push(base);
      return A.complexIsSuperselector(t2, t1);
    },
    complexIsSuperselector(complex1, complex2) {
      var t1, t2, previousCombinator, i1, i2, remaining1, remaining2, component1, t3, t4, endOfSubselector, component2, t5, combinator1, _null = null;
      if (B.JSArray_methods.get$last(complex1).combinators.length !== 0)
        return false;
      if (B.JSArray_methods.get$last(complex2).combinators.length !== 0)
        return false;
      for (t1 = A._arrayInstanceType(complex2), t2 = t1._precomputed1, t1 = t1._eval$1("SubListIterable<1>"), previousCombinator = _null, i1 = 0, i2 = 0; true; previousCombinator = combinator1) {
        remaining1 = complex1.length - i1;
        remaining2 = complex2.length - i2;
        if (remaining1 === 0 || remaining2 === 0)
          return false;
        if (remaining1 > remaining2)
          return false;
        component1 = complex1[i1];
        t3 = component1.combinators;
        if (t3.length > 1)
          return false;
        if (remaining1 === 1)
          if (B.JSArray_methods.any$1(complex2, new A.complexIsSuperselector_closure()))
            return false;
          else {
            t1 = component1.selector;
            t2 = B.JSArray_methods.get$last(complex2).selector;
            return A.compoundIsSuperselector(t1, t2, t1.get$hasComplicatedSuperselectorSemantics() ? B.JSArray_methods.sublist$2(complex2, i2, complex2.length - 1) : _null);
          }
        for (t4 = component1.selector, endOfSubselector = i2; true;) {
          component2 = complex2[endOfSubselector];
          if (component2.combinators.length > 1)
            return false;
          t5 = t4.get$hasComplicatedSuperselectorSemantics() ? B.JSArray_methods.sublist$2(complex2, i2, endOfSubselector) : _null;
          if (A.compoundIsSuperselector(t4, component2.selector, t5))
            break;
          ++endOfSubselector;
          if (endOfSubselector === complex2.length - 1)
            return false;
        }
        t4 = new A.SubListIterable(complex2, 0, endOfSubselector, t1);
        t4.SubListIterable$3(complex2, 0, endOfSubselector, t2);
        if (!A._compatibleWithPreviousCombinator(previousCombinator, t4.skip$1(0, i2)))
          return false;
        component2 = complex2[endOfSubselector];
        combinator1 = A.IterableExtension_get_firstOrNull(t3);
        if (!A._isSupercombinator(combinator1, A.IterableExtension_get_firstOrNull(component2.combinators)))
          return false;
        ++i1;
        i2 = endOfSubselector + 1;
        if (complex1.length - i1 === 1) {
          t3 = combinator1 == null;
          if (J.$eq$(t3 ? _null : combinator1.value, B.Combinator_55N)) {
            t3 = complex2.length - 1;
            t4 = new A.SubListIterable(complex2, 0, t3, t1);
            t4.SubListIterable$3(complex2, 0, t3, t2);
            if (!t4.skip$1(0, i2).every$1(0, new A.complexIsSuperselector_closure0(combinator1)))
              return false;
          } else if (!t3)
            if (complex2.length - i2 > 1)
              return false;
        }
      }
    },
    _compatibleWithPreviousCombinator(previous, parents) {
      if (parents.get$isEmpty(parents))
        return true;
      if (previous == null)
        return true;
      if (previous.value !== B.Combinator_55N)
        return false;
      return parents.every$1(0, new A._compatibleWithPreviousCombinator_closure());
    },
    _isSupercombinator(combinator1, combinator2) {
      var t2, t3,
        t1 = true;
      if (!J.$eq$(combinator1, combinator2)) {
        t2 = combinator1 == null;
        if (t2)
          t3 = J.$eq$(combinator2 == null ? null : combinator2.value, B.Combinator_0mp);
        else
          t3 = false;
        if (!t3)
          if (J.$eq$(t2 ? null : combinator1.value, B.Combinator_55N))
            t1 = J.$eq$(combinator2 == null ? null : combinator2.value, B.Combinator_bOP);
          else
            t1 = false;
      }
      return t1;
    },
    compoundIsSuperselector(compound1, compound2, parents) {
      var t1, _0_1, _0_5, _0_5_isSet, _0_50, index1, pseudo2, index2, t2, t3, pseudo1, t4, t5, _i, simple1, _null = null;
      if (!compound1.get$hasComplicatedSuperselectorSemantics() && !compound2.get$hasComplicatedSuperselectorSemantics()) {
        t1 = compound1.components;
        if (t1.length > compound2.components.length)
          return false;
        return B.JSArray_methods.every$1(t1, new A.compoundIsSuperselector_closure(compound2));
      }
      _0_1 = A._findPseudoElementIndexed(compound1);
      _0_5 = A._findPseudoElementIndexed(compound2);
      t1 = type$.Record_2_nullable_Object_and_nullable_Object;
      _0_5_isSet = t1._is(_0_1);
      _0_50 = _null;
      index1 = _null;
      pseudo2 = _null;
      index2 = _null;
      t2 = false;
      if (_0_5_isSet) {
        t3 = _0_1 == null;
        pseudo1 = (t3 ? t1._as(_0_1) : _0_1)._0;
        index1 = (t3 ? t1._as(_0_1) : _0_1)._1;
        t2 = t1._is(_0_5);
        if (t2) {
          t3 = _0_5 == null;
          pseudo2 = (t3 ? t1._as(_0_5) : _0_5)._0;
          index2 = (t3 ? t1._as(_0_5) : _0_5)._1;
        }
        t1 = t2;
        _0_50 = _0_5;
      } else {
        t1 = t2;
        pseudo1 = _null;
      }
      if (t1) {
        if (pseudo1.isSuperselector$1(pseudo2)) {
          t1 = compound1.components;
          t2 = type$.int;
          t3 = A._arrayInstanceType(t1)._precomputed1;
          t4 = compound2.components;
          t5 = A._arrayInstanceType(t4)._precomputed1;
          t1 = A._compoundComponentsIsSuperselector(A.SubListIterable$(t1, 0, A.checkNotNullable(index1, "count", t2), t3), A.SubListIterable$(t4, 0, A.checkNotNullable(index2, "count", t2), t5), parents) && A._compoundComponentsIsSuperselector(A.SubListIterable$(t1, index1 + 1, _null, t3), A.SubListIterable$(t4, index2 + 1, _null, t5), parents);
        } else
          t1 = false;
        return t1;
      }
      if (_0_1 == null)
        t1 = (_0_5_isSet ? _0_50 : _0_5) != null;
      else
        t1 = true;
      if (t1)
        return false;
      for (t1 = compound1.components, t2 = t1.length, t3 = compound2.components, _i = 0; _i < t2; ++_i) {
        simple1 = t1[_i];
        if (simple1 instanceof A.PseudoSelector)
          t4 = simple1.selector != null;
        else
          t4 = false;
        if (t4) {
          if (!A._selectorPseudoIsSuperselector(simple1, compound2, parents))
            return false;
        } else if (!B.JSArray_methods.any$1(t3, simple1.get$isSuperselector()))
          return false;
      }
      return true;
    },
    _findPseudoElementIndexed(compound) {
      var t1, t2, i, simple;
      for (t1 = compound.components, t2 = t1.length, i = 0; i < t2; ++i) {
        simple = t1[i];
        if (simple instanceof A.PseudoSelector && !simple.isClass)
          return new A._Record_2(simple, i);
      }
      return null;
    },
    _compoundComponentsIsSuperselector(compound1, compound2, parents) {
      var t1;
      if (compound1.get$length(0) === 0)
        return true;
      if (compound2.get$length(0) === 0)
        compound2 = A._setArrayType([new A.UniversalSelector("*", $.$get$bogusSpan())], type$.JSArray_SimpleSelector);
      t1 = $.$get$bogusSpan();
      return A.compoundIsSuperselector(A.CompoundSelector$(compound1, t1), A.CompoundSelector$(compound2, t1), parents);
    },
    _selectorPseudoIsSuperselector(pseudo1, compound2, parents) {
      var selector1 = pseudo1.selector;
      if (selector1 == null)
        throw A.wrapException(A.ArgumentError$("Selector " + pseudo1.toString$0(0) + " must have a selector argument.", null));
      switch (pseudo1.normalizedName) {
        case "is":
        case "matches":
        case "any":
        case "where":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure(selector1)) || B.JSArray_methods.any$1(selector1.components, new A._selectorPseudoIsSuperselector_closure0(parents, compound2));
        case "has":
        case "host":
        case "host-context":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure1(selector1));
        case "slotted":
          return A._selectorPseudoArgs(compound2, pseudo1.name, false).any$1(0, new A._selectorPseudoIsSuperselector_closure2(selector1));
        case "not":
          return B.JSArray_methods.every$1(selector1.components, new A._selectorPseudoIsSuperselector_closure3(compound2, pseudo1));
        case "current":
          return A._selectorPseudoArgs(compound2, pseudo1.name, true).any$1(0, new A._selectorPseudoIsSuperselector_closure4(selector1));
        case "nth-child":
        case "nth-last-child":
          return B.JSArray_methods.any$1(compound2.components, new A._selectorPseudoIsSuperselector_closure5(pseudo1, selector1));
        default:
          throw A.wrapException("unreachable");
      }
    },
    _selectorPseudoArgs(compound, $name, isClass) {
      var t1 = type$.WhereTypeIterable_PseudoSelector;
      return new A.NonNullsIterable(new A.MappedIterable(new A.WhereIterable(new A.WhereTypeIterable(compound.components, t1), new A._selectorPseudoArgs_closure(isClass, $name), t1._eval$1("WhereIterable<Iterable.E>")), new A._selectorPseudoArgs_closure0(), t1._eval$1("MappedIterable<Iterable.E,SelectorList?>")), type$.NonNullsIterable_SelectorList);
    },
    unifyComplex_closure: function unifyComplex_closure() {
    },
    _weaveParents_closure: function _weaveParents_closure(t0) {
      this.span = t0;
    },
    _weaveParents_closure0: function _weaveParents_closure0(t0) {
      this.group = t0;
    },
    _weaveParents_closure1: function _weaveParents_closure1() {
    },
    _weaveParents_closure2: function _weaveParents_closure2() {
    },
    _mustUnify_closure: function _mustUnify_closure(t0) {
      this.uniqueSelectors = t0;
    },
    _mustUnify__closure: function _mustUnify__closure(t0) {
      this.uniqueSelectors = t0;
    },
    paths_closure: function paths_closure(t0) {
      this.T = t0;
    },
    paths__closure: function paths__closure(t0, t1) {
      this.paths = t0;
      this.T = t1;
    },
    paths___closure: function paths___closure(t0, t1) {
      this.option = t0;
      this.T = t1;
    },
    listIsSuperselector_closure: function listIsSuperselector_closure(t0) {
      this.list1 = t0;
    },
    listIsSuperselector__closure: function listIsSuperselector__closure(t0) {
      this.complex1 = t0;
    },
    complexIsSuperselector_closure: function complexIsSuperselector_closure() {
    },
    complexIsSuperselector_closure0: function complexIsSuperselector_closure0(t0) {
      this.combinator1 = t0;
    },
    _compatibleWithPreviousCombinator_closure: function _compatibleWithPreviousCombinator_closure() {
    },
    compoundIsSuperselector_closure: function compoundIsSuperselector_closure(t0) {
      this.compound2 = t0;
    },
    _selectorPseudoIsSuperselector_closure: function _selectorPseudoIsSuperselector_closure(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure0: function _selectorPseudoIsSuperselector_closure0(t0, t1) {
      this.parents = t0;
      this.compound2 = t1;
    },
    _selectorPseudoIsSuperselector_closure1: function _selectorPseudoIsSuperselector_closure1(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure2: function _selectorPseudoIsSuperselector_closure2(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure3: function _selectorPseudoIsSuperselector_closure3(t0, t1) {
      this.compound2 = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector__closure: function _selectorPseudoIsSuperselector__closure(t0, t1) {
      this.complex = t0;
      this.pseudo1 = t1;
    },
    _selectorPseudoIsSuperselector___closure: function _selectorPseudoIsSuperselector___closure(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector___closure0: function _selectorPseudoIsSuperselector___closure0(t0) {
      this.simple2 = t0;
    },
    _selectorPseudoIsSuperselector_closure4: function _selectorPseudoIsSuperselector_closure4(t0) {
      this.selector1 = t0;
    },
    _selectorPseudoIsSuperselector_closure5: function _selectorPseudoIsSuperselector_closure5(t0, t1) {
      this.pseudo1 = t0;
      this.selector1 = t1;
    },
    _selectorPseudoArgs_closure: function _selectorPseudoArgs_closure(t0, t1) {
      this.isClass = t0;
      this.name = t1;
    },
    _selectorPseudoArgs_closure0: function _selectorPseudoArgs_closure0() {
    },
    MergedExtension_merge(left, right) {
      var t2, t3, t4,
        t1 = left.extender.selector;
      if (!t1.$eq(0, right.extender.selector) || !left.target.$eq(0, right.target))
        throw A.wrapException(A.ArgumentError$(left.toString$0(0) + " and " + right.toString$0(0) + " aren't the same extension.", null));
      t2 = left.mediaContext;
      t3 = t2 == null;
      if (!t3) {
        t4 = right.mediaContext;
        t4 = t4 != null && !B.C_ListEquality.equals$2(0, t2, t4);
      } else
        t4 = false;
      if (t4)
        throw A.wrapException(A.SassException$("From " + left.span.message$1(0, "") + string$.x0aYou_m, right.span, null));
      if (right.isOptional && right.mediaContext == null)
        return left;
      if (left.isOptional && t3)
        return right;
      if (t3)
        t2 = right.mediaContext;
      t1.get$specificity();
      t1 = new A.Extender(t1, false);
      return t1._extension = new A.MergedExtension(left, right, t1, left.target, t2, true, left.span);
    },
    MergedExtension: function MergedExtension(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.extender = t2;
      _.target = t3;
      _.mediaContext = t4;
      _.isOptional = t5;
      _.span = t6;
    },
    ExtendMode: function ExtendMode(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    globalFunctions_closure: function globalFunctions_closure() {
    },
    _invert($arguments, global) {
      var t2, color, rgb, channel2, space, weight, inSpace, t3, _1_9, channel0, channel1, t4, _s6_ = "weight", _s5_ = "space",
        t1 = J.getInterceptor$asx($arguments),
        weightNumber = t1.$index($arguments, 1).assertNumber$1(_s6_);
      if (!(t1.$index($arguments, 0) instanceof A.SassNumber))
        t2 = global && t1.$index($arguments, 0).get$isSpecialNumber();
      else
        t2 = true;
      if (t2) {
        if (weightNumber._number$_value !== 100 || !weightNumber.hasUnit$1("%"))
          throw A.wrapException(string$.Only_oa);
        return A._functionString("invert", t1.take$1($arguments, 1));
      }
      color = t1.$index($arguments, 0).assertColor$1("color");
      if (t1.$index($arguments, 2).$eq(0, B.C__SassNull)) {
        t1 = color._space;
        if (!t1.get$isLegacyInternal())
          throw A.wrapException(A.SassScriptException$(string$.To_usei + color.toString$0(0) + ", you must provide a $space.", "color"));
        A._checkPercent(weightNumber, _s6_);
        rgb = color.toSpace$1(B.RgbColorSpace_i0P);
        channel2 = B.LinearChannel_vJ3;
        return A._mixLegacy(A.SassColor_SassColor$rgbInternal(A._invertChannel(rgb, B.LinearChannel_qXC, rgb.channel0OrNull), A._invertChannel(rgb, B.LinearChannel_Z5r, rgb.channel1OrNull), A._invertChannel(rgb, channel2, rgb.channel2OrNull), color.alphaOrNull, null), color, weightNumber).toSpace$1(t1);
      }
      t1 = t1.$index($arguments, 2).assertString$1(_s5_);
      t1.assertUnquoted$1(_s5_);
      space = A.ColorSpace_fromName(t1._string$_text, _s5_);
      weight = weightNumber.valueInRangeWithUnit$4(0, 100, _s6_, "%") / 100;
      if (A.fuzzyEquals(weight, 0))
        return color;
      inSpace = color.toSpace$1(space);
      $label0$0: {
        if (B.HwbColorSpace_guQ === space) {
          t1 = A._invertChannel(inSpace, space._channels[0], inSpace.channel0OrNull);
          t2 = inSpace.alphaOrNull;
          if (t2 == null)
            t2 = 0;
          t2 = A.SassColor_SassColor$hwb(t1, inSpace.channel2OrNull, inSpace.channel1OrNull, t2);
          t1 = t2;
          break $label0$0;
        }
        if (B.HslColorSpace_JQ2 === space || B.LchColorSpace_Bpv === space || B.OklchColorSpace_9Gj === space) {
          t1 = space._channels;
          t2 = A._invertChannel(inSpace, t1[0], inSpace.channel0OrNull);
          t1 = A._invertChannel(inSpace, t1[2], inSpace.channel2OrNull);
          t3 = inSpace.alphaOrNull;
          if (t3 == null)
            t3 = 0;
          t3 = A.SassColor_SassColor$forSpaceInternal(space, t2, inSpace.channel1OrNull, t1, t3);
          t1 = t3;
          break $label0$0;
        }
        _1_9 = space._channels;
        channel0 = _1_9[0];
        channel1 = _1_9[1];
        channel2 = _1_9[2];
        t1 = A._invertChannel(inSpace, channel0, inSpace.channel0OrNull);
        t2 = A._invertChannel(inSpace, channel1, inSpace.channel1OrNull);
        t3 = A._invertChannel(inSpace, channel2, inSpace.channel2OrNull);
        t4 = inSpace.alphaOrNull;
        t1 = A.SassColor_SassColor$forSpaceInternal(space, t1, t2, t3, t4 == null ? 0 : t4);
        break $label0$0;
      }
      return A.fuzzyEquals(weight, 1) ? t1.toSpace$2$legacyMissing(color._space, false) : color.interpolate$4$legacyMissing$weight(t1, A.InterpolationMethod$(space, null), false, 1 - weight);
    },
    _invertChannel(color, channel, value) {
      var _0_2_isSet, _0_2, t1;
      if (value == null)
        A._missingChannelError(color, channel.name);
      $label0$0: {
        _0_2_isSet = channel instanceof A.LinearChannel;
        if (_0_2_isSet) {
          _0_2 = channel.min;
          t1 = _0_2;
          t1 = t1 < 0;
        } else {
          _0_2 = null;
          t1 = false;
        }
        if (t1) {
          t1 = -value;
          break $label0$0;
        }
        if (_0_2_isSet)
          t1 = 0 === _0_2;
        else
          t1 = false;
        if (t1) {
          t1 = channel.max - value;
          break $label0$0;
        }
        if (channel.isPolarAngle) {
          t1 = B.JSNumber_methods.$mod(value + 180, 360);
          break $label0$0;
        }
        t1 = A.throwExpression(A.UnsupportedError$("Unknown channel " + channel.toString$0(0) + "."));
      }
      return t1;
    },
    _grayscale(colorArg) {
      var hsl, t2, oklch,
        color = colorArg.assertColor$1("color"),
        t1 = color._space;
      if (t1.get$isLegacyInternal()) {
        hsl = color.toSpace$1(B.HslColorSpace_JQ2);
        t2 = hsl.alphaOrNull;
        if (t2 == null)
          t2 = 0;
        return A.SassColor_SassColor$hsl(hsl.channel0OrNull, 0, hsl.channel2OrNull, t2).toSpace$2$legacyMissing(t1, false);
      } else {
        oklch = color.toSpace$1(B.OklchColorSpace_9Gj);
        t2 = oklch.alphaOrNull;
        if (t2 == null)
          t2 = 0;
        return A.SassColor_SassColor$forSpaceInternal(B.OklchColorSpace_9Gj, oklch.channel0OrNull, 0, oklch.channel2OrNull, t2).toSpace$1(t1);
      }
    },
    _updateComponents($arguments, adjust, change, scale) {
      var t2, t3, keywords, originalColor, spaceKeyword, alphaArg, color, channelArgs, channelInfo, t4, value, channelIndex, result, i, alphaNumber, _null = null, _s5_ = "space",
        t1 = J.getInterceptor$asx($arguments),
        argumentList = type$.SassArgumentList._as(t1.$index($arguments, 1));
      if (argumentList._list$_contents.length !== 0)
        throw A.wrapException(A.SassScriptException$(string$.Only_op, _null));
      argumentList._wereKeywordsAccessed = true;
      t2 = type$.String;
      t3 = type$.Value;
      keywords = A.LinkedHashMap_LinkedHashMap$of(argumentList._keywords, t2, t3);
      originalColor = t1.$index($arguments, 0).assertColor$1("color");
      t1 = keywords.remove$1(0, _s5_);
      spaceKeyword = t1 == null ? _null : t1.assertString$1(_s5_);
      if (spaceKeyword == null)
        spaceKeyword = _null;
      else
        spaceKeyword.assertUnquoted$1(_s5_);
      alphaArg = keywords.remove$1(0, "alpha");
      t1 = spaceKeyword == null;
      if (t1 && originalColor._space.get$isLegacyInternal() && keywords.__js_helper$_length !== 0) {
        t1 = A.NullableExtension_andThen(A._sniffLegacyColorSpace(keywords), new A._updateComponents_closure(originalColor));
        color = t1 == null ? originalColor : t1;
      } else
        color = A._colorInSpace(originalColor, t1 ? B.C__SassNull : spaceKeyword, true);
      channelArgs = A.List_List$filled(color.get$channels().length, _null, false, type$.nullable_Value);
      t1 = color._space;
      channelInfo = t1._channels;
      for (t2 = A.MapExtensions_get_pairs(keywords, t2, t3), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = {};
        t4 = t2.get$current(t2);
        t3.name = null;
        t3.name = t4._0;
        value = t4._1;
        channelIndex = B.JSArray_methods.indexWhere$1(channelInfo, new A._updateComponents_closure0(t3));
        if (channelIndex === -1)
          throw A.wrapException(A.SassScriptException$("Color space " + t1.toString$0(0) + " doesn't have a channel with this name.", t3.name));
        channelArgs[channelIndex] = value;
      }
      if (change)
        result = A._changeColor(color, channelArgs, alphaArg);
      else {
        t2 = A._setArrayType([], type$.JSArray_nullable_SassNumber);
        for (i = 0; i < 3; ++i) {
          t3 = channelArgs[i];
          t2.push(t3 == null ? _null : t3.assertNumber$1(channelInfo[i].name));
        }
        alphaNumber = alphaArg == null ? _null : alphaArg.assertNumber$1("alpha");
        result = scale ? A.SassColor_SassColor$forSpaceInternal(t1, A._scaleChannel(color, channelInfo[0], color.channel0OrNull, t2[0]), A._scaleChannel(color, channelInfo[1], color.channel1OrNull, t2[1]), A._scaleChannel(color, channelInfo[2], color.channel2OrNull, t2[2]), A._scaleChannel(color, B.LinearChannel_XL8, color.alphaOrNull, alphaNumber)) : A._adjustColor(color, t2, alphaNumber);
      }
      return result.toSpace$2$legacyMissing(originalColor._space, false);
    },
    _changeColor(color, channelArgs, alphaArg) {
      var t4, _s5_ = "alpha",
        t1 = A._channelForChange(channelArgs[0], color, 0),
        t2 = A._channelForChange(channelArgs[1], color, 1),
        t3 = A._channelForChange(channelArgs[2], color, 2);
      $label0$0: {
        if (alphaArg == null) {
          t4 = color.alphaOrNull;
          if (t4 == null)
            t4 = 0;
          break $label0$0;
        }
        t4 = A._isNone(alphaArg);
        if (t4) {
          t4 = null;
          break $label0$0;
        }
        t4 = alphaArg instanceof A.SassNumber;
        if (t4 && !alphaArg.get$hasUnits()) {
          t4 = alphaArg.valueInRange$3(0, 1, _s5_);
          break $label0$0;
        }
        if (t4 && alphaArg.hasUnit$1("%")) {
          t4 = alphaArg.valueInRangeWithUnit$4(0, 100, _s5_, "%") / 100;
          break $label0$0;
        }
        if (t4) {
          t4 = new A._changeColor_closure(alphaArg).call$0();
          break $label0$0;
        }
        t4 = A.throwExpression(A.SassScriptException$(alphaArg.toString$0(0) + ' is not a number or unquoted "none".', _s5_));
      }
      return A._colorFromChannels(color._space, t1, t2, t3, t4, false, false);
    },
    _channelForChange(channelArg, color, channel) {
      var _0_0, t1, t2;
      if (channelArg == null) {
        _0_0 = color.get$channelsOrNull()[channel];
        $label0$0: {
          if (_0_0 != null) {
            t1 = color._space;
            t2 = A.SassNumber_SassNumber(_0_0, (t1 === B.HslColorSpace_JQ2 || t1 === B.HwbColorSpace_guQ) && channel > 0 ? "%" : null);
            t1 = t2;
            break $label0$0;
          }
          t1 = null;
          break $label0$0;
        }
        return t1;
      }
      if (A._isNone(channelArg))
        return null;
      if (channelArg instanceof A.SassNumber)
        return channelArg;
      throw A.wrapException(A.SassScriptException$(channelArg.toString$0(0) + ' is not a number or unquoted "none".', color._space._channels[channel].name));
    },
    _scaleChannel(color, channel, oldValue, factorArg) {
      var t1, factor;
      if (factorArg == null)
        return oldValue;
      if (!(channel instanceof A.LinearChannel))
        throw A.wrapException(A.SassScriptException$("Channel isn't scalable.", channel.name));
      if (oldValue == null)
        A._missingChannelError(color, channel.name);
      t1 = channel.name;
      factorArg.assertUnit$2("%", t1);
      factor = factorArg.valueInRangeWithUnit$4(-100, 100, t1, "%") / 100;
      $label0$0: {
        if (0 === factor) {
          t1 = oldValue;
          break $label0$0;
        }
        if (factor > 0) {
          t1 = channel.max;
          t1 = oldValue >= t1 ? oldValue : oldValue + (t1 - oldValue) * factor;
          break $label0$0;
        }
        t1 = channel.min;
        t1 = oldValue <= t1 ? oldValue : oldValue + (oldValue - t1) * factor;
        break $label0$0;
      }
      return t1;
    },
    _adjustColor(color, channelArgs, alphaArg) {
      var t1 = color._space,
        t2 = t1._channels;
      return A.SassColor_SassColor$forSpaceInternal(t1, A._adjustChannel(color, t2[0], color.channel0OrNull, channelArgs[0]), A._adjustChannel(color, t2[1], color.channel1OrNull, channelArgs[1]), A._adjustChannel(color, t2[2], color.channel2OrNull, channelArgs[2]), A.NullableExtension_andThen(A._adjustChannel(color, B.LinearChannel_XL8, color.alphaOrNull, alphaArg), new A._adjustColor_closure()));
    },
    _adjustChannel(color, channel, oldValue, adjustmentArg) {
      var _0_1, _0_3, t1, _0_6_isSet, _0_6, _0_6_isSet0, t2, _0_11, result, min, max, _null = null;
      if (adjustmentArg == null)
        return oldValue;
      if (oldValue == null)
        A._missingChannelError(color, channel.name);
      $label0$0: {
        _0_1 = color._space;
        _0_3 = B.HslColorSpace_JQ2 === _0_1;
        t1 = _0_3;
        if (!t1)
          _0_6_isSet = B.HwbColorSpace_guQ === _0_1;
        else
          _0_6_isSet = true;
        if (_0_6_isSet) {
          t1 = channel.isPolarAngle;
          _0_6 = channel;
        } else {
          _0_6 = _null;
          t1 = false;
        }
        if (t1) {
          adjustmentArg = A.SassNumber_SassNumber(A._angleValue(adjustmentArg, "hue"), _null);
          break $label0$0;
        }
        t1 = false;
        if (_0_3) {
          _0_6_isSet0 = true;
          if (_0_6_isSet)
            t2 = _0_6;
          else {
            t2 = channel;
            _0_6_isSet = _0_6_isSet0;
            _0_6 = t2;
          }
          if (t2 instanceof A.LinearChannel) {
            if (_0_6_isSet)
              t1 = _0_6;
            else {
              t1 = channel;
              _0_6_isSet = _0_6_isSet0;
              _0_6 = t1;
            }
            _0_11 = type$.LinearChannel._as(t1).name;
            t1 = _0_11;
            if ("saturation" !== t1)
              t1 = "lightness" === _0_11;
            else
              t1 = true;
          }
        }
        if (t1) {
          A._checkPercent(adjustmentArg, channel.name);
          adjustmentArg = A.SassNumber_SassNumber(adjustmentArg._number$_value, "%");
          break $label0$0;
        }
        if (B.LinearChannel_XL8 === (_0_6_isSet ? _0_6 : channel) && adjustmentArg.get$hasUnits()) {
          A.warnForDeprecation("$alpha: Passing a number with unit " + adjustmentArg.get$unitString() + string$.x20is_de + adjustmentArg.unitSuggestion$1("alpha") + string$.x0a_Morex3af, B.Deprecation_jG1);
          adjustmentArg = A.SassNumber_SassNumber(adjustmentArg._number$_value, _null);
        }
      }
      t1 = A._channelFromValue(channel, adjustmentArg, false);
      t1.toString;
      result = oldValue + t1;
      $label1$1: {
        t1 = channel instanceof A.LinearChannel;
        min = _null;
        t2 = false;
        if (t1)
          if (channel.lowerClamped) {
            min = channel.min;
            t2 = result < min;
          }
        if (t2) {
          t1 = oldValue < min ? Math.max(oldValue, result) : min;
          break $label1$1;
        }
        max = _null;
        t2 = false;
        if (t1)
          if (channel.upperClamped) {
            max = channel.max;
            t1 = result > max;
          } else
            t1 = t2;
        else
          t1 = t2;
        if (t1) {
          t1 = oldValue > max ? Math.min(oldValue, result) : max;
          break $label1$1;
        }
        t1 = result;
        break $label1$1;
      }
      return t1;
    },
    _sniffLegacyColorSpace(keywords) {
      var t1, t2;
      for (t1 = new A.LinkedHashMapKeyIterator(keywords, keywords._modifications, keywords._first); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        if ("red" === t2 || "green" === t2 || "blue" === t2)
          return B.RgbColorSpace_i0P;
        if ("saturation" === t2 || "lightness" === t2)
          return B.HslColorSpace_JQ2;
        if ("whiteness" === t2 || "blackness" === t2)
          return B.HwbColorSpace_guQ;
      }
      return keywords.containsKey$1("hue") ? B.HslColorSpace_JQ2 : null;
    },
    _functionString($name, $arguments) {
      return new A.SassString($name + "(" + J.map$1$1$ax($arguments, new A._functionString_closure(), type$.String).join$1(0, ", ") + ")", false);
    },
    _removedColorFunction($name, argument, negative) {
      return A.BuiltInCallable$function($name, "$color, $amount", new A._removedColorFunction_closure($name, argument, negative), "sass:color");
    },
    _rgb($name, $arguments) {
      var t3, t4,
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null,
        t2 = true;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          }
      if (t2)
        return A._functionString($name, $arguments);
      t2 = t1.$index($arguments, 0).assertNumber$1("red");
      t3 = t1.$index($arguments, 1).assertNumber$1("green");
      t1 = t1.$index($arguments, 2).assertNumber$1("blue");
      t4 = A.NullableExtension_andThen(alpha, new A._rgb_closure());
      return A._colorFromChannels(B.RgbColorSpace_i0P, t2, t3, t1, t4 == null ? 1 : t4, true, true);
    },
    _rgbTwoArg($name, $arguments) {
      var t2, color,
        t1 = J.getInterceptor$asx($arguments),
        first = t1.$index($arguments, 0),
        second = t1.$index($arguments, 1);
      if (!first.get$isVar())
        t2 = !(first instanceof A.SassColor) && second.get$isVar();
      else
        t2 = true;
      if (t2)
        return A._functionString($name, $arguments);
      color = first.assertColor$1("color");
      if (!color._space.get$isLegacyInternal())
        throw A.wrapException(A.SassScriptException$("Expected " + color.toString$0(0) + string$.x20to_be_ + color.toString$0(0) + ", $alpha: " + second.toString$0(0) + ")", $name));
      color.assertLegacy$1("color");
      color = color.toSpace$1(B.RgbColorSpace_i0P);
      if (second.get$isSpecialNumber())
        return A._functionString($name, A._setArrayType([A.SassNumber_SassNumber(color.channel$1(0, "red"), null), A.SassNumber_SassNumber(color.channel$1(0, "green"), null), A.SassNumber_SassNumber(color.channel$1(0, "blue"), null), t1.$index($arguments, 1)], type$.JSArray_Value));
      t1 = A._percentageOrUnitless(t1.$index($arguments, 1).assertNumber$1("alpha"), 1, "alpha");
      return color.changeAlpha$1(isNaN(t1) ? 0 : B.JSNumber_methods.clamp$2(t1, 0, 1));
    },
    _hsl($name, $arguments) {
      var t3, t4,
        t1 = J.getInterceptor$asx($arguments),
        alpha = t1.get$length($arguments) > 3 ? t1.$index($arguments, 3) : null,
        t2 = true;
      if (!t1.$index($arguments, 0).get$isSpecialNumber())
        if (!t1.$index($arguments, 1).get$isSpecialNumber())
          if (!t1.$index($arguments, 2).get$isSpecialNumber()) {
            t2 = alpha == null ? null : alpha.get$isSpecialNumber();
            t2 = t2 === true;
          }
      if (t2)
        return A._functionString($name, $arguments);
      t2 = t1.$index($arguments, 0).assertNumber$1("hue");
      t3 = t1.$index($arguments, 1).assertNumber$1("saturation");
      t1 = t1.$index($arguments, 2).assertNumber$1("lightness");
      t4 = A.NullableExtension_andThen(alpha, new A._hsl_closure());
      return A._colorFromChannels(B.HslColorSpace_JQ2, t2, t3, t1, t4 == null ? 1 : t4, true, false);
    },
    _angleValue(angleValue, $name) {
      var angle = angleValue.assertNumber$1($name);
      if (angle.compatibleWithUnit$1("deg"))
        return angle.coerceValueToUnit$1("deg");
      A.warnForDeprecation("$" + $name + ": Passing a unit other than deg (" + angle.toString$0(0) + string$.x29x20is_d + angle.unitSuggestion$1($name) + string$.x0a_See_, B.Deprecation_jG1);
      return angle._number$_value;
    },
    _checkPercent(number, $name) {
      if (number.hasUnit$1("%"))
        return;
      A.warnForDeprecation("$" + $name + ": Passing a number without unit % (" + number.toString$0(0) + string$.x29x20is_d + number.unitSuggestion$2($name, "%") + string$.x0a_Morex3af, B.Deprecation_jG1);
    },
    _percentageOrUnitless(number, max, $name) {
      var value;
      if (!number.get$hasUnits())
        value = number._number$_value;
      else if (number.hasUnit$1("%"))
        value = max * number._number$_value / 100;
      else
        throw A.wrapException(A.SassScriptException$("Expected " + number.toString$0(0) + ' to have unit "%" or no units.', $name));
      return value;
    },
    _mixLegacy(color1, color2, weight) {
      var t2, alphaDistance, weight1, weight2, t3, t4, t5, t6, t7, t8,
        rgb1 = color1.toSpace$1(B.RgbColorSpace_i0P),
        rgb2 = color2.toSpace$1(B.RgbColorSpace_i0P),
        weightScale = weight.valueInRange$3(0, 100, "weight") / 100,
        normalizedWeight = weightScale * 2 - 1,
        t1 = color1.alphaOrNull;
      if (t1 == null)
        t1 = 0;
      t2 = color2.alphaOrNull;
      alphaDistance = t1 - (t2 == null ? 0 : t2);
      t1 = normalizedWeight * alphaDistance;
      weight1 = ((t1 === -1 ? normalizedWeight : (normalizedWeight + alphaDistance) / (1 + t1)) + 1) / 2;
      weight2 = 1 - weight1;
      t1 = rgb1.channel0OrNull;
      if (t1 == null)
        t1 = 0;
      t2 = rgb2.channel0OrNull;
      if (t2 == null)
        t2 = 0;
      t3 = rgb1.channel1OrNull;
      if (t3 == null)
        t3 = 0;
      t4 = rgb2.channel1OrNull;
      if (t4 == null)
        t4 = 0;
      t5 = rgb1.channel2OrNull;
      if (t5 == null)
        t5 = 0;
      t6 = rgb2.channel2OrNull;
      if (t6 == null)
        t6 = 0;
      t7 = rgb1.alphaOrNull;
      if (t7 == null)
        t7 = 0;
      t8 = rgb2.alphaOrNull;
      if (t8 == null)
        t8 = 0;
      return A.SassColor_SassColor$rgbInternal(t1 * weight1 + t2 * weight2, t3 * weight1 + t4 * weight2, t5 * weight1 + t6 * weight2, t7 * weightScale + t8 * (1 - weightScale), null);
    },
    _opacify($name, $arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      if (!color._space.get$isLegacyInternal())
        throw A.wrapException(A.SassScriptException$($name + string$.x28__is_oa, null));
      t1 = color.alphaOrNull;
      if (t1 == null)
        t1 = 0;
      t1 += amount.valueInRangeWithUnit$4(0, 1, "amount", "");
      result = color.changeAlpha$1(isNaN(t1) ? 0 : B.JSNumber_methods.clamp$2(t1, 0, 1));
      A.warnForDeprecation($name + "() is deprecated. " + A._suggestScaleAndAdjust(color, amount._number$_value, "alpha") + string$.x0a_Morex3ac, B.Deprecation_cyE);
      return result;
    },
    _transparentize($name, $arguments) {
      var result,
        t1 = J.getInterceptor$asx($arguments),
        color = t1.$index($arguments, 0).assertColor$1("color"),
        amount = t1.$index($arguments, 1).assertNumber$1("amount");
      if (!color._space.get$isLegacyInternal())
        throw A.wrapException(A.SassScriptException$($name + string$.x28__is_oa, null));
      t1 = color.alphaOrNull;
      if (t1 == null)
        t1 = 0;
      t1 -= amount.valueInRangeWithUnit$4(0, 1, "amount", "");
      result = color.changeAlpha$1(isNaN(t1) ? 0 : B.JSNumber_methods.clamp$2(t1, 0, 1));
      A.warnForDeprecation($name + "() is deprecated. " + A._suggestScaleAndAdjust(color, -amount._number$_value, "alpha") + string$.x0a_Morex3ac, B.Deprecation_cyE);
      return result;
    },
    _colorInSpace(colorUntyped, spaceUntyped, legacyMissing) {
      var t1, _s5_ = "space",
        color = colorUntyped.assertColor$1("color");
      if (spaceUntyped.$eq(0, B.C__SassNull))
        return color;
      t1 = spaceUntyped.assertString$1(_s5_);
      t1.assertUnquoted$1(_s5_);
      return color.toSpace$2$legacyMissing(A.ColorSpace_fromName(t1._string$_text, _s5_), legacyMissing);
    },
    _parseChannels(functionName, input, $name, space) {
      var parsedSlash, components, alphaValue, _2_0, _2_1, _2_5, _2_6_isSet, t1, _2_6, channels, first, rest, componentList, spaceName, i, channel, channelName, t2, t3, t4, _null = null;
      if (input.get$isVar())
        return A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
      parsedSlash = A._parseSlashChannels(input, $name);
      if (parsedSlash == null)
        return A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
      components = parsedSlash._0;
      alphaValue = parsedSlash._1;
      $label0$0: {
        _2_0 = components.assertCommonListStyle$2$allowSlash($name, false);
        _2_1 = _2_0.length;
        if (_2_1 <= 0)
          throw A.wrapException(A.SassScriptException$("Color component list may not be empty.", $name));
        _2_5 = _2_1 >= 1;
        _2_6_isSet = _2_5;
        t1 = false;
        if (_2_6_isSet) {
          _2_6 = _2_0[0];
          if (_2_6 instanceof A.SassString) {
            type$.SassString._as(_2_6);
            t1 = !_2_6._hasQuotes && _2_6._string$_text.toLowerCase() === "from";
          }
        } else
          _2_6 = _null;
        if (t1)
          return A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
        t1 = components.get$isVar();
        if (t1) {
          channels = A._setArrayType([components], type$.JSArray_Value);
          break $label0$0;
        }
        channels = _null;
        if (_2_5) {
          first = _2_6_isSet ? _2_6 : _2_0[0];
          rest = B.JSArray_methods.sublist$1(_2_0, 1);
          componentList = _2_0;
        } else {
          componentList = channels;
          rest = componentList;
          first = _null;
        }
        if (_2_5) {
          if (space == null) {
            spaceName = first.assertString$1($name);
            spaceName.assertUnquoted$1($name);
            space = spaceName.get$isVar() ? _null : A.ColorSpace_fromName(spaceName._string$_text, $name);
            if (B.RgbColorSpace_i0P === space || B.HslColorSpace_JQ2 === space || B.HwbColorSpace_guQ === space || B.LabColorSpace_2nT === space || B.LchColorSpace_Bpv === space || B.OklabColorSpace_540 === space || B.OklchColorSpace_9Gj === space)
              throw A.wrapException(A.SassScriptException$(string$.The_co + A.S(space) + ". Use the " + A.S(space) + "() function instead.", $name));
            channels = rest;
          } else
            channels = componentList;
          for (i = 0; i < channels.length; ++i) {
            channel = channels[i];
            t1 = false;
            if (!channel.get$isSpecialNumber())
              if (!(channel instanceof A.SassNumber))
                t1 = !(channel instanceof A.SassString && !channel._hasQuotes && channel._string$_text.toLowerCase() === "none");
            if (t1) {
              t1 = _null;
              if (space == null)
                channelName = t1;
              else {
                t2 = space._channels;
                t2 = i < 3 ? t2[i] : _null;
                if (!(t2 == null))
                  t1 = new A._parseChannels_closure().call$1(t2.name);
                channelName = t1;
              }
              if (channelName == null)
                channelName = "channel " + (i + 1);
              throw A.wrapException(A.SassScriptException$("Expected " + channelName + " to be a number, was " + channel.toString$0(0) + ".", $name));
            }
          }
          break $label0$0;
        }
        throw A.wrapException("unreachable");
      }
      t1 = alphaValue == null;
      t2 = t1 ? _null : alphaValue.get$isSpecialNumber();
      if (t2 === true) {
        if (channels.length === 3 && B.Set_9FDyj.contains$1(0, space)) {
          t1 = A.List_List$_of(channels, type$.Value);
          alphaValue.toString;
          t1.push(alphaValue);
          t1 = A._functionString(functionName, t1);
        } else
          t1 = A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
        return t1;
      }
      $label1$1: {
        if (t1) {
          t2 = 1;
          break $label1$1;
        }
        if (alphaValue instanceof A.SassString && !alphaValue._hasQuotes && "none" === alphaValue._string$_text) {
          t2 = _null;
          break $label1$1;
        }
        t2 = A._percentageOrUnitless(alphaValue.assertNumber$1($name), 1, "alpha");
        t2 = isNaN(t2) ? 0 : B.JSNumber_methods.clamp$2(t2, 0, 1);
        break $label1$1;
      }
      if (space == null)
        return A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
      if (B.JSArray_methods.any$1(channels, new A._parseChannels_closure0())) {
        if (channels.length === 3 && B.Set_9FDyj.contains$1(0, space)) {
          t2 = A.List_List$_of(channels, type$.Value);
          if (!t1)
            t2.push(alphaValue);
          t1 = A._functionString(functionName, t2);
        } else
          t1 = A._functionString(functionName, A._setArrayType([input], type$.JSArray_Value));
        return t1;
      }
      if (channels.length !== 3)
        throw A.wrapException(A.SassScriptException$("The " + space.toString$0(0) + " color space has 3 channels but " + input.toString$0(0) + " has " + channels.length + ".", $name));
      t1 = channels[0];
      t1 = t1 instanceof A.SassNumber ? t1 : _null;
      t3 = channels[1];
      t3 = t3 instanceof A.SassNumber ? t3 : _null;
      t4 = channels[2];
      t4 = t4 instanceof A.SassNumber ? t4 : _null;
      return A._colorFromChannels(space, t1, t3, t4, t2, true, space === B.RgbColorSpace_i0P);
    },
    _parseSlashChannels(input, $name) {
      var _1_1, alphaValue, t1, components, _1_7, _1_8_isSet, _1_9, _1_8, initial, t2, _0_0, _0_1, channel3, alpha, _1_16, _1_16_isSet, _1_9_isSet, _1_9_isSet0, t3, _null = null,
        _1_0 = input.assertCommonListStyle$2$allowSlash($name, true);
      $label0$0: {
        _1_1 = _1_0.length;
        alphaValue = _null;
        t1 = false;
        if (_1_1 === 2) {
          components = _1_0[0];
          alphaValue = _1_0[1];
          t1 = input.get$separator(input) === B.ListSeparator_bRz;
        } else
          components = _null;
        if (t1) {
          t1 = new A._Record_2(components, alphaValue);
          break $label0$0;
        }
        t1 = input.get$separator(input);
        if (t1 === B.ListSeparator_bRz) {
          t1 = _1_0.length;
          A.throwExpression(A.SassScriptException$(string$.Only_2 + t1 + " " + A.pluralize("was", t1, "were") + " passed.", $name));
        }
        _1_7 = _1_1 >= 1;
        _1_8_isSet = _1_7;
        _1_9 = _null;
        t1 = false;
        if (_1_8_isSet) {
          _1_8 = B.JSArray_methods.sublist$2(_1_0, 0, _1_1 - 1);
          initial = _1_8;
          _1_9 = _1_0[_1_1 - 1];
          t2 = _1_9;
          if (t2 instanceof A.SassString) {
            type$.SassString._as(_1_9);
            t1 = !_1_9._hasQuotes;
          }
        } else {
          initial = _null;
          _1_8 = initial;
        }
        if (t1) {
          if (_1_8_isSet)
            t1 = _1_9;
          else {
            _1_9 = _1_0[_1_1 - 1];
            t1 = _1_9;
          }
          _0_0 = type$.SassString._as(t1)._string$_text.split("/");
          $label1$1: {
            _0_1 = _0_0.length;
            if (_0_1 === 1) {
              t1 = new A._Record_2(input, _null);
              break $label1$1;
            }
            if (_0_1 === 2) {
              channel3 = _0_0[0];
              alpha = _0_0[1];
              t1 = A.List_List$_of(initial, type$.Value);
              t1.push(A._parseNumberOrString(channel3));
              t1 = new A._Record_2(A.SassList$(t1, B.ListSeparator_qSL, false), A._parseNumberOrString(alpha));
              break $label1$1;
            }
            t1 = _null;
            break $label1$1;
          }
          break $label0$0;
        }
        _1_16 = _null;
        _1_16_isSet = false;
        t1 = false;
        if (_1_7) {
          _1_9_isSet = true;
          if (_1_8_isSet)
            initial = _1_8;
          else {
            _1_8 = B.JSArray_methods.sublist$2(_1_0, 0, _1_1 - 1);
            initial = _1_8;
          }
          if (_1_8_isSet) {
            t2 = _1_9;
            _1_9_isSet0 = _1_8_isSet;
          } else {
            _1_9 = _1_0[_1_1 - 1];
            t2 = _1_9;
            _1_9_isSet0 = _1_9_isSet;
          }
          _1_16_isSet = t2 instanceof A.SassNumber;
          if (_1_16_isSet) {
            if (_1_9_isSet0) {
              t1 = _1_9;
              _1_9_isSet = _1_9_isSet0;
            } else {
              _1_9 = _1_0[_1_1 - 1];
              t1 = _1_9;
            }
            _1_16 = type$.SassNumber._as(t1).asSlash;
            t1 = _1_16;
            t1 = type$.Record_2_nullable_Object_and_nullable_Object._is(t1);
          } else
            _1_9_isSet = _1_9_isSet0;
        } else {
          initial = _null;
          _1_9_isSet = _1_8_isSet;
        }
        if (t1) {
          if (_1_16_isSet)
            t1 = _1_16;
          else {
            if (_1_9_isSet)
              t1 = _1_9;
            else {
              _1_9 = _1_0[_1_1 - 1];
              t1 = _1_9;
              _1_9_isSet = true;
            }
            _1_16 = type$.SassNumber._as(t1).asSlash;
            t1 = _1_16;
            _1_16_isSet = true;
          }
          if (t1 == null)
            t1 = type$.Record_2_nullable_Object_and_nullable_Object._as(t1);
          if (_1_16_isSet)
            t2 = _1_16;
          else {
            if (_1_9_isSet)
              t2 = _1_9;
            else {
              _1_9 = _1_0[_1_1 - 1];
              t2 = _1_9;
            }
            _1_16 = type$.SassNumber._as(t2).asSlash;
            t2 = _1_16;
          }
          if (t2 == null)
            t2 = type$.Record_2_nullable_Object_and_nullable_Object._as(t2);
          t3 = A.List_List$_of(initial, type$.Value);
          t3.push(t1._0);
          t1 = new A._Record_2(A.SassList$(t3, B.ListSeparator_qSL, false), t2._1);
          break $label0$0;
        }
        t1 = new A._Record_2(input, _null);
        break $label0$0;
      }
      return t1;
    },
    _parseNumberOrString(text) {
      var t1, expression, exception;
      try {
        t1 = A.ScssParser$(text, null);
        expression = t1._parseSingleProduction$1$1(t1.get$_number(), type$.NumberExpression);
        t1 = A.SassNumber_SassNumber(expression.value, expression.unit);
        return t1;
      } catch (exception) {
        if (type$.SassFormatException._is(A.unwrapException(exception)))
          return new A.SassString(text, false);
        else
          throw exception;
      }
    },
    _colorFromChannels(space, channel0, channel1, channel2, alpha, clamp, fromRgbFunction) {
      var t1, t2, whiteness, blackness, t3;
      switch (space) {
        case B.HslColorSpace_JQ2:
          if (channel1 != null)
            A._checkPercent(channel1, "saturation");
          if (channel2 != null)
            A._checkPercent(channel2, "lightness");
          t1 = space._channels;
          return A.SassColor_SassColor$hsl(A.NullableExtension_andThen(channel0, new A._colorFromChannels_closure()), A._channelFromValue(t1[1], A._forcePercent(channel1), clamp), A._channelFromValue(t1[2], A._forcePercent(channel2), clamp), alpha);
        case B.HwbColorSpace_guQ:
          t1 = channel1 == null;
          if (!t1)
            channel1.assertUnit$2("%", "whiteness");
          t2 = channel2 == null;
          if (!t2)
            channel2.assertUnit$2("%", "blackness");
          whiteness = t1 ? null : channel1._number$_value;
          blackness = t2 ? null : channel2._number$_value;
          if (whiteness != null && blackness != null && whiteness + blackness > 100) {
            t1 = whiteness + blackness;
            whiteness = whiteness / t1 * 100;
            blackness = blackness / t1 * 100;
          }
          return A.SassColor_SassColor$hwb(A.NullableExtension_andThen(channel0, new A._colorFromChannels_closure0()), whiteness, blackness, alpha);
        case B.RgbColorSpace_i0P:
          t1 = space._channels;
          t2 = A._channelFromValue(t1[0], channel0, clamp);
          t3 = A._channelFromValue(t1[1], channel1, clamp);
          t1 = A._channelFromValue(t1[2], channel2, clamp);
          return A.SassColor_SassColor$rgbInternal(t2, t3, t1, alpha, fromRgbFunction ? B.C__ColorFormatEnum : null);
        default:
          t1 = space._channels;
          return A.SassColor_SassColor$forSpaceInternal(space, A._channelFromValue(t1[0], channel0, clamp), A._channelFromValue(t1[1], channel1, clamp), A._channelFromValue(t1[2], channel2, clamp), alpha);
      }
    },
    _forcePercent(number) {
      var t1, _0_3;
      $label0$0: {
        if (number == null) {
          t1 = null;
          break $label0$0;
        }
        _0_3 = number.get$numeratorUnits(number);
        if (_0_3.length === 1)
          t1 = "%" === _0_3[0] && number.get$denominatorUnits(number).length <= 0;
        else
          t1 = false;
        if (t1) {
          t1 = number;
          break $label0$0;
        }
        t1 = A.SassNumber_SassNumber(number._number$_value, "%");
        break $label0$0;
      }
      return t1;
    },
    _channelFromValue(channel, value, clamp) {
      return A.NullableExtension_andThen(value, new A._channelFromValue_closure(channel, clamp));
    },
    _isNone(value) {
      return value instanceof A.SassString && !value._hasQuotes && value._string$_text.toLowerCase() === "none";
    },
    _channelFunction($name, space, getter, global, unit) {
      return A.BuiltInCallable$function($name, "$color", new A._channelFunction_closure(getter, unit, global, $name, space), "sass:color");
    },
    _suggestScaleAndAdjust(original, adjustment, channelName) {
      var t2, oldValue, newValue, factor, t3, suggestion,
        channel = channelName === "alpha" ? B.LinearChannel_XL8 : type$.LinearChannel._as(B.JSArray_methods.firstWhere$1(B.List_oAL, new A._suggestScaleAndAdjust_closure(channelName))),
        t1 = channel === B.LinearChannel_XL8;
      if (t1) {
        t2 = original.alphaOrNull;
        oldValue = t2 == null ? 0 : t2;
      } else
        oldValue = original.toSpace$1(B.HslColorSpace_JQ2).channel$1(0, channelName);
      newValue = oldValue + adjustment;
      if (adjustment !== 0) {
        factor = A._Cell$();
        t2 = channel.max;
        if (newValue > t2)
          factor.__late_helper$_value = 1;
        else {
          t3 = channel.min;
          if (newValue < t3)
            factor.__late_helper$_value = -1;
          else if (adjustment > 0)
            factor.__late_helper$_value = adjustment / (t2 - oldValue);
          else
            factor.__late_helper$_value = (newValue - oldValue) / (oldValue - t3);
        }
        suggestion = "Suggestion" + ("s:\n\ncolor.scale($color, $" + channelName + ": " + A.SassNumber_SassNumber(factor._readLocal$0() * 100, "%").toString$0(0) + ")\n");
      } else
        suggestion = "Suggestion:\n\n";
      return suggestion + ("color.adjust($color, $" + channelName + ": " + A.SassNumber_SassNumber(adjustment, t1 ? null : "%").toString$0(0) + ")");
    },
    _missingChannelError(color, channel) {
      return A.throwExpression(A.SassScriptException$(string$.Becaus + color.toString$0(0) + ").", channel));
    },
    _channelName(value) {
      var t1 = value.assertString$1("channel");
      t1.assertQuoted$1("channel");
      return t1._string$_text;
    },
    _function5($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:color");
    },
    global_closure0: function global_closure0() {
    },
    global_closure1: function global_closure1() {
    },
    global_closure2: function global_closure2() {
    },
    global_closure3: function global_closure3() {
    },
    global_closure4: function global_closure4() {
    },
    global_closure5: function global_closure5() {
    },
    global_closure6: function global_closure6() {
    },
    global_closure7: function global_closure7() {
    },
    global_closure8: function global_closure8() {
    },
    global_closure9: function global_closure9() {
    },
    global_closure10: function global_closure10() {
    },
    global_closure11: function global_closure11() {
    },
    global_closure12: function global_closure12() {
    },
    global_closure13: function global_closure13() {
    },
    global_closure14: function global_closure14() {
    },
    global_closure15: function global_closure15() {
    },
    global_closure16: function global_closure16() {
    },
    global_closure17: function global_closure17() {
    },
    global_closure18: function global_closure18() {
    },
    global_closure19: function global_closure19() {
    },
    global_closure20: function global_closure20() {
    },
    global_closure21: function global_closure21() {
    },
    global_closure22: function global_closure22() {
    },
    global_closure23: function global_closure23() {
    },
    global_closure24: function global_closure24() {
    },
    global_closure25: function global_closure25() {
    },
    global_closure26: function global_closure26() {
    },
    global_closure27: function global_closure27() {
    },
    global_closure28: function global_closure28() {
    },
    global_closure29: function global_closure29() {
    },
    global_closure30: function global_closure30() {
    },
    global_closure31: function global_closure31() {
    },
    global_closure32: function global_closure32() {
    },
    global_closure33: function global_closure33() {
    },
    global_closure34: function global_closure34() {
    },
    global_closure35: function global_closure35() {
    },
    global__closure: function global__closure() {
    },
    global_closure36: function global_closure36() {
    },
    global_closure37: function global_closure37() {
    },
    global_closure38: function global_closure38() {
    },
    global_closure39: function global_closure39() {
    },
    global_closure40: function global_closure40() {
    },
    global_closure41: function global_closure41() {
    },
    global_closure42: function global_closure42() {
    },
    module_closure1: function module_closure1() {
    },
    module_closure2: function module_closure2() {
    },
    module_closure3: function module_closure3() {
    },
    module_closure4: function module_closure4() {
    },
    module_closure5: function module_closure5() {
    },
    module_closure6: function module_closure6() {
    },
    module_closure7: function module_closure7() {
    },
    module_closure8: function module_closure8() {
    },
    module_closure9: function module_closure9() {
    },
    module_closure10: function module_closure10() {
    },
    module_closure11: function module_closure11() {
    },
    module_closure12: function module_closure12() {
    },
    module_closure13: function module_closure13() {
    },
    module_closure14: function module_closure14() {
    },
    module__closure2: function module__closure2() {
    },
    module_closure15: function module_closure15() {
    },
    module_closure16: function module_closure16() {
    },
    module_closure17: function module_closure17() {
    },
    module_closure18: function module_closure18() {
    },
    module_closure19: function module_closure19() {
    },
    module_closure20: function module_closure20() {
    },
    module_closure21: function module_closure21() {
    },
    module_closure22: function module_closure22() {
    },
    module__closure1: function module__closure1(t0) {
      this.channelName = t0;
    },
    module_closure23: function module_closure23() {
    },
    module_closure_toXyzNoMissing: function module_closure_toXyzNoMissing() {
    },
    module_closure24: function module_closure24() {
    },
    _mix_closure: function _mix_closure() {
    },
    _complement_closure: function _complement_closure() {
    },
    _adjust_closure: function _adjust_closure() {
    },
    _scale_closure: function _scale_closure() {
    },
    _change_closure: function _change_closure() {
    },
    _ieHexStr_closure: function _ieHexStr_closure() {
    },
    _ieHexStr_closure_hexString: function _ieHexStr_closure_hexString() {
    },
    _updateComponents_closure: function _updateComponents_closure(t0) {
      this.originalColor = t0;
    },
    _updateComponents_closure0: function _updateComponents_closure0(t0) {
      this._box_0 = t0;
    },
    _changeColor_closure: function _changeColor_closure(t0) {
      this.alphaArg = t0;
    },
    _adjustColor_closure: function _adjustColor_closure() {
    },
    _functionString_closure: function _functionString_closure() {
    },
    _removedColorFunction_closure: function _removedColorFunction_closure(t0, t1, t2) {
      this.name = t0;
      this.argument = t1;
      this.negative = t2;
    },
    _rgb_closure: function _rgb_closure() {
    },
    _hsl_closure: function _hsl_closure() {
    },
    _parseChannels_closure: function _parseChannels_closure() {
    },
    _parseChannels_closure0: function _parseChannels_closure0() {
    },
    _colorFromChannels_closure: function _colorFromChannels_closure() {
    },
    _colorFromChannels_closure0: function _colorFromChannels_closure0() {
    },
    _channelFromValue_closure: function _channelFromValue_closure(t0, t1) {
      this.channel = t0;
      this.clamp = t1;
    },
    _channelFunction_closure: function _channelFunction_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.getter = t0;
      _.unit = t1;
      _.global = t2;
      _.name = t3;
      _.space = t4;
    },
    _suggestScaleAndAdjust_closure: function _suggestScaleAndAdjust_closure(t0) {
      this.channelName = t0;
    },
    _function4($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:list");
    },
    _length_closure0: function _length_closure0() {
    },
    _nth_closure: function _nth_closure() {
    },
    _setNth_closure: function _setNth_closure() {
    },
    _join_closure: function _join_closure() {
    },
    _append_closure0: function _append_closure0() {
    },
    _zip_closure: function _zip_closure() {
    },
    _zip__closure: function _zip__closure() {
    },
    _zip__closure0: function _zip__closure0(t0) {
      this._box_0 = t0;
    },
    _zip__closure1: function _zip__closure1(t0) {
      this._box_0 = t0;
    },
    _index_closure0: function _index_closure0() {
    },
    _separator_closure: function _separator_closure() {
    },
    _isBracketed_closure: function _isBracketed_closure() {
    },
    _slash_closure: function _slash_closure() {
    },
    _modify(map, keys, modify, addNesting) {
      var keyIterator = J.get$iterator$ax(keys);
      return keyIterator.moveNext$0() ? new A._modify_modifyNestedMap(keyIterator, modify, addNesting).call$1(map) : modify.call$1(map);
    },
    _deepMergeImpl(map1, map2) {
      var t2, t3, result, t4, key, value, _1_1, _1_3, _1_3_isSet, _1_30, resultMap, valueMap, merged,
        t1 = map1._map$_contents;
      if (t1.get$isEmpty(t1))
        return map2;
      t2 = map2._map$_contents;
      if (t2.get$isEmpty(t2))
        return map1;
      t3 = type$.Value;
      result = A.LinkedHashMap_LinkedHashMap$of(t1, t3, t3);
      for (t1 = A.MapExtensions_get_pairs(t2, t3, t3), t1 = t1.get$iterator(t1), t2 = type$.SassMap; t1.moveNext$0();) {
        t4 = t1.get$current(t1);
        key = t4._0;
        value = t4._1;
        t4 = result.$index(0, key);
        _1_1 = t4 == null ? null : t4.tryMap$0();
        _1_3 = value.tryMap$0();
        _1_3_isSet = _1_1 != null;
        _1_30 = null;
        t4 = false;
        if (_1_3_isSet) {
          resultMap = _1_1 == null ? t2._as(_1_1) : _1_1;
          t4 = _1_3 != null;
          _1_30 = _1_3;
        } else
          resultMap = null;
        if (t4) {
          valueMap = _1_3_isSet ? _1_30 : _1_3;
          merged = A._deepMergeImpl(resultMap, valueMap == null ? t2._as(valueMap) : valueMap);
          if (merged === resultMap)
            continue;
          result.$indexSet(0, key, merged);
        } else
          result.$indexSet(0, key, value);
      }
      return new A.SassMap(A.ConstantMap_ConstantMap$from(result, t3, t3));
    },
    _function3($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:map");
    },
    _get_closure: function _get_closure() {
    },
    _set_closure: function _set_closure() {
    },
    _set__closure0: function _set__closure0(t0) {
      this.$arguments = t0;
    },
    _set_closure0: function _set_closure0() {
    },
    _set__closure: function _set__closure(t0) {
      this._box_0 = t0;
    },
    _merge_closure: function _merge_closure() {
    },
    _merge_closure0: function _merge_closure0() {
    },
    _merge__closure: function _merge__closure(t0) {
      this.map2 = t0;
    },
    _deepMerge_closure: function _deepMerge_closure() {
    },
    _deepRemove_closure: function _deepRemove_closure() {
    },
    _deepRemove__closure: function _deepRemove__closure(t0) {
      this.keys = t0;
    },
    _remove_closure: function _remove_closure() {
    },
    _remove_closure0: function _remove_closure0() {
    },
    _keys_closure: function _keys_closure() {
    },
    _values_closure: function _values_closure() {
    },
    _hasKey_closure: function _hasKey_closure() {
    },
    _modify_modifyNestedMap: function _modify_modifyNestedMap(t0, t1, t2) {
      this.keyIterator = t0;
      this.modify = t1;
      this.addNesting = t2;
    },
    _singleArgumentMathFunc($name, mathFunc) {
      return A.BuiltInCallable$function($name, "$number", new A._singleArgumentMathFunc_closure(mathFunc), "sass:math");
    },
    _numberFunction($name, transform) {
      return A.BuiltInCallable$function($name, "$number", new A._numberFunction_closure(transform), "sass:math");
    },
    _function2($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:math");
    },
    global_closure: function global_closure() {
    },
    module_closure0: function module_closure0() {
    },
    _ceil_closure: function _ceil_closure() {
    },
    _clamp_closure: function _clamp_closure() {
    },
    _floor_closure: function _floor_closure() {
    },
    _max_closure: function _max_closure() {
    },
    _min_closure: function _min_closure() {
    },
    _round_closure: function _round_closure() {
    },
    _hypot_closure: function _hypot_closure() {
    },
    _hypot__closure: function _hypot__closure() {
    },
    _log_closure: function _log_closure() {
    },
    _pow_closure: function _pow_closure() {
    },
    _atan2_closure: function _atan2_closure() {
    },
    _compatible_closure: function _compatible_closure() {
    },
    _isUnitless_closure: function _isUnitless_closure() {
    },
    _unit_closure: function _unit_closure() {
    },
    _percentage_closure: function _percentage_closure() {
    },
    _randomFunction_closure: function _randomFunction_closure() {
    },
    _div_closure: function _div_closure() {
    },
    _singleArgumentMathFunc_closure: function _singleArgumentMathFunc_closure(t0) {
      this.mathFunc = t0;
    },
    _numberFunction_closure: function _numberFunction_closure(t0) {
      this.transform = t0;
    },
    _function($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:meta");
    },
    _shared_closure: function _shared_closure() {
    },
    _shared_closure0: function _shared_closure0() {
    },
    _shared_closure1: function _shared_closure1() {
    },
    _shared_closure2: function _shared_closure2() {
    },
    moduleFunctions_closure: function moduleFunctions_closure() {
    },
    moduleFunctions_closure0: function moduleFunctions_closure0() {
    },
    moduleFunctions__closure: function moduleFunctions__closure() {
    },
    moduleFunctions_closure1: function moduleFunctions_closure1() {
    },
    _prependParent(compound) {
      var _0_3, _0_4, t2, t3, rest,
        t1 = A.EvaluationContext_currentOrNull(),
        span = (t1 == null ? A.throwExpression(A.StateError$(string$.No_Sass)) : t1).get$currentCallableSpan(),
        _0_0 = compound.components;
      $label0$0: {
        _0_3 = _0_0.length >= 1;
        if (_0_3) {
          _0_4 = _0_0[0];
          t1 = _0_4 instanceof A.UniversalSelector;
        } else {
          _0_4 = null;
          t1 = false;
        }
        t2 = null;
        if (t1) {
          t1 = t2;
          break $label0$0;
        }
        t1 = false;
        if (_0_3) {
          t3 = _0_4;
          if (t3 instanceof A.TypeSelector) {
            t1 = _0_4;
            t1 = type$.TypeSelector._as(t1).name.namespace != null;
          }
        }
        if (t1) {
          t1 = t2;
          break $label0$0;
        }
        if (_0_3) {
          t1 = _0_4;
          t1 = t1 instanceof A.TypeSelector;
        } else
          t1 = false;
        if (t1) {
          t1 = _0_3 ? _0_4 : _0_0[0];
          type$.TypeSelector._as(t1);
          rest = B.JSArray_methods.sublist$1(_0_0, 1);
          t1 = A._setArrayType([new A.ParentSelector(t1.name.name, span)], type$.JSArray_SimpleSelector);
          B.JSArray_methods.addAll$1(t1, rest);
          t1 = A.CompoundSelector$(t1, span);
          break $label0$0;
        }
        t1 = A._setArrayType([new A.ParentSelector(null, span)], type$.JSArray_SimpleSelector);
        B.JSArray_methods.addAll$1(t1, _0_0);
        t1 = A.CompoundSelector$(t1, span);
        break $label0$0;
      }
      return t1;
    },
    _function1($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:selector");
    },
    _nest_closure: function _nest_closure() {
    },
    _nest__closure: function _nest__closure(t0) {
      this._box_0 = t0;
    },
    _nest__closure0: function _nest__closure0() {
    },
    _append_closure: function _append_closure() {
    },
    _append__closure: function _append__closure() {
    },
    _append__closure0: function _append__closure0(t0) {
      this.span = t0;
    },
    _append___closure: function _append___closure(t0, t1) {
      this.parent = t0;
      this.span = t1;
    },
    _extend_closure: function _extend_closure() {
    },
    _replace_closure: function _replace_closure() {
    },
    _unify_closure: function _unify_closure() {
    },
    _isSuperselector_closure: function _isSuperselector_closure() {
    },
    _simpleSelectors_closure: function _simpleSelectors_closure() {
    },
    _simpleSelectors__closure: function _simpleSelectors__closure() {
    },
    _parse_closure: function _parse_closure() {
    },
    _codepointForIndex(index, lengthInCodepoints, allowNegative) {
      var result;
      if (index === 0)
        return 0;
      if (index > 0)
        return Math.min(index - 1, lengthInCodepoints);
      result = lengthInCodepoints + index;
      if (result < 0 && !allowNegative)
        return 0;
      return result;
    },
    _function0($name, $arguments, callback) {
      return A.BuiltInCallable$function($name, $arguments, callback, "sass:string");
    },
    module_closure: function module_closure() {
    },
    module__closure: function module__closure(t0) {
      this.string = t0;
    },
    module__closure0: function module__closure0(t0) {
      this.string = t0;
    },
    _unquote_closure: function _unquote_closure() {
    },
    _quote_closure: function _quote_closure() {
    },
    _length_closure: function _length_closure() {
    },
    _insert_closure: function _insert_closure() {
    },
    _index_closure: function _index_closure() {
    },
    _slice_closure: function _slice_closure() {
    },
    _toUpperCase_closure: function _toUpperCase_closure() {
    },
    _toLowerCase_closure: function _toLowerCase_closure() {
    },
    _uniqueId_closure: function _uniqueId_closure() {
    },
    ImportCache$(importers, loadPaths) {
      var t1 = type$.nullable_Record_3_Importer_and_Uri_and_Uri_originalUrl,
        t2 = type$.Record_3_Importer_and_Uri_and_bool_forImport,
        t3 = type$.Uri;
      return new A.ImportCache(A.ImportCache__toImporters(importers, loadPaths, null), A.LinkedHashMap_LinkedHashMap$_empty(type$.Record_2_Uri_and_bool_forImport, t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.nullable_Stylesheet), A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.ImporterResult), A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.DateTime));
    },
    ImportCache__toImporters(importers, loadPaths, packageConfig) {
      var t1, t2, t3, t4, _i, path, _null = null,
        sassPath = A.getEnvironmentVariable("SASS_PATH");
      if (A.isBrowser()) {
        t1 = A._setArrayType([], type$.JSArray_Importer);
        B.JSArray_methods.addAll$1(t1, importers);
        return t1;
      }
      t1 = A._setArrayType([], type$.JSArray_Importer);
      B.JSArray_methods.addAll$1(t1, importers);
      for (t2 = J.get$iterator$ax(loadPaths); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        t1.push(new A.FilesystemImporter($.$get$context().absolute$15(t3, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false));
      }
      if (sassPath != null) {
        t2 = A.isNodeJs() ? self.process : _null;
        t3 = sassPath.split(J.$eq$(t2 == null ? _null : J.get$platform$x(t2), "win32") ? ";" : ":");
        t4 = t3.length;
        _i = 0;
        for (; _i < t4; ++_i) {
          path = t3[_i];
          t1.push(new A.FilesystemImporter($.$get$context().absolute$15(path, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), false));
        }
      }
      return t1;
    },
    ImportCache: function ImportCache(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._importers = t0;
      _._canonicalizeCache = t1;
      _._perImporterCanonicalizeCache = t2;
      _._nonCanonicalRelativeUrls = t3;
      _._importCache = t4;
      _._resultsCache = t5;
      _._loadTimes = t6;
    },
    ImportCache_canonicalize_closure: function ImportCache_canonicalize_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.baseImporter = t1;
      _.resolvedUrl = t2;
      _.baseUrl = t3;
      _.forImport = t4;
      _.key = t5;
      _.url = t6;
    },
    ImportCache__canonicalize_closure: function ImportCache__canonicalize_closure(t0, t1) {
      this.importer = t0;
      this.url = t1;
    },
    ImportCache_importCanonical_closure: function ImportCache_importCanonical_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
    },
    ImportCache_humanize_closure: function ImportCache_humanize_closure(t0) {
      this.canonicalUrl = t0;
    },
    ImportCache_humanize_closure0: function ImportCache_humanize_closure0() {
    },
    ImportCache_humanize_closure1: function ImportCache_humanize_closure1() {
    },
    ImportCache_humanize_closure2: function ImportCache_humanize_closure2(t0) {
      this.canonicalUrl = t0;
    },
    Importer: function Importer() {
    },
    AsyncImporter: function AsyncImporter() {
    },
    CanonicalizeContext: function CanonicalizeContext(t0, t1) {
      this._fromImport = t0;
      this._containingUrl = t1;
      this._wasContainingUrlAccessed = false;
    },
    FilesystemImporter: function FilesystemImporter(t0, t1) {
      this._loadPath = t0;
      this._loadPathDeprecated = t1;
    },
    FilesystemImporter_canonicalize_closure: function FilesystemImporter_canonicalize_closure() {
    },
    NoOpImporter: function NoOpImporter() {
    },
    NodePackageImporter: function NodePackageImporter() {
      this.__NodePackageImporter__entryPointDirectory_F = $;
    },
    NodePackageImporter__nodePackageExportsResolve_closure: function NodePackageImporter__nodePackageExportsResolve_closure() {
    },
    NodePackageImporter__nodePackageExportsResolve_closure0: function NodePackageImporter__nodePackageExportsResolve_closure0() {
    },
    NodePackageImporter__nodePackageExportsResolve_closure1: function NodePackageImporter__nodePackageExportsResolve_closure1() {
    },
    NodePackageImporter__nodePackageExportsResolve_closure2: function NodePackageImporter__nodePackageExportsResolve_closure2(t0, t1, t2) {
      this.$this = t0;
      this.exports = t1;
      this.packageRoot = t2;
    },
    NodePackageImporter__nodePackageExportsResolve__closure: function NodePackageImporter__nodePackageExportsResolve__closure(t0, t1, t2) {
      this.$this = t0;
      this.variant = t1;
      this.packageRoot = t2;
    },
    NodePackageImporter__nodePackageExportsResolve__closure0: function NodePackageImporter__nodePackageExportsResolve__closure0() {
    },
    NodePackageImporter__getMainExport_closure: function NodePackageImporter__getMainExport_closure() {
    },
    ImporterResult: function ImporterResult(t0, t1, t2) {
      this.contents = t0;
      this._sourceMapUrl = t1;
      this.syntax = t2;
    },
    fromImport() {
      var t1 = type$.nullable_CanonicalizeContext._as($.Zone__current.$index(0, B.Symbol__canonicalizeContext));
      t1 = t1 == null ? null : t1._fromImport;
      return t1 === true;
    },
    canonicalizeContext() {
      var t1,
        _0_0 = $.Zone__current.$index(0, B.Symbol__canonicalizeContext);
      $label0$0: {
        if (_0_0 == null)
          A.throwExpression(A.StateError$(string$.canoni));
        if (_0_0 instanceof A.CanonicalizeContext) {
          t1 = _0_0;
          break $label0$0;
        }
        t1 = A.throwExpression(A.StateError$(string$.Unexpe + A.S(_0_0) + "."));
      }
      return t1;
    },
    resolveImportPath(path) {
      var t1,
        extension = A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1];
      if (extension === ".sass" || extension === ".scss" || extension === ".css") {
        t1 = A.fromImport() ? new A.resolveImportPath_closure(path, extension).call$0() : null;
        return t1 == null ? A._exactlyOne(A._tryPath(path)) : t1;
      }
      t1 = A.fromImport() ? new A.resolveImportPath_closure0(path).call$0() : null;
      if (t1 == null)
        t1 = A._exactlyOne(A._tryPathWithExtensions(path));
      return t1 == null ? A._tryPathAsDirectory(path) : t1;
    },
    _tryPathWithExtensions(path) {
      var result = A._tryPath(path + ".sass");
      B.JSArray_methods.addAll$1(result, A._tryPath(path + ".scss"));
      return result.length !== 0 ? result : A._tryPath(path + ".css");
    },
    _tryPath(path) {
      var t1 = $.$get$context(),
        partial = A.join(t1.dirname$1(path), "_" + A.ParsedPath_ParsedPath$parse(path, t1.style).get$basename(), null);
      t1 = A._setArrayType([], type$.JSArray_String);
      if (A.fileExists(partial))
        t1.push(partial);
      if (A.fileExists(path))
        t1.push(path);
      return t1;
    },
    _tryPathAsDirectory(path) {
      var t1;
      if (!A.dirExists(path))
        return null;
      t1 = A.fromImport() ? new A._tryPathAsDirectory_closure(path).call$0() : null;
      return t1 == null ? A._exactlyOne(A._tryPathWithExtensions(A.join(path, "index", null))) : t1;
    },
    _exactlyOne(paths) {
      var _0_1, t1, path;
      $label0$0: {
        _0_1 = paths.length;
        if (_0_1 <= 0) {
          t1 = null;
          break $label0$0;
        }
        if (_0_1 === 1) {
          path = paths[0];
          t1 = path;
          break $label0$0;
        }
        t1 = A.throwExpression(string$.It_s_n + B.JSArray_methods.map$1$1(paths, new A._exactlyOne_closure(), type$.String).join$1(0, "\n"));
      }
      return t1;
    },
    resolveImportPath_closure: function resolveImportPath_closure(t0, t1) {
      this.path = t0;
      this.extension = t1;
    },
    resolveImportPath_closure0: function resolveImportPath_closure0(t0) {
      this.path = t0;
    },
    _tryPathAsDirectory_closure: function _tryPathAsDirectory_closure(t0) {
      this.path = t0;
    },
    _exactlyOne_closure: function _exactlyOne_closure() {
    },
    InterpolationBuffer: function InterpolationBuffer(t0, t1, t2) {
      this._interpolation_buffer$_text = t0;
      this._interpolation_buffer$_contents = t1;
      this._spans = t2;
    },
    InterpolationMap$(_interpolation, targetLocations) {
      var t1 = A.List_List$unmodifiable(targetLocations, type$.SourceLocation),
        t2 = _interpolation.contents.length,
        expectedLocations = Math.max(0, t2 - 1);
      if (t1.length !== expectedLocations)
        A.throwExpression(A.ArgumentError$("InterpolationMap must have " + A.S(expectedLocations) + string$.x20targe + t2 + " components.", null));
      return new A.InterpolationMap(_interpolation, t1);
    },
    InterpolationMap: function InterpolationMap(t0, t1) {
      this._interpolation = t0;
      this._targetLocations = t1;
    },
    InterpolationMap_mapException_closure: function InterpolationMap_mapException_closure() {
    },
    _realCasePath(path) {
      var prefix, _null = null,
        t1 = A.isNodeJs() ? self.process : _null;
      if (!J.$eq$(t1 == null ? _null : J.get$platform$x(t1), "win32")) {
        t1 = A.isNodeJs() ? self.process : _null;
        t1 = J.$eq$(t1 == null ? _null : J.get$platform$x(t1), "darwin");
      } else
        t1 = true;
      if (!t1)
        return path;
      t1 = A.isNodeJs() ? self.process : _null;
      if (J.$eq$(t1 == null ? _null : J.get$platform$x(t1), "win32")) {
        prefix = B.JSString_methods.substring$2(path, 0, $.$get$context().style.rootLength$1(path));
        t1 = prefix.length;
        if (t1 !== 0 && A.CharacterExtension_get_isAlphabetic(prefix.charCodeAt(0)))
          path = prefix.toUpperCase() + B.JSString_methods.substring$1(path, t1);
      }
      return new A._realCasePath_helper().call$1(path);
    },
    _realCasePath_helper: function _realCasePath_helper() {
    },
    _realCasePath_helper_closure: function _realCasePath_helper_closure(t0, t1, t2, t3) {
      var _ = this;
      _.path = t0;
      _.realPath = t1;
      _.helper = t2;
      _.dirname = t3;
    },
    _realCasePath_helper__closure: function _realCasePath_helper__closure(t0) {
      this.basename = t0;
    },
    printError(message) {
      var t1 = A.isNodeJs() ? self.process : null;
      if (t1 != null) {
        t1 = J.get$stderr$x(t1);
        J.write$1$x(t1, A.S(message == null ? "" : message) + "\n");
      } else {
        t1 = self.console;
        J.error$1$x(t1, message == null ? "" : message);
      }
    },
    readFile(path) {
      var contents, sourceFile, t1, i;
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("readFile() is only supported on Node.js"));
      contents = A._asString(A._readFile(path, "utf8"));
      if (!B.JSString_methods.contains$1(contents, "\ufffd"))
        return contents;
      sourceFile = A.SourceFile$fromString(contents, $.$get$context().toUri$1(path));
      for (t1 = contents.length, i = 0; i < t1; ++i) {
        if (contents.charCodeAt(i) !== 65533)
          continue;
        throw A.wrapException(A.SassException$("Invalid UTF-8.", A.FileLocation$_(sourceFile, i).pointSpan$0(), null));
      }
      return contents;
    },
    _readFile(path, encoding) {
      return A._systemErrorToFileSystemException(new A._readFile_closure(path, encoding));
    },
    writeFile(path, contents) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("writeFile() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.writeFile_closure(path, contents));
    },
    deleteFile(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("deleteFile() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.deleteFile_closure(path));
    },
    readStdin() {
      return A.readStdin$body();
    },
    readStdin$body() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, t3, completer, sink, t1, t2;
      var $async$readStdin = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = A.isNodeJs() ? self.process : null;
              if (t2 == null)
                throw A.wrapException(A.UnsupportedError$("readStdin() is only supported on Node.js"));
              t3 = new A._Future($.Zone__current, type$._Future_String);
              completer = new A._AsyncCompleter(t3, type$._AsyncCompleter_String);
              t1.contents = null;
              sink = new A._StringCallbackSink(new A.readStdin_closure(t1, completer), new A.StringBuffer("")).asUtf8Sink$1(false);
              t1 = J.getInterceptor$x(t2);
              J.on$2$x(t1.get$stdin(t2), "data", A.allowInterop(new A.readStdin_closure0(sink)));
              J.on$2$x(t1.get$stdin(t2), "end", A.allowInterop(new A.readStdin_closure1(sink)));
              J.on$2$x(t1.get$stdin(t2), "error", A.allowInterop(new A.readStdin_closure2(completer)));
              $async$returnValue = t3;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readStdin, $async$completer);
    },
    fileExists(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$(string$.fileEx));
      return A._systemErrorToFileSystemException(new A.fileExists_closure(path));
    },
    dirExists(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("dirExists() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.dirExists_closure(path));
    },
    linkExists(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$(string$.linkEx));
      return A._systemErrorToFileSystemException(new A.linkExists_closure(path));
    },
    ensureDir(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("ensureDir() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.ensureDir_closure(path));
    },
    listDir(path, recursive) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("listDir() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.listDir_closure(recursive, path));
    },
    realpath(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("listDir() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.realpath_closure(path));
    },
    modificationTime(path) {
      if (!A.isNodeJs())
        throw A.wrapException(A.UnsupportedError$("modificationTime() is only supported on Node.js"));
      return A._systemErrorToFileSystemException(new A.modificationTime_closure(path));
    },
    getEnvironmentVariable($name) {
      var t1 = A.isNodeJs() ? self.process : null,
        env = t1 == null ? null : J.get$env$x(t1);
      if (env == null)
        t1 = null;
      else
        t1 = A._asStringQ(env[$name]);
      return t1;
    },
    _systemErrorToFileSystemException(callback) {
      var error, t1, exception, t2;
      try {
        t1 = callback.call$0();
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        if (!type$.JsSystemError._is(error))
          throw exception;
        t1 = error;
        t2 = J.getInterceptor$x(t1);
        throw A.wrapException(new A.FileSystemException(J.substring$2$s(t2.get$message(t1), (A.S(t2.get$code(t1)) + ": ").length, J.get$length$asx(t2.get$message(t1)) - (", " + A.S(t2.get$syscall(t1)) + " '" + A.S(t2.get$path(t1)) + "'").length), J.get$path$x(error)));
      }
    },
    hasTerminal() {
      var t1 = A.isNodeJs() ? self.process : null;
      return J.$eq$(t1 == null ? null : J.get$isTTY$x(J.get$stdout$x(t1)), true);
    },
    isWindows() {
      var t1 = A.isNodeJs() ? self.process : null;
      return J.$eq$(t1 == null ? null : J.get$platform$x(t1), "win32");
    },
    watchDir(path, poll) {
      return A.watchDir$body(path, poll);
    },
    watchDir$body(path, poll) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Stream_WatchEvent),
        $async$returnValue, _0_0, t2, parcel, controller, watcher, t3, t1, $async$temp1, $async$temp2, $async$temp3;
      var $async$watchDir = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              if (!A.isNodeJs())
                throw A.wrapException(A.UnsupportedError$("watchDir() is only supported on Node.js"));
              t1.controller = null;
              _0_0 = init.G.parcel_watcher;
              if (_0_0 != null) {
                t2 = !poll;
                parcel = _0_0;
              } else {
                parcel = null;
                t2 = false;
              }
              $async$goto = t2 ? 3 : 5;
              break;
            case 3:
              // then
              $async$temp1 = t1;
              $async$temp2 = A;
              $async$temp3 = A;
              $async$goto = 6;
              return A._asyncAwait(A.ParcelWatcher_subscribe(parcel, path, new A.watchDir_closure0(t1)), $async$watchDir);
            case 6:
              // returning from await.
              controller = $async$temp1.controller = $async$temp2.StreamController_StreamController(new $async$temp3.watchDir_closure($async$result), null, null, null, false, type$.WatchEvent);
              $async$returnValue = new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              watcher = J.watch$2$x(self.chokidar, path, {usePolling: poll});
              t2 = J.getInterceptor$x(watcher);
              t2.on$2(watcher, "add", A.allowInterop(new A.watchDir_closure1(t1)));
              t2.on$2(watcher, "change", A.allowInterop(new A.watchDir_closure2(t1)));
              t2.on$2(watcher, "unlink", A.allowInterop(new A.watchDir_closure3(t1)));
              t2.on$2(watcher, "error", A.allowInterop(new A.watchDir_closure4(t1)));
              t3 = new A._Future($.Zone__current, type$._Future_Stream_WatchEvent);
              t2.on$2(watcher, "ready", A.allowInterop(new A.watchDir_closure5(t1, watcher, new A._AsyncCompleter(t3, type$._AsyncCompleter_Stream_WatchEvent))));
              $async$returnValue = t3;
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$watchDir, $async$completer);
    },
    FileSystemException: function FileSystemException(t0, t1) {
      this.message = t0;
      this.path = t1;
    },
    _readFile_closure: function _readFile_closure(t0, t1) {
      this.path = t0;
      this.encoding = t1;
    },
    writeFile_closure: function writeFile_closure(t0, t1) {
      this.path = t0;
      this.contents = t1;
    },
    deleteFile_closure: function deleteFile_closure(t0) {
      this.path = t0;
    },
    readStdin_closure: function readStdin_closure(t0, t1) {
      this._box_0 = t0;
      this.completer = t1;
    },
    readStdin_closure0: function readStdin_closure0(t0) {
      this.sink = t0;
    },
    readStdin_closure1: function readStdin_closure1(t0) {
      this.sink = t0;
    },
    readStdin_closure2: function readStdin_closure2(t0) {
      this.completer = t0;
    },
    fileExists_closure: function fileExists_closure(t0) {
      this.path = t0;
    },
    dirExists_closure: function dirExists_closure(t0) {
      this.path = t0;
    },
    linkExists_closure: function linkExists_closure(t0) {
      this.path = t0;
    },
    ensureDir_closure: function ensureDir_closure(t0) {
      this.path = t0;
    },
    listDir_closure: function listDir_closure(t0, t1) {
      this.recursive = t0;
      this.path = t1;
    },
    listDir__closure: function listDir__closure(t0) {
      this.path = t0;
    },
    listDir__closure0: function listDir__closure0() {
    },
    listDir_closure_list: function listDir_closure_list() {
    },
    listDir__list_closure: function listDir__list_closure(t0, t1) {
      this.parent = t0;
      this.list = t1;
    },
    realpath_closure: function realpath_closure(t0) {
      this.path = t0;
    },
    modificationTime_closure: function modificationTime_closure(t0) {
      this.path = t0;
    },
    watchDir_closure0: function watchDir_closure0(t0) {
      this._box_0 = t0;
    },
    watchDir_closure: function watchDir_closure(t0) {
      this.subscription = t0;
    },
    watchDir_closure1: function watchDir_closure1(t0) {
      this._box_0 = t0;
    },
    watchDir_closure2: function watchDir_closure2(t0) {
      this._box_0 = t0;
    },
    watchDir_closure3: function watchDir_closure3(t0) {
      this._box_0 = t0;
    },
    watchDir_closure4: function watchDir_closure4(t0) {
      this._box_0 = t0;
    },
    watchDir_closure5: function watchDir_closure5(t0, t1, t2) {
      this._box_0 = t0;
      this.watcher = t1;
      this.completer = t2;
    },
    watchDir__closure: function watchDir__closure(t0) {
      this.watcher = t0;
    },
    JSArray0: function JSArray0() {
    },
    Chokidar: function Chokidar() {
    },
    ChokidarOptions: function ChokidarOptions() {
    },
    ChokidarWatcher: function ChokidarWatcher() {
    },
    JSFunction: function JSFunction() {
    },
    ImmutableList: function ImmutableList() {
    },
    ImmutableMap: function ImmutableMap() {
    },
    NodeImporterResult: function NodeImporterResult() {
    },
    RenderContext: function RenderContext() {
    },
    RenderContextOptions: function RenderContextOptions() {
    },
    RenderContextResult: function RenderContextResult() {
    },
    RenderContextResultStats: function RenderContextResultStats() {
    },
    JSModule: function JSModule() {
    },
    JSModuleRequire: function JSModuleRequire() {
    },
    ParcelWatcher_subscribe(_this, path, callback) {
      var result,
        t1 = new A.ParcelWatcher_subscribe_closure(callback);
      if (typeof t1 == "function")
        A.throwExpression(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2) {
          return _call(f, arg1, arg2, arguments.length);
        };
      }(A._callDartFunctionFast2, t1);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = t1;
      return A.promiseToFuture(_this.subscribe(path, result), type$.JSObject);
    },
    ParcelWatcher_subscribe_closure: function ParcelWatcher_subscribe_closure(t0) {
      this.callback = t0;
    },
    JSClass: function JSClass() {
    },
    JSUrl: function JSUrl() {
    },
    jsThrow0(error) {
      return type$.Never._as($.$get$_jsThrow0().call$1(error));
    },
    _PropertyDescriptor: function _PropertyDescriptor() {
    },
    _RequireMain: function _RequireMain() {
    },
    WarnForDeprecation_warnForDeprecation(_this, deprecation, message, span, trace) {
      _this.internalWarn$4$deprecation$span$trace(message, deprecation, span, trace);
    },
    LoggerWithDeprecationType: function LoggerWithDeprecationType() {
    },
    _QuietLogger: function _QuietLogger() {
    },
    DeprecationProcessingLogger: function DeprecationProcessingLogger(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._warningCounts = t0;
      _._inner = t1;
      _.silenceDeprecations = t2;
      _.fatalDeprecations = t3;
      _.futureDeprecations = t4;
      _.limitRepetition = t5;
    },
    DeprecationProcessingLogger_summarize_closure: function DeprecationProcessingLogger_summarize_closure() {
    },
    DeprecationProcessingLogger_summarize_closure0: function DeprecationProcessingLogger_summarize_closure0() {
    },
    StderrLogger: function StderrLogger(t0) {
      this.color = t0;
    },
    TrackingLogger: function TrackingLogger(t0) {
      this._tracking$_logger = t0;
      this._emittedDebug = this._emittedWarning = false;
    },
    BuiltInModule$($name, functions, mixins, variables, $T) {
      var t1 = A._Uri__Uri(null, $name, null, "sass"),
        t2 = A.BuiltInModule__callableMap(functions, $T),
        t3 = A.BuiltInModule__callableMap(mixins, $T),
        t4 = variables == null ? B.Map_empty5 : new A.UnmodifiableMapView(variables, type$.UnmodifiableMapView_String_Value);
      return new A.BuiltInModule(t1, t2, t3, t4, $T._eval$1("BuiltInModule<0>"));
    },
    BuiltInModule__callableMap(callables, $T) {
      var t2, _i, callable,
        t1 = type$.String;
      if (callables == null)
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
      else {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
        for (t2 = callables.length, _i = 0; _i < callables.length; callables.length === t2 || (0, A.throwConcurrentModificationError)(callables), ++_i) {
          callable = callables[_i];
          t1.$indexSet(0, callable.get$name(callable), callable);
        }
        t1 = new A.UnmodifiableMapView(t1, type$.$env_1_1_String._bind$1($T)._eval$1("UnmodifiableMapView<1,2>"));
      }
      return new A.UnmodifiableMapView(t1, type$.$env_1_1_String._bind$1($T)._eval$1("UnmodifiableMapView<1,2>"));
    },
    BuiltInModule: function BuiltInModule(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _.functions = t1;
      _.mixins = t2;
      _.variables = t3;
      _.$ti = t4;
    },
    ForwardedModuleView_ifNecessary(inner, rule, $T) {
      var t2,
        t1 = false;
      if (rule.prefix == null)
        if (rule.shownMixinsAndFunctions == null)
          if (rule.shownVariables == null) {
            t2 = rule.hiddenMixinsAndFunctions;
            t2 = t2 == null ? null : t2._base.get$isEmpty(0);
            if (t2 === true) {
              t1 = rule.hiddenVariables;
              t1 = t1 == null ? null : t1._base.get$isEmpty(0);
              t1 = t1 === true;
            }
          }
      if (t1)
        return inner;
      else
        return A.ForwardedModuleView$(inner, rule, $T);
    },
    ForwardedModuleView$(_inner, _rule, $T) {
      var t1 = _rule.prefix,
        t2 = _rule.shownVariables,
        t3 = _rule.hiddenVariables,
        t4 = _rule.shownMixinsAndFunctions,
        t5 = _rule.hiddenMixinsAndFunctions;
      return new A.ForwardedModuleView(_inner, _rule, A.ForwardedModuleView__forwardedMap(_inner.get$variables(), t1, t2, t3, type$.Value), A.ForwardedModuleView__forwardedMap(_inner.get$variableNodes(), t1, t2, t3, type$.AstNode), A.ForwardedModuleView__forwardedMap(_inner.get$functions(_inner), t1, t4, t5, $T), A.ForwardedModuleView__forwardedMap(_inner.get$mixins(), t1, t4, t5, $T), $T._eval$1("ForwardedModuleView<0>"));
    },
    ForwardedModuleView__forwardedMap(map, prefix, safelist, blocklist, $V) {
      var t1 = prefix == null,
        t2 = false;
      if (t1)
        if (safelist == null)
          t2 = blocklist == null || blocklist._base.get$isEmpty(0);
      if (t2)
        return map;
      if (!t1)
        map = new A.PrefixedMapView(map, prefix, $V._eval$1("PrefixedMapView<0>"));
      if (safelist != null)
        map = new A.LimitedMapView(map, safelist._base.intersection$1(new A.MapKeySet(map, type$.MapKeySet_nullable_Object)), type$.$env_1_1_String._bind$1($V)._eval$1("LimitedMapView<1,2>"));
      else if (blocklist != null && blocklist._base.get$isNotEmpty(0))
        map = A.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
      return map;
    },
    ForwardedModuleView: function ForwardedModuleView(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._forwarded_view$_inner = t0;
      _._rule = t1;
      _.variables = t2;
      _.variableNodes = t3;
      _.functions = t4;
      _.mixins = t5;
      _.$ti = t6;
    },
    ShadowedModuleView_ifNecessary(inner, functions, mixins, variables, $T) {
      return A.ShadowedModuleView__needsBlocklist(inner.get$variables(), variables) || A.ShadowedModuleView__needsBlocklist(inner.get$functions(inner), functions) || A.ShadowedModuleView__needsBlocklist(inner.get$mixins(), mixins) ? new A.ShadowedModuleView(inner, A.ShadowedModuleView__shadowedMap(inner.get$variables(), variables, type$.Value), A.ShadowedModuleView__shadowedMap(inner.get$variableNodes(), variables, type$.AstNode), A.ShadowedModuleView__shadowedMap(inner.get$functions(inner), functions, $T), A.ShadowedModuleView__shadowedMap(inner.get$mixins(), mixins, $T), $T._eval$1("ShadowedModuleView<0>")) : null;
    },
    ShadowedModuleView__shadowedMap(map, blocklist, $V) {
      var t1 = A.ShadowedModuleView__needsBlocklist(map, blocklist);
      return !t1 ? map : A.LimitedMapView$blocklist(map, blocklist, type$.String, $V);
    },
    ShadowedModuleView__needsBlocklist(map, blocklist) {
      return map.get$isNotEmpty(map) && blocklist.any$1(0, map.get$containsKey());
    },
    ShadowedModuleView: function ShadowedModuleView(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._shadowed_view$_inner = t0;
      _.variables = t1;
      _.variableNodes = t2;
      _.functions = t3;
      _.mixins = t4;
      _.$ti = t5;
    },
    AtRootQueryParser: function AtRootQueryParser(t0, t1) {
      this.scanner = t0;
      this._interpolationMap = t1;
    },
    AtRootQueryParser_parse_closure: function AtRootQueryParser_parse_closure(t0) {
      this.$this = t0;
    },
    _disallowedFunctionNames_closure: function _disallowedFunctionNames_closure() {
    },
    CssParser: function CssParser(t0, t1, t2, t3) {
      var _ = this;
      _._isUseAllowed = true;
      _._inExpression = _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.warnings = t1;
      _.lastSilentComment = null;
      _.scanner = t2;
      _._interpolationMap = t3;
    },
    KeyframeSelectorParser: function KeyframeSelectorParser(t0, t1) {
      this.scanner = t0;
      this._interpolationMap = t1;
    },
    KeyframeSelectorParser_parse_closure: function KeyframeSelectorParser_parse_closure(t0) {
      this.$this = t0;
    },
    MediaQueryParser: function MediaQueryParser(t0, t1) {
      this.scanner = t0;
      this._interpolationMap = t1;
    },
    MediaQueryParser_parse_closure: function MediaQueryParser_parse_closure(t0) {
      this.$this = t0;
    },
    Parser_isIdentifier(text) {
      var exception;
      try {
        new A.Parser(A.SpanScanner$(text, null), null)._parseIdentifier$0();
        return true;
      } catch (exception) {
        if (type$.SassFormatException._is(A.unwrapException(exception)))
          return false;
        else
          throw exception;
      }
    },
    Parser: function Parser(t0, t1) {
      this.scanner = t0;
      this._interpolationMap = t1;
    },
    Parser__parseIdentifier_closure: function Parser__parseIdentifier_closure(t0) {
      this.$this = t0;
    },
    Parser_escape_closure: function Parser_escape_closure() {
    },
    Parser_scanIdentChar_matches: function Parser_scanIdentChar_matches(t0, t1) {
      this.caseSensitive = t0;
      this.char = t1;
    },
    Parser_spanFrom_closure: function Parser_spanFrom_closure(t0, t1) {
      this.$this = t0;
      this.span = t1;
    },
    SassParser: function SassParser(t0, t1, t2, t3) {
      var _ = this;
      _._currentIndentation = 0;
      _._spaces = _._nextIndentationEnd = _._nextIndentation = null;
      _._isUseAllowed = true;
      _._inExpression = _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.warnings = t1;
      _.lastSilentComment = null;
      _.scanner = t2;
      _._interpolationMap = t3;
    },
    SassParser_styleRuleSelector_closure: function SassParser_styleRuleSelector_closure() {
    },
    SassParser_children_closure: function SassParser_children_closure(t0, t1, t2) {
      this.$this = t0;
      this.child = t1;
      this.children = t2;
    },
    SassParser__peekIndentation_closure: function SassParser__peekIndentation_closure() {
    },
    SassParser__peekIndentation_closure0: function SassParser__peekIndentation_closure0() {
    },
    SassParser__tryTrailingSemicolon_closure: function SassParser__tryTrailingSemicolon_closure() {
    },
    ScssParser$(contents, url) {
      return new A.ScssParser(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.FileSpan), A._setArrayType([], type$.JSArray_Record_3_nullable_Deprecation_deprecation_and_String_message_and_FileSpan_span), A.SpanScanner$(contents, url), null);
    },
    ScssParser: function ScssParser(t0, t1, t2, t3) {
      var _ = this;
      _._isUseAllowed = true;
      _._inExpression = _._inParentheses = _._inStyleRule = _._stylesheet$_inUnknownAtRule = _._inControlDirective = _._inContentBlock = _._stylesheet$_inMixin = false;
      _._globalVariables = t0;
      _.warnings = t1;
      _.lastSilentComment = null;
      _.scanner = t2;
      _._interpolationMap = t3;
    },
    SelectorParser: function SelectorParser(t0, t1, t2, t3) {
      var _ = this;
      _._allowParent = t0;
      _._plainCss = t1;
      _.scanner = t2;
      _._interpolationMap = t3;
    },
    SelectorParser_parse_closure: function SelectorParser_parse_closure(t0) {
      this.$this = t0;
    },
    SelectorParser_parseCompoundSelector_closure: function SelectorParser_parseCompoundSelector_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser: function StylesheetParser() {
    },
    StylesheetParser_parse_closure: function StylesheetParser_parse_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parse__closure: function StylesheetParser_parse__closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parseParameterList_closure: function StylesheetParser_parseParameterList_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parseVariableDeclaration_closure: function StylesheetParser_parseVariableDeclaration_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_parseUseRule_closure: function StylesheetParser_parseUseRule_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__parseSingleProduction_closure: function StylesheetParser__parseSingleProduction_closure(t0, t1, t2) {
      this.$this = t0;
      this.production = t1;
      this.T = t2;
    },
    StylesheetParser__statement_closure: function StylesheetParser__statement_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure: function StylesheetParser_variableDeclarationWithoutNamespace_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_variableDeclarationWithoutNamespace_closure0: function StylesheetParser_variableDeclarationWithoutNamespace_closure0(t0) {
      this.declaration = t0;
    },
    StylesheetParser__declarationOrBuffer_closure: function StylesheetParser__declarationOrBuffer_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__declarationOrBuffer_closure0: function StylesheetParser__declarationOrBuffer_closure0(t0) {
      this.$this = t0;
    },
    StylesheetParser__declarationOrBuffer_closure1: function StylesheetParser__declarationOrBuffer_closure1(t0) {
      this.$this = t0;
    },
    StylesheetParser__styleRule_closure: function StylesheetParser__styleRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInStyleRule = t2;
      _.start = t3;
    },
    StylesheetParser__propertyOrVariableDeclaration_closure: function StylesheetParser__propertyOrVariableDeclaration_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__tryDeclarationChildren_closure: function StylesheetParser__tryDeclarationChildren_closure(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    StylesheetParser__atRootRule_closure: function StylesheetParser__atRootRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__atRootRule_closure0: function StylesheetParser__atRootRule_closure0() {
    },
    StylesheetParser__eachRule_closure: function StylesheetParser__eachRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.wasInControlDirective = t1;
      _.variables = t2;
      _.list = t3;
    },
    StylesheetParser__functionRule_closure: function StylesheetParser__functionRule_closure(t0, t1, t2) {
      this.name = t0;
      this.parameters = t1;
      this.precedingComment = t2;
    },
    StylesheetParser__forRule_closure: function StylesheetParser__forRule_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__forRule_closure0: function StylesheetParser__forRule_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.wasInControlDirective = t2;
      _.variable = t3;
      _.from = t4;
      _.to = t5;
    },
    StylesheetParser__memberList_closure: function StylesheetParser__memberList_closure(t0, t1, t2) {
      this.$this = t0;
      this.variables = t1;
      this.identifiers = t2;
    },
    StylesheetParser__includeRule_closure: function StylesheetParser__includeRule_closure(t0) {
      this.contentParameters_ = t0;
    },
    StylesheetParser_mediaRule_closure: function StylesheetParser_mediaRule_closure(t0) {
      this.query = t0;
    },
    StylesheetParser__mixinRule_closure: function StylesheetParser__mixinRule_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.parameters = t2;
      _.precedingComment = t3;
    },
    StylesheetParser_mozDocumentRule_closure: function StylesheetParser_mozDocumentRule_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser_mozDocumentRule_closure0: function StylesheetParser_mozDocumentRule_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.name = t2;
      _.value = t3;
    },
    StylesheetParser_supportsRule_closure: function StylesheetParser_supportsRule_closure(t0) {
      this.condition = t0;
    },
    StylesheetParser__whileRule_closure: function StylesheetParser__whileRule_closure(t0, t1, t2) {
      this.$this = t0;
      this.wasInControlDirective = t1;
      this.condition = t2;
    },
    StylesheetParser_unknownAtRule_closure: function StylesheetParser_unknownAtRule_closure(t0, t1) {
      this._box_0 = t0;
      this.name = t1;
    },
    StylesheetParser__expression_resetState: function StylesheetParser__expression_resetState(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    StylesheetParser__expression_resolveOneOperation: function StylesheetParser__expression_resolveOneOperation(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetParser__expression_resolveOperations: function StylesheetParser__expression_resolveOperations(t0, t1) {
      this._box_0 = t0;
      this.resolveOneOperation = t1;
    },
    StylesheetParser__expression_addSingleExpression: function StylesheetParser__expression_addSingleExpression(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.resetState = t2;
      _.resolveOperations = t3;
    },
    StylesheetParser__expression_addOperator: function StylesheetParser__expression_addOperator(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.resolveOneOperation = t2;
      _.addSingleExpression = t3;
    },
    StylesheetParser__expression_resolveSpaceExpressions: function StylesheetParser__expression_resolveSpaceExpressions(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.resolveOperations = t2;
    },
    StylesheetParser_expressionUntilComma_closure: function StylesheetParser_expressionUntilComma_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__isHexColor_closure: function StylesheetParser__isHexColor_closure() {
    },
    StylesheetParser__unicodeRange_closure: function StylesheetParser__unicodeRange_closure() {
    },
    StylesheetParser__unicodeRange_closure0: function StylesheetParser__unicodeRange_closure0() {
    },
    StylesheetParser_namespacedExpression_closure: function StylesheetParser_namespacedExpression_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetParser_trySpecialFunction_closure: function StylesheetParser_trySpecialFunction_closure() {
    },
    StylesheetParser__expressionUntilComparison_closure: function StylesheetParser__expressionUntilComparison_closure(t0) {
      this.$this = t0;
    },
    StylesheetParser__publicIdentifier_closure: function StylesheetParser__publicIdentifier_closure(t0, t1) {
      this.$this = t0;
      this.start = t1;
    },
    StylesheetNode$_(_stylesheet, importer, canonicalUrl, allUpstream) {
      var t1 = new A.StylesheetNode(_stylesheet, importer, canonicalUrl, allUpstream._1, allUpstream._0, A.LinkedHashSet_LinkedHashSet$_empty(type$.StylesheetNode));
      t1.StylesheetNode$_$4(_stylesheet, importer, canonicalUrl, allUpstream);
      return t1;
    },
    StylesheetGraph: function StylesheetGraph(t0, t1, t2) {
      this._nodes = t0;
      this.importCache = t1;
      this._transitiveModificationTimes = t2;
    },
    StylesheetGraph_modifiedSince_transitiveModificationTime: function StylesheetGraph_modifiedSince_transitiveModificationTime(t0) {
      this.$this = t0;
    },
    StylesheetGraph_modifiedSince_transitiveModificationTime_closure: function StylesheetGraph_modifiedSince_transitiveModificationTime_closure(t0, t1) {
      this.node = t0;
      this.transitiveModificationTime = t1;
    },
    StylesheetGraph__add_closure: function StylesheetGraph__add_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.baseImporter = t2;
      _.baseUrl = t3;
    },
    StylesheetGraph_addCanonical_closure: function StylesheetGraph_addCanonical_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _.originalUrl = t3;
    },
    StylesheetGraph_reload_closure: function StylesheetGraph_reload_closure(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.canonicalUrl = t2;
    },
    StylesheetGraph__nodeFor_closure: function StylesheetGraph__nodeFor_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.baseImporter = t2;
      _.baseUrl = t3;
      _.forImport = t4;
    },
    StylesheetGraph__nodeFor_closure0: function StylesheetGraph__nodeFor_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StylesheetNode: function StylesheetNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stylesheet = t0;
      _.importer = t1;
      _.canonicalUrl = t2;
      _._upstream = t3;
      _._upstreamImports = t4;
      _._downstream = t5;
    },
    Syntax_forPath(path) {
      var t1,
        _0_0 = A.ParsedPath_ParsedPath$parse(path, $.$get$context().style)._splitExtension$1(1)[1];
      $label0$0: {
        if (".sass" === _0_0) {
          t1 = B.Syntax_Sass_sass;
          break $label0$0;
        }
        if (".css" === _0_0) {
          t1 = B.Syntax_CSS_css;
          break $label0$0;
        }
        t1 = B.Syntax_SCSS_scss;
        break $label0$0;
      }
      return t1;
    },
    Syntax: function Syntax(t0, t1) {
      this._syntax$_name = t0;
      this._name = t1;
    },
    Box: function Box(t0, t1) {
      this._box$_inner = t0;
      this.$ti = t1;
    },
    ModifiableBox: function ModifiableBox(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    LazyFileSpan: function LazyFileSpan(t0) {
      this._builder = t0;
      this._lazy_file_span$_span = null;
    },
    LimitedMapView$blocklist(_map, blocklist, $K, $V) {
      var t2, key,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty($K);
      for (t2 = J.get$iterator$ax(_map.get$keys(_map)); t2.moveNext$0();) {
        key = t2.get$current(t2);
        if (!blocklist.contains$1(0, key))
          t1.add$1(0, key);
      }
      return new A.LimitedMapView(_map, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("LimitedMapView<1,2>"));
    },
    LimitedMapView: function LimitedMapView(t0, t1, t2) {
      this._limited_map_view$_map = t0;
      this._limited_map_view$_keys = t1;
      this.$ti = t2;
    },
    MapExtensions_get_pairs(_this, $K, $V) {
      var t1 = _this.get$entries(_this);
      return t1.map$1$1(t1, new A.MapExtensions_get_pairs_closure($K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("+(1,2)"));
    },
    MapExtensions_get_pairs_closure: function MapExtensions_get_pairs_closure(t0, t1) {
      this.K = t0;
      this.V = t1;
    },
    MergedMapView$(maps, $K, $V) {
      var t1 = $K._eval$1("@<0>")._bind$1($V);
      t1 = new A.MergedMapView(A.LinkedHashMap_LinkedHashMap$_empty($K, t1._eval$1("Map<1,2>")), t1._eval$1("MergedMapView<1,2>"));
      t1.MergedMapView$1(maps, $K, $V);
      return t1;
    },
    MergedMapView: function MergedMapView(t0, t1) {
      this._mapsByKey = t0;
      this.$ti = t1;
    },
    MultiDirWatcher: function MultiDirWatcher(t0, t1, t2) {
      this._watchers = t0;
      this._group = t1;
      this._poll = t2;
    },
    MultiSpan: function MultiSpan(t0, t1, t2) {
      this._multi_span$_primary = t0;
      this.primaryLabel = t1;
      this.secondarySpans = t2;
    },
    NoSourceMapBuffer: function NoSourceMapBuffer(t0) {
      this._no_source_map_buffer$_buffer = t0;
    },
    PrefixedMapView: function PrefixedMapView(t0, t1, t2) {
      this._prefixed_map_view$_map = t0;
      this._prefix = t1;
      this.$ti = t2;
    },
    _PrefixedKeys: function _PrefixedKeys(t0) {
      this._view = t0;
    },
    _PrefixedKeys_iterator_closure: function _PrefixedKeys_iterator_closure(t0) {
      this.$this = t0;
    },
    PublicMemberMapView: function PublicMemberMapView(t0, t1) {
      this._public_member_map_view$_inner = t0;
      this.$ti = t1;
    },
    SourceMapBuffer: function SourceMapBuffer(t0, t1) {
      var _ = this;
      _._source_map_buffer$_buffer = t0;
      _._entries = t1;
      _._column = _._line = 0;
      _._inSpan = false;
    },
    SourceMapBuffer_buildSourceMap_closure: function SourceMapBuffer_buildSourceMap_closure(t0, t1) {
      this._box_0 = t0;
      this.prefixLength = t1;
    },
    UnprefixedMapView: function UnprefixedMapView(t0, t1, t2) {
      this._unprefixed_map_view$_map = t0;
      this._unprefixed_map_view$_prefix = t1;
      this.$ti = t2;
    },
    _UnprefixedKeys: function _UnprefixedKeys(t0) {
      this._unprefixed_map_view$_view = t0;
    },
    _UnprefixedKeys_iterator_closure: function _UnprefixedKeys_iterator_closure(t0) {
      this.$this = t0;
    },
    _UnprefixedKeys_iterator_closure0: function _UnprefixedKeys_iterator_closure0(t0) {
      this.$this = t0;
    },
    toSentence(iter, conjunction) {
      if (iter.get$length(iter) === 1)
        return J.toString$0$(iter.get$first(iter));
      return A.IterableExtension_get_exceptLast(iter).join$1(0, ", ") + (" " + conjunction + " " + A.S(iter.get$last(iter)));
    },
    indent(string, indentation) {
      return new A.MappedListIterable(A._setArrayType(string.split("\n"), type$.JSArray_String), new A.indent_closure(indentation), type$.MappedListIterable_String_String).join$1(0, "\n");
    },
    pluralize($name, number, plural) {
      if (number === 1)
        return $name;
      if (plural != null)
        return plural;
      return $name + "s";
    },
    trimAscii(string, excludeEscape) {
      var t1,
        start = A._firstNonWhitespace(string);
      if (start == null)
        t1 = "";
      else {
        t1 = A._lastNonWhitespace(string, true);
        t1.toString;
        t1 = B.JSString_methods.substring$2(string, start, t1 + 1);
      }
      return t1;
    },
    trimAsciiRight(string, excludeEscape) {
      var end = A._lastNonWhitespace(string, excludeEscape);
      return end == null ? "" : B.JSString_methods.substring$2(string, 0, end + 1);
    },
    _firstNonWhitespace(string) {
      var t1, i, t2;
      for (t1 = string.length, i = 0; i < t1; ++i) {
        t2 = string.charCodeAt(i);
        if (!(t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12))
          return i;
      }
      return null;
    },
    _lastNonWhitespace(string, excludeEscape) {
      var i, i0, codeUnit;
      for (i = string.length - 1, i0 = i; i0 >= 0; --i0) {
        codeUnit = string.charCodeAt(i0);
        if (!(codeUnit === 32 || codeUnit === 9 || codeUnit === 10 || codeUnit === 13 || codeUnit === 12))
          if (excludeEscape && i0 !== 0 && i0 !== i && codeUnit === 92)
            return i0 + 1;
          else
            return i0;
      }
      return null;
    },
    isPublic(member) {
      var start = member.charCodeAt(0);
      return start !== 45 && start !== 95;
    },
    flattenVertically(iterable, $T) {
      var result,
        t1 = iterable.$ti._eval$1("@<ListIterable.E>")._bind$1($T._eval$1("QueueList<0>"))._eval$1("MappedListIterable<1,2>"),
        queues = A.List_List$_of(new A.MappedListIterable(iterable, new A.flattenVertically_closure($T), t1), t1._eval$1("ListIterable.E"));
      if (queues.length === 1)
        return B.JSArray_methods.get$first(queues);
      result = A._setArrayType([], $T._eval$1("JSArray<0>"));
      for (; queues.length !== 0;) {
        queues.$flags & 1 && A.throwUnsupportedOperation(queues, 16);
        B.JSArray_methods._removeWhere$2(queues, new A.flattenVertically_closure0(result, $T), true);
      }
      return result;
    },
    codepointIndexToCodeUnitIndex(string, codepointIndex) {
      var codeUnitIndex, i, codeUnitIndex0;
      for (codeUnitIndex = 0, i = 0; i < codepointIndex; ++i) {
        codeUnitIndex0 = codeUnitIndex + 1;
        codeUnitIndex = string.charCodeAt(codeUnitIndex) >>> 10 === 54 ? codeUnitIndex0 + 1 : codeUnitIndex0;
      }
      return codeUnitIndex;
    },
    codeUnitIndexToCodepointIndex(string, codeUnitIndex) {
      var codepointIndex, i;
      for (codepointIndex = 0, i = 0; i < codeUnitIndex; i = (string.charCodeAt(i) >>> 10 === 54 ? i + 1 : i) + 1)
        ++codepointIndex;
      return codepointIndex;
    },
    frameForSpan(span, member, url) {
      var t2, t3,
        t1 = url == null ? span.get$sourceUrl(span) : url;
      if (t1 == null)
        t1 = $.$get$_noSourceUrl();
      t2 = span.get$start(span);
      t2 = t2.file.getLine$1(t2.offset);
      t3 = span.get$start(span);
      return new A.Frame(t1, t2 + 1, t3.file.getColumn$1(t3.offset) + 1, member);
    },
    declarationName(span) {
      var text = span.get$text();
      return A.trimAsciiRight(B.JSString_methods.substring$2(text, 0, B.JSString_methods.indexOf$1(text, ":")), false);
    },
    unvendor($name) {
      var i,
        t1 = $name.length;
      if (t1 < 2)
        return $name;
      if ($name.charCodeAt(0) !== 45)
        return $name;
      if ($name.charCodeAt(1) === 45)
        return $name;
      for (i = 2; i < t1; ++i)
        if ($name.charCodeAt(i) === 45)
          return B.JSString_methods.substring$1($name, i + 1);
      return $name;
    },
    equalsIgnoreCase(string1, string2) {
      var t1, i;
      if (string1 === string2)
        return true;
      if (string1 == null)
        return false;
      t1 = string1.length;
      if (t1 !== string2.length)
        return false;
      for (i = 0; i < t1; ++i)
        if (!A.characterEqualsIgnoreCase(string1.charCodeAt(i), string2.charCodeAt(i)))
          return false;
      return true;
    },
    startsWithIgnoreCase(string, prefix) {
      var i,
        t1 = prefix.length;
      if (string.length < t1)
        return false;
      for (i = 0; i < t1; ++i)
        if (!A.characterEqualsIgnoreCase(string.charCodeAt(i), prefix.charCodeAt(i)))
          return false;
      return true;
    },
    mapInPlace(list, $function) {
      var i;
      for (i = 0; i < list.length; ++i)
        list[i] = $function.call$1(list[i]);
    },
    longestCommonSubsequence(list1, list2, select, $T) {
      var t1, _i, selections, i, i0, j, selection, j0,
        _length = list1.get$length(0) + 1,
        lengths = J.JSArray_JSArray$allocateFixed(_length, type$.List_int);
      for (t1 = type$.int, _i = 0; _i < _length; ++_i)
        lengths[_i] = A.List_List$filled(((list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0) + 1, 0, false, t1);
      _length = list1.get$length(0);
      selections = J.JSArray_JSArray$allocateFixed(_length, $T._eval$1("List<0?>"));
      for (t1 = $T._eval$1("0?"), _i = 0; _i < _length; ++_i)
        selections[_i] = A.List_List$filled((list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0, null, false, t1);
      for (i = 0; i < (list1._queue_list$_tail - list1._queue_list$_head & J.get$length$asx(list1._queue_list$_table) - 1) >>> 0; i = i0)
        for (i0 = i + 1, j = 0; j < (list2._queue_list$_tail - list2._queue_list$_head & J.get$length$asx(list2._queue_list$_table) - 1) >>> 0; j = j0) {
          selection = select.call$2(list1.$index(0, i), list2.$index(0, j));
          selections[i][j] = selection;
          t1 = lengths[i0];
          j0 = j + 1;
          t1[j0] = selection == null ? Math.max(t1[j], lengths[i][j0]) : lengths[i][j] + 1;
        }
      return new A.longestCommonSubsequence_backtrack(selections, lengths, $T).call$2(list1.get$length(0) - 1, list2.get$length(0) - 1);
    },
    removeFirstWhere(list, test, orElse) {
      var i;
      for (i = 0; i < list.length; ++i) {
        if (!test.call$1(list[i]))
          continue;
        B.JSArray_methods.removeAt$1(list, i);
        return;
      }
      orElse.call$0();
    },
    mapAddAll2(destination, source, K1, K2, $V) {
      source.forEach$1(0, new A.mapAddAll2_closure(destination, K1, K2, $V));
    },
    setAll(map, keys, value) {
      var t1;
      for (t1 = J.get$iterator$ax(keys); t1.moveNext$0();)
        map.$indexSet(0, t1.get$current(t1), value);
    },
    rotateSlice(list, start, end) {
      var i, next,
        element = list.$index(0, end - 1);
      for (i = start; i < end; ++i, element = next) {
        next = list.$index(0, i);
        list.$indexSet(0, i, element);
      }
    },
    mapAsync(iterable, callback, $E, $F) {
      return A.mapAsync$body(iterable, callback, $E, $F, $F._eval$1("Iterable<0>"));
    },
    mapAsync$body(iterable, callback, $E, $F, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, t2, _i, t1, $async$temp1;
      var $async$mapAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._setArrayType([], $F._eval$1("JSArray<0>"));
              t2 = iterable.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$temp1 = t1;
              $async$goto = 6;
              return A._asyncAwait(callback.call$1(iterable[_i]), $async$mapAsync);
            case 6:
              // returning from await.
              $async$temp1.push($async$result);
            case 4:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$mapAsync, $async$completer);
    },
    putIfAbsentAsync(map, key, ifAbsent, $K, $V) {
      return A.putIfAbsentAsync$body(map, key, ifAbsent, $K, $V, $V);
    },
    putIfAbsentAsync$body(map, key, ifAbsent, $K, $V, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, t1, value;
      var $async$putIfAbsentAsync = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (map.containsKey$1(key)) {
                t1 = map.$index(0, key);
                $async$returnValue = t1 == null ? $V._as(t1) : t1;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(ifAbsent.call$0(), $async$putIfAbsentAsync);
            case 3:
              // returning from await.
              value = $async$result;
              map.$indexSet(0, key, value);
              $async$returnValue = value;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$putIfAbsentAsync, $async$completer);
    },
    copyMapOfMap(map, K1, K2, $V) {
      var t3, key, child,
        t1 = K2._eval$1("@<0>")._bind$1($V)._eval$1("Map<1,2>"),
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(K1, t1);
      for (t1 = A.MapExtensions_get_pairs(map, K1, t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        key = t3._0;
        child = t3._1;
        t3 = A.LinkedHashMap_LinkedHashMap(null, null, null, K2, $V);
        t3.addAll$1(0, child);
        t2.$indexSet(0, key, t3);
      }
      return t2;
    },
    copyMapOfList(map, $K, $E) {
      var t3,
        t1 = $E._eval$1("List<0>"),
        t2 = A.LinkedHashMap_LinkedHashMap$_empty($K, t1);
      for (t1 = A.MapExtensions_get_pairs(map, $K, t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t3 = t1.get$current(t1);
        t2.$indexSet(0, t3._0, J.toList$0$ax(t3._1));
      }
      return t2;
    },
    consumeEscapedCharacter(scanner) {
      var _1_0, value, i, next, t1;
      scanner.expectChar$1(92);
      _1_0 = scanner.peekChar$0();
      if (_1_0 == null)
        return 65533;
      if (_1_0 === 10 || _1_0 === 13 || _1_0 === 12)
        scanner.error$1(0, "Expected escape sequence.");
      if (A.CharacterExtension_get_isHex(_1_0)) {
        for (value = 0, i = 0; i < 6; ++i) {
          next = scanner.peekChar$0();
          if (next != null) {
            t1 = true;
            if (!(next >= 48 && next <= 57))
              if (!(next >= 97 && next <= 102))
                t1 = next >= 65 && next <= 70;
            t1 = !t1;
          } else
            t1 = true;
          if (t1)
            break;
          value = (value << 4 >>> 0) + A.asHex(scanner.readChar$0());
        }
        t1 = scanner.peekChar$0();
        if (t1 === 32 || t1 === 9 || t1 === 10 || t1 === 13 || t1 === 12)
          scanner.readChar$0();
        $label0$1: {
          if (0 !== value)
            t1 = value >= 55296 && value <= 57343 || value >= 1114111;
          else
            t1 = true;
          if (t1) {
            t1 = 65533;
            break $label0$1;
          }
          t1 = value;
          break $label0$1;
        }
        return t1;
      }
      return scanner.readChar$0();
    },
    throwWithTrace(error, originalError, trace) {
      var t1 = A.getTrace(originalError);
      A.attachTrace(error, t1 == null ? trace : t1);
      throw A.wrapException(error);
    },
    attachTrace(error, trace) {
      var t1;
      if (trace.toString$0(0).length === 0)
        return;
      t1 = $.$get$_traces();
      A.Expando__checkType(error);
      if (t1._jsWeakMap.get(error) == null)
        t1.$indexSet(0, error, trace);
    },
    getTrace(error) {
      var t1;
      if (typeof error == "string" || typeof error == "number" || A._isBool(error))
        t1 = null;
      else {
        t1 = $.$get$_traces();
        A.Expando__checkType(error);
        t1 = t1._jsWeakMap.get(error);
      }
      return t1;
    },
    indent_closure: function indent_closure(t0) {
      this.indentation = t0;
    },
    flattenVertically_closure: function flattenVertically_closure(t0) {
      this.T = t0;
    },
    flattenVertically_closure0: function flattenVertically_closure0(t0, t1) {
      this.result = t0;
      this.T = t1;
    },
    longestCommonSubsequence_backtrack: function longestCommonSubsequence_backtrack(t0, t1, t2) {
      this.selections = t0;
      this.lengths = t1;
      this.T = t2;
    },
    mapAddAll2_closure: function mapAddAll2_closure(t0, t1, t2, t3) {
      var _ = this;
      _.destination = t0;
      _.K1 = t1;
      _.K2 = t2;
      _.V = t3;
    },
    SassApiValue_assertSelector(_this, allowParent, $name) {
      var error, stackTrace, t1, exception,
        string = _this._selectorString$1($name);
      try {
        t1 = A.SelectorList_SelectorList$parse(string, allowParent, null, false);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SassFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = B.JSString_methods.replaceFirst$2(J.toString$0$(error), "Error: ", "");
          A.throwWithTrace(new A.SassScriptException($name == null ? t1 : "$" + $name + ": " + t1), error, stackTrace);
        } else
          throw exception;
      }
    },
    SassApiValue_assertCompoundSelector(_this, $name) {
      var error, stackTrace, t1, exception,
        allowParent = false,
        string = _this._selectorString$1($name);
      try {
        t1 = new A.SelectorParser(allowParent, false, A.SpanScanner$(string, null), null).parseCompoundSelector$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.SassFormatException._is(t1)) {
          error = t1;
          stackTrace = A.getTraceFromException(exception);
          t1 = B.JSString_methods.replaceFirst$2(J.toString$0$(error), "Error: ", "");
          A.throwWithTrace(new A.SassScriptException("$" + $name + ": " + t1), error, stackTrace);
        } else
          throw exception;
      }
    },
    Value: function Value() {
    },
    SassArgumentList$(contents, keywords, separator) {
      var t1 = type$.Value;
      t1 = new A.SassArgumentList(A.ConstantMap_ConstantMap$from(keywords, type$.String, t1), A.List_List$unmodifiable(contents, t1), separator, false);
      t1.SassList$3$brackets(contents, separator, false);
      return t1;
    },
    SassArgumentList: function SassArgumentList(t0, t1, t2, t3) {
      var _ = this;
      _._keywords = t0;
      _._wereKeywordsAccessed = false;
      _._list$_contents = t1;
      _._separator = t2;
      _._hasBrackets = t3;
    },
    SassBoolean: function SassBoolean(t0) {
      this.value = t0;
    },
    SassCalculation_calc(argument) {
      var t1,
        _0_0 = A.SassCalculation__simplify(argument);
      $label0$0: {
        if (_0_0 instanceof A.SassNumber) {
          t1 = _0_0;
          break $label0$0;
        }
        if (_0_0 instanceof A.SassCalculation) {
          t1 = _0_0;
          break $label0$0;
        }
        t1 = new A.SassCalculation("calc", A.List_List$unmodifiable([_0_0], type$.Object));
        break $label0$0;
      }
      return t1;
    },
    SassCalculation_min($arguments) {
      var minimum, _i, arg, t2,
        args = A.List_List$unmodifiable(new A.MappedListIterable($arguments, A.calculation_SassCalculation__simplify$closure(), A._arrayInstanceType($arguments)._eval$1("MappedListIterable<1,@>")), type$.Object),
        t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.ArgumentError$("min() must have at least one argument.", null));
      for (minimum = null, _i = 0; _i < t1; ++_i) {
        arg = args[_i];
        if (arg instanceof A.SassNumber)
          t2 = minimum != null && !minimum.isComparableTo$1(arg);
        else
          t2 = true;
        if (t2) {
          minimum = null;
          break;
        } else if (minimum == null || minimum.greaterThan$1(arg).value)
          minimum = arg;
      }
      if (minimum != null)
        return minimum;
      A.SassCalculation__verifyCompatibleNumbers(args);
      return new A.SassCalculation("min", args);
    },
    SassCalculation_max($arguments) {
      var maximum, _i, arg, t2,
        args = A.List_List$unmodifiable(new A.MappedListIterable($arguments, A.calculation_SassCalculation__simplify$closure(), A._arrayInstanceType($arguments)._eval$1("MappedListIterable<1,@>")), type$.Object),
        t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.ArgumentError$("max() must have at least one argument.", null));
      for (maximum = null, _i = 0; _i < t1; ++_i) {
        arg = args[_i];
        if (arg instanceof A.SassNumber)
          t2 = maximum != null && !maximum.isComparableTo$1(arg);
        else
          t2 = true;
        if (t2) {
          maximum = null;
          break;
        } else if (maximum == null || maximum.lessThan$1(arg).value)
          maximum = arg;
      }
      if (maximum != null)
        return maximum;
      A.SassCalculation__verifyCompatibleNumbers(args);
      return new A.SassCalculation("max", args);
    },
    SassCalculation_hypot($arguments) {
      var first, subtotal, i, number, value, t2,
        args = A.List_List$unmodifiable(new A.MappedListIterable($arguments, A.calculation_SassCalculation__simplify$closure(), A._arrayInstanceType($arguments)._eval$1("MappedListIterable<1,@>")), type$.Object),
        t1 = args.length;
      if (t1 === 0)
        throw A.wrapException(A.ArgumentError$("hypot() must have at least one argument.", null));
      A.SassCalculation__verifyCompatibleNumbers(args);
      first = B.JSArray_methods.get$first(args);
      if (!(first instanceof A.SassNumber) || first.hasUnit$1("%"))
        return new A.SassCalculation("hypot", args);
      for (subtotal = 0, i = 0; i < t1;) {
        number = args[i];
        if (!(number instanceof A.SassNumber) || !number.hasCompatibleUnits$1(first))
          return new A.SassCalculation("hypot", args);
        ++i;
        value = number.convertValueToMatch$3(first, "numbers[" + i + "]", "numbers[1]");
        subtotal += value * value;
      }
      t1 = Math.sqrt(subtotal);
      t2 = first.get$numeratorUnits(first);
      return A.SassNumber_SassNumber$withUnits(t1, first.get$denominatorUnits(first), t2);
    },
    SassCalculation_abs(argument) {
      argument = A.SassCalculation__simplify(argument);
      if (!(argument instanceof A.SassNumber))
        return new A.SassCalculation("abs", A._setArrayType([argument], type$.JSArray_Object));
      if (argument.hasUnit$1("%"))
        A.warnForDeprecation(string$.Passinp + argument.toString$0(0) + ")\nTo emit a CSS abs() now: abs(#{" + argument.toString$0(0) + string$.x7d__Mor, B.Deprecation_pLJ);
      return A.SassNumber_SassNumber(Math.abs(argument._number$_value), null).coerceToMatch$1(argument);
    },
    SassCalculation_exp(argument) {
      argument = A.SassCalculation__simplify(argument);
      if (!(argument instanceof A.SassNumber))
        return new A.SassCalculation("exp", A._setArrayType([argument], type$.JSArray_Object));
      argument.assertNoUnits$0();
      return A.pow0(A.SassNumber_SassNumber(2.718281828459045, null), argument);
    },
    SassCalculation_sign(argument) {
      var t1, _0_2, t2, arg;
      argument = A.SassCalculation__simplify(argument);
      $label0$0: {
        t1 = argument instanceof A.SassNumber;
        if (t1) {
          _0_2 = argument._number$_value;
          if (!isNaN(_0_2))
            t2 = 0 === _0_2;
          else
            t2 = true;
        } else
          t2 = false;
        if (t2) {
          t1 = argument;
          break $label0$0;
        }
        if (t1) {
          t1 = !argument.hasUnit$1("%");
          arg = argument;
        } else {
          arg = null;
          t1 = false;
        }
        if (t1) {
          t1 = A.SassNumber_SassNumber(J.get$sign$in(arg._number$_value), null).coerceToMatch$1(argument);
          break $label0$0;
        }
        t1 = new A.SassCalculation("sign", A._setArrayType([argument], type$.JSArray_Object));
        break $label0$0;
      }
      return t1;
    },
    SassCalculation_clamp(min, value, max) {
      var t1, args;
      if (value == null && max != null)
        throw A.wrapException(A.ArgumentError$("If value is null, max must also be null.", null));
      min = A.SassCalculation__simplify(min);
      value = A.NullableExtension_andThen(value, A.calculation_SassCalculation__simplify$closure());
      max = A.NullableExtension_andThen(max, A.calculation_SassCalculation__simplify$closure());
      if (min instanceof A.SassNumber && value instanceof A.SassNumber && max instanceof A.SassNumber && min.hasCompatibleUnits$1(value) && min.hasCompatibleUnits$1(max)) {
        if (value.lessThanOrEquals$1(min).value)
          return min;
        if (value.greaterThanOrEquals$1(max).value)
          return max;
        return value;
      }
      t1 = [min];
      if (value != null)
        t1.push(value);
      if (max != null)
        t1.push(max);
      args = A.List_List$unmodifiable(t1, type$.Object);
      A.SassCalculation__verifyCompatibleNumbers(args);
      A.SassCalculation__verifyLength(args, 3);
      return new A.SassCalculation("clamp", args);
    },
    SassCalculation_pow(base, exponent) {
      var t1 = A._setArrayType([base], type$.JSArray_Object);
      if (exponent != null)
        t1.push(exponent);
      A.SassCalculation__verifyLength(t1, 2);
      base = A.SassCalculation__simplify(base);
      exponent = A.NullableExtension_andThen(exponent, A.calculation_SassCalculation__simplify$closure());
      if (!(base instanceof A.SassNumber) || !(exponent instanceof A.SassNumber))
        return new A.SassCalculation("pow", t1);
      base.assertNoUnits$0();
      exponent.assertNoUnits$0();
      return A.pow0(base, exponent);
    },
    SassCalculation_log(number, base) {
      var t1, t2;
      number = A.SassCalculation__simplify(number);
      base = A.NullableExtension_andThen(base, A.calculation_SassCalculation__simplify$closure());
      t1 = A._setArrayType([number], type$.JSArray_Object);
      t2 = base != null;
      if (t2)
        t1.push(base);
      if (number instanceof A.SassNumber)
        t2 = t2 && !(base instanceof A.SassNumber);
      else
        t2 = true;
      if (t2)
        return new A.SassCalculation("log", t1);
      number.assertNoUnits$0();
      if (base instanceof A.SassNumber) {
        base.assertNoUnits$0();
        return A.log(number, base);
      }
      return A.log(number, null);
    },
    SassCalculation_atan2(y, x) {
      var t1;
      y = A.SassCalculation__simplify(y);
      x = A.NullableExtension_andThen(x, A.calculation_SassCalculation__simplify$closure());
      t1 = A._setArrayType([y], type$.JSArray_Object);
      if (x != null)
        t1.push(x);
      A.SassCalculation__verifyLength(t1, 2);
      A.SassCalculation__verifyCompatibleNumbers(t1);
      if (!(y instanceof A.SassNumber) || !(x instanceof A.SassNumber) || y.hasUnit$1("%") || x.hasUnit$1("%") || !y.hasCompatibleUnits$1(x))
        return new A.SassCalculation("atan2", t1);
      return A.SassNumber_SassNumber$withUnits(Math.atan2(y._number$_value, x.convertValueToMatch$3(y, "x", "y")) * 57.29577951308232, null, A._setArrayType(["deg"], type$.JSArray_String));
    },
    SassCalculation_rem(dividend, modulus) {
      var t1, result;
      dividend = A.SassCalculation__simplify(dividend);
      modulus = A.NullableExtension_andThen(modulus, A.calculation_SassCalculation__simplify$closure());
      t1 = A._setArrayType([dividend], type$.JSArray_Object);
      if (modulus != null)
        t1.push(modulus);
      A.SassCalculation__verifyLength(t1, 2);
      A.SassCalculation__verifyCompatibleNumbers(t1);
      if (!(dividend instanceof A.SassNumber) || !(modulus instanceof A.SassNumber) || !dividend.hasCompatibleUnits$1(modulus))
        return new A.SassCalculation("rem", t1);
      result = dividend.modulo$1(modulus);
      t1 = modulus._number$_value;
      if (A.DoubleWithSignedZero_get_signIncludingZero(t1) !== A.DoubleWithSignedZero_get_signIncludingZero(dividend._number$_value)) {
        if (t1 == 1 / 0 || t1 == -1 / 0)
          return dividend;
        if (result._number$_value === 0)
          return result.unaryMinus$0();
        return result.minus$1(modulus);
      }
      return result;
    },
    SassCalculation_mod(dividend, modulus) {
      var t1;
      dividend = A.SassCalculation__simplify(dividend);
      modulus = A.NullableExtension_andThen(modulus, A.calculation_SassCalculation__simplify$closure());
      t1 = A._setArrayType([dividend], type$.JSArray_Object);
      if (modulus != null)
        t1.push(modulus);
      A.SassCalculation__verifyLength(t1, 2);
      A.SassCalculation__verifyCompatibleNumbers(t1);
      if (!(dividend instanceof A.SassNumber) || !(modulus instanceof A.SassNumber) || !dividend.hasCompatibleUnits$1(modulus))
        return new A.SassCalculation("mod", t1);
      return dividend.modulo$1(modulus);
    },
    SassCalculation_roundInternal(strategyOrNumber, numberOrStep, step, inLegacySassFunction, span, warn) {
      var t2, t3, _0_8_isSet, _0_6_isSet, _0_6_isSet0, t4, _0_14_isSet, _0_16, _0_18, _0_18_isSet, _0_20, _0_20_isSet, strategy, _0_9_isSet0, _0_12, _0_14, _0_16_isSet, t5, _0_12_isSet, _0_12_isSet0, rest, _null = null, _s5_ = "round",
        _0_1 = A.SassCalculation__simplify(strategyOrNumber),
        _0_6 = A.NullableExtension_andThen(numberOrStep, A.calculation_SassCalculation__simplify$closure()),
        _0_9 = A.NullableExtension_andThen(step, A.calculation_SassCalculation__simplify$closure()),
        _0_10 = _0_1,
        _0_8 = _null,
        _0_60 = _null,
        _0_100 = _null,
        _0_10_isSet = false,
        _0_90 = _null,
        _0_9_isSet = false,
        number = _null,
        t1 = false;
      if (_0_1 instanceof A.SassNumber) {
        t2 = _0_10;
        t3 = type$.SassNumber;
        _0_8_isSet = !t3._as(t2).get$hasUnits();
        if (_0_8_isSet) {
          number = t3._as(_0_10);
          _0_8 = _0_6 == null;
          _0_10_isSet = _0_8;
          _0_60 = _0_6;
          if (_0_10_isSet) {
            _0_100 = _0_9 == null;
            t1 = _0_100;
            _0_90 = _0_9;
          }
          _0_9_isSet = _0_10_isSet;
        }
        _0_6_isSet = _0_8_isSet;
      } else {
        _0_8_isSet = false;
        _0_6_isSet = false;
      }
      if (t1)
        return A.SassNumber_SassNumber(B.JSNumber_methods.round$0(number._number$_value), _null);
      t1 = false;
      if (_0_10 instanceof A.SassNumber) {
        t2 = _0_10;
        type$.SassNumber._as(t2);
        if (_0_8_isSet)
          t3 = _0_8;
        else {
          if (_0_6_isSet)
            t3 = _0_60;
          else {
            t3 = _0_6;
            _0_60 = t3;
            _0_6_isSet = true;
          }
          _0_8 = t3 == null;
          t3 = _0_8;
          _0_8_isSet = true;
        }
        if (t3) {
          if (_0_10_isSet)
            t1 = _0_100;
          else {
            if (_0_9_isSet)
              t1 = _0_90;
            else {
              t1 = _0_9;
              _0_90 = t1;
              _0_9_isSet = true;
            }
            _0_100 = t1 == null;
            t1 = _0_100;
            _0_10_isSet = true;
          }
          t1 = t1 && inLegacySassFunction != null;
        }
        number = t2;
      } else
        number = _null;
      if (t1) {
        warn.call$2(string$.In_fut, B.Deprecation_1AX);
        t1 = B.JSNumber_methods.round$0(number._number$_value);
        t2 = number.get$numeratorUnits(number);
        return A.SassNumber_SassNumber$withUnits(t1, number.get$denominatorUnits(number), t2);
      }
      step = _null;
      t1 = false;
      if (_0_10 instanceof A.SassNumber) {
        _0_6_isSet0 = true;
        t2 = _0_10;
        t3 = type$.SassNumber;
        t3._as(t2);
        if (_0_6_isSet)
          t4 = _0_60;
        else {
          t4 = _0_6;
          _0_6_isSet = _0_6_isSet0;
          _0_60 = t4;
        }
        if (t4 instanceof A.SassNumber) {
          if (_0_6_isSet)
            t4 = _0_60;
          else {
            t4 = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = t4;
          }
          t3._as(t4);
          if (_0_10_isSet)
            t1 = _0_100;
          else {
            if (_0_9_isSet)
              t1 = _0_90;
            else {
              t1 = _0_9;
              _0_90 = t1;
              _0_9_isSet = true;
            }
            _0_100 = t1 == null;
            t1 = _0_100;
            _0_10_isSet = true;
          }
          t1 = t1 && !t2.hasCompatibleUnits$1(t4);
          step = t4;
        }
        number = t2;
      } else
        number = _null;
      if (t1) {
        t1 = type$.JSArray_Object;
        A.SassCalculation__verifyCompatibleNumbers(A._setArrayType([number, step], t1));
        return new A.SassCalculation(_s5_, A._setArrayType([number, step], t1));
      }
      step = _null;
      t1 = false;
      if (_0_10 instanceof A.SassNumber) {
        _0_6_isSet0 = true;
        t2 = _0_10;
        t3 = type$.SassNumber;
        t3._as(t2);
        if (_0_6_isSet)
          t4 = _0_60;
        else {
          t4 = _0_6;
          _0_6_isSet = _0_6_isSet0;
          _0_60 = t4;
        }
        if (t4 instanceof A.SassNumber) {
          if (_0_6_isSet)
            t4 = _0_60;
          else {
            t4 = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = t4;
          }
          t3._as(t4);
          if (_0_10_isSet)
            t1 = _0_100;
          else {
            if (_0_9_isSet)
              t1 = _0_90;
            else {
              t1 = _0_9;
              _0_90 = t1;
              _0_9_isSet = true;
            }
            _0_100 = t1 == null;
            t1 = _0_100;
            _0_10_isSet = true;
          }
          step = t4;
        }
        number = t2;
      } else
        number = _null;
      if (t1) {
        A.SassCalculation__verifyCompatibleNumbers(A._setArrayType([number, step], type$.JSArray_Object));
        return A.SassCalculation__roundWithStep("nearest", number, step);
      }
      _0_14_isSet = _0_10 instanceof A.SassString;
      _0_16 = _null;
      _0_18 = _null;
      _0_18_isSet = false;
      _0_20 = _null;
      _0_20_isSet = false;
      strategy = _null;
      number = _null;
      step = _null;
      t1 = false;
      if (_0_14_isSet) {
        _0_6_isSet0 = true;
        _0_9_isSet0 = true;
        t2 = _0_10;
        _0_12 = type$.SassString._as(t2)._string$_text;
        t2 = _0_12;
        _0_14 = "nearest" === t2;
        t2 = _0_14;
        _0_16_isSet = !t2;
        t2 = true;
        if (_0_16_isSet) {
          _0_16 = "up" === _0_12;
          t3 = _0_16;
          _0_18_isSet = !t3;
          if (_0_18_isSet) {
            _0_18 = "down" === _0_12;
            t3 = _0_18;
            _0_20_isSet = !t3;
            if (_0_20_isSet) {
              _0_20 = "to-zero" === _0_12;
              t2 = _0_20;
            }
          }
        }
        if (t2) {
          t2 = _0_10;
          type$.SassString._as(t2);
          if (_0_6_isSet)
            t3 = _0_60;
          else {
            t3 = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = t3;
          }
          if (t3 instanceof A.SassNumber) {
            if (_0_6_isSet)
              t3 = _0_60;
            else {
              t3 = _0_6;
              _0_6_isSet = _0_6_isSet0;
              _0_60 = t3;
            }
            t4 = type$.SassNumber;
            t4._as(t3);
            if (_0_9_isSet)
              t5 = _0_90;
            else {
              t5 = _0_9;
              _0_9_isSet = _0_9_isSet0;
              _0_90 = t5;
            }
            if (t5 instanceof A.SassNumber) {
              if (_0_9_isSet)
                t1 = _0_90;
              else {
                t1 = _0_9;
                _0_9_isSet = _0_9_isSet0;
                _0_90 = t1;
              }
              t4._as(t1);
              t4 = !t3.hasCompatibleUnits$1(t1);
              step = t1;
              t1 = t4;
            }
            number = t3;
          }
          strategy = t2;
        }
      } else {
        _0_12 = _null;
        _0_14 = _0_12;
        _0_16_isSet = false;
      }
      if (t1) {
        t1 = type$.JSArray_Object;
        A.SassCalculation__verifyCompatibleNumbers(A._setArrayType([number, step], t1));
        return new A.SassCalculation(_s5_, A._setArrayType([strategy, number, step], t1));
      }
      strategy = _null;
      number = _null;
      step = _null;
      t1 = false;
      if (_0_10 instanceof A.SassString) {
        _0_6_isSet0 = true;
        _0_9_isSet0 = true;
        _0_12_isSet = true;
        if (_0_14_isSet) {
          t2 = _0_14;
          _0_12_isSet0 = _0_14_isSet;
        } else {
          t2 = _0_10;
          _0_12 = type$.SassString._as(t2)._string$_text;
          t2 = _0_12;
          _0_14 = "nearest" === t2;
          t2 = _0_14;
          _0_12_isSet0 = _0_12_isSet;
          _0_14_isSet = true;
        }
        t3 = true;
        if (!t2) {
          if (_0_16_isSet)
            t2 = _0_16;
          else {
            if (_0_12_isSet0)
              t2 = _0_12;
            else {
              t2 = _0_10;
              _0_12 = type$.SassString._as(t2)._string$_text;
              t2 = _0_12;
              _0_12_isSet0 = _0_12_isSet;
            }
            _0_16 = "up" === t2;
            t2 = _0_16;
            _0_16_isSet = true;
          }
          if (!t2) {
            if (_0_18_isSet)
              t2 = _0_18;
            else {
              if (_0_12_isSet0)
                t2 = _0_12;
              else {
                t2 = _0_10;
                _0_12 = type$.SassString._as(t2)._string$_text;
                t2 = _0_12;
                _0_12_isSet0 = _0_12_isSet;
              }
              _0_18 = "down" === t2;
              t2 = _0_18;
              _0_18_isSet = true;
            }
            if (!t2)
              if (_0_20_isSet) {
                t2 = _0_20;
                _0_12_isSet = _0_12_isSet0;
              } else {
                if (_0_12_isSet0) {
                  t2 = _0_12;
                  _0_12_isSet = _0_12_isSet0;
                } else {
                  t2 = _0_10;
                  _0_12 = type$.SassString._as(t2)._string$_text;
                  t2 = _0_12;
                }
                _0_20 = "to-zero" === t2;
                t2 = _0_20;
                _0_20_isSet = true;
              }
            else {
              t2 = t3;
              _0_12_isSet = _0_12_isSet0;
            }
          } else {
            t2 = t3;
            _0_12_isSet = _0_12_isSet0;
          }
        } else {
          t2 = t3;
          _0_12_isSet = _0_12_isSet0;
        }
        if (t2) {
          t2 = _0_10;
          type$.SassString._as(t2);
          if (_0_6_isSet)
            t3 = _0_60;
          else {
            t3 = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = t3;
          }
          if (t3 instanceof A.SassNumber) {
            if (_0_6_isSet)
              t3 = _0_60;
            else {
              t3 = _0_6;
              _0_6_isSet = _0_6_isSet0;
              _0_60 = t3;
            }
            t4 = type$.SassNumber;
            t4._as(t3);
            if (_0_9_isSet)
              t1 = _0_90;
            else {
              t1 = _0_9;
              _0_9_isSet = _0_9_isSet0;
              _0_90 = t1;
            }
            t1 = t1 instanceof A.SassNumber;
            if (t1) {
              if (_0_9_isSet)
                t5 = _0_90;
              else {
                t5 = _0_9;
                _0_9_isSet = _0_9_isSet0;
                _0_90 = t5;
              }
              t4._as(t5);
              step = t5;
            }
            number = t3;
          }
          strategy = t2;
        }
      } else
        _0_12_isSet = _0_14_isSet;
      if (t1) {
        A.SassCalculation__verifyCompatibleNumbers(A._setArrayType([number, step], type$.JSArray_Object));
        return A.SassCalculation__roundWithStep(strategy._string$_text, number, step);
      }
      strategy = _null;
      rest = _null;
      t1 = false;
      if (_0_10 instanceof A.SassString) {
        _0_6_isSet0 = true;
        _0_12_isSet0 = true;
        if (_0_14_isSet)
          t2 = _0_14;
        else {
          if (_0_12_isSet)
            t2 = _0_12;
          else {
            t2 = _0_10;
            _0_12 = type$.SassString._as(t2)._string$_text;
            t2 = _0_12;
            _0_12_isSet = _0_12_isSet0;
          }
          _0_14 = "nearest" === t2;
          t2 = _0_14;
          _0_14_isSet = true;
        }
        t3 = true;
        if (!t2) {
          if (_0_16_isSet)
            t2 = _0_16;
          else {
            if (_0_12_isSet)
              t2 = _0_12;
            else {
              t2 = _0_10;
              _0_12 = type$.SassString._as(t2)._string$_text;
              t2 = _0_12;
              _0_12_isSet = _0_12_isSet0;
            }
            _0_16 = "up" === t2;
            t2 = _0_16;
            _0_16_isSet = true;
          }
          if (!t2) {
            if (_0_18_isSet)
              t2 = _0_18;
            else {
              if (_0_12_isSet)
                t2 = _0_12;
              else {
                t2 = _0_10;
                _0_12 = type$.SassString._as(t2)._string$_text;
                t2 = _0_12;
                _0_12_isSet = _0_12_isSet0;
              }
              _0_18 = "down" === t2;
              t2 = _0_18;
              _0_18_isSet = true;
            }
            if (!t2)
              if (_0_20_isSet)
                t2 = _0_20;
              else {
                if (_0_12_isSet)
                  t2 = _0_12;
                else {
                  t2 = _0_10;
                  _0_12 = type$.SassString._as(t2)._string$_text;
                  t2 = _0_12;
                  _0_12_isSet = _0_12_isSet0;
                }
                _0_20 = "to-zero" === t2;
                t2 = _0_20;
                _0_20_isSet = true;
              }
            else
              t2 = t3;
          } else
            t2 = t3;
        } else
          t2 = t3;
        if (t2) {
          t2 = _0_10;
          t3 = type$.SassString;
          t3._as(t2);
          if (_0_6_isSet)
            t4 = _0_60;
          else {
            t4 = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = t4;
          }
          if (t4 instanceof A.SassString) {
            if (_0_6_isSet)
              t4 = _0_60;
            else {
              t4 = _0_6;
              _0_6_isSet = _0_6_isSet0;
              _0_60 = t4;
            }
            t3._as(t4);
            if (_0_10_isSet)
              t1 = _0_100;
            else {
              if (_0_9_isSet)
                t1 = _0_90;
              else {
                t1 = _0_9;
                _0_90 = t1;
                _0_9_isSet = true;
              }
              _0_100 = t1 == null;
              t1 = _0_100;
              _0_10_isSet = true;
            }
            rest = t4;
          }
          strategy = t2;
        }
      }
      if (t1)
        return new A.SassCalculation(_s5_, A._setArrayType([strategy, rest], type$.JSArray_Object));
      t1 = false;
      if (_0_10 instanceof A.SassString) {
        _0_12_isSet0 = true;
        if (_0_14_isSet)
          t2 = _0_14;
        else {
          if (_0_12_isSet)
            t2 = _0_12;
          else {
            t2 = _0_10;
            _0_12 = type$.SassString._as(t2)._string$_text;
            t2 = _0_12;
            _0_12_isSet = _0_12_isSet0;
          }
          _0_14 = "nearest" === t2;
          t2 = _0_14;
          _0_14_isSet = true;
        }
        t3 = true;
        if (!t2) {
          if (_0_16_isSet)
            t2 = _0_16;
          else {
            if (_0_12_isSet)
              t2 = _0_12;
            else {
              t2 = _0_10;
              _0_12 = type$.SassString._as(t2)._string$_text;
              t2 = _0_12;
              _0_12_isSet = _0_12_isSet0;
            }
            _0_16 = "up" === t2;
            t2 = _0_16;
            _0_16_isSet = true;
          }
          if (!t2) {
            if (_0_18_isSet)
              t2 = _0_18;
            else {
              if (_0_12_isSet)
                t2 = _0_12;
              else {
                t2 = _0_10;
                _0_12 = type$.SassString._as(t2)._string$_text;
                t2 = _0_12;
                _0_12_isSet = _0_12_isSet0;
              }
              _0_18 = "down" === t2;
              t2 = _0_18;
              _0_18_isSet = true;
            }
            if (!t2)
              if (_0_20_isSet)
                t2 = _0_20;
              else {
                if (_0_12_isSet)
                  t2 = _0_12;
                else {
                  t2 = _0_10;
                  _0_12 = type$.SassString._as(t2)._string$_text;
                  t2 = _0_12;
                  _0_12_isSet = _0_12_isSet0;
                }
                _0_20 = "to-zero" === t2;
                t2 = _0_20;
                _0_20_isSet = true;
              }
            else
              t2 = t3;
          } else
            t2 = t3;
        } else
          t2 = t3;
        if (t2) {
          if (_0_6_isSet)
            t2 = _0_60;
          else {
            t2 = _0_6;
            _0_60 = t2;
            _0_6_isSet = true;
          }
          if (t2 != null)
            if (_0_10_isSet)
              t1 = _0_100;
            else {
              if (_0_9_isSet)
                t1 = _0_90;
              else {
                t1 = _0_9;
                _0_90 = t1;
                _0_9_isSet = true;
              }
              _0_100 = t1 == null;
              t1 = _0_100;
              _0_10_isSet = true;
            }
        }
      }
      if (t1)
        throw A.wrapException(A.SassScriptException$(string$.If_str, _null));
      t1 = false;
      if (_0_10 instanceof A.SassString) {
        _0_12_isSet0 = true;
        if (_0_14_isSet)
          t2 = _0_14;
        else {
          if (_0_12_isSet)
            t2 = _0_12;
          else {
            t2 = _0_10;
            _0_12 = type$.SassString._as(t2)._string$_text;
            t2 = _0_12;
            _0_12_isSet = _0_12_isSet0;
          }
          _0_14 = "nearest" === t2;
          t2 = _0_14;
          _0_14_isSet = true;
        }
        t3 = true;
        if (!t2) {
          if (_0_16_isSet)
            t2 = _0_16;
          else {
            if (_0_12_isSet)
              t2 = _0_12;
            else {
              t2 = _0_10;
              _0_12 = type$.SassString._as(t2)._string$_text;
              t2 = _0_12;
              _0_12_isSet = _0_12_isSet0;
            }
            _0_16 = "up" === t2;
            t2 = _0_16;
            _0_16_isSet = true;
          }
          if (!t2) {
            if (_0_18_isSet)
              t2 = _0_18;
            else {
              if (_0_12_isSet)
                t2 = _0_12;
              else {
                t2 = _0_10;
                _0_12 = type$.SassString._as(t2)._string$_text;
                t2 = _0_12;
                _0_12_isSet = _0_12_isSet0;
              }
              _0_18 = "down" === t2;
              t2 = _0_18;
              _0_18_isSet = true;
            }
            if (!t2)
              if (_0_20_isSet)
                t2 = _0_20;
              else {
                if (_0_12_isSet)
                  t2 = _0_12;
                else {
                  t2 = _0_10;
                  _0_12 = type$.SassString._as(t2)._string$_text;
                  t2 = _0_12;
                  _0_12_isSet = _0_12_isSet0;
                }
                _0_20 = "to-zero" === t2;
                t2 = _0_20;
                _0_20_isSet = true;
              }
            else
              t2 = t3;
          } else
            t2 = t3;
        } else
          t2 = t3;
        if (t2) {
          if (_0_8_isSet)
            t2 = _0_8;
          else {
            if (_0_6_isSet)
              t2 = _0_60;
            else {
              t2 = _0_6;
              _0_60 = t2;
              _0_6_isSet = true;
            }
            _0_8 = t2 == null;
            t2 = _0_8;
            _0_8_isSet = true;
          }
          if (t2)
            if (_0_10_isSet)
              t1 = _0_100;
            else {
              if (_0_9_isSet)
                t1 = _0_90;
              else {
                t1 = _0_9;
                _0_90 = t1;
                _0_9_isSet = true;
              }
              _0_100 = t1 == null;
              t1 = _0_100;
              _0_10_isSet = true;
            }
        }
      }
      if (t1)
        throw A.wrapException(A.SassScriptException$(string$.Number, _null));
      number = _0_10;
      t1 = false;
      if (_0_8_isSet)
        t2 = _0_8;
      else {
        if (_0_6_isSet)
          t2 = _0_60;
        else {
          t2 = _0_6;
          _0_60 = t2;
          _0_6_isSet = true;
        }
        _0_8 = t2 == null;
        t2 = _0_8;
      }
      if (t2)
        if (_0_10_isSet)
          t1 = _0_100;
        else {
          if (_0_9_isSet)
            t1 = _0_90;
          else {
            t1 = _0_9;
            _0_90 = t1;
            _0_9_isSet = true;
          }
          _0_100 = t1 == null;
          t1 = _0_100;
          _0_10_isSet = true;
        }
      if (t1)
        return new A.SassCalculation(_s5_, A._setArrayType([number], type$.JSArray_Object));
      number = _0_10;
      step = _null;
      t1 = false;
      _0_6_isSet0 = true;
      if (_0_6_isSet)
        t2 = _0_60;
      else {
        t2 = _0_6;
        _0_6_isSet = _0_6_isSet0;
        _0_60 = t2;
      }
      if (t2 != null) {
        if (_0_6_isSet)
          step = _0_60;
        else {
          step = _0_6;
          _0_6_isSet = _0_6_isSet0;
          _0_60 = step;
        }
        if (step == null)
          step = type$.Object._as(step);
        if (_0_10_isSet)
          t1 = _0_100;
        else {
          if (_0_9_isSet)
            t1 = _0_90;
          else {
            t1 = _0_9;
            _0_90 = t1;
            _0_9_isSet = true;
          }
          _0_100 = t1 == null;
          t1 = _0_100;
        }
      }
      if (t1)
        return new A.SassCalculation(_s5_, A._setArrayType([number, step], type$.JSArray_Object));
      if (_0_10 instanceof A.SassString) {
        t1 = true;
        if (_0_14_isSet)
          t2 = _0_14;
        else {
          if (_0_12_isSet)
            t2 = _0_12;
          else {
            t2 = _0_10;
            _0_12 = type$.SassString._as(t2)._string$_text;
            t2 = _0_12;
            _0_12_isSet = true;
          }
          _0_14 = "nearest" === t2;
          t2 = _0_14;
        }
        if (!t2) {
          if (_0_16_isSet)
            t2 = _0_16;
          else {
            if (_0_12_isSet)
              t2 = _0_12;
            else {
              t2 = _0_10;
              _0_12 = type$.SassString._as(t2)._string$_text;
              t2 = _0_12;
              _0_12_isSet = true;
            }
            _0_16 = "up" === t2;
            t2 = _0_16;
          }
          if (!t2) {
            if (_0_18_isSet)
              t2 = _0_18;
            else {
              if (_0_12_isSet)
                t2 = _0_12;
              else {
                t2 = _0_10;
                _0_12 = type$.SassString._as(t2)._string$_text;
                t2 = _0_12;
                _0_12_isSet = true;
              }
              _0_18 = "down" === t2;
              t2 = _0_18;
            }
            if (!t2)
              if (_0_20_isSet)
                t1 = _0_20;
              else {
                if (_0_12_isSet)
                  t1 = _0_12;
                else {
                  t1 = _0_10;
                  _0_12 = type$.SassString._as(t1)._string$_text;
                  t1 = _0_12;
                }
                _0_20 = "to-zero" === t1;
                t1 = _0_20;
              }
          }
        }
      } else
        t1 = false;
      if (!t1)
        if (_0_10 instanceof A.SassString) {
          t1 = _0_10;
          t1 = type$.SassString._as(t1).get$isVar();
        } else
          t1 = false;
      else
        t1 = true;
      number = _null;
      step = _null;
      t2 = false;
      if (t1) {
        _0_6_isSet0 = true;
        _0_9_isSet0 = true;
        t1 = _0_10;
        type$.SassString._as(t1);
        if (_0_6_isSet)
          t3 = _0_60;
        else {
          t3 = _0_6;
          _0_6_isSet = _0_6_isSet0;
          _0_60 = t3;
        }
        if (t3 != null) {
          if (_0_6_isSet)
            number = _0_60;
          else {
            number = _0_6;
            _0_6_isSet = _0_6_isSet0;
            _0_60 = number;
          }
          if (number == null)
            number = type$.Object._as(number);
          if (_0_9_isSet)
            t2 = _0_90;
          else {
            t2 = _0_9;
            _0_9_isSet = _0_9_isSet0;
            _0_90 = t2;
          }
          t2 = t2 != null;
          if (t2) {
            if (_0_9_isSet)
              step = _0_90;
            else {
              step = _0_9;
              _0_9_isSet = _0_9_isSet0;
              _0_90 = step;
            }
            if (step == null)
              step = type$.Object._as(step);
          }
        }
        strategy = t1;
        t1 = t2;
      } else {
        t1 = t2;
        strategy = _null;
      }
      if (t1)
        return new A.SassCalculation(_s5_, A._setArrayType([strategy, number, step], type$.JSArray_Object));
      t1 = false;
      if ((_0_6_isSet ? _0_60 : _0_6) != null)
        t1 = (_0_9_isSet ? _0_90 : _0_9) != null;
      if (t1)
        throw A.wrapException(A.SassScriptException$(A.S(strategyOrNumber) + string$.x20must_b, _null));
      t1 = A.SassScriptException$("Invalid parameters.", _null);
      throw A.wrapException(t1);
    },
    SassCalculation_calcSize(basis, value) {
      var t1 = type$.JSArray_Object,
        t2 = A._setArrayType([basis], t1);
      if (value != null)
        t2.push(value);
      A.SassCalculation__verifyLength(t2, 2);
      basis = A.SassCalculation__simplify(basis);
      value = A.NullableExtension_andThen(value, A.calculation_SassCalculation__simplify$closure());
      t1 = A._setArrayType([basis], t1);
      if (value != null)
        t1.push(value);
      return new A.SassCalculation("calc-size", t1);
    },
    SassCalculation_operateInternal(operator, left, right, inLegacySassFunction, simplify, warn) {
      var compatible, t1;
      if (!simplify)
        return new A.CalculationOperation(operator, left, right);
      left = A.SassCalculation__simplify(left);
      right = A.SassCalculation__simplify(right);
      if (B.CalculationOperator_F7i === operator || B.CalculationOperator_oum === operator) {
        if (left instanceof A.SassNumber && right instanceof A.SassNumber) {
          compatible = left.hasCompatibleUnits$1(right);
          if (!compatible && inLegacySassFunction != null && left.isComparableTo$1(right)) {
            warn.call$2("In future versions of Sass, " + inLegacySassFunction + "() will be interpreted as the CSS " + inLegacySassFunction + string$.x28__cal + inLegacySassFunction + string$.x28__ins, B.Deprecation_1AX);
            compatible = true;
          }
          if (compatible)
            return operator === B.CalculationOperator_F7i ? left.plus$1(right) : left.minus$1(right);
        }
        A.SassCalculation__verifyCompatibleNumbers(A._setArrayType([left, right], type$.JSArray_Object));
        if (right instanceof A.SassNumber) {
          t1 = right._number$_value;
          t1 = t1 < 0 && !A.fuzzyEquals(t1, 0);
        } else
          t1 = false;
        if (t1) {
          right = right.times$1(A.SassNumber_SassNumber(-1, null));
          operator = operator === B.CalculationOperator_F7i ? B.CalculationOperator_oum : B.CalculationOperator_F7i;
        }
        return new A.CalculationOperation(operator, left, right);
      } else if (left instanceof A.SassNumber && right instanceof A.SassNumber)
        return operator === B.CalculationOperator_kkN ? left.times$1(right) : left.dividedBy$1(right);
      else
        return new A.CalculationOperation(operator, left, right);
    },
    SassCalculation__roundWithStep(strategy, number, step) {
      var _0_2, t1, _0_6, _0_8_isSet, _0_8, _0_9_isSet, _0_9, _0_11, _0_13, stepWithNumberUnit, t2;
      if (!A.LinkedHashSet_LinkedHashSet$_literal(["nearest", "up", "down", "to-zero"], type$.String).contains$1(0, strategy))
        throw A.wrapException(A.ArgumentError$(strategy + string$.x20must_b, null));
      _0_2 = number._number$_value;
      if (_0_2 == 1 / 0 || _0_2 == -1 / 0) {
        t1 = step._number$_value;
        t1 = t1 == 1 / 0 || t1 == -1 / 0;
      } else
        t1 = false;
      if (!t1) {
        t1 = step._number$_value;
        t1 = t1 === 0 || isNaN(_0_2) || isNaN(t1);
      } else
        t1 = true;
      if (t1) {
        t1 = number.get$numeratorUnits(number);
        return A.SassNumber_SassNumber$withUnits(0 / 0, number.get$denominatorUnits(number), t1);
      }
      if (_0_2 == 1 / 0 || _0_2 == -1 / 0)
        return number;
      t1 = step._number$_value;
      if (t1 == 1 / 0 || t1 == -1 / 0) {
        $label0$0: {
          if (0 === _0_2) {
            t1 = number;
            break $label0$0;
          }
          _0_6 = "nearest" === strategy;
          t1 = _0_6;
          _0_8_isSet = !t1;
          if (_0_8_isSet) {
            _0_8 = "to-zero" === strategy;
            _0_9_isSet = _0_8;
          } else {
            _0_8 = null;
            _0_9_isSet = true;
          }
          if (_0_9_isSet) {
            _0_9 = _0_2 > 0;
            t1 = _0_9;
          } else {
            _0_9 = null;
            t1 = false;
          }
          if (t1) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          if (!_0_6)
            if (_0_8_isSet)
              t1 = _0_8;
            else {
              _0_8 = "to-zero" === strategy;
              t1 = _0_8;
            }
          else
            t1 = true;
          if (t1) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(-0.0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          _0_11 = "up" === strategy;
          t1 = _0_11;
          if (t1)
            if (_0_9_isSet)
              t1 = _0_9;
            else {
              _0_9 = _0_2 > 0;
              t1 = _0_9;
            }
          else
            t1 = false;
          if (t1) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(1 / 0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          if (_0_11) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(-0.0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          _0_13 = "down" === strategy;
          t1 = _0_13;
          if (t1)
            t1 = _0_2 < 0;
          else
            t1 = false;
          if (t1) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(-1 / 0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          if (_0_13) {
            t1 = number.get$numeratorUnits(number);
            t1 = A.SassNumber_SassNumber$withUnits(0, number.get$denominatorUnits(number), t1);
            break $label0$0;
          }
          t1 = A.throwExpression(A.UnsupportedError$("Invalid argument: " + strategy + "."));
        }
        return t1;
      }
      stepWithNumberUnit = step.convertValueToMatch$1(number);
      $label1$1: {
        if ("nearest" === strategy) {
          t1 = B.JSNumber_methods.round$0(_0_2 / stepWithNumberUnit);
          t2 = number.get$numeratorUnits(number);
          t2 = A.SassNumber_SassNumber$withUnits(t1 * stepWithNumberUnit, number.get$denominatorUnits(number), t2);
          t1 = t2;
          break $label1$1;
        }
        if ("up" === strategy) {
          t2 = _0_2 / stepWithNumberUnit;
          t1 = t1 < 0 ? B.JSNumber_methods.floor$0(t2) : B.JSNumber_methods.ceil$0(t2);
          t2 = number.get$numeratorUnits(number);
          t2 = A.SassNumber_SassNumber$withUnits(t1 * stepWithNumberUnit, number.get$denominatorUnits(number), t2);
          t1 = t2;
          break $label1$1;
        }
        if ("down" === strategy) {
          t2 = _0_2 / stepWithNumberUnit;
          t1 = t1 < 0 ? B.JSNumber_methods.ceil$0(t2) : B.JSNumber_methods.floor$0(t2);
          t2 = number.get$numeratorUnits(number);
          t2 = A.SassNumber_SassNumber$withUnits(t1 * stepWithNumberUnit, number.get$denominatorUnits(number), t2);
          t1 = t2;
          break $label1$1;
        }
        if ("to-zero" === strategy) {
          t1 = _0_2 / stepWithNumberUnit;
          if (_0_2 < 0) {
            t1 = B.JSNumber_methods.ceil$0(t1);
            t2 = number.get$numeratorUnits(number);
            t2 = A.SassNumber_SassNumber$withUnits(t1 * stepWithNumberUnit, number.get$denominatorUnits(number), t2);
            t1 = t2;
          } else {
            t1 = B.JSNumber_methods.floor$0(t1);
            t2 = number.get$numeratorUnits(number);
            t2 = A.SassNumber_SassNumber$withUnits(t1 * stepWithNumberUnit, number.get$denominatorUnits(number), t2);
            t1 = t2;
          }
          break $label1$1;
        }
        t1 = number.get$numeratorUnits(number);
        t1 = A.SassNumber_SassNumber$withUnits(0 / 0, number.get$denominatorUnits(number), t1);
        break $label1$1;
      }
      return t1;
    },
    SassCalculation__simplify(arg) {
      var t1, t2, _0_11_isSet, _0_15, _0_12, _0_16_isSet, text, _0_11, _0_16, t3, _0_12_isSet, _0_15_isSet, value, _null = null,
        _s32_ = " can't be used in a calculation.";
      $label0$0: {
        if (arg instanceof A.SassNumber || arg instanceof A.CalculationOperation) {
          t1 = arg;
          break $label0$0;
        }
        t1 = arg instanceof A.SassString;
        t2 = _null;
        if (t1 && !arg._hasQuotes) {
          t1 = arg;
          break $label0$0;
        }
        if (t1)
          A.throwExpression(A.SassScriptException$("Quoted string " + arg.toString$0(0) + _s32_, _null));
        _0_11_isSet = arg instanceof A.SassCalculation;
        _0_15 = _null;
        _0_12 = _null;
        _0_16_isSet = false;
        text = _null;
        t1 = false;
        if (_0_11_isSet) {
          _0_11 = "calc" === arg.name;
          if (_0_11) {
            _0_12 = arg.$arguments;
            _0_15 = _0_12.length === 1;
            _0_16_isSet = _0_15;
            if (_0_16_isSet) {
              _0_16 = _0_12[0];
              t2 = _0_16;
              if (t2 instanceof A.SassString) {
                t2 = _0_16;
                t3 = type$.SassString;
                if (!t3._as(t2)._hasQuotes) {
                  t1 = _0_16;
                  text = t3._as(t1)._string$_text;
                  t1 = A.SassCalculation__needsParentheses(text);
                }
              }
            } else
              _0_16 = t2;
          } else
            _0_16 = t2;
          _0_12_isSet = _0_11;
          _0_15_isSet = _0_12_isSet;
        } else {
          _0_16 = t2;
          _0_11 = _null;
          _0_15_isSet = false;
          _0_12_isSet = false;
        }
        if (t1) {
          t1 = new A.SassString("(" + A.S(text) + ")", false);
          break $label0$0;
        }
        t1 = false;
        if (_0_11_isSet)
          if (_0_11)
            if (_0_15_isSet)
              t1 = _0_15;
            else {
              if (_0_12_isSet)
                t1 = _0_12;
              else {
                _0_12 = arg.$arguments;
                t1 = _0_12;
                _0_12_isSet = true;
              }
              _0_15 = t1.length === 1;
              t1 = _0_15;
            }
        if (t1) {
          if (_0_16_isSet)
            value = _0_16;
          else {
            _0_16 = (_0_12_isSet ? _0_12 : arg.$arguments)[0];
            value = _0_16;
          }
          t1 = value;
          break $label0$0;
        }
        if (_0_11_isSet) {
          t1 = arg;
          break $label0$0;
        }
        if (arg instanceof A.Value)
          A.throwExpression(A.SassScriptException$("Value " + arg.toString$0(0) + _s32_, _null));
        t1 = A.throwExpression(A.ArgumentError$("Unexpected calculation argument " + A.S(arg) + ".", _null));
      }
      return t1;
    },
    SassCalculation__needsParentheses(text) {
      var t1, couldBeVar, second, third, fourth, i, t2,
        first = text.charCodeAt(0);
      if (first === 32 || first === 9 || first === 10 || first === 13 || first === 12 || first === 47 || first === 42)
        return true;
      t1 = text.length;
      couldBeVar = t1 >= 4 && A.characterEqualsIgnoreCase(first, 118);
      if (t1 < 2)
        return false;
      second = text.charCodeAt(1);
      if (second === 32 || second === 9 || second === 10 || second === 13 || second === 12 || second === 47 || second === 42)
        return true;
      couldBeVar = couldBeVar && A.characterEqualsIgnoreCase(second, 97);
      if (t1 < 3)
        return false;
      third = text.charCodeAt(2);
      if (third === 32 || third === 9 || third === 10 || third === 13 || third === 12 || third === 47 || third === 42)
        return true;
      couldBeVar = couldBeVar && A.characterEqualsIgnoreCase(third, 114);
      if (t1 < 4)
        return false;
      fourth = text.charCodeAt(3);
      if (couldBeVar && fourth === 40)
        return true;
      if (fourth === 32 || fourth === 9 || fourth === 10 || fourth === 13 || fourth === 12 || fourth === 47 || fourth === 42)
        return true;
      for (i = 4; i < t1; ++i) {
        t2 = text.charCodeAt(i);
        if (t2 === 32 || t2 === 9 || t2 === 10 || t2 === 13 || t2 === 12 || t2 === 47 || t2 === 42)
          return true;
      }
      return false;
    },
    SassCalculation__verifyCompatibleNumbers(args) {
      var t1, _i, t2, arg, i, number1, j, number2;
      for (t1 = args.length, _i = 0; t2 = args.length, _i < t2; args.length === t1 || (0, A.throwConcurrentModificationError)(args), ++_i) {
        arg = args[_i];
        if (arg instanceof A.SassNumber && arg.get$hasComplexUnits())
          throw A.wrapException(A.SassScriptException$("Number " + arg.toString$0(0) + " isn't compatible with CSS calculations.", null));
      }
      for (t1 = t2, i = 0; i < t1 - 1; ++i) {
        number1 = args[i];
        if (!(number1 instanceof A.SassNumber))
          continue;
        for (j = i + 1; t1 = args.length, j < t1; ++j) {
          number2 = args[j];
          if (!(number2 instanceof A.SassNumber))
            continue;
          if (number1.hasPossiblyCompatibleUnits$1(number2))
            continue;
          throw A.wrapException(A.SassScriptException$(number1.toString$0(0) + " and " + number2.toString$0(0) + " are incompatible.", null));
        }
      }
    },
    SassCalculation__verifyLength(args, expectedLength) {
      var t1;
      if (args.length === expectedLength)
        return;
      if (B.JSArray_methods.any$1(args, new A.SassCalculation__verifyLength_closure()))
        return;
      t1 = args.length;
      throw A.wrapException(A.SassScriptException$("" + expectedLength + " arguments required, but only " + t1 + " " + A.pluralize("was", t1, "were") + " passed.", null));
    },
    SassCalculation__singleArgument($name, argument, mathFunc, forbidUnits) {
      argument = A.SassCalculation__simplify(argument);
      if (!(argument instanceof A.SassNumber))
        return new A.SassCalculation($name, A._setArrayType([argument], type$.JSArray_Object));
      if (forbidUnits)
        argument.assertNoUnits$0();
      return mathFunc.call$1(argument);
    },
    SassCalculation: function SassCalculation(t0, t1) {
      this.name = t0;
      this.$arguments = t1;
    },
    SassCalculation__verifyLength_closure: function SassCalculation__verifyLength_closure() {
    },
    CalculationOperation: function CalculationOperation(t0, t1, t2) {
      this._operator = t0;
      this._left = t1;
      this._right = t2;
    },
    CalculationOperator: function CalculationOperator(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.operator = t1;
      _.precedence = t2;
      _._name = t3;
    },
    SassColor_SassColor$rgb(red, green, blue, alpha) {
      return A.SassColor_SassColor$rgbInternal(red, green, blue, alpha, null);
    },
    SassColor_SassColor$rgbInternal(red, green, blue, alpha, format) {
      var _null = null,
        t1 = red == null ? _null : red,
        t2 = green == null ? _null : green,
        t3 = blue == null ? _null : blue;
      return A.SassColor$_forSpace(B.RgbColorSpace_i0P, t1, t2, t3, alpha == null ? _null : alpha, format);
    },
    SassColor_SassColor$hsl(hue, saturation, lightness, alpha) {
      var _null = null,
        t1 = hue == null ? _null : hue,
        t2 = saturation == null ? _null : saturation,
        t3 = lightness == null ? _null : lightness;
      return A.SassColor_SassColor$forSpaceInternal(B.HslColorSpace_JQ2, t1, t2, t3, alpha == null ? _null : alpha);
    },
    SassColor_SassColor$hwb(hue, whiteness, blackness, alpha) {
      var _null = null,
        t1 = hue == null ? _null : hue,
        t2 = whiteness == null ? _null : whiteness,
        t3 = blackness == null ? _null : blackness;
      return A.SassColor_SassColor$forSpaceInternal(B.HwbColorSpace_guQ, t1, t2, t3, alpha == null ? _null : alpha);
    },
    SassColor_SassColor$forSpaceInternal(space, channel0, channel1, channel2, alpha) {
      var t1, t2, _null = null;
      $label0$0: {
        if (B.HslColorSpace_JQ2 === space) {
          t1 = channel1 == null;
          t2 = A.SassColor__normalizeHue(channel0, !t1 && channel1 < 0 && !A.fuzzyEquals(channel1, 0));
          t2 = A.SassColor$_forSpace(space, t2, t1 ? _null : Math.abs(channel1), channel2, alpha, _null);
          t1 = t2;
          break $label0$0;
        }
        if (B.HwbColorSpace_guQ === space) {
          t1 = A.SassColor$_forSpace(space, A.SassColor__normalizeHue(channel0, false), channel1, channel2, alpha, _null);
          break $label0$0;
        }
        if (B.LchColorSpace_Bpv === space || B.OklchColorSpace_9Gj === space) {
          t1 = channel1 == null;
          t2 = t1 ? _null : Math.abs(channel1);
          t2 = A.SassColor$_forSpace(space, channel0, t2, A.SassColor__normalizeHue(channel2, !t1 && channel1 < 0 && !A.fuzzyEquals(channel1, 0)), alpha, _null);
          t1 = t2;
          break $label0$0;
        }
        t1 = A.SassColor$_forSpace(space, channel0, channel1, channel2, alpha, _null);
        break $label0$0;
      }
      return t1;
    },
    SassColor$_forSpace(_space, channel0OrNull, channel1OrNull, channel2OrNull, alpha, format) {
      return new A.SassColor(_space, channel0OrNull, channel1OrNull, channel2OrNull, format, A.NullableExtension_andThen(alpha, new A.SassColor$_forSpace_closure()));
    },
    SassColor__normalizeHue(hue, invert) {
      var t1, t2;
      if (hue == null)
        return hue;
      t1 = B.JSNumber_methods.$mod(hue, 360);
      t2 = invert ? 180 : 0;
      return B.JSNumber_methods.$mod(t1 + 360 + t2, 360);
    },
    SassColor: function SassColor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._space = t0;
      _.channel0OrNull = t1;
      _.channel1OrNull = t2;
      _.channel2OrNull = t3;
      _.format = t4;
      _.alphaOrNull = t5;
    },
    SassColor$_forSpace_closure: function SassColor$_forSpace_closure() {
    },
    _ColorFormatEnum: function _ColorFormatEnum() {
    },
    SpanColorFormat: function SpanColorFormat(t0) {
      this._color$_span = t0;
    },
    ColorChannel: function ColorChannel(t0, t1, t2) {
      this.name = t0;
      this.isPolarAngle = t1;
      this.associatedUnit = t2;
    },
    LinearChannel: function LinearChannel(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.requiresPercent = t2;
      _.lowerClamped = t3;
      _.upperClamped = t4;
      _.name = t5;
      _.isPolarAngle = t6;
      _.associatedUnit = t7;
    },
    GamutMapMethod_GamutMapMethod$fromName($name) {
      var t1;
      $label0$0: {
        if ("clip" === $name) {
          t1 = B.ClipGamutMap_clip;
          break $label0$0;
        }
        if ("local-minde" === $name) {
          t1 = B.LocalMindeGamutMap_A2x;
          break $label0$0;
        }
        t1 = A.throwExpression(A.SassScriptException$('Unknown gamut map method "' + $name + '".', null));
      }
      return t1;
    },
    GamutMapMethod: function GamutMapMethod() {
    },
    ClipGamutMap: function ClipGamutMap(t0) {
      this.name = t0;
    },
    LocalMindeGamutMap: function LocalMindeGamutMap(t0) {
      this.name = t0;
    },
    InterpolationMethod$(space, hue) {
      var t1;
      if (space.get$isPolarInternal())
        t1 = hue == null ? B.HueInterpolationMethod_0 : hue;
      else
        t1 = null;
      if (!space.get$isPolarInternal() && hue != null)
        A.throwExpression(A.ArgumentError$(string$.Hue_in + space.toString$0(0) + ".", null));
      return new A.InterpolationMethod(space, t1);
    },
    InterpolationMethod_InterpolationMethod$fromValue(value, $name) {
      var t1, space, hueMethod,
        list = value.assertCommonListStyle$2$allowSlash($name, false);
      if (list.length === 0)
        throw A.wrapException(A.SassScriptException$(string$.Expecta, $name));
      t1 = B.JSArray_methods.get$first(list).assertString$1($name);
      t1.assertUnquoted$1($name);
      space = A.ColorSpace_fromName(t1._string$_text, $name);
      if (list.length === 1)
        return A.InterpolationMethod$(space, null);
      hueMethod = A.HueInterpolationMethod_HueInterpolationMethod$_fromValue(list[1], $name);
      if (list.length === 2)
        throw A.wrapException(A.SassScriptException$('Expected unquoted string "hue" after ' + value.toString$0(0) + ".", $name));
      else {
        t1 = list[2].assertString$1($name);
        t1.assertUnquoted$1($name);
        if (t1._string$_text.toLowerCase() !== "hue")
          throw A.wrapException(A.SassScriptException$(string$.Expectu + value.toString$0(0) + ", was " + list[2].toString$0(0) + ".", $name));
        else if (list.length > 3)
          throw A.wrapException(A.SassScriptException$('Expected nothing after "hue" in ' + value.toString$0(0) + ".", $name));
        else if (!space.get$isPolarInternal())
          throw A.wrapException(A.SassScriptException$('Hue interpolation method "' + hueMethod.toString$0(0) + string$.x20hue__ + space.toString$0(0) + ".", $name));
      }
      return A.InterpolationMethod$(space, hueMethod);
    },
    HueInterpolationMethod_HueInterpolationMethod$_fromValue(value, $name) {
      var _0_0,
        t1 = value.assertString$1($name);
      t1.assertUnquoted$0();
      _0_0 = t1._string$_text.toLowerCase();
      $label0$0: {
        if ("shorter" === _0_0) {
          t1 = B.HueInterpolationMethod_0;
          break $label0$0;
        }
        if ("longer" === _0_0) {
          t1 = B.HueInterpolationMethod_1;
          break $label0$0;
        }
        if ("increasing" === _0_0) {
          t1 = B.HueInterpolationMethod_2;
          break $label0$0;
        }
        if ("decreasing" === _0_0) {
          t1 = B.HueInterpolationMethod_3;
          break $label0$0;
        }
        t1 = A.throwExpression(A.SassScriptException$("Unknown hue interpolation method " + value.toString$0(0) + ".", $name));
      }
      return t1;
    },
    InterpolationMethod: function InterpolationMethod(t0, t1) {
      this.space = t0;
      this.hue = t1;
    },
    HueInterpolationMethod: function HueInterpolationMethod(t0) {
      this._name = t0;
    },
    ColorSpace_fromName($name, argumentName) {
      var t1,
        _0_0 = $name.toLowerCase();
      $label0$0: {
        if ("rgb" === _0_0) {
          t1 = B.RgbColorSpace_i0P;
          break $label0$0;
        }
        if ("hwb" === _0_0) {
          t1 = B.HwbColorSpace_guQ;
          break $label0$0;
        }
        if ("hsl" === _0_0) {
          t1 = B.HslColorSpace_JQ2;
          break $label0$0;
        }
        if ("srgb" === _0_0) {
          t1 = B.SrgbColorSpace_thf;
          break $label0$0;
        }
        if ("srgb-linear" === _0_0) {
          t1 = B.SrgbLinearColorSpace_kUj;
          break $label0$0;
        }
        if ("display-p3" === _0_0) {
          t1 = B.DisplayP3ColorSpace_MmT;
          break $label0$0;
        }
        if ("a98-rgb" === _0_0) {
          t1 = B.A98RgbColorSpace_lf2;
          break $label0$0;
        }
        if ("prophoto-rgb" === _0_0) {
          t1 = B.ProphotoRgbColorSpace_BDz;
          break $label0$0;
        }
        if ("rec2020" === _0_0) {
          t1 = B.Rec2020ColorSpace_6oo;
          break $label0$0;
        }
        if ("xyz" === _0_0 || "xyz-d65" === _0_0) {
          t1 = B.XyzD65ColorSpace_WiJ;
          break $label0$0;
        }
        if ("xyz-d50" === _0_0) {
          t1 = B.XyzD50ColorSpace_2OB;
          break $label0$0;
        }
        if ("lab" === _0_0) {
          t1 = B.LabColorSpace_2nT;
          break $label0$0;
        }
        if ("lch" === _0_0) {
          t1 = B.LchColorSpace_Bpv;
          break $label0$0;
        }
        if ("oklab" === _0_0) {
          t1 = B.OklabColorSpace_540;
          break $label0$0;
        }
        if ("oklch" === _0_0) {
          t1 = B.OklchColorSpace_9Gj;
          break $label0$0;
        }
        t1 = A.throwExpression(A.SassScriptException$('Unknown color space "' + $name + '".', argumentName));
      }
      return t1;
    },
    ColorSpace: function ColorSpace() {
    },
    A98RgbColorSpace: function A98RgbColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    DisplayP3ColorSpace: function DisplayP3ColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    HslColorSpace: function HslColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    HwbColorSpace: function HwbColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    HwbColorSpace_convert_toRgb: function HwbColorSpace_convert_toRgb(t0, t1) {
      this._box_0 = t0;
      this.factor = t1;
    },
    LabColorSpace: function LabColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    LchColorSpace: function LchColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    LmsColorSpace: function LmsColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    OklabColorSpace: function OklabColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    OklchColorSpace: function OklchColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    ProphotoRgbColorSpace: function ProphotoRgbColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    Rec2020ColorSpace: function Rec2020ColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    RgbColorSpace: function RgbColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    SrgbColorSpace: function SrgbColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    SrgbLinearColorSpace: function SrgbLinearColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    XyzD50ColorSpace: function XyzD50ColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    XyzD65ColorSpace: function XyzD65ColorSpace(t0, t1) {
      this.name = t0;
      this._channels = t1;
    },
    SassFunction: function SassFunction(t0, t1) {
      this.callable = t0;
      this._function$_compileContext = t1;
    },
    SassList$(contents, _separator, brackets) {
      var t1 = new A.SassList(A.List_List$unmodifiable(contents, type$.Value), _separator, brackets);
      t1.SassList$3$brackets(contents, _separator, brackets);
      return t1;
    },
    SassList: function SassList(t0, t1, t2) {
      this._list$_contents = t0;
      this._separator = t1;
      this._hasBrackets = t2;
    },
    SassList_isBlank_closure: function SassList_isBlank_closure() {
    },
    ListSeparator: function ListSeparator(t0, t1, t2) {
      this._list$_name = t0;
      this.separator = t1;
      this._name = t2;
    },
    SassMap: function SassMap(t0) {
      this._map$_contents = t0;
    },
    SassMixin: function SassMixin(t0, t1) {
      this.callable = t0;
      this._mixin$_compileContext = t1;
    },
    _SassNull: function _SassNull() {
    },
    conversionFactor(unit1, unit2) {
      var _0_0;
      if (unit1 === unit2)
        return 1;
      _0_0 = B.Map_NtHoP.$index(0, unit1);
      if (_0_0 != null)
        return _0_0.$index(0, unit2);
      return null;
    },
    SassNumber_SassNumber(value, unit) {
      return unit == null ? new A.UnitlessSassNumber(value, null) : new A.SingleUnitSassNumber(unit, value, null);
    },
    SassNumber_SassNumber$withUnits(value, denominatorUnits, numeratorUnits) {
      var _0_4, t1, _0_6, _0_8_isSet, _0_10, _0_8, _0_10_isSet, _0_7, unit, _0_7_isSet, t2, _0_4_isSet, _0_7_isSet0, numerators, denominators, unsimplifiedDenominators, valueDouble, _i, denominator, simplifiedAway, i, factor, _1_2, _1_7_isSet, _1_7, _null = null,
        _0_6_isSet = !false;
      if (_0_6_isSet) {
        _0_4 = numeratorUnits.length;
        t1 = _0_4;
        _0_6 = t1 <= 0;
        _0_8_isSet = _0_6;
      } else {
        _0_4 = _null;
        _0_6 = _0_4;
        _0_8_isSet = true;
      }
      _0_10 = _null;
      if (_0_8_isSet) {
        _0_8 = denominatorUnits == null;
        t1 = _0_8;
        _0_10_isSet = !t1;
        if (_0_10_isSet) {
          _0_10 = (denominatorUnits == null ? type$.List_String._as(denominatorUnits) : denominatorUnits).length <= 0;
          t1 = _0_10;
        } else
          t1 = true;
        _0_7 = denominatorUnits;
      } else {
        _0_7 = _null;
        _0_8 = _0_7;
        _0_10_isSet = false;
        t1 = false;
      }
      if (t1)
        return new A.UnitlessSassNumber(value, _null);
      unit = _null;
      t1 = false;
      _0_7_isSet = true;
      if (_0_6_isSet) {
        t2 = _0_4;
        _0_4_isSet = _0_6_isSet;
      } else {
        _0_4 = numeratorUnits.length;
        t2 = _0_4;
        _0_4_isSet = true;
      }
      if (t2 === 1) {
        unit = numeratorUnits[0];
        if (_0_8_isSet) {
          t1 = _0_8;
          _0_7_isSet0 = _0_8_isSet;
        } else {
          _0_8 = denominatorUnits == null;
          t1 = _0_8;
          _0_7_isSet0 = _0_7_isSet;
          _0_7 = denominatorUnits;
          _0_8_isSet = true;
        }
        if (!t1)
          if (_0_10_isSet) {
            t1 = _0_10;
            _0_7_isSet = _0_7_isSet0;
          } else {
            if (_0_7_isSet0) {
              t1 = _0_7;
              _0_7_isSet = _0_7_isSet0;
            } else {
              t1 = denominatorUnits;
              _0_7 = t1;
            }
            _0_10 = (t1 == null ? type$.List_String._as(t1) : t1).length <= 0;
            t1 = _0_10;
            _0_10_isSet = true;
          }
        else {
          _0_7_isSet = _0_7_isSet0;
          t1 = true;
        }
      } else
        _0_7_isSet = _0_8_isSet;
      if (t1)
        return new A.SingleUnitSassNumber(unit, value, _null);
      t1 = false;
      _0_7_isSet0 = true;
      numerators = numeratorUnits;
      if (_0_8_isSet)
        t1 = _0_8;
      else {
        if (_0_7_isSet)
          t1 = _0_7;
        else {
          t1 = denominatorUnits;
          _0_7_isSet = _0_7_isSet0;
          _0_7 = t1;
        }
        _0_8 = t1 == null;
        t1 = _0_8;
      }
      if (!t1)
        if (_0_10_isSet)
          t1 = _0_10;
        else {
          if (_0_7_isSet)
            t1 = _0_7;
          else {
            t1 = denominatorUnits;
            _0_7_isSet = _0_7_isSet0;
            _0_7 = t1;
          }
          _0_10 = (t1 == null ? type$.List_String._as(t1) : t1).length <= 0;
          t1 = _0_10;
        }
      else
        t1 = true;
      if (t1)
        return new A.ComplexSassNumber(A.List_List$unmodifiable(numerators, type$.String), B.List_empty, value, _null);
      if (!false)
        if (_0_6_isSet)
          t1 = _0_6;
        else {
          if (_0_4_isSet)
            t1 = _0_4;
          else {
            _0_4 = numeratorUnits.length;
            t1 = _0_4;
          }
          _0_6 = t1 <= 0;
          t1 = _0_6;
        }
      else
        t1 = true;
      denominators = _null;
      if (t1) {
        if (_0_7_isSet)
          t1 = _0_7;
        else {
          t1 = denominatorUnits;
          _0_7 = t1;
          _0_7_isSet = true;
        }
        t1 = t1 != null;
        if (t1) {
          denominators = _0_7_isSet ? _0_7 : denominatorUnits;
          if (denominators == null)
            denominators = type$.List_String._as(denominators);
        }
      } else
        t1 = false;
      if (t1)
        return new A.ComplexSassNumber(B.List_empty, A.List_List$unmodifiable(denominators, type$.String), value, _null);
      numerators = A._setArrayType(numeratorUnits.slice(0), A._arrayInstanceType(numeratorUnits));
      unsimplifiedDenominators = A._setArrayType(denominatorUnits.slice(0), A.instanceType(denominatorUnits));
      denominators = A._setArrayType([], type$.JSArray_String);
      for (t1 = unsimplifiedDenominators.length, valueDouble = value, _i = 0; _i < unsimplifiedDenominators.length; unsimplifiedDenominators.length === t1 || (0, A.throwConcurrentModificationError)(unsimplifiedDenominators), ++_i) {
        denominator = unsimplifiedDenominators[_i];
        i = 0;
        while (true) {
          if (!(i < numerators.length)) {
            simplifiedAway = false;
            break;
          }
          c$0: {
            factor = A.conversionFactor(denominator, numerators[i]);
            if (factor == null)
              break c$0;
            valueDouble *= factor;
            B.JSArray_methods.removeAt$1(numerators, i);
            simplifiedAway = true;
            break;
          }
          ++i;
        }
        if (!simplifiedAway)
          denominators.push(denominator);
      }
      $label0$1: {
        _1_2 = numerators.length;
        t1 = _1_2;
        _1_7_isSet = t1 <= 0;
        if (_1_7_isSet) {
          _1_7 = denominators.length <= 0;
          t1 = _1_7;
        } else {
          _1_7 = _null;
          t1 = false;
        }
        if (t1) {
          t1 = new A.UnitlessSassNumber(valueDouble, _null);
          break $label0$1;
        }
        t1 = false;
        if (_1_2 === 1) {
          unit = numerators[0];
          t1 = _1_7_isSet ? _1_7 : denominators.length <= 0;
        } else
          unit = _null;
        if (t1) {
          t1 = new A.SingleUnitSassNumber(unit, valueDouble, _null);
          break $label0$1;
        }
        t1 = type$.String;
        t1 = new A.ComplexSassNumber(A.List_List$unmodifiable(numerators, t1), A.List_List$unmodifiable(denominators, t1), valueDouble, _null);
        break $label0$1;
      }
      return t1;
    },
    SassNumber: function SassNumber() {
    },
    SassNumber__coerceOrConvertValue_compatibilityException: function SassNumber__coerceOrConvertValue_compatibilityException(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.other = t1;
      _.otherName = t2;
      _.otherHasUnits = t3;
      _.name = t4;
      _.newNumerators = t5;
      _.newDenominators = t6;
    },
    SassNumber__coerceOrConvertValue_closure: function SassNumber__coerceOrConvertValue_closure(t0, t1) {
      this._box_0 = t0;
      this.newNumerator = t1;
    },
    SassNumber__coerceOrConvertValue_closure0: function SassNumber__coerceOrConvertValue_closure0(t0) {
      this.compatibilityException = t0;
    },
    SassNumber__coerceOrConvertValue_closure1: function SassNumber__coerceOrConvertValue_closure1(t0, t1) {
      this._box_0 = t0;
      this.newDenominator = t1;
    },
    SassNumber__coerceOrConvertValue_closure2: function SassNumber__coerceOrConvertValue_closure2(t0) {
      this.compatibilityException = t0;
    },
    SassNumber_plus_closure: function SassNumber_plus_closure() {
    },
    SassNumber_minus_closure: function SassNumber_minus_closure() {
    },
    SassNumber_multiplyUnits_closure: function SassNumber_multiplyUnits_closure(t0, t1) {
      this._box_0 = t0;
      this.numerator = t1;
    },
    SassNumber_multiplyUnits_closure0: function SassNumber_multiplyUnits_closure0(t0, t1) {
      this.newNumerators = t0;
      this.numerator = t1;
    },
    SassNumber_multiplyUnits_closure1: function SassNumber_multiplyUnits_closure1(t0, t1) {
      this._box_0 = t0;
      this.numerator = t1;
    },
    SassNumber_multiplyUnits_closure2: function SassNumber_multiplyUnits_closure2(t0, t1) {
      this.newNumerators = t0;
      this.numerator = t1;
    },
    SassNumber__areAnyConvertible_closure: function SassNumber__areAnyConvertible_closure(t0) {
      this.units2 = t0;
    },
    SassNumber__canonicalizeUnitList_closure: function SassNumber__canonicalizeUnitList_closure() {
    },
    SassNumber__canonicalMultiplier_closure: function SassNumber__canonicalMultiplier_closure(t0) {
      this.$this = t0;
    },
    SassNumber_unitSuggestion_closure: function SassNumber_unitSuggestion_closure() {
    },
    SassNumber_unitSuggestion_closure0: function SassNumber_unitSuggestion_closure0() {
    },
    ComplexSassNumber: function ComplexSassNumber(t0, t1, t2, t3) {
      var _ = this;
      _._numeratorUnits = t0;
      _._denominatorUnits = t1;
      _._number$_value = t2;
      _.hashCache = null;
      _.asSlash = t3;
    },
    SingleUnitSassNumber: function SingleUnitSassNumber(t0, t1, t2) {
      var _ = this;
      _._unit = t0;
      _._number$_value = t1;
      _.hashCache = null;
      _.asSlash = t2;
    },
    SingleUnitSassNumber__coerceToUnit_closure: function SingleUnitSassNumber__coerceToUnit_closure(t0, t1) {
      this.$this = t0;
      this.unit = t1;
    },
    SingleUnitSassNumber__coerceValueToUnit_closure: function SingleUnitSassNumber__coerceValueToUnit_closure(t0) {
      this.$this = t0;
    },
    SingleUnitSassNumber_multiplyUnits_closure: function SingleUnitSassNumber_multiplyUnits_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    SingleUnitSassNumber_multiplyUnits_closure0: function SingleUnitSassNumber_multiplyUnits_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    UnitlessSassNumber: function UnitlessSassNumber(t0, t1) {
      this._number$_value = t0;
      this.hashCache = null;
      this.asSlash = t1;
    },
    SassString$(_text, quotes) {
      return new A.SassString(_text, quotes);
    },
    SassString: function SassString(t0, t1) {
      var _ = this;
      _._string$_text = t0;
      _._hasQuotes = t1;
      _.__SassString__sassLength_FI = $;
      _._hashCache = null;
    },
    AnySelectorVisitor: function AnySelectorVisitor() {
    },
    AnySelectorVisitor_visitComplexSelector_closure: function AnySelectorVisitor_visitComplexSelector_closure(t0) {
      this.$this = t0;
    },
    AnySelectorVisitor_visitCompoundSelector_closure: function AnySelectorVisitor_visitCompoundSelector_closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor$0(functions, importCache, logger, nodeImporter, quietDeps, sourceMap) {
      var t1 = type$.Uri,
        t2 = type$.Module_AsyncCallable,
        t3 = A._setArrayType([], type$.JSArray_Record_2_String_and_AstNode);
      t1 = new A._EvaluateVisitor0(importCache, nodeImporter, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.AsyncCallable), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Configuration), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode), logger, A.LinkedHashSet_LinkedHashSet$_empty(type$.Record_2_String_and_SourceSpan), quietDeps, sourceMap, new A.Object(), A.AsyncEnvironment$(), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_AstNode), t3, B.Configuration_Map_empty_null);
      t1._EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap0(functions, importCache, logger, nodeImporter, quietDeps, sourceMap);
      return t1;
    },
    _EvaluateVisitor0: function _EvaluateVisitor0(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._async_evaluate$_importCache = t0;
      _._async_evaluate$_nodeImporter = t1;
      _._async_evaluate$_builtInFunctions = t2;
      _._async_evaluate$_builtInModules = t3;
      _._async_evaluate$_modules = t4;
      _._async_evaluate$_moduleConfigurations = t5;
      _._async_evaluate$_moduleNodes = t6;
      _._async_evaluate$_logger = t7;
      _._async_evaluate$_warningsEmitted = t8;
      _._async_evaluate$_quietDeps = t9;
      _._async_evaluate$_sourceMap = t10;
      _._async_evaluate$_compileContext = t11;
      _._async_evaluate$_environment = t12;
      _._async_evaluate$_declarationName = _._async_evaluate$__parent = _._async_evaluate$_mediaQuerySources = _._async_evaluate$_mediaQueries = _._async_evaluate$_styleRuleIgnoringAtRoot = null;
      _._async_evaluate$_member = "root stylesheet";
      _._async_evaluate$_importSpan = _._async_evaluate$_callableNode = null;
      _._async_evaluate$_inSupportsDeclaration = _._async_evaluate$_inKeyframes = _._async_evaluate$_atRootExcludingStyleRule = _._async_evaluate$_inUnknownAtRule = _._async_evaluate$_inFunction = false;
      _._async_evaluate$_loadedUrls = t13;
      _._async_evaluate$_activeModules = t14;
      _._async_evaluate$_stack = t15;
      _._async_evaluate$_importer = null;
      _._async_evaluate$_inDependency = false;
      _._async_evaluate$__extensionStore = _._async_evaluate$_preModuleComments = _._async_evaluate$_outOfOrderImports = _._async_evaluate$__endOfImports = _._async_evaluate$__root = _._async_evaluate$__stylesheet = null;
      _._async_evaluate$_configuration = t16;
    },
    _EvaluateVisitor_closure12: function _EvaluateVisitor_closure12(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure13: function _EvaluateVisitor_closure13(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure14: function _EvaluateVisitor_closure14(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure15: function _EvaluateVisitor_closure15(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure16: function _EvaluateVisitor_closure16(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure17: function _EvaluateVisitor_closure17(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure18: function _EvaluateVisitor_closure18(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure19: function _EvaluateVisitor_closure19(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure20: function _EvaluateVisitor_closure20(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure6: function _EvaluateVisitor__closure6(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.module = t2;
    },
    _EvaluateVisitor_closure21: function _EvaluateVisitor_closure21(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure5: function _EvaluateVisitor__closure5(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.module = t2;
    },
    _EvaluateVisitor_closure22: function _EvaluateVisitor_closure22(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure23: function _EvaluateVisitor_closure23(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure3: function _EvaluateVisitor__closure3(t0, t1, t2) {
      this.values = t0;
      this.span = t1;
      this.callableNode = t2;
    },
    _EvaluateVisitor__closure4: function _EvaluateVisitor__closure4(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure24: function _EvaluateVisitor_closure24(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_run_closure0: function _EvaluateVisitor_run_closure0(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.importer = t2;
    },
    _EvaluateVisitor_run__closure0: function _EvaluateVisitor_run__closure0(t0, t1, t2) {
      this.$this = t0;
      this.importer = t1;
      this.node = t2;
    },
    _EvaluateVisitor__loadModule_closure1: function _EvaluateVisitor__loadModule_closure1(t0, t1) {
      this._box_0 = t0;
      this.callback = t1;
    },
    _EvaluateVisitor__loadModule_closure2: function _EvaluateVisitor__loadModule_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.nodeWithSpan = t2;
      _.baseUrl = t3;
      _.namesInErrors = t4;
      _.configuration = t5;
      _.callback = t6;
    },
    _EvaluateVisitor__loadModule__closure1: function _EvaluateVisitor__loadModule__closure1(t0, t1) {
      this.$this = t0;
      this.message = t1;
    },
    _EvaluateVisitor__loadModule__closure2: function _EvaluateVisitor__loadModule__closure2(t0, t1, t2) {
      this._box_1 = t0;
      this.callback = t1;
      this.firstLoad = t2;
    },
    _EvaluateVisitor__execute_closure0: function _EvaluateVisitor__execute_closure0(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.stylesheet = t2;
      _.extensionStore = t3;
      _.configuration = t4;
      _.css = t5;
      _.preModuleComments = t6;
    },
    _EvaluateVisitor__combineCss_closure1: function _EvaluateVisitor__combineCss_closure1() {
    },
    _EvaluateVisitor__combineCss_closure2: function _EvaluateVisitor__combineCss_closure2(t0) {
      this.selectors = t0;
    },
    _EvaluateVisitor__combineCss_visitModule0: function _EvaluateVisitor__combineCss_visitModule0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.seen = t1;
      _.clone = t2;
      _.css = t3;
      _.imports = t4;
      _.sorted = t5;
    },
    _EvaluateVisitor__extendModules_closure1: function _EvaluateVisitor__extendModules_closure1(t0) {
      this.originalSelectors = t0;
    },
    _EvaluateVisitor__extendModules_closure2: function _EvaluateVisitor__extendModules_closure2() {
    },
    _EvaluateVisitor_visitAtRootRule_closure1: function _EvaluateVisitor_visitAtRootRule_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitAtRootRule_closure2: function _EvaluateVisitor_visitAtRootRule_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure5: function _EvaluateVisitor__scopeForAtRoot_closure5(t0, t1, t2) {
      this.$this = t0;
      this.newParent = t1;
      this.node = t2;
    },
    _EvaluateVisitor__scopeForAtRoot_closure6: function _EvaluateVisitor__scopeForAtRoot_closure6(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure7: function _EvaluateVisitor__scopeForAtRoot_closure7(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot__closure0: function _EvaluateVisitor__scopeForAtRoot__closure0(t0, t1) {
      this.innerScope = t0;
      this.callback = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure8: function _EvaluateVisitor__scopeForAtRoot_closure8(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure9: function _EvaluateVisitor__scopeForAtRoot_closure9() {
    },
    _EvaluateVisitor__scopeForAtRoot_closure10: function _EvaluateVisitor__scopeForAtRoot_closure10(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor_visitContentRule_closure0: function _EvaluateVisitor_visitContentRule_closure0(t0, t1) {
      this.$this = t0;
      this.content = t1;
    },
    _EvaluateVisitor_visitDeclaration_closure0: function _EvaluateVisitor_visitDeclaration_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _EvaluateVisitor_visitEachRule_closure2: function _EvaluateVisitor_visitEachRule_closure2(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.nodeWithSpan = t2;
    },
    _EvaluateVisitor_visitEachRule_closure3: function _EvaluateVisitor_visitEachRule_closure3(t0, t1, t2) {
      this._box_1 = t0;
      this.$this = t1;
      this.nodeWithSpan = t2;
    },
    _EvaluateVisitor_visitEachRule_closure4: function _EvaluateVisitor_visitEachRule_closure4(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.list = t1;
      _.setVariables = t2;
      _.node = t3;
    },
    _EvaluateVisitor_visitEachRule__closure0: function _EvaluateVisitor_visitEachRule__closure0(t0, t1, t2) {
      this.$this = t0;
      this.setVariables = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitEachRule___closure0: function _EvaluateVisitor_visitEachRule___closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitAtRule_closure2: function _EvaluateVisitor_visitAtRule_closure2(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitAtRule_closure3: function _EvaluateVisitor_visitAtRule_closure3(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.children = t2;
    },
    _EvaluateVisitor_visitAtRule__closure0: function _EvaluateVisitor_visitAtRule__closure0(t0, t1) {
      this.$this = t0;
      this.children = t1;
    },
    _EvaluateVisitor_visitAtRule_closure4: function _EvaluateVisitor_visitAtRule_closure4() {
    },
    _EvaluateVisitor_visitForRule_closure4: function _EvaluateVisitor_visitForRule_closure4(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForRule_closure5: function _EvaluateVisitor_visitForRule_closure5(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForRule_closure6: function _EvaluateVisitor_visitForRule_closure6(t0) {
      this.fromNumber = t0;
    },
    _EvaluateVisitor_visitForRule_closure7: function _EvaluateVisitor_visitForRule_closure7(t0, t1) {
      this.toNumber = t0;
      this.fromNumber = t1;
    },
    _EvaluateVisitor_visitForRule_closure8: function _EvaluateVisitor_visitForRule_closure8(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.node = t2;
      _.from = t3;
      _.direction = t4;
      _.fromNumber = t5;
    },
    _EvaluateVisitor_visitForRule__closure0: function _EvaluateVisitor_visitForRule__closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitForwardRule_closure1: function _EvaluateVisitor_visitForwardRule_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForwardRule_closure2: function _EvaluateVisitor_visitForwardRule_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__registerCommentsForModule_closure0: function _EvaluateVisitor__registerCommentsForModule_closure0() {
    },
    _EvaluateVisitor_visitIfRule_closure0: function _EvaluateVisitor_visitIfRule_closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitIfRule__closure0: function _EvaluateVisitor_visitIfRule__closure0(t0, t1) {
      this.$this = t0;
      this.clause = t1;
    },
    _EvaluateVisitor_visitIfRule___closure0: function _EvaluateVisitor_visitIfRule___closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__visitDynamicImport_closure0: function _EvaluateVisitor__visitDynamicImport_closure0(t0, t1) {
      this.$this = t0;
      this.$import = t1;
    },
    _EvaluateVisitor__visitDynamicImport__closure3: function _EvaluateVisitor__visitDynamicImport__closure3(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__visitDynamicImport__closure4: function _EvaluateVisitor__visitDynamicImport__closure4() {
    },
    _EvaluateVisitor__visitDynamicImport__closure5: function _EvaluateVisitor__visitDynamicImport__closure5() {
    },
    _EvaluateVisitor__visitDynamicImport__closure6: function _EvaluateVisitor__visitDynamicImport__closure6(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.loadsUserDefinedModules = t2;
      _.environment = t3;
      _.children = t4;
    },
    _EvaluateVisitor__applyMixin_closure1: function _EvaluateVisitor__applyMixin_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.$arguments = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin__closure2: function _EvaluateVisitor__applyMixin__closure2(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.$arguments = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin_closure2: function _EvaluateVisitor__applyMixin_closure2(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.contentCallable = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin__closure1: function _EvaluateVisitor__applyMixin__closure1(t0, t1, t2) {
      this.$this = t0;
      this.mixin = t1;
      this.nodeWithSpanWithoutContent = t2;
    },
    _EvaluateVisitor__applyMixin___closure0: function _EvaluateVisitor__applyMixin___closure0(t0, t1, t2) {
      this.$this = t0;
      this.mixin = t1;
      this.nodeWithSpanWithoutContent = t2;
    },
    _EvaluateVisitor__applyMixin____closure0: function _EvaluateVisitor__applyMixin____closure0(t0, t1) {
      this.$this = t0;
      this.statement = t1;
    },
    _EvaluateVisitor_visitIncludeRule_closure2: function _EvaluateVisitor_visitIncludeRule_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitIncludeRule_closure3: function _EvaluateVisitor_visitIncludeRule_closure3(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitIncludeRule_closure4: function _EvaluateVisitor_visitIncludeRule_closure4(t0) {
      this.node = t0;
    },
    _EvaluateVisitor_visitMediaRule_closure2: function _EvaluateVisitor_visitMediaRule_closure2(t0, t1) {
      this.$this = t0;
      this.queries = t1;
    },
    _EvaluateVisitor_visitMediaRule_closure3: function _EvaluateVisitor_visitMediaRule_closure3(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.mergedQueries = t1;
      _.queries = t2;
      _.mergedSources = t3;
      _.node = t4;
    },
    _EvaluateVisitor_visitMediaRule__closure0: function _EvaluateVisitor_visitMediaRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitMediaRule___closure0: function _EvaluateVisitor_visitMediaRule___closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitMediaRule_closure4: function _EvaluateVisitor_visitMediaRule_closure4(t0) {
      this.mergedSources = t0;
    },
    _EvaluateVisitor_visitStyleRule_closure3: function _EvaluateVisitor_visitStyleRule_closure3(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitStyleRule_closure4: function _EvaluateVisitor_visitStyleRule_closure4() {
    },
    _EvaluateVisitor_visitStyleRule_closure6: function _EvaluateVisitor_visitStyleRule_closure6(t0, t1, t2) {
      this.$this = t0;
      this.rule = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitStyleRule__closure0: function _EvaluateVisitor_visitStyleRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitStyleRule_closure5: function _EvaluateVisitor_visitStyleRule_closure5() {
    },
    _EvaluateVisitor__warnForBogusCombinators_closure0: function _EvaluateVisitor__warnForBogusCombinators_closure0() {
    },
    _EvaluateVisitor_visitSupportsRule_closure1: function _EvaluateVisitor_visitSupportsRule_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitSupportsRule__closure0: function _EvaluateVisitor_visitSupportsRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitSupportsRule_closure2: function _EvaluateVisitor_visitSupportsRule_closure2() {
    },
    _EvaluateVisitor__visitSupportsCondition_closure0: function _EvaluateVisitor__visitSupportsCondition_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure2: function _EvaluateVisitor_visitVariableDeclaration_closure2(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure3: function _EvaluateVisitor_visitVariableDeclaration_closure3(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure4: function _EvaluateVisitor_visitVariableDeclaration_closure4(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.value = t2;
    },
    _EvaluateVisitor_visitUseRule_closure0: function _EvaluateVisitor_visitUseRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWarnRule_closure0: function _EvaluateVisitor_visitWarnRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWhileRule_closure0: function _EvaluateVisitor_visitWhileRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWhileRule__closure0: function _EvaluateVisitor_visitWhileRule__closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitBinaryOperationExpression_closure0: function _EvaluateVisitor_visitBinaryOperationExpression_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__slash_recommendation0: function _EvaluateVisitor__slash_recommendation0() {
    },
    _EvaluateVisitor_visitVariableExpression_closure0: function _EvaluateVisitor_visitVariableExpression_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitUnaryOperationExpression_closure0: function _EvaluateVisitor_visitUnaryOperationExpression_closure0(t0, t1) {
      this.node = t0;
      this.operand = t1;
    },
    _EvaluateVisitor_visitListExpression_closure0: function _EvaluateVisitor_visitListExpression_closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitFunctionExpression_closure2: function _EvaluateVisitor_visitFunctionExpression_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitFunctionExpression_closure3: function _EvaluateVisitor_visitFunctionExpression_closure3() {
    },
    _EvaluateVisitor_visitFunctionExpression_closure4: function _EvaluateVisitor_visitFunctionExpression_closure4(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.node = t2;
    },
    _EvaluateVisitor__visitCalculation_closure0: function _EvaluateVisitor__visitCalculation_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__checkCalculationArguments_check0: function _EvaluateVisitor__checkCalculationArguments_check0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__visitCalculationExpression_closure0: function _EvaluateVisitor__visitCalculationExpression_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.node = t2;
      _.inLegacySassFunction = t3;
    },
    _EvaluateVisitor__visitCalculationExpression__closure0: function _EvaluateVisitor__visitCalculationExpression__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitInterpolatedFunctionExpression_closure0: function _EvaluateVisitor_visitInterpolatedFunctionExpression_closure0(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.$function = t2;
    },
    _EvaluateVisitor__runUserDefinedCallable_closure0: function _EvaluateVisitor__runUserDefinedCallable_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.callable = t1;
      _.evaluated = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable__closure0: function _EvaluateVisitor__runUserDefinedCallable__closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.evaluated = t1;
      _.callable = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable___closure0: function _EvaluateVisitor__runUserDefinedCallable___closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.evaluated = t1;
      _.callable = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable____closure0: function _EvaluateVisitor__runUserDefinedCallable____closure0() {
    },
    _EvaluateVisitor__runFunctionCallable_closure0: function _EvaluateVisitor__runFunctionCallable_closure0(t0, t1) {
      this.$this = t0;
      this.callable = t1;
    },
    _EvaluateVisitor__runBuiltInCallable_closure2: function _EvaluateVisitor__runBuiltInCallable_closure2(t0, t1, t2) {
      this._box_0 = t0;
      this.evaluated = t1;
      this.namedSet = t2;
    },
    _EvaluateVisitor__runBuiltInCallable_closure3: function _EvaluateVisitor__runBuiltInCallable_closure3(t0, t1) {
      this._box_0 = t0;
      this.evaluated = t1;
    },
    _EvaluateVisitor__runBuiltInCallable_closure4: function _EvaluateVisitor__runBuiltInCallable_closure4() {
    },
    _EvaluateVisitor__evaluateArguments_closure3: function _EvaluateVisitor__evaluateArguments_closure3() {
    },
    _EvaluateVisitor__evaluateArguments_closure4: function _EvaluateVisitor__evaluateArguments_closure4(t0, t1) {
      this.$this = t0;
      this.restNodeForSpan = t1;
    },
    _EvaluateVisitor__evaluateArguments_closure5: function _EvaluateVisitor__evaluateArguments_closure5(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.named = t1;
      _.restNodeForSpan = t2;
      _.namedNodes = t3;
    },
    _EvaluateVisitor__evaluateArguments_closure6: function _EvaluateVisitor__evaluateArguments_closure6() {
    },
    _EvaluateVisitor__evaluateMacroArguments_closure3: function _EvaluateVisitor__evaluateMacroArguments_closure3(t0) {
      this.restArgs = t0;
    },
    _EvaluateVisitor__evaluateMacroArguments_closure4: function _EvaluateVisitor__evaluateMacroArguments_closure4(t0, t1, t2) {
      this.$this = t0;
      this.restNodeForSpan = t1;
      this.restArgs = t2;
    },
    _EvaluateVisitor__evaluateMacroArguments_closure5: function _EvaluateVisitor__evaluateMacroArguments_closure5(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.named = t1;
      _.restNodeForSpan = t2;
      _.restArgs = t3;
    },
    _EvaluateVisitor__evaluateMacroArguments_closure6: function _EvaluateVisitor__evaluateMacroArguments_closure6(t0, t1, t2) {
      this.$this = t0;
      this.keywordRestNodeForSpan = t1;
      this.keywordRestArgs = t2;
    },
    _EvaluateVisitor__addRestMap_closure0: function _EvaluateVisitor__addRestMap_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.values = t1;
      _.convert = t2;
      _.expressionNode = t3;
      _.map = t4;
      _.nodeWithSpan = t5;
    },
    _EvaluateVisitor__verifyArguments_closure0: function _EvaluateVisitor__verifyArguments_closure0(t0, t1, t2) {
      this.parameters = t0;
      this.positional = t1;
      this.named = t2;
    },
    _EvaluateVisitor_visitCssAtRule_closure1: function _EvaluateVisitor_visitCssAtRule_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssAtRule_closure2: function _EvaluateVisitor_visitCssAtRule_closure2() {
    },
    _EvaluateVisitor_visitCssKeyframeBlock_closure1: function _EvaluateVisitor_visitCssKeyframeBlock_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssKeyframeBlock_closure2: function _EvaluateVisitor_visitCssKeyframeBlock_closure2() {
    },
    _EvaluateVisitor_visitCssMediaRule_closure2: function _EvaluateVisitor_visitCssMediaRule_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssMediaRule_closure3: function _EvaluateVisitor_visitCssMediaRule_closure3(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.mergedQueries = t1;
      _.node = t2;
      _.mergedSources = t3;
    },
    _EvaluateVisitor_visitCssMediaRule__closure0: function _EvaluateVisitor_visitCssMediaRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssMediaRule___closure0: function _EvaluateVisitor_visitCssMediaRule___closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssMediaRule_closure4: function _EvaluateVisitor_visitCssMediaRule_closure4(t0) {
      this.mergedSources = t0;
    },
    _EvaluateVisitor_visitCssStyleRule_closure2: function _EvaluateVisitor_visitCssStyleRule_closure2(t0, t1, t2) {
      this.$this = t0;
      this.rule = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitCssStyleRule__closure0: function _EvaluateVisitor_visitCssStyleRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssStyleRule_closure1: function _EvaluateVisitor_visitCssStyleRule_closure1() {
    },
    _EvaluateVisitor_visitCssSupportsRule_closure1: function _EvaluateVisitor_visitCssSupportsRule_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssSupportsRule__closure0: function _EvaluateVisitor_visitCssSupportsRule__closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitCssSupportsRule_closure2: function _EvaluateVisitor_visitCssSupportsRule_closure2() {
    },
    _EvaluateVisitor__performInterpolationHelper_closure0: function _EvaluateVisitor__performInterpolationHelper_closure0(t0) {
      this.interpolation = t0;
    },
    _EvaluateVisitor__serialize_closure0: function _EvaluateVisitor__serialize_closure0(t0, t1) {
      this.value = t0;
      this.quote = t1;
    },
    _EvaluateVisitor__expressionNode_closure0: function _EvaluateVisitor__expressionNode_closure0(t0, t1) {
      this.$this = t0;
      this.expression = t1;
    },
    _EvaluateVisitor__withoutSlash_recommendation0: function _EvaluateVisitor__withoutSlash_recommendation0() {
    },
    _EvaluateVisitor__stackFrame_closure0: function _EvaluateVisitor__stackFrame_closure0(t0) {
      this.$this = t0;
    },
    _ImportedCssVisitor0: function _ImportedCssVisitor0(t0) {
      this._async_evaluate$_visitor = t0;
    },
    _ImportedCssVisitor_visitCssAtRule_closure0: function _ImportedCssVisitor_visitCssAtRule_closure0() {
    },
    _ImportedCssVisitor_visitCssMediaRule_closure0: function _ImportedCssVisitor_visitCssMediaRule_closure0(t0) {
      this.hasBeenMerged = t0;
    },
    _ImportedCssVisitor_visitCssStyleRule_closure0: function _ImportedCssVisitor_visitCssStyleRule_closure0() {
    },
    _ImportedCssVisitor_visitCssSupportsRule_closure0: function _ImportedCssVisitor_visitCssSupportsRule_closure0() {
    },
    _EvaluationContext0: function _EvaluationContext0(t0, t1) {
      this._async_evaluate$_visitor = t0;
      this._async_evaluate$_defaultWarnNodeWithSpan = t1;
    },
    cloneCssStylesheet(stylesheet, extensionStore) {
      var _0_0 = extensionStore.clone$0();
      return new A._Record_2(new A._CloneCssVisitor(_0_0._1)._visitChildren$2(A.ModifiableCssStylesheet$(stylesheet.get$span(stylesheet)), stylesheet), _0_0._0);
    },
    _CloneCssVisitor: function _CloneCssVisitor(t0) {
      this._oldToNewSelectors = t0;
    },
    _EvaluateVisitor$(functions, importCache, logger, nodeImporter, quietDeps, sourceMap) {
      var t1 = type$.Uri,
        t2 = type$.Module_Callable,
        t3 = A._setArrayType([], type$.JSArray_Record_2_String_and_AstNode);
      t1 = new A._EvaluateVisitor(importCache, nodeImporter, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Callable), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, t2), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Configuration), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.AstNode), logger, A.LinkedHashSet_LinkedHashSet$_empty(type$.Record_2_String_and_SourceSpan), quietDeps, sourceMap, new A.Object(), A.Environment$(), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_AstNode), t3, B.Configuration_Map_empty_null);
      t1._EvaluateVisitor$6$functions$importCache$logger$nodeImporter$quietDeps$sourceMap(functions, importCache, logger, nodeImporter, quietDeps, sourceMap);
      return t1;
    },
    Evaluator: function Evaluator(t0, t1) {
      this._visitor = t0;
      this._importer = t1;
    },
    _EvaluateVisitor: function _EvaluateVisitor(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._evaluate$_importCache = t0;
      _._evaluate$_nodeImporter = t1;
      _._builtInFunctions = t2;
      _._builtInModules = t3;
      _._modules = t4;
      _._moduleConfigurations = t5;
      _._moduleNodes = t6;
      _._logger = t7;
      _._warningsEmitted = t8;
      _._quietDeps = t9;
      _._sourceMap = t10;
      _._compileContext = t11;
      _._environment = t12;
      _._declarationName = _.__parent = _._mediaQuerySources = _._mediaQueries = _._styleRuleIgnoringAtRoot = null;
      _._member = "root stylesheet";
      _._importSpan = _._callableNode = null;
      _._inSupportsDeclaration = _._inKeyframes = _._atRootExcludingStyleRule = _._inUnknownAtRule = _._inFunction = false;
      _._loadedUrls = t13;
      _._activeModules = t14;
      _._stack = t15;
      _._importer = null;
      _._inDependency = false;
      _.__extensionStore = _._preModuleComments = _._outOfOrderImports = _.__endOfImports = _.__root = _.__stylesheet = null;
      _._configuration = t16;
    },
    _EvaluateVisitor_closure: function _EvaluateVisitor_closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure0: function _EvaluateVisitor_closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure1: function _EvaluateVisitor_closure1(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure2: function _EvaluateVisitor_closure2(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure3: function _EvaluateVisitor_closure3(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure4: function _EvaluateVisitor_closure4(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure5: function _EvaluateVisitor_closure5(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure6: function _EvaluateVisitor_closure6(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure7: function _EvaluateVisitor_closure7(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure2: function _EvaluateVisitor__closure2(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.module = t2;
    },
    _EvaluateVisitor_closure8: function _EvaluateVisitor_closure8(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure1: function _EvaluateVisitor__closure1(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.module = t2;
    },
    _EvaluateVisitor_closure9: function _EvaluateVisitor_closure9(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure10: function _EvaluateVisitor_closure10(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__closure: function _EvaluateVisitor__closure(t0, t1, t2) {
      this.values = t0;
      this.span = t1;
      this.callableNode = t2;
    },
    _EvaluateVisitor__closure0: function _EvaluateVisitor__closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_closure11: function _EvaluateVisitor_closure11(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_run_closure: function _EvaluateVisitor_run_closure(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.importer = t2;
    },
    _EvaluateVisitor_run__closure: function _EvaluateVisitor_run__closure(t0, t1, t2) {
      this.$this = t0;
      this.importer = t1;
      this.node = t2;
    },
    _EvaluateVisitor_runExpression_closure: function _EvaluateVisitor_runExpression_closure(t0, t1, t2) {
      this.$this = t0;
      this.importer = t1;
      this.expression = t2;
    },
    _EvaluateVisitor_runExpression__closure: function _EvaluateVisitor_runExpression__closure(t0, t1) {
      this.$this = t0;
      this.expression = t1;
    },
    _EvaluateVisitor_runExpression___closure: function _EvaluateVisitor_runExpression___closure(t0, t1) {
      this.$this = t0;
      this.expression = t1;
    },
    _EvaluateVisitor_runStatement_closure: function _EvaluateVisitor_runStatement_closure(t0, t1, t2) {
      this.$this = t0;
      this.importer = t1;
      this.statement = t2;
    },
    _EvaluateVisitor_runStatement__closure: function _EvaluateVisitor_runStatement__closure(t0, t1) {
      this.$this = t0;
      this.statement = t1;
    },
    _EvaluateVisitor_runStatement___closure: function _EvaluateVisitor_runStatement___closure(t0, t1) {
      this.$this = t0;
      this.statement = t1;
    },
    _EvaluateVisitor__loadModule_closure: function _EvaluateVisitor__loadModule_closure(t0, t1) {
      this._box_0 = t0;
      this.callback = t1;
    },
    _EvaluateVisitor__loadModule_closure0: function _EvaluateVisitor__loadModule_closure0(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.url = t1;
      _.nodeWithSpan = t2;
      _.baseUrl = t3;
      _.namesInErrors = t4;
      _.configuration = t5;
      _.callback = t6;
    },
    _EvaluateVisitor__loadModule__closure: function _EvaluateVisitor__loadModule__closure(t0, t1) {
      this.$this = t0;
      this.message = t1;
    },
    _EvaluateVisitor__loadModule__closure0: function _EvaluateVisitor__loadModule__closure0(t0, t1, t2) {
      this._box_1 = t0;
      this.callback = t1;
      this.firstLoad = t2;
    },
    _EvaluateVisitor__execute_closure: function _EvaluateVisitor__execute_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.importer = t1;
      _.stylesheet = t2;
      _.extensionStore = t3;
      _.configuration = t4;
      _.css = t5;
      _.preModuleComments = t6;
    },
    _EvaluateVisitor__combineCss_closure: function _EvaluateVisitor__combineCss_closure() {
    },
    _EvaluateVisitor__combineCss_closure0: function _EvaluateVisitor__combineCss_closure0(t0) {
      this.selectors = t0;
    },
    _EvaluateVisitor__combineCss_visitModule: function _EvaluateVisitor__combineCss_visitModule(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.seen = t1;
      _.clone = t2;
      _.css = t3;
      _.imports = t4;
      _.sorted = t5;
    },
    _EvaluateVisitor__extendModules_closure: function _EvaluateVisitor__extendModules_closure(t0) {
      this.originalSelectors = t0;
    },
    _EvaluateVisitor__extendModules_closure0: function _EvaluateVisitor__extendModules_closure0() {
    },
    _EvaluateVisitor_visitAtRootRule_closure: function _EvaluateVisitor_visitAtRootRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitAtRootRule_closure0: function _EvaluateVisitor_visitAtRootRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure: function _EvaluateVisitor__scopeForAtRoot_closure(t0, t1, t2) {
      this.$this = t0;
      this.newParent = t1;
      this.node = t2;
    },
    _EvaluateVisitor__scopeForAtRoot_closure0: function _EvaluateVisitor__scopeForAtRoot_closure0(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure1: function _EvaluateVisitor__scopeForAtRoot_closure1(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot__closure: function _EvaluateVisitor__scopeForAtRoot__closure(t0, t1) {
      this.innerScope = t0;
      this.callback = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure2: function _EvaluateVisitor__scopeForAtRoot_closure2(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor__scopeForAtRoot_closure3: function _EvaluateVisitor__scopeForAtRoot_closure3() {
    },
    _EvaluateVisitor__scopeForAtRoot_closure4: function _EvaluateVisitor__scopeForAtRoot_closure4(t0, t1) {
      this.$this = t0;
      this.innerScope = t1;
    },
    _EvaluateVisitor_visitContentRule_closure: function _EvaluateVisitor_visitContentRule_closure(t0, t1) {
      this.$this = t0;
      this.content = t1;
    },
    _EvaluateVisitor_visitDeclaration_closure: function _EvaluateVisitor_visitDeclaration_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _EvaluateVisitor_visitEachRule_closure: function _EvaluateVisitor_visitEachRule_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.nodeWithSpan = t2;
    },
    _EvaluateVisitor_visitEachRule_closure0: function _EvaluateVisitor_visitEachRule_closure0(t0, t1, t2) {
      this._box_1 = t0;
      this.$this = t1;
      this.nodeWithSpan = t2;
    },
    _EvaluateVisitor_visitEachRule_closure1: function _EvaluateVisitor_visitEachRule_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.list = t1;
      _.setVariables = t2;
      _.node = t3;
    },
    _EvaluateVisitor_visitEachRule__closure: function _EvaluateVisitor_visitEachRule__closure(t0, t1, t2) {
      this.$this = t0;
      this.setVariables = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitEachRule___closure: function _EvaluateVisitor_visitEachRule___closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitAtRule_closure: function _EvaluateVisitor_visitAtRule_closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitAtRule_closure0: function _EvaluateVisitor_visitAtRule_closure0(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.children = t2;
    },
    _EvaluateVisitor_visitAtRule__closure: function _EvaluateVisitor_visitAtRule__closure(t0, t1) {
      this.$this = t0;
      this.children = t1;
    },
    _EvaluateVisitor_visitAtRule_closure1: function _EvaluateVisitor_visitAtRule_closure1() {
    },
    _EvaluateVisitor_visitForRule_closure: function _EvaluateVisitor_visitForRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForRule_closure0: function _EvaluateVisitor_visitForRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForRule_closure1: function _EvaluateVisitor_visitForRule_closure1(t0) {
      this.fromNumber = t0;
    },
    _EvaluateVisitor_visitForRule_closure2: function _EvaluateVisitor_visitForRule_closure2(t0, t1) {
      this.toNumber = t0;
      this.fromNumber = t1;
    },
    _EvaluateVisitor_visitForRule_closure3: function _EvaluateVisitor_visitForRule_closure3(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.node = t2;
      _.from = t3;
      _.direction = t4;
      _.fromNumber = t5;
    },
    _EvaluateVisitor_visitForRule__closure: function _EvaluateVisitor_visitForRule__closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitForwardRule_closure: function _EvaluateVisitor_visitForwardRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitForwardRule_closure0: function _EvaluateVisitor_visitForwardRule_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__registerCommentsForModule_closure: function _EvaluateVisitor__registerCommentsForModule_closure() {
    },
    _EvaluateVisitor_visitIfRule_closure: function _EvaluateVisitor_visitIfRule_closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitIfRule__closure: function _EvaluateVisitor_visitIfRule__closure(t0, t1) {
      this.$this = t0;
      this.clause = t1;
    },
    _EvaluateVisitor_visitIfRule___closure: function _EvaluateVisitor_visitIfRule___closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__visitDynamicImport_closure: function _EvaluateVisitor__visitDynamicImport_closure(t0, t1) {
      this.$this = t0;
      this.$import = t1;
    },
    _EvaluateVisitor__visitDynamicImport__closure: function _EvaluateVisitor__visitDynamicImport__closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor__visitDynamicImport__closure0: function _EvaluateVisitor__visitDynamicImport__closure0() {
    },
    _EvaluateVisitor__visitDynamicImport__closure1: function _EvaluateVisitor__visitDynamicImport__closure1() {
    },
    _EvaluateVisitor__visitDynamicImport__closure2: function _EvaluateVisitor__visitDynamicImport__closure2(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.loadsUserDefinedModules = t2;
      _.environment = t3;
      _.children = t4;
    },
    _EvaluateVisitor__applyMixin_closure: function _EvaluateVisitor__applyMixin_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.$arguments = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin__closure0: function _EvaluateVisitor__applyMixin__closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.$arguments = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin_closure0: function _EvaluateVisitor__applyMixin_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.contentCallable = t1;
      _.mixin = t2;
      _.nodeWithSpanWithoutContent = t3;
    },
    _EvaluateVisitor__applyMixin__closure: function _EvaluateVisitor__applyMixin__closure(t0, t1, t2) {
      this.$this = t0;
      this.mixin = t1;
      this.nodeWithSpanWithoutContent = t2;
    },
    _EvaluateVisitor__applyMixin___closure: function _EvaluateVisitor__applyMixin___closure(t0, t1, t2) {
      this.$this = t0;
      this.mixin = t1;
      this.nodeWithSpanWithoutContent = t2;
    },
    _EvaluateVisitor__applyMixin____closure: function _EvaluateVisitor__applyMixin____closure(t0, t1) {
      this.$this = t0;
      this.statement = t1;
    },
    _EvaluateVisitor_visitIncludeRule_closure: function _EvaluateVisitor_visitIncludeRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitIncludeRule_closure0: function _EvaluateVisitor_visitIncludeRule_closure0(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitIncludeRule_closure1: function _EvaluateVisitor_visitIncludeRule_closure1(t0) {
      this.node = t0;
    },
    _EvaluateVisitor_visitMediaRule_closure: function _EvaluateVisitor_visitMediaRule_closure(t0, t1) {
      this.$this = t0;
      this.queries = t1;
    },
    _EvaluateVisitor_visitMediaRule_closure0: function _EvaluateVisitor_visitMediaRule_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.mergedQueries = t1;
      _.queries = t2;
      _.mergedSources = t3;
      _.node = t4;
    },
    _EvaluateVisitor_visitMediaRule__closure: function _EvaluateVisitor_visitMediaRule__closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitMediaRule___closure: function _EvaluateVisitor_visitMediaRule___closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitMediaRule_closure1: function _EvaluateVisitor_visitMediaRule_closure1(t0) {
      this.mergedSources = t0;
    },
    _EvaluateVisitor_visitStyleRule_closure: function _EvaluateVisitor_visitStyleRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitStyleRule_closure0: function _EvaluateVisitor_visitStyleRule_closure0() {
    },
    _EvaluateVisitor_visitStyleRule_closure2: function _EvaluateVisitor_visitStyleRule_closure2(t0, t1, t2) {
      this.$this = t0;
      this.rule = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitStyleRule__closure: function _EvaluateVisitor_visitStyleRule__closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitStyleRule_closure1: function _EvaluateVisitor_visitStyleRule_closure1() {
    },
    _EvaluateVisitor__warnForBogusCombinators_closure: function _EvaluateVisitor__warnForBogusCombinators_closure() {
    },
    _EvaluateVisitor_visitSupportsRule_closure: function _EvaluateVisitor_visitSupportsRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitSupportsRule__closure: function _EvaluateVisitor_visitSupportsRule__closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitSupportsRule_closure0: function _EvaluateVisitor_visitSupportsRule_closure0() {
    },
    _EvaluateVisitor__visitSupportsCondition_closure: function _EvaluateVisitor__visitSupportsCondition_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure: function _EvaluateVisitor_visitVariableDeclaration_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.node = t2;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure0: function _EvaluateVisitor_visitVariableDeclaration_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitVariableDeclaration_closure1: function _EvaluateVisitor_visitVariableDeclaration_closure1(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.value = t2;
    },
    _EvaluateVisitor_visitUseRule_closure: function _EvaluateVisitor_visitUseRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWarnRule_closure: function _EvaluateVisitor_visitWarnRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWhileRule_closure: function _EvaluateVisitor_visitWhileRule_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitWhileRule__closure: function _EvaluateVisitor_visitWhileRule__closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitBinaryOperationExpression_closure: function _EvaluateVisitor_visitBinaryOperationExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__slash_recommendation: function _EvaluateVisitor__slash_recommendation() {
    },
    _EvaluateVisitor_visitVariableExpression_closure: function _EvaluateVisitor_visitVariableExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitUnaryOperationExpression_closure: function _EvaluateVisitor_visitUnaryOperationExpression_closure(t0, t1) {
      this.node = t0;
      this.operand = t1;
    },
    _EvaluateVisitor_visitListExpression_closure: function _EvaluateVisitor_visitListExpression_closure(t0) {
      this.$this = t0;
    },
    _EvaluateVisitor_visitFunctionExpression_closure: function _EvaluateVisitor_visitFunctionExpression_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitFunctionExpression_closure0: function _EvaluateVisitor_visitFunctionExpression_closure0() {
    },
    _EvaluateVisitor_visitFunctionExpression_closure1: function _EvaluateVisitor_visitFunctionExpression_closure1(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.node = t2;
    },
    _EvaluateVisitor__visitCalculation_closure: function _EvaluateVisitor__visitCalculation_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__checkCalculationArguments_check: function _EvaluateVisitor__checkCalculationArguments_check(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor__visitCalculationExpression_closure: function _EvaluateVisitor__visitCalculationExpression_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.node = t2;
      _.inLegacySassFunction = t3;
    },
    _EvaluateVisitor__visitCalculationExpression__closure: function _EvaluateVisitor__visitCalculationExpression__closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    _EvaluateVisitor_visitInterpolatedFunctionExpression_closure: function _EvaluateVisitor_visitInterpolatedFunctionExpression_closure(t0, t1, t2) {
      this.$this = t0;
      this.node = t1;
      this.$function = t2;
    },
    _EvaluateVisitor__runUserDefinedCallable_closure: function _EvaluateVisitor__runUserDefinedCallable_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.callable = t1;
      _.evaluated = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable__closure: function _EvaluateVisitor__runUserDefinedCallable__closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.evaluated = t1;
      _.callable = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable___closure: function _EvaluateVisitor__runUserDefinedCallable___closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.evaluated = t1;
      _.callable = t2;
      _.nodeWithSpan = t3;
      _.run = t4;
      _.V = t5;
    },
    _EvaluateVisitor__runUserDefinedCallable____closure: function _EvaluateVisitor__runUserDefinedCallable____closure() {
    },
    _EvaluateVisitor__runFunctionCallable_closure: function _EvaluateVisitor__runFunctionCallable_closure(t0, t1) {
      this.$this = t0;
      this.callable = t1;
    },
    _EvaluateVisitor__runBuiltInCallable_closure: function _EvaluateVisitor__runBuiltInCallable_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.evaluated = t1;
      this.namedSet = t2;
    },
    _EvaluateVisitor__runBuiltInCall