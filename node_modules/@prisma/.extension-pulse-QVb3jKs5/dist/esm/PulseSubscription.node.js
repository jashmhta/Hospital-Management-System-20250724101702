/// <reference types="node" />
import PrismaDefault from "@prisma/client/extension";
import { IncomingMessage } from "node:http";
import { WebSocket } from "ws";
import { convertWireEventToPulseEvent, parsePulseWireEvent, } from "./data-types.js";
import { PrismaPulseError } from "./errors.js";
export class PulseSubscription extends ReadableStream {
    #controller;
    #ws;
    constructor(init) {
        const { endpoint, apiKey, model, modelName, where } = init;
        const controller = new AbortController();
        const { signal } = controller;
        // prepare WebSocket constructor args for reuse
        const webSocketArgs = [
            endpoint.href,
            [],
            {
                headers: {
                    authorization: `Bearer ${apiKey}`,
                    subscription: JSON.stringify({
                        model,
                        modelName,
                        where,
                    }),
                    stream: JSON.stringify(init.stream),
                    "prisma-client-version": PrismaDefault.Prisma.prismaVersion.client,
                },
            },
        ];
        // connect the initial WebSocket
        // this is done outside the start() function to provide access earlier
        // start() won't run until the ReadableStream has a reader attached
        let ws = new WebSocket(...webSocketArgs);
        super({
            cancel: () => {
                this.stop();
            },
            start: async (controller) => {
                // loop to reconnect automatically if the WebSocket is disconnected
                // we will only break on error or explicit stop
                while (!signal.aborted) {
                    startPingPong(ws);
                    const stream = new WebSocketStream(ws).pipeThrough(new PulseEventDecoderStream(model));
                    try {
                        for await (const event of stream) {
                            controller.enqueue(event);
                        }
                    }
                    catch (reason) {
                        // cath the thrown connection error and convert to Pulse error
                        if (reason instanceof IncomingMessage) {
                            const body = await readBody(reason);
                            const error = PrismaPulseError.fromResponse(reason.statusCode, body);
                            throw error;
                        }
                        // everything else throws as-is
                        throw reason;
                    }
                    if (!signal.aborted) {
                        // backoff the reconnect a bit
                        await wait(500);
                    }
                    // check if aborted again in case it was aborted during the wait
                    if (!signal.aborted) {
                        // reassign the class member for acknowledgement packets
                        this.#ws = ws = new WebSocket(...webSocketArgs);
                    }
                }
                controller.close();
            },
        });
        this.#controller = controller;
        this.#ws = ws;
    }
    get open() {
        if (this.#ws.readyState === WebSocket.OPEN) {
            // the promise below would never resolved if the connection was already open
            // Docs: https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            this.#ws.once("open", () => resolve());
            this.#ws.once("error", (e) => reject(e));
            this.#ws.once("unexpected-response", async (req, res) => {
                const body = await readBody(res);
                const requestId = res.headers["cf-ray"]
                    ? res.headers["cf-ray"]
                    : "unknown";
                const error = PrismaPulseError.fromResponse(res.statusCode, body, requestId);
                reject(error);
            });
        });
    }
    async *[Symbol.asyncIterator]() {
        for await (const event of super[Symbol.asyncIterator]()) {
            yield event;
            this.acknowledgeEvent(event.id);
        }
    }
    acknowledgeEvent(id) {
        const msg = { type: "ack", id };
        this.#ws.send(JSON.stringify(msg));
    }
    stop() {
        if (!this.#controller.signal.aborted) {
            // abort the controller to prevent any reconnects
            this.#controller.abort();
            // close the most recent WebSocket instance
            this.#ws.close();
        }
    }
}
function readBody(res) {
    return new Promise((resolve) => {
        const data = new Array();
        res.on("data", (chunk) => data.push(chunk));
        res.on("end", () => resolve(data.join("")));
    });
}
function wait(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
/**
 * ReadableStream implementation that enqueues data received on the specified
 * WebSocket connection.
 */
class WebSocketStream extends ReadableStream {
    constructor(ws) {
        let closed = false;
        super({
            cancel() {
                closed = true;
                ws.close();
            },
            start(controller) {
                ws.once("close", () => {
                    if (!closed) {
                        controller.close();
                        closed = true;
                    }
                });
                ws.once("unexpected-response", async (req, res) => {
                    const body = await readBody(res);
                    const error = PrismaPulseError.fromResponse(res.statusCode, body);
                    if (!closed) {
                        controller.error(error);
                        closed = true;
                    }
                });
                ws.once("error", (error) => {
                    if (!closed) {
                        controller.error(error);
                        closed = true;
                    }
                    if (error.name === "AbortError") {
                        controller.close();
                        closed = true;
                    }
                });
                ws.on("message", (data) => {
                    if (!closed) {
                        controller.enqueue(data);
                    }
                });
            },
        });
    }
}
/**
 * TransformStream implementation that decodes WebSocket RawData (string,
 * Buffer, or Buffer[]) into a PulseEvent object for downstream consumers.
 */
class PulseEventDecoderStream extends TransformStream {
    constructor(model) {
        super({
            transform(rawData, controller) {
                const json = Buffer.isBuffer(rawData)
                    ? rawData.toString()
                    : Array.isArray(rawData)
                        ? Buffer.concat(rawData).toString()
                        : new TextDecoder().decode(rawData);
                const wireEvent = parsePulseWireEvent(json);
                const pulseEvent = convertWireEventToPulseEvent(wireEvent, model);
                controller.enqueue(pulseEvent);
            },
        });
    }
}
// /** Kills the WebSocket after a random timeout. */
// function introduceChaos(ws: WebSocket) {
//   const timeout = Math.floor(Math.random() * 10000);
//   console.debug(`killing WebSocket in ${timeout}ms`);
//   setTimeout(() => ws.terminate(), timeout);
// }
/**
 * Start a ping/pong loop to verify the status of the specified WebSocket.
 *
 * WebSocket connections don't always signal network connectivity issues when
 * there is no outbound traffic. This ensures we detect a broken connection and
 * force a discconnect with terminate(). The caller may then recover the
 * connection if it is still needed.
 */
function startPingPong(ws) {
    const interval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
            const timeout = setTimeout(() => ws.terminate(), 1000);
            ws.once("pong", () => clearTimeout(timeout));
            ws.ping();
        }
    }, 5000);
    ws.once("close", () => clearInterval(interval));
}
