import PrismaDefault from "@prisma/client/extension";
export class PrismaPulseError extends Error {
    clientVersion = PrismaDefault.Prisma.prismaVersion.client;
    code;
    details;
    requestId;
    constructor(code, message, requestId, details) {
        super(`${code} ${message} RequestId: ${requestId}`);
        this.code = code;
        this.details = details;
        this.requestId = requestId;
    }
    static fromResponse(status, body, requestIdFromResponse = "unknown") {
        try {
            const { code = "P6100", message = `Prisma Pulse returned an unexpected error response ${status}.`, requestId = requestIdFromResponse, details, } = JSON.parse(body);
            const ErrorClass = getErrorClass(code);
            return new ErrorClass(message, requestId, details);
        }
        catch {
            // no-op fallthrough
        }
        return new PrismaPulseServerError(`Prisma Pulse returned an unexpected error response with status ${status}.`, requestIdFromResponse);
    }
}
export class PrismaPulseServerError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6100", message, requestId, details);
        this.name = "ServerError";
    }
}
export class PrismaPulseDatasourceError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6101", message, requestId, details);
        this.name = "DatasourceError";
    }
}
export class PrismaPulseUnauthorizedError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6102", message, requestId, details);
        this.name = "Unauthorized";
    }
}
export class PrismaPulseProjectDisabledError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6103", message, requestId, details);
        this.name = "ProjectDisabledError";
    }
}
export class PrismaPulseAccountHoldError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6104", message, requestId, details);
        this.name = "AccountHoldError";
    }
}
export class PrismaPulseVersionNotSupportedError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6105", message, requestId, details);
        this.name = "VersionNotSupported";
    }
}
export class PrismaPulseStreamsDisabledError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6106", message, requestId, details);
        this.name = "StreamsDisabledError";
    }
}
function getErrorClass(code) {
    switch (code) {
        case "P6100":
            return PrismaPulseServerError;
        case "P6101":
            return PrismaPulseDatasourceError;
        case "P6102":
            return PrismaPulseUnauthorizedError;
        case "P6103":
            return PrismaPulseProjectDisabledError;
        case "P6104":
            return PrismaPulseAccountHoldError;
        case "P6105":
            return PrismaPulseVersionNotSupportedError;
        case "P6106":
            return PrismaPulseStreamsDisabledError;
        default:
            return PrismaPulseServerError;
    }
}
