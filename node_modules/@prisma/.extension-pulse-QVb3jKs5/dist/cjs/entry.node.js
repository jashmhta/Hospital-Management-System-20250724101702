"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withPulse = exports.PulseSubscription = void 0;
// importing default is needed for ESM compatibility
// default-index is a CJS file, so named exports are not resolved
// the types create a separate resolution issue, so they are still imported by name
const extension_1 = __importDefault(require("@prisma/client/extension"));
const PulseSubscription_node_js_1 = require("./PulseSubscription.node.js");
const serializer_js_1 = require("./serializer.js");
var PulseSubscription_node_js_2 = require("./PulseSubscription.node.js");
Object.defineProperty(exports, "PulseSubscription", { enumerable: true, get: function () { return PulseSubscription_node_js_2.PulseSubscription; } });
__exportStar(require("./errors.js"), exports);
const DEFAULT_ENDPOINT = new URL("wss://pulse.prisma-data.net");
/**
 * Client extension to manage subscriptions on a specific model.
 * A live query can subscribe to multiple operations on a single model.
 */
function withPulse(options) {
    return extension_1.default.Prisma.defineExtension((client) => {
        // endpoint is hidden, but there for testing, if not provided, use default
        const { endpoint = DEFAULT_ENDPOINT } = options;
        // This is available starting in 4.14 see https://prisma-company.slack.com/archives/C059MCJFP8D/p1685116524258729
        // @ts-ignore
        const datamodel = client._runtimeDataModel;
        return client.$extends({
            name: "@prisma/extension-pulse",
            model: {
                $allModels: {
                    async subscribe(args) {
                        const actualEndpoint = new URL("/subscribe", endpoint);
                        // removing the Prisma.Exact type to easily work with the actual type
                        const casted = args;
                        return establishSubscription(datamodel, actualEndpoint, options, this, casted);
                    },
                    async stream(args) {
                        const actualEndpoint = new URL("/stream", endpoint);
                        // removing the Prisma.Exact type to easily work with the actual type
                        const casted = args;
                        return establishSubscription(datamodel, actualEndpoint, options, this, casted);
                    },
                },
            },
        });
    });
}
exports.withPulse = withPulse;
async function establishSubscription(datamodel, endpoint, options, tModel, args) {
    const ctx = extension_1.default.Prisma.getExtensionContext(tModel);
    const modelName = ctx.name;
    const model = datamodel.models[modelName];
    if (args != null) {
        const serializer = new serializer_js_1.PulseSubscriptionFilterSerializer(model);
        args = serializer.serialize(args);
    }
    const subscription = new PulseSubscription_node_js_1.PulseSubscription({
        apiKey: options.apiKey,
        endpoint,
        model,
        modelName,
        where: args,
        stream: {
            name: args?.name,
        },
    });
    await subscription.open;
    return subscription;
}
