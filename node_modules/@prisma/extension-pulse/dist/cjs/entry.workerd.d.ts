import PrismaDefault, { type Prisma } from "@prisma/client/extension";
import { PulseSubscription } from "./PulseSubscription.workerd.js";
import type { PulseStreamArgs, PulseSubscribeArgs } from "./types.js";
export { PulseSubscription } from "./PulseSubscription.workerd.js";
export * from "./errors.js";
export type * from "./types.js";
export interface PulseOptions {
    readonly apiKey: string;
}
/**
 * Client extension to manage subscriptions on a specific model.
 * A live query can subscribe to multiple operations on a single model.
 */
export declare function withPulse(options: PulseOptions): (client: any) => PrismaDefault.PrismaClientExtends<import("@prisma/client/runtime/library.js").InternalArgs<{}, {
    $allModels: {
        subscribe<TModel, TArgs>(this: TModel, args?: Prisma.Exact<TArgs, PulseSubscribeArgs<TModel>> | undefined): Promise<PulseSubscription<import("./types.js").PulseResultType<import("./types.js").Omit<TArgs, "name">, Prisma.Result<TModel, TArgs, "findFirstOrThrow">>>>;
        stream<TModel_1, TArgs_1>(this: TModel_1, args?: Prisma.Exact<TArgs_1, PulseStreamArgs<TModel_1>> | undefined): Promise<PulseSubscription<import("./types.js").PulseResultType<import("./types.js").Omit<TArgs_1, "name">, Prisma.Result<TModel_1, TArgs_1, "findFirstOrThrow">>>>;
    };
}, {}, {}> & import("@prisma/client/runtime/library.js").DefaultArgs>;
