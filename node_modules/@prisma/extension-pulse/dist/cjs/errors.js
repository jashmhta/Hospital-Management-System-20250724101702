"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrismaPulseStreamsDisabledError = exports.PrismaPulseVersionNotSupportedError = exports.PrismaPulseAccountHoldError = exports.PrismaPulseProjectDisabledError = exports.PrismaPulseUnauthorizedError = exports.PrismaPulseDatasourceError = exports.PrismaPulseServerError = exports.PrismaPulseError = void 0;
const extension_1 = __importDefault(require("@prisma/client/extension"));
class PrismaPulseError extends Error {
    clientVersion = extension_1.default.Prisma.prismaVersion.client;
    code;
    details;
    requestId;
    constructor(code, message, requestId, details) {
        super(`${code} ${message} RequestId: ${requestId}`);
        this.code = code;
        this.details = details;
        this.requestId = requestId;
    }
    static fromResponse(status, body, requestIdFromResponse = "unknown") {
        try {
            const { code = "P6100", message = `Prisma Pulse returned an unexpected error response ${status}.`, requestId = requestIdFromResponse, details, } = JSON.parse(body);
            const ErrorClass = getErrorClass(code);
            return new ErrorClass(message, requestId, details);
        }
        catch {
            // no-op fallthrough
        }
        return new PrismaPulseServerError(`Prisma Pulse returned an unexpected error response with status ${status}.`, requestIdFromResponse);
    }
}
exports.PrismaPulseError = PrismaPulseError;
class PrismaPulseServerError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6100", message, requestId, details);
        this.name = "ServerError";
    }
}
exports.PrismaPulseServerError = PrismaPulseServerError;
class PrismaPulseDatasourceError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6101", message, requestId, details);
        this.name = "DatasourceError";
    }
}
exports.PrismaPulseDatasourceError = PrismaPulseDatasourceError;
class PrismaPulseUnauthorizedError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6102", message, requestId, details);
        this.name = "Unauthorized";
    }
}
exports.PrismaPulseUnauthorizedError = PrismaPulseUnauthorizedError;
class PrismaPulseProjectDisabledError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6103", message, requestId, details);
        this.name = "ProjectDisabledError";
    }
}
exports.PrismaPulseProjectDisabledError = PrismaPulseProjectDisabledError;
class PrismaPulseAccountHoldError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6104", message, requestId, details);
        this.name = "AccountHoldError";
    }
}
exports.PrismaPulseAccountHoldError = PrismaPulseAccountHoldError;
class PrismaPulseVersionNotSupportedError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6105", message, requestId, details);
        this.name = "VersionNotSupported";
    }
}
exports.PrismaPulseVersionNotSupportedError = PrismaPulseVersionNotSupportedError;
class PrismaPulseStreamsDisabledError extends PrismaPulseError {
    constructor(message, requestId, details) {
        super("P6106", message, requestId, details);
        this.name = "StreamsDisabledError";
    }
}
exports.PrismaPulseStreamsDisabledError = PrismaPulseStreamsDisabledError;
function getErrorClass(code) {
    switch (code) {
        case "P6100":
            return PrismaPulseServerError;
        case "P6101":
            return PrismaPulseDatasourceError;
        case "P6102":
            return PrismaPulseUnauthorizedError;
        case "P6103":
            return PrismaPulseProjectDisabledError;
        case "P6104":
            return PrismaPulseAccountHoldError;
        case "P6105":
            return PrismaPulseVersionNotSupportedError;
        case "P6106":
            return PrismaPulseStreamsDisabledError;
        default:
            return PrismaPulseServerError;
    }
}
