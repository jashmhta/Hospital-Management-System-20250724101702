// importing default is needed for ESM compatibility
// default-index is a CJS file, so named exports are not resolved
// the types create a separate resolution issue, so they are still imported by name
import PrismaDefault from "@prisma/client/extension";
import { PulseSubscription } from "./PulseSubscription.workerd.js";
import { PulseSubscriptionFilterSerializer } from "./serializer.js";
export { PulseSubscription } from "./PulseSubscription.workerd.js";
export * from "./errors.js";
const DEFAULT_ENDPOINT = new URL("https://pulse.prisma-data.net");
/**
 * Client extension to manage subscriptions on a specific model.
 * A live query can subscribe to multiple operations on a single model.
 */
export function withPulse(options) {
    return PrismaDefault.Prisma.defineExtension((client) => {
        // endpoint is hidden, but there for testing, if not provided, use default
        const { endpoint = DEFAULT_ENDPOINT } = options;
        // This is available starting in 4.14 see https://prisma-company.slack.com/archives/C059MCJFP8D/p1685116524258729
        // @ts-ignore
        const datamodel = client._runtimeDataModel;
        return client.$extends({
            name: "@prisma/extension-pulse",
            model: {
                $allModels: {
                    async subscribe(args) {
                        const actualEndpoint = new URL("/subscribe", endpoint);
                        // removing the Prisma.Exact type to easily work with the actual type
                        const casted = args;
                        return establishSubscription(datamodel, actualEndpoint, options, this, casted);
                    },
                    async stream(args) {
                        const actualEndpoint = new URL("/stream", endpoint);
                        // removing the Prisma.Exact type to easily work with the actual type
                        const casted = args;
                        return establishSubscription(datamodel, actualEndpoint, options, this, casted);
                    },
                },
            },
        });
    });
}
async function establishSubscription(datamodel, endpoint, options, tModel, args) {
    const ctx = PrismaDefault.Prisma.getExtensionContext(tModel);
    const modelName = ctx.name;
    const model = datamodel.models[modelName];
    if (args != null) {
        const serializer = new PulseSubscriptionFilterSerializer(model);
        args = serializer.serialize(args);
    }
    const subscription = new PulseSubscription({
        apiKey: options.apiKey,
        endpoint,
        model,
        modelName,
        where: args,
        stream: {
            name: args?.name,
        },
    });
    await subscription.open;
    return subscription;
}
