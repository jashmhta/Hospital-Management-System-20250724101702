import {
  ActionKind,
  DEFAULT_WEB_SOCKET_PORT,
  MF_SERVER_IDENTIFIER,
  Message,
  UpdateKind,
  UpdateMode,
  WEB_SOCKET_CONNECT_MAGIC_ID,
  __async,
  __name,
  __publicField
} from "./chunk-4CSLH7II.js";

// packages/dts-plugin/src/server/utils/log.ts
import { createLogger } from "@module-federation/sdk";
import * as log4js from "log4js";
var logger = createLogger(`[ ${MF_SERVER_IDENTIFIER} ]`);
function fileLog(msg, module, level) {
  var _a, _b;
  if (!((_a = process == null ? void 0 : process.env) == null ? void 0 : _a["FEDERATION_DEBUG"])) {
    return;
  }
  log4js.configure({
    appenders: {
      [module]: {
        type: "file",
        filename: ".mf/typesGenerate.log"
      },
      default: {
        type: "file",
        filename: ".mf/typesGenerate.log"
      }
    },
    categories: {
      [module]: {
        appenders: [
          module
        ],
        level: "error"
      },
      default: {
        appenders: [
          "default"
        ],
        level: "trace"
      }
    }
  });
  const logger4 = log4js.getLogger(module);
  logger4.level = "debug";
  (_b = logger4[level]) == null ? void 0 : _b.call(logger4, msg);
}
__name(fileLog, "fileLog");
function error(error2, action, from) {
  const err = error2 instanceof Error ? error2 : new Error(`${action} error`);
  fileLog(`[${action}] error: ${err}`, from, "fatal");
  return err.toString();
}
__name(error, "error");

// packages/dts-plugin/src/server/utils/getIPV4.ts
import os from "os";
var localIpv4 = "127.0.0.1";
var getIpv4Interfaces = /* @__PURE__ */ __name(() => {
  try {
    const interfaces = os.networkInterfaces();
    const ipv4Interfaces = [];
    Object.values(interfaces).forEach((detail) => {
      detail == null ? void 0 : detail.forEach((detail2) => {
        const familyV4Value = typeof detail2.family === "string" ? "IPv4" : 4;
        if (detail2.family === familyV4Value && detail2.address !== localIpv4) {
          ipv4Interfaces.push(detail2);
        }
      });
    });
    return ipv4Interfaces;
  } catch (_err) {
    return [];
  }
}, "getIpv4Interfaces");
var getIPV4 = /* @__PURE__ */ __name(() => {
  const ipv4Interfaces = getIpv4Interfaces();
  const ipv4Interface = ipv4Interfaces[0] || {
    address: localIpv4
  };
  return ipv4Interface.address;
}, "getIPV4");

// packages/dts-plugin/src/server/utils/index.ts
import net from "net";
import { SEPARATOR } from "@module-federation/sdk";

// packages/dts-plugin/src/server/utils/logTransform.ts
import chalk from "chalk";

// packages/dts-plugin/src/server/message/Log/Log.ts
var LogLevel;
(function(LogLevel2) {
  LogLevel2["LOG"] = "LOG";
  LogLevel2["WARN"] = "WARN";
  LogLevel2["ERROR"] = "ERROR";
})(LogLevel || (LogLevel = {}));
var LogKind;
(function(LogKind2) {
  LogKind2["BrokerExitLog"] = "BrokerExitLog";
  LogKind2["PublisherRegisteredLog"] = "PublisherRegisteredLog";
})(LogKind || (LogKind = {}));
var _Log = class _Log extends Message {
  constructor(level, kind, ignoreVerbose = false) {
    super("Log", kind);
    __publicField(this, "level");
    __publicField(this, "ignoreVerbose", false);
    this.level = level;
    this.ignoreVerbose = ignoreVerbose;
  }
};
__name(_Log, "Log");
var Log = _Log;

// packages/dts-plugin/src/server/message/Log/BrokerExitLog.ts
var _BrokerExitLog = class _BrokerExitLog extends Log {
  constructor() {
    super(LogLevel.LOG, LogKind.BrokerExitLog);
  }
};
__name(_BrokerExitLog, "BrokerExitLog");
var BrokerExitLog = _BrokerExitLog;

// packages/dts-plugin/src/server/utils/index.ts
function getIdentifier(options) {
  const { ip, name } = options;
  return `mf ${SEPARATOR}${name}${ip ? `${SEPARATOR}${ip}` : ""}`;
}
__name(getIdentifier, "getIdentifier");
function fib(n) {
  let i = 2;
  const res = [
    0,
    1,
    1
  ];
  while (i <= n) {
    res[i] = res[i - 1] + res[i - 2];
    i++;
  }
  return res[n];
}
__name(fib, "fib");
function getFreePort() {
  return new Promise((resolve, reject) => {
    const server = net.createServer();
    server.unref();
    server.on("error", reject);
    server.listen(0, () => {
      const { port } = server.address();
      server.close(() => {
        resolve(port);
      });
    });
  });
}
__name(getFreePort, "getFreePort");

// packages/dts-plugin/src/server/broker/Broker.ts
import { createServer } from "http";
import WebSocket from "isomorphic-ws";
import schedule from "node-schedule";
import { parse } from "url";

// packages/dts-plugin/src/server/message/API/API.ts
var APIKind;
(function(APIKind2) {
  APIKind2["UPDATE_SUBSCRIBER"] = "UPDATE_SUBSCRIBER";
  APIKind2["RELOAD_WEB_CLIENT"] = "RELOAD_WEB_CLIENT";
  APIKind2["FETCH_TYPES"] = "FETCH_TYPES";
})(APIKind || (APIKind = {}));
var _API = class _API extends Message {
  constructor(content, kind) {
    super("API", kind);
    __publicField(this, "code");
    __publicField(this, "payload");
    const { code, payload } = content;
    this.code = code;
    this.payload = payload;
  }
};
__name(_API, "API");
var API = _API;

// packages/dts-plugin/src/server/message/API/UpdateSubscriber.ts
var _UpdateSubscriberAPI = class _UpdateSubscriberAPI 