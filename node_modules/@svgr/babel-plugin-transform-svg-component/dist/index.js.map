{"version":3,"file":"index.js","sources":["../src/defaultTemplate.ts","../src/variables.ts","../src/index.ts"],"sourcesContent":["import type { Template } from './types'\n\nexport const defaultTemplate: Template = (variables, { tpl }) => {\n  return tpl`\n${variables.imports};\n\n${variables.interfaces};\n\nconst ${variables.componentName} = (${variables.props}) => (\n  ${variables.jsx}\n);\n \n${variables.exports};\n`\n}\n","import { types as t, template } from '@babel/core'\nimport type { Options, TemplateVariables, JSXRuntimeImport } from './types'\nimport type { ImportDeclaration } from '@babel/types'\n\nconst tsOptionalPropertySignature = (\n  ...args: Parameters<typeof t.tsPropertySignature>\n) => {\n  return {\n    ...t.tsPropertySignature(...args),\n    optional: true,\n  } as t.TSPropertySignature\n}\n\ninterface Context {\n  opts: Options\n  interfaces: t.TSInterfaceDeclaration[]\n  props: (t.Identifier | t.ObjectPattern)[]\n  imports: t.ImportDeclaration[]\n  importSource: string\n}\n\nconst getOrCreateImport = (\n  { imports }: Context,\n  sourceValue: string,\n  importKind: ImportDeclaration['importKind'] = undefined,\n) => {\n  const existing = imports.find(\n    (imp) =>\n      imp.source.value === sourceValue &&\n      imp.importKind === importKind &&\n      !imp.specifiers.some(\n        (specifier) => specifier.type === 'ImportNamespaceSpecifier',\n      ),\n  )\n  if (existing) return existing\n  const imp = t.importDeclaration([], t.stringLiteral(sourceValue))\n  if (importKind !== undefined