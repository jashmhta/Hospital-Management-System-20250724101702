"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addE2e = addE2e;
const devkit_1 = require("@nx/devkit");
const eslint_1 = require("@nx/eslint");
const versions_1 = require("../../../utils/versions");
const web_1 = require("@nx/web");
const find_plugin_for_config_file_1 = require("@nx/devkit/src/utils/find-plugin-for-config-file");
const target_defaults_utils_1 = require("@nx/devkit/src/generators/target-defaults-utils");
const e2e_web_server_info_utils_1 = require("@nx/devkit/src/generators/e2e-web-server-info-utils");
async function addE2e(host, options) {
    const nxJson = (0, devkit_1.readNxJson)(host);
    const hasPlugin = nxJson.plugins?.some((p) => typeof p === 'string'
        ? p === '@nx/next/plugin'
        : p.plugin === '@nx/next/plugin');
    const e2eWebServerInfo = await getNextE2EWebServerInfo(host, options.projectName, (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'next.config.js'), options.addPlugin);
    if (options.e2eTestRunner === 'cypress') {
        const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
        if (!hasPlugin) {
            await (0, web_1.webStaticServeGenerator)(host, {
                buildTarget: `${options.projectName}:build`,
                outputPath: `${options.outputPath}/out`,
                targetName: 'serve-static',
                spa: true,
            });
        }
        (0, devkit_1.addProjectConfiguration)(host, options.e2eProjectName, {
            root: options.e2eProjectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
            targets: {},
            tags: [],
            implicitDependencies: [options.projectName],
        });
        const e2eTask = await configurationGenerator(host, {
            ...options,
            linter: eslint_1.Linter.EsLint,
            project: options.e2eProjectName,
            directory: 'src',
            skipFormat: true,
            devServerTarget: e2eWebServerInfo.e2eDevServerTarget,
            baseUrl: e2eWebServerInfo.e2eWebServerAddress,
            jsx: true,
            webServerCommands: hasPlugin
                ? {
                    default: e2eWebServerInfo.e2eWebServerCommand,
                }
                : undefined,
            ciWebServerCommand: e2eWebServerInfo.e2eCiWebServerCommand,
            ciBaseUrl: e2eWebServerInfo.e2eCiBaseUrl,
        });
        if (options.addPlugin ||
            (0, devkit_1.readNxJson)(host).plugins?.find((p) => typeof p === 'string'
                ? p === '@nx/cypress/plugin'
                : p.plugin === '@nx/cypress/plugin')) {
            let buildTarget = '^build';
            if (hasPlugin) {
                const matchingPlugin = await (0, find_plugin_for_config_file_1.findPluginForConfigFile)(host, '@nx/next/plugin', (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'next.config.js'));
                if (matchingPlugin && typeof matchingPlugin !== 'string') {
                    buildTarget = `^${matchingPlugin.options?.buildTargetName ?? 'build'}`;
                }
            }
            await (0, target_defaults_utils_1.addE2eCiTargetDefaults)(host, '@nx/cypress/plugin', buildTarget, (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, `cypress.config.${options.js ? 'js' : 'ts'}`));
        }
        return e2eTask;
    }
    else if (options.e2eTestRunner === 'playwright') {
        const { configurationGenerator } = (0, devkit_1.ensurePackage)('@nx/playwright', versions_1.nxVersion);
        (0, devkit_1.addProjectConfiguration)(host, options.e2eProjectName, {
            root: options.e2eProjectRoot,
            sourceRoot: (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'src'),
            targets: {},
            tags: [],
            implicitDependencies: [options.projectName],
        });
        const e2eTask = await configurationGenerator(host, {
            rootProject: options.rootProject,
            project: options.e2eProjectName,
            skipFormat: true,
            skipPackageJson: options.skipPackageJson,
            directory: 'src',
            js: false,
            linter: options.linter,
            setParserOptionsProject: options.setParserOptionsProject,
            webServerAddress: e2eWebServerInfo.e2eCiBaseUrl,
            webServerCommand: e2eWebServerInfo.e2eCiWebServerCommand,
            addPlugin: options.addPlugin,
        });
        if (options.addPlugin ||
            (0, devkit_1.readNxJson)(host).plugins?.find((p) => typeof p === 'string'
                ? p === '@nx/playwright/plugin'
                : p.plugin === '@nx/playwright/plugin')) {
            let buildTarget = '^build';
            if (hasPlugin) {
                const matchingPlugin = await (0, find_plugin_for_config_file_1.findPluginForConfigFile)(host, '@nx/next/plugin', (0, devkit_1.joinPathFragments)(options.appProjectRoot, 'next.config.js'));
                if (matchingPlugin && typeof matchingPlugin !== 'string') {
                    buildTarget = `^${matchingPlugin.options?.buildTargetName ?? 'build'}`;
                }
            }
            await (0, target_defaults_utils_1.addE2eCiTargetDefaults)(host, '@nx/playwright/plugin', buildTarget, (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, `playwright.config.ts`));
        }
        return e2eTask;
    }
    return () => { };
}
async function getNextE2EWebServerInfo(tree, projectName, configFilePath, isPluginBeingAdded) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    let e2ePort = isPluginBeingAdded ? 3000 : 4200;
    const defaultServeTarget = isPluginBeingAdded ? 'dev' : 'serve';
    if (nxJson.targetDefaults?.[defaultServeTarget] &&
        nxJson.targetDefaults?.[defaultServeTarget].options?.port) {
        e2ePort = nxJson.targetDefaults?.[defaultServeTarget].options?.port;
    }
    return (0, e2e_web_server_info_utils_1.getE2EWebServerInfo)(tree, projectName, {
        plugin: '@nx/next/plugin',
        serveTargetName: 'devTargetName',
        serveStaticTargetName: 'serveStaticTargetName',
        configFilePath,
    }, {
        defaultServeTargetName: defaultServeTarget,
        defaultServeStaticTargetName: 'serve-static',
        defaultE2EWebServerAddress: `http://127.0.0.1:${e2ePort}`,
        defaultE2ECiBaseUrl: `http://localhost:${e2ePort}`,
        defaultE2EPort: e2ePort,
    }, isPluginBeingAdded);
}
