/**
 * FHIR Integration Tests
 * Comprehensive tests for FHIR R4 implementation
 */

import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import { FHIRPatientUtils } from '../patient';
import { FHIRAppointmentUtils } from '../appointment';
import { FHIREncounterUtils } from '../encounter';
import { FHIRMedicationUtils } from '../medication';
import { fhirService } from '../fhir.service';
import { FHIRPatientIntegration, FHIRIntegrationUtils } from '../fhir-integration';

describe('FHIR R4 Integration Tests', () => {
  beforeAll(async () => {
    // Initialize FHIR integration
    await FHIRIntegrationUtils.initializeFHIRIntegration();
  });

  describe('FHIR Patient Resource Tests', () => {
    test('should create a valid FHIR Patient from HMS data', () => {
      const hmsPatient = {\n        id: 'test-patient-1',\n        mrn: 'MRN123456',\n        firstName: 'John',\n        lastName: 'Doe',\n        dateOfBirth: '1980-01-15',\n        gender: 'male',\n        phone: '+1-555-123-4567',\n        email: 'john.doe@email.com'\n      };\n\n      const fhirPatient = FHIRPatientUtils.fromHMSPatient(hmsPatient);\n\n      expect(fhirPatient.resourceType).toBe('Patient');\n      expect(fhirPatient.id).toBe('test-patient-1');\n      expect(fhirPatient.birthDate).toBe('1980-01-15');\n      expect(fhirPatient.gender).toBe('male');\n      expect(FHIRPatientUtils.getMRN(fhirPatient)).toBe('MRN123456');\n      expect(FHIRPatientUtils.getDisplayName(fhirPatient)).toBe('John Doe');\n      expect(FHIRPatientUtils.getPrimaryPhone(fhirPatient)).toBe('+1-555-123-4567');\n      expect(FHIRPatientUtils.getPrimaryEmail(fhirPatient)).toBe('john.doe@email.com');\n    });\n\n    test('should validate FHIR Patient resource', () => {\n      const validPatient = FHIRPatientUtils.createBasicPatient({\n        firstName: 'Jane',\n        lastName: 'Smith',\n        birthDate: '1985-05-20',\n        gender: 'female'\n      });\n\n      const validation = FHIRPatientUtils.validatePatient(validPatient);\n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    test('should identify validation errors in invalid FHIR Patient', () => {\n      const invalidPatient = {\n        resourceType: 'Patient' as const,\n        // Missing required fields\n      };\n\n      const validation = FHIRPatientUtils.validatePatient(invalidPatient);\n      expect(validation.valid).toBe(false);\n      expect(validation.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('FHIR Appointment Resource Tests', () => {\n    test('should create a valid FHIR Appointment', () => {\n      const appointment = FHIRAppointmentUtils.createBasicAppointment({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        start: '2024-06-15T09:00:00Z',\n        end: '2024-06-15T09:30:00Z',\n        appointmentType: 'FOLLOWUP',\n        description: 'Follow-up consultation'\n      });\n\n      expect(appointment.resourceType).toBe('Appointment');\n      expect(appointment.status).toBe('booked');\n      expect(appointment.participant).toHaveLength(2);\n      expect(FHIRAppointmentUtils.getPatientId(appointment)).toBe('patient-123');\n      expect(FHIRAppointmentUtils.getPractitionerId(appointment)).toBe('practitioner-456');\n      expect(FHIRAppointmentUtils.getDurationMinutes(appointment)).toBe(30);\n    });\n\n    test('should validate appointment status transitions', () => {\n      const { FHIRAppointmentWorkflow } = require('../appointment');\n      \n      // Valid transitions\n      expect(FHIRAppointmentWorkflow.isValidStatusTransition('booked', 'arrived')).toBe(true);\n      expect(FHIRAppointmentWorkflow.isValidStatusTransition('arrived', 'fulfilled')).toBe(true);\n      \n      // Invalid transitions\n      expect(FHIRAppointmentWorkflow.isValidStatusTransition('fulfilled', 'booked')).toBe(false);\n      expect(FHIRAppointmentWorkflow.isValidStatusTransition('cancelled', 'arrived')).toBe(false);\n    });\n\n    test('should format appointment time correctly', () => {\n      const appointment = FHIRAppointmentUtils.createBasicAppointment({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        start: '2024-06-15T09:00:00Z',\n        end: '2024-06-15T09:30:00Z'\n      });\n\n      const timeFormat = FHIRAppointmentUtils.formatAppointmentTime(appointment);\n      expect(timeFormat).toMatch(/\\d{1,2}:\\d{2}\\s*(AM|PM)\\s*-\\s*\\d{1,2}:\\d{2}\\s*(AM|PM)/);\n    });\n  });\n\n  describe('FHIR Encounter Resource Tests', () => {\n    test('should create OPD encounter', () => {\n      const encounter = FHIREncounterUtils.createOPDEncounter({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        start: '2024-06-15T09:00:00Z',\n        chiefComplaint: 'Routine checkup'\n      });\n\n      expect(encounter.resourceType).toBe('Encounter');\n      expect(encounter.class.code).toBe('OUTPATIENT');\n      expect(encounter.status).toBe('in-progress');\n      expect(FHIREncounterUtils.getPatientId(encounter)).toBe('patient-123');\n      expect(FHIREncounterUtils.getPrimaryPractitioner(encounter)).toBe('practitioner-456');\n    });\n\n    test('should create IPD encounter with hospitalization details', () => {\n      const encounter = FHIREncounterUtils.createIPDEncounter({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        locationId: 'ward-a-bed-1',\n        admissionDate: '2024-06-15T08:00:00Z',\n        admissionReason: 'Surgical procedure',\n        admissionSource: 'emergency'\n      });\n\n      expect(encounter.resourceType).toBe('Encounter');\n      expect(encounter.class.code).toBe('INPATIENT');\n      expect(encounter.hospitalization?.admitSource?.coding?.[0]?.code).toBe('emergency');\n      expect(FHIREncounterUtils.getCurrentLocation(encounter)).toBe('ward-a-bed-1');\n    });\n\n    test('should validate encounter status workflow', () => {\n      const { FHIREncounterWorkflow } = require('../encounter');\n      \n      // Valid transitions\n      expect(FHIREncounterWorkflow.isValidStatusTransition('planned', 'arrived')).toBe(true);\n      expect(FHIREncounterWorkflow.isValidStatusTransition('in-progress', 'finished')).toBe(true);\n      \n      // Invalid transitions\n      expect(FHIREncounterWorkflow.isValidStatusTransition('finished', 'arrived')).toBe(false);\n    });\n  });\n\n  describe('FHIR Medication Resource Tests', () => {\n    test('should create a valid MedicationRequest', () => {\n      const medicationRequest = FHIRMedicationUtils.createBasicMedicationRequest({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        medicationCode: 'RXN12345',\n        medicationDisplay: 'Amoxicillin 500mg',\n        dosageText: 'Take 1 tablet by mouth twice daily',\n        quantity: 20,\n        refills: 2\n      });\n\n      expect(medicationRequest.resourceType).toBe('MedicationRequest');\n      expect(medicationRequest.status).toBe('active');\n      expect(medicationRequest.intent).toBe('order');\n      expect(FHIRMedicationUtils.getMedicationDisplay(medicationRequest.medication)).toBe('Amoxicillin 500mg');\n      expect(FHIRMedicationUtils.getDosageText(medicationRequest.dosageInstruction || [])).toBe('Take 1 tablet by mouth twice daily');\n    });\n\n    test('should validate MedicationRequest', () => {\n      const medicationRequest = FHIRMedicationUtils.createBasicMedicationRequest({\n        patientId: 'patient-123',\n        practitionerId: 'practitioner-456',\n        medicationCode: 'RXN12345',\n        medicationDisplay: 'Amoxicillin 500mg',\n        dosageText: 'Take 1 tablet by mouth twice daily'\n      });\n\n      const validation = FHIRMedicationUtils.validateMedicationRequest(medicationRequest);\n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n  });\n\n  describe('FHIR Service Integration Tests', () => {\n    test('should create and retrieve a patient via FHIR service', async () => {\n      const patientData = FHIRPatientUtils.createBasicPatient({\n        firstName: 'Test',\n        lastName: 'Patient',\n        birthDate: '1990-01-01',\n        gender: 'male'\n      });\n\n      // Create patient\n      const createResult = await fhirService.createPatient(patientData);\n      expect(createResult.success).toBe(true);\n      expect(createResult.data?.id).toBeDefined();\n\n      // Retrieve patient\n      const patientId = createResult.data!.id!;\n      const readResult = await fhirService.getPatient(patientId);\n      expect(readResult.success).toBe(true);\n      expect(readResult.data?.id).toBe(patientId);\n    });\n\n    test('should search patients with various criteria', async () => {\n      const searchResult = await fhirService.searchPatients({\n        family: 'Test',\n        _count: 10\n      });\n\n      expect(searchResult.success).toBe(true);\n      expect(searchResult.data?.resourceType).toBe('Bundle');\n      expect(searchResult.data?.type).toBe('searchset');\n    });\n  });\n\n  describe('FHIR Integration Hooks Tests', () => {\n    test('should integrate HMS patient data with FHIR', async () => {\n      const hmsPatientData = {\n        firstName: 'Integration',\n        lastName: 'Test',\n        dateOfBirth: '1985-12-25',\n        gender: 'female',\n        phone: '+1-555-987-6543',\n        email: 'integration.test@email.com'\n      };\n\n      try {\n        const result = await FHIRPatientIntegration.upsertPatient(hmsPatientData);\n        \n        expect(result.hmsPatient).toBeDefined();\n        expect(result.fhirPatient).toBeDefined();\n        expect(result.fhirPatient.resourceType).toBe('Patient');\n        expect(result.hmsPatient.firstName).toBe('Integration');\n        expect(result.hmsPatient.lastName).toBe('Test');\n      } catch (error) {\n        // Expected in test environment without database\n        console.log('Integration test requires database connection');\n      }\n    });\n\n    test('should convert HMS search parameters to FHIR format', () => {\n      const hmsSearchParams = {\n        firstName: 'John',\n        lastName: 'Doe',\n        mrn: 'MRN123',\n        limit: 20,\n        offset: 0\n      };\n\n      const fhirParams = FHIRIntegrationUtils.convertHMSSearchToFHIR(hmsSearchParams, 'Patient');\n      \n      expect(fhirParams.given).toBe('John');\n      expect(fhirParams.family).toBe('Doe');\n      expect(fhirParams.identifier).toBe('MRN123');\n      expect(fhirParams._count).toBe(20);\n      expect(fhirParams._offset).toBe(0);\n    });\n  });\n\n  describe('FHIR Validation Tests', () => {\n    test('should validate FHIR resource structure', () => {\n      const validResource = {\n        resourceType: 'Patient',\n        id: 'test-123',\n        name: [{ family: 'Test', given: ['Patient'] }]\n      };\n\n      const validation = FHIRIntegrationUtils.validateFHIRResource(validResource);\n      expect(validation.valid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    test('should identify invalid FHIR resource', () => {\n      const invalidResource = {\n        // Missing resourceType\n        id: 'test-123'\n      };\n\n      const validation = FHIRIntegrationUtils.validateFHIRResource(invalidResource);\n      expect(validation.valid).toBe(false);\n      expect(validation.errors).toContain('resourceType is required');\n    });\n  });\n\n  describe('FHIR Bundle Operations Tests', () => {\n    test('should process batch bundle with multiple operations', async () => {\n      const bundle = {\n        resourceType: 'Bundle' as const,\n        type: 'batch' as const,\n        entry: [\n          {\n            request: {\n              method: 'POST',\n              url: 'Patient'\n            },\n            resource: FHIRPatientUtils.createBasicPatient({\n              firstName: 'Batch',\n              lastName: 'Test',\n              birthDate: '1990-06-15',\n              gender: 'other'\n            })\n          }\n        ]\n      };\n\n      try {\n        const result = await fhirService.processBatch(bundle);\n        expect(result.success).toBe(true);\n        expect(result.data?.resourceType).toBe('Bundle');\n        expect(result.data?.type).toBe('batch-response');\n      } catch (error) {\n        // Expected in test environment\n        console.log('Batch processing test requires database connection');\n      }\n    });\n  });\n});\n\n// Performance and Stress Tests\ndescribe('FHIR Performance Tests', () => {\n  test('should handle large patient data efficiently', () => {\n    const startTime = Date.now();\n    \n    // Create 1000 patients\n    const patients = [];\n    for (let i = 0; i < 1000; i++) {\n      const patient = FHIRPatientUtils.createBasicPatient({\n        firstName: `Patient${i}`,\n        lastName: `Test${i}`,\n        birthDate: `199${i % 10}-0${(i % 9) + 1}-${(i % 28) + 1}`,\n        gender: i % 2 === 0 ? 'male' : 'female'\n      });\n      patients.push(patient);\n    }\n    \n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    \n    expect(patients).toHaveLength(1000);\n    expect(duration).toBeLessThan(1000); // Should complete in under 1 second\n  });\n\n  test('should efficiently convert between HMS and FHIR formats', () => {\n    const hmsPatients = [];\n    for (let i = 0; i < 100; i++) {\n      hmsPatients.push({\n        id: `patient-${i}`,\n        mrn: `MRN${i.toString().padStart(6, '0')}`,\n        firstName: `Patient${i}`,\n        lastName: `Test${i}`,\n        dateOfBirth: '1990-01-01',\n        gender: 'male',\n        phone: `+1-555-000-${i.toString().padStart(4, '0')}`,\n        email: `patient${i}@test.com`\n      });\n    }\n\n    const startTime = Date.now();\n    \n    const fhirPatients = hmsPatients.map(hms => FHIRPatientUtils.fromHMSPatient(hms));\n    \n    const endTime = Date.now();\n    const duration = endTime - startTime;\n    \n    expect(fhirPatients).toHaveLength(100);\n    expect(duration).toBeLessThan(100); // Should complete very quickly\n    \n    // Verify conversion accuracy\n    expect(fhirPatients[0].resourceType).toBe('Patient');\n    expect(FHIRPatientUtils.getMRN(fhirPatients[0])).toBe('MRN000000');\n  });\n});\n"
