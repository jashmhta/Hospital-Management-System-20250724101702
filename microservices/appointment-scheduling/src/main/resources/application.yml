# Appointment Scheduling Service Configuration
server:
  port: ${SERVER_PORT:8082}
  servlet:
    context-path: /appointments
  shutdown: graceful
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

spring:
  application:
    name: appointment-scheduling-service
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/appointment_db}
    username: ${DATABASE_USERNAME:appointment_user}
    password: ${DATABASE_PASSWORD:appointment_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        generate_statistics: false
    open-in-view: false

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000 # 10 minutes
      cache-null-values: false

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:1}
      timeout: 2000ms
      jedis:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/hms}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/hms/protocol/openid-connect/certs}

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: appointment-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.hospital.hms.appointmentscheduling.event
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,loggers
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  health:
    redis:
      enabled: true
    diskspace:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  show-actuator: true

# Appointment Service Specific Configuration
appointment:
  scheduling:
    default-duration-minutes: 30
    advance-booking-days: 90
    max-appointments-per-day: 50
    slot-interval-minutes: 15
    auto-confirmation: false
    
  reminders:
    enabled: true
    advance-hours: 24
    email-enabled: true
    sms-enabled: true
    
  validation:
    check-conflicts: true
    allow-past-appointments: false
    require-insurance-verification: true
    
  notifications:
    email-templates-path: classpath:email-templates/
    sms-templates-path: classpath:sms-templates/

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      appointment-service:
        sliding-window-size: 20
        minimum-number-of-calls: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
  
  retry:
    instances:
      appointment-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
  
  timelimiter:
    instances:
      appointment-service:
        timeout-duration: 10s

# Logging Configuration
logging:
  level:
    com.hospital.hms.appointmentscheduling: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.springframework.data: WARN
    org.hibernate: WARN
    org.springframework.kafka: INFO
    root: ${ROOT_LOG_LEVEL:INFO}
  pattern:
    console: \"%d{yyyy-MM-dd HH:mm:ss} - %msg%n\"
    file: \"%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n\"

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    url: jdbc:h2:mem:appointment_dev
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

  h2:
    console:
      enabled: true
      path: /h2-console

logging:
  level:
    com.hospital.hms.appointmentscheduling: DEBUG
    org.springframework.security: DEBUG

appointment:
  scheduling:
    auto-confirmation: true
  validation:
    require-insurance-verification: false

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:appointment_test
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop

eureka:
  client:
    enabled: false

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    show-sql: false

logging:
  level:
    com.hospital.hms.appointmentscheduling: INFO
    org.springframework.security: WARN
    root: WARN

appointment:
  validation:
    require-insurance-verification: true
  reminders:
    enabled: true"
