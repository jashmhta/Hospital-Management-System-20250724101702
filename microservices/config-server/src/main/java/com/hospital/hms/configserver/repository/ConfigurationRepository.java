package com.hospital.hms.configserver.repository;

import com.hospital.hms.configserver.entity.ConfigurationEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Configuration Repository
 * 
 * Advanced repository with custom queries for configuration management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface ConfigurationRepository extends JpaRepository<ConfigurationEntity, String> {

    /**
     * Find configuration by application, profile, label, and key
     */
    Optional<ConfigurationEntity> findByApplicationAndProfileAndLabelAndPropertyKeyAndIsActiveTrue(
            String application, String profile, String label, String propertyKey);

    /**
     * Find all configurations for application and profile
     */
    List<ConfigurationEntity> findByApplicationAndProfileAndLabelAndIsActiveTrueOrderByPropertyKeyAsc(
            String application, String profile, String label);

    /**
     * Find configurations by application
     */
    List<ConfigurationEntity> findByApplicationAndIsActiveTrueOrderByProfileAscPropertyKeyAsc(String application);

    /**
     * Find configurations by application and profile
     */
    List<ConfigurationEntity> findByApplicationAndProfileAndIsActiveTrueOrderByPropertyKeyAsc(
            String application, String profile);

    /**
     * Find configurations by category
     */
    List<ConfigurationEntity> findByCategoryIgnoreCaseAndIsActiveTrueOrderByPropertyKeyAsc(String category);

    /**
     * Find sensitive configurations
     */
    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.isSensitive = true AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findSensitiveConfigurations();\n\n    /**\n     * Find encrypted configurations\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.isEncrypted = true AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findEncryptedConfigurations();\n\n    /**\n     * Find configurations requiring encryption\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.isSensitive = true AND \" +\n           \"c.isEncrypted = false AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findConfigurationsNeedingEncryption();\n\n    /**\n     * Find deprecated configurations\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.isDeprecated = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findDeprecatedConfigurations();\n\n    /**\n     * Find configurations requiring restart\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.requiresRestart = true AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findConfigurationsRequiringRestart();\n\n    /**\n     * Find configurations by priority\n     */\n    List<ConfigurationEntity> findByPriorityAndIsActiveTrueOrderByApplicationAscProfileAscPropertyKeyAsc(\n            ConfigurationEntity.Priority priority);\n\n    /**\n     * Find configurations by scope\n     */\n    List<ConfigurationEntity> findByScopeAndIsActiveTrueOrderByApplicationAscProfileAscPropertyKeyAsc(\n            ConfigurationEntity.Scope scope);\n\n    /**\n     * Find configurations needing validation\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE \" +\n           \"(c.lastValidated IS NULL OR c.lastValidated < :validationThreshold) AND \" +\n           \"c.isActive = true ORDER BY c.lastValidated ASC NULLS FIRST\")\n    List<ConfigurationEntity> findConfigurationsNeedingValidation(\n            @Param(\"validationThreshold\") LocalDateTime validationThreshold);\n\n    /**\n     * Find invalid configurations\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.validationStatus = 'INVALID' AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findInvalidConfigurations();\n\n    /**\n     * Find configurations by tags\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.tags IS NOT NULL AND \" +\n           \"LOWER(c.tags) LIKE LOWER(CONCAT('%', :tag, '%')) AND c.isActive = true \" +\n           \"ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> findByTag(@Param(\"tag\") String tag);\n\n    /**\n     * Search configurations\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE \" +\n           \"(LOWER(c.propertyKey) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR \" +\n           \"LOWER(c.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR \" +\n           \"LOWER(c.category) LIKE LOWER(CONCAT('%', :searchTerm, '%'))) AND \" +\n           \"c.isActive = true ORDER BY c.application, c.profile, c.propertyKey\")\n    List<ConfigurationEntity> searchConfigurations(@Param(\"searchTerm\") String searchTerm);\n\n    /**\n     * Advanced configuration search\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE \" +\n           \"(:application IS NULL OR LOWER(c.application) LIKE LOWER(CONCAT('%', :application, '%'))) AND \" +\n           \"(:profile IS NULL OR c.profile = :profile) AND \" +\n           \"(:label IS NULL OR c.label = :label) AND \" +\n           \"(:category IS NULL OR LOWER(c.category) LIKE LOWER(CONCAT('%', :category, '%'))) AND \" +\n           \"(:propertyKey IS NULL OR LOWER(c.propertyKey) LIKE LOWER(CONCAT('%', :propertyKey, '%'))) AND \" +\n           \"(:propertyType IS NULL OR c.propertyType = :propertyType) AND \" +\n           \"(:priority IS NULL OR c.priority = :priority) AND \" +\n           \"(:scope IS NULL OR c.scope = :scope) AND \" +\n           \"(:isSensitive IS NULL OR c.isSensitive = :isSensitive) AND \" +\n           \"(:isRequired IS NULL OR c.isRequired = :isRequired) AND \" +\n           \"(:isActive IS NULL OR c.isActive = :isActive)\")\n    Page<ConfigurationEntity> searchConfigurationsAdvanced(\n            @Param(\"application\") String application,\n            @Param(\"profile\") String profile,\n            @Param(\"label\") String label,\n            @Param(\"category\") String category,\n            @Param(\"propertyKey\") String propertyKey,\n            @Param(\"propertyType\") String propertyType,\n            @Param(\"priority\") ConfigurationEntity.Priority priority,\n            @Param(\"scope\") ConfigurationEntity.Scope scope,\n            @Param(\"isSensitive\") Boolean isSensitive,\n            @Param(\"isRequired\") Boolean isRequired,\n            @Param(\"isActive\") Boolean isActive,\n            Pageable pageable);\n\n    /**\n     * Find configurations by Git commit\n     */\n    List<ConfigurationEntity> findByGitCommitHashOrderByApplicationAscProfileAscPropertyKeyAsc(String gitCommitHash);\n\n    /**\n     * Find configurations updated after timestamp\n     */\n    @Query(\"SELECT c FROM ConfigurationEntity c WHERE c.updatedAt > :timestamp \" +\n           \"ORDER BY c.updatedAt DESC\")\n    List<ConfigurationEntity> findConfigurationsUpdatedAfter(@Param(\"timestamp\") LocalDateTime timestamp);\n\n    /**\n     * Find configurations by source\n     */\n    List<ConfigurationEntity> findBySourceIgnoreCaseAndIsActiveTrueOrderByApplicationAscProfileAscPropertyKeyAsc(\n            String source);\n\n    /**\n     * Count configurations by application\n     */\n    @Query(\"SELECT c.application, COUNT(c) FROM ConfigurationEntity c WHERE c.isActive = true \" +\n           \"GROUP BY c.application ORDER BY COUNT(c) DESC\")\n    List<Object[]> countConfigurationsByApplication();\n\n    /**\n     * Count configurations by profile\n     */\n    @Query(\"SELECT c.profile, COUNT(c) FROM ConfigurationEntity c WHERE c.isActive = true \" +\n           \"GROUP BY c.profile ORDER BY COUNT(c) DESC\")\n    List<Object[]> countConfigurationsByProfile();\n\n    /**\n     * Count configurations by category\n     */\n    @Query(\"SELECT c.category, COUNT(c) FROM ConfigurationEntity c WHERE c.category IS NOT NULL \" +\n           \"AND c.isActive = true GROUP BY c.category ORDER BY COUNT(c) DESC\")\n    List<Object[]> countConfigurationsByCategory();\n\n    /**\n     * Count configurations by priority\n     */\n    @Query(\"SELECT c.priority, COUNT(c) FROM ConfigurationEntity c WHERE c.isActive = true \" +\n           \"GROUP BY c.priority\")\n    List<Object[]> countConfigurationsByPriority();\n\n    /**\n     * Get configuration statistics\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(c) as totalConfigurations, \" +\n           \"COUNT(CASE WHEN c.isActive = true THEN 1 END) as activeConfigurations, \" +\n           \"COUNT(CASE WHEN c.isSensitive = true THEN 1 END) as sensitiveConfigurations, \" +\n           \"COUNT(CASE WHEN c.isEncrypted = true THEN 1 END) as encryptedConfigurations, \" +\n           \"COUNT(CASE WHEN c.isRequired = true THEN 1 END) as requiredConfigurations, \" +\n           \"COUNT(CASE WHEN c.isDeprecated = true THEN 1 END) as deprecatedConfigurations, \" +\n           \"COUNT(CASE WHEN c.validationStatus = 'VALID' THEN 1 END) as validConfigurations \" +\n           \"FROM ConfigurationEntity c\")\n    Object[] getConfigurationStatistics();\n\n    /**\n     * Update configuration value\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.propertyValue = :value, \" +\n           \"c.version = c.version + 1, c.updatedAt = CURRENT_TIMESTAMP, c.updatedBy = :updatedBy \" +\n           \"WHERE c.configId = :configId\")\n    int updateConfigurationValue(\n            @Param(\"configId\") String configId,\n            @Param(\"value\") String value,\n            @Param(\"updatedBy\") String updatedBy);\n\n    /**\n     * Update validation status\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.validationStatus = :status, \" +\n           \"c.lastValidated = CURRENT_TIMESTAMP WHERE c.configId = :configId\")\n    int updateValidationStatus(\n            @Param(\"configId\") String configId,\n            @Param(\"status\") String status);\n\n    /**\n     * Update encryption status\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.isEncrypted = :encrypted, \" +\n           \"c.encryptionKeyId = :keyId WHERE c.configId = :configId\")\n    int updateEncryptionStatus(\n            @Param(\"configId\") String configId,\n            @Param(\"encrypted\") Boolean encrypted,\n            @Param(\"keyId\") String keyId);\n\n    /**\n     * Activate configuration\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.isActive = true WHERE c.configId = :configId\")\n    int activateConfiguration(@Param(\"configId\") String configId);\n\n    /**\n     * Deactivate configuration\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.isActive = false WHERE c.configId = :configId\")\n    int deactivateConfiguration(@Param(\"configId\") String configId);\n\n    /**\n     * Mark as deprecated\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.isDeprecated = true, \" +\n           \"c.deprecationMessage = :message WHERE c.configId = :configId\")\n    int markAsDeprecated(@Param(\"configId\") String configId, @Param(\"message\") String message);\n\n    /**\n     * Bulk update Git commit hash\n     */\n    @Modifying\n    @Query(\"UPDATE ConfigurationEntity c SET c.gitCommitHash = :commitHash \" +\n           \"WHERE c.application = :application AND c.profile = :profile AND c.label = :label\")\n    int updateGitCommitHash(\n            @Param(\"application\") String application,\n            @Param(\"profile\") String profile,\n            @Param(\"label\") String label,\n            @Param(\"commitHash\") String commitHash);\n\n    /**\n     * Check if configuration exists\n     */\n    boolean existsByApplicationAndProfileAndLabelAndPropertyKey(\n            String application, String profile, String label, String propertyKey);\n\n    /**\n     * Find duplicate configurations\n     */\n    @Query(\"SELECT c.application, c.profile, c.label, c.propertyKey, COUNT(c) \" +\n           \"FROM ConfigurationEntity c WHERE c.isActive = true \" +\n           \"GROUP BY c.application, c.profile, c.label, c.propertyKey HAVING COUNT(c) > 1\")\n    List<Object[]> findDuplicateConfigurations();\n\n    /**\n     * Get applications list\n     */\n    @Query(\"SELECT DISTINCT c.application FROM ConfigurationEntity c WHERE c.isActive = true \" +\n           \"ORDER BY c.application\")\n    List<String> findDistinctApplications();\n\n    /**\n     * Get profiles for application\n     */\n    @Query(\"SELECT DISTINCT c.profile FROM ConfigurationEntity c WHERE c.application = :application \" +\n           \"AND c.isActive = true ORDER BY c.profile\")\n    List<String> findDistinctProfilesByApplication(@Param(\"application\") String application);\n\n    /**\n     * Get labels for application and profile\n     */\n    @Query(\"SELECT DISTINCT c.label FROM ConfigurationEntity c WHERE c.application = :application \" +\n           \"AND c.profile = :profile AND c.isActive = true ORDER BY c.label\")\n    List<String> findDistinctLabelsByApplicationAndProfile(\n            @Param(\"application\") String application,\n            @Param(\"profile\") String profile);\n}