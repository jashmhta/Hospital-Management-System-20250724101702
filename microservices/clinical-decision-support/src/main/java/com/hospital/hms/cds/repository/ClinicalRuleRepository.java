package com.hospital.hms.cds.repository;\n\nimport com.hospital.hms.cds.entity.ClinicalRule;\nimport com.hospital.hms.cds.entity.RuleCategory;\nimport com.hospital.hms.cds.entity.RuleSeverity;\nimport com.hospital.hms.cds.entity.RuleStatus;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n/**\n * Repository interface for Clinical Rule entity\n * \n * @author HMS Enterprise Team\n * @version 1.0.0\n */\n@Repository\npublic interface ClinicalRuleRepository extends JpaRepository<ClinicalRule, UUID> {\n\n    // Basic finders\n    Optional<ClinicalRule> findByRuleCode(String ruleCode);\n    \n    List<ClinicalRule> findByNameContainingIgnoreCase(String name);\n    \n    List<ClinicalRule> findByCategory(RuleCategory category);\n    \n    List<ClinicalRule> findByStatus(RuleStatus status);\n    \n    List<ClinicalRule> findBySeverity(RuleSeverity severity);\n    \n    // Active rules\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.status = 'ACTIVE' AND r.isEnabled = true AND r.effectiveDate <= :now AND (r.expiryDate IS NULL OR r.expiryDate > :now)\")\n    List<ClinicalRule> findActiveRules(@Param(\"now\") LocalDateTime now);\n    \n    // Rules by category and status\n    List<ClinicalRule> findByCategoryAndStatus(RuleCategory category, RuleStatus status);\n    \n    // Rules by severity and active status\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.severity = :severity AND r.status = 'ACTIVE' AND r.isEnabled = true\")\n    List<ClinicalRule> findActiveBySeverity(@Param(\"severity\") RuleSeverity severity);\n    \n    // Rules for specific patient context\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.status = 'ACTIVE' AND r.isEnabled = true AND \" +\n           \"(r.ageMin IS NULL OR r.ageMin <= :age) AND (r.ageMax IS NULL OR r.ageMax >= :age) AND \" +\n           \"(r.gender IS NULL OR r.gender = 'ALL' OR r.gender = :gender)\")\n    List<ClinicalRule> findRulesForPatient(@Param(\"age\") Integer age, @Param(\"gender\") String gender);\n    \n    // Rules by clinical domain\n    List<ClinicalRule> findByClinicalDomainIgnoreCase(String clinicalDomain);\n    \n    // Rules by specialty\n    List<ClinicalRule> findBySpecialtyIgnoreCase(String specialty);\n    \n    // Performance queries\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.timesTriggered > :threshold ORDER BY r.timesTriggered DESC\")\n    List<ClinicalRule> findMostTriggeredRules(@Param(\"threshold\") Long threshold);\n    \n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.timesTriggered > 0 ORDER BY (r.timesAccepted * 1.0 / r.timesTriggered) DESC\")\n    List<ClinicalRule> findRulesByAcceptanceRate();\n    \n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.timesTriggered > 0 ORDER BY (r.timesOverridden * 1.0 / r.timesTriggered) DESC\")\n    List<ClinicalRule> findRulesByOverrideRate();\n    \n    // Rules triggered recently\n    List<ClinicalRule> findByLastTriggeredDateAfter(LocalDateTime date);\n    \n    // Rules expiring soon\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.expiryDate IS NOT NULL AND r.expiryDate BETWEEN :now AND :expiryThreshold\")\n    List<ClinicalRule> findExpiringRules(@Param(\"now\") LocalDateTime now, @Param(\"expiryThreshold\") LocalDateTime expiryThreshold);\n    \n    // Statistics\n    @Query(\"SELECT COUNT(r) FROM ClinicalRule r WHERE r.status = :status\")\n    Long countByStatus(@Param(\"status\") RuleStatus status);\n    \n    @Query(\"SELECT COUNT(r) FROM ClinicalRule r WHERE r.category = :category AND r.status = 'ACTIVE'\")\n    Long countActiveByCatgeory(@Param(\"category\") RuleCategory category);\n    \n    @Query(\"SELECT SUM(r.timesTriggered) FROM ClinicalRule r WHERE r.lastTriggeredDate >= :startDate\")\n    Long getTotalTriggersInPeriod(@Param(\"startDate\") LocalDateTime startDate);\n    \n    // Search with pagination\n    @Query(\"SELECT r FROM ClinicalRule r WHERE \" +\n           \"(:name IS NULL OR LOWER(r.name) LIKE LOWER(CONCAT('%', :name, '%'))) AND \" +\n           \"(:category IS NULL OR r.category = :category) AND \" +\n           \"(:status IS NULL OR r.status = :status) AND \" +\n           \"(:severity IS NULL OR r.severity = :severity)\")\n    Page<ClinicalRule> findWithFilters(\n        @Param(\"name\") String name,\n        @Param(\"category\") RuleCategory category,\n        @Param(\"status\") RuleStatus status,\n        @Param(\"severity\") RuleSeverity severity,\n        Pageable pageable);\n    \n    // Custom validation\n    boolean existsByRuleCodeAndIdNot(String ruleCode, UUID id);\n    \n    // Tags search\n    @Query(\"SELECT r FROM ClinicalRule r WHERE r.tags LIKE %:tag%\")\n    List<ClinicalRule> findByTag(@Param(\"tag\") String tag);\n}"
