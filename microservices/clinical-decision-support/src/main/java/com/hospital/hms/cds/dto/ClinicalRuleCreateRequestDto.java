package com.hospital.hms.cds.dto;\n\nimport com.hospital.hms.cds.entity.*;\nimport jakarta.validation.constraints.*;\nimport lombok.Data;\n\nimport java.time.LocalDateTime;\n\n/**\n * DTO for creating and updating Clinical Rules\n * \n * @author HMS Enterprise Team\n * @version 1.0.0\n */\n@Data\npublic class ClinicalRuleCreateRequestDto {\n\n    @NotBlank(message = \"Rule code is required\")\n    @Size(max = 100, message = \"Rule code must not exceed 100 characters\")\n    @Pattern(regexp = \"^[A-Z0-9_-]+$\", message = \"Rule code must contain only uppercase letters, numbers, underscores, and hyphens\")\n    private String ruleCode;\n\n    @NotBlank(message = \"Rule name is required\")\n    @Size(max = 200, message = \"Rule name must not exceed 200 characters\")\n    private String name;\n\n    private String description;\n\n    @NotNull(message = \"Rule category is required\")\n    private RuleCategory category;\n\n    @NotNull(message = \"Rule severity is required\")\n    private RuleSeverity severity;\n\n    @NotNull(message = \"Priority is required\")\n    @Min(value = 1, message = \"Priority must be at least 1\")\n    @Max(value = 100, message = \"Priority must not exceed 100\")\n    private Integer priority;\n\n    @NotNull(message = \"Rule status is required\")\n    private RuleStatus status = RuleStatus.ACTIVE;\n\n    // Rule Logic\n    @NotBlank(message = \"Condition expression is required\")\n    private String conditionExpression;\n\n    @NotNull(message = \"Action type is required\")\n    private ActionType actionType;\n\n    private String actionConfiguration;\n\n    private String recommendationText;\n\n    @Size(max = 500, message = \"Alert message must not exceed 500 characters\")\n    private String alertMessage;\n\n    // Clinical Context\n    @Size(max = 100, message = \"Clinical domain must not exceed 100 characters\")\n    private String clinicalDomain;\n\n    @Size(max = 100, message = \"Specialty must not exceed 100 characters\")\n    private String specialty;\n\n    @Size(max = 200, message = \"Patient population must not exceed 200 characters\")\n    private String patientPopulation;\n\n    @Min(value = 0, message = \"Minimum age must be non-negative\")\n    private Integer ageMin;\n\n    @Min(value = 0, message = \"Maximum age must be non-negative\")\n    private Integer ageMax;\n\n    @Pattern(regexp = \"^(MALE|FEMALE|ALL)$\", message = \"Gender must be MALE, FEMALE, or ALL\")\n    private String gender;\n\n    // Evidence and References\n    private EvidenceLevel evidenceLevel;\n\n    @Size(max = 200, message = \"Guideline source must not exceed 200 characters\")\n    private String guidelineSource;\n\n    @Size(max = 500, message = \"Reference URL must not exceed 500 characters\")\n    private String referenceUrl;\n\n    private String literatureReferences;\n\n    // Timing and Frequency\n    @NotNull(message = \"Effective date is required\")\n    private LocalDateTime effectiveDate;\n\n    private LocalDateTime expiryDate;\n\n    private EvaluationFrequency evaluationFrequency = EvaluationFrequency.ON_DEMAND;\n\n    @Min(value = 1, message = \"Max alerts per day must be at least 1\")\n    private Integer maxAlertsPerDay;\n\n    @Min(value = 1, message = \"Suppress duration must be at least 1 hour\")\n    private Integer suppressDurationHours;\n\n    // Configuration\n    private Boolean isEnabled = true;\n\n    private Boolean isInterruptive = false;\n\n    private Boolean requiresAcknowledgment = false;\n\n    private Boolean autoResolve = false;\n\n    @Size(max = 500, message = \"Tags must not exceed 500 characters\")\n    private String tags;\n\n    private String metadata;\n\n    // Custom validation method\n    @AssertTrue(message = \"Maximum age must be greater than minimum age\")\n    public boolean isAgeRangeValid() {\n        if (ageMin != null && ageMax != null) {\n            return ageMax >= ageMin;\n        }\n        return true;\n    }\n\n    @AssertTrue(message = \"Expiry date must be after effective date\")\n    public boolean isDateRangeValid() {\n        if (effectiveDate != null && expiryDate != null) {\n            return expiryDate.isAfter(effectiveDate);\n        }\n        return true;\n    }\n}"
