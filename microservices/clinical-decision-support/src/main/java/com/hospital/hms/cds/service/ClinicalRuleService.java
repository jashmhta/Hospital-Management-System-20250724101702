package com.hospital.hms.cds.service;\n\nimport com.hospital.hms.cds.dto.ClinicalRuleCreateRequestDto;\nimport com.hospital.hms.cds.dto.ClinicalRuleResponseDto;\nimport com.hospital.hms.cds.dto.ClinicalRuleSearchCriteria;\nimport com.hospital.hms.cds.entity.RuleCategory;\nimport com.hospital.hms.cds.entity.RuleSeverity;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n/**\n * Service interface for Clinical Decision Support Rules\n * \n * @author HMS Enterprise Team\n * @version 1.0.0\n */\npublic interface ClinicalRuleService {\n\n    /**\n     * Create a new clinical rule\n     */\n    ClinicalRuleResponseDto createRule(ClinicalRuleCreateRequestDto createRequest);\n\n    /**\n     * Update an existing clinical rule\n     */\n    ClinicalRuleResponseDto updateRule(UUID ruleId, ClinicalRuleCreateRequestDto updateRequest);\n\n    /**\n     * Get rule by ID\n     */\n    ClinicalRuleResponseDto getRuleById(UUID ruleId);\n\n    /**\n     * Get rule by code\n     */\n    ClinicalRuleResponseDto getRuleByCode(String ruleCode);\n\n    /**\n     * Get all active rules\n     */\n    List<ClinicalRuleResponseDto> getActiveRules();\n\n    /**\n     * Get rules by category\n     */\n    List<ClinicalRuleResponseDto> getRulesByCategory(RuleCategory category);\n\n    /**\n     * Get rules by severity\n     */\n    List<ClinicalRuleResponseDto> getRulesBySeverity(RuleSeverity severity);\n\n    /**\n     * Search rules with criteria and pagination\n     */\n    Page<ClinicalRuleResponseDto> searchRules(ClinicalRuleSearchCriteria criteria, Pageable pageable);\n\n    /**\n     * Get applicable rules for patient context\n     */\n    List<ClinicalRuleResponseDto> getApplicableRules(Integer patientAge, String gender, String clinicalDomain);\n\n    /**\n     * Evaluate rules for patient data\n     */\n    List<ClinicalRuleResponseDto> evaluateRules(Map<String, Object> patientData);\n\n    /**\n     * Activate/Deactivate rule\n     */\n    ClinicalRuleResponseDto toggleRuleStatus(UUID ruleId, boolean activate);\n\n    /**\n     * Delete rule (soft delete)\n     */\n    void deleteRule(UUID ruleId);\n\n    /**\n     * Get rule performance statistics\n     */\n    Map<String, Object> getRuleStatistics(UUID ruleId);\n\n    /**\n     * Get overall CDS performance metrics\n     */\n    Map<String, Object> getPerformanceMetrics();\n\n    /**\n     * Get rules expiring soon\n     */\n    List<ClinicalRuleResponseDto> getExpiringRules(int daysAhead);\n\n    /**\n     * Bulk import rules\n     */\n    List<ClinicalRuleResponseDto> importRules(List<ClinicalRuleCreateRequestDto> rules);\n\n    /**\n     * Export rules by criteria\n     */\n    List<ClinicalRuleResponseDto> exportRules(ClinicalRuleSearchCriteria criteria);\n\n    /**\n     * Validate rule logic\n     */\n    Map<String, Object> validateRuleLogic(String conditionExpression, Map<String, Object> testData);\n\n    /**\n     * Get rule execution history\n     */\n    List<Map<String, Object>> getRuleExecutionHistory(UUID ruleId, int days);\n\n    /**\n     * Test rule against sample data\n     */\n    Map<String, Object> testRule(UUID ruleId, Map<String, Object> testData);\n\n    /**\n     * Get clinical decision support dashboard data\n     */\n    Map<String, Object> getDashboardData();\n\n    /**\n     * Get recommendation suggestions based on patient context\n     */\n    List<String> getRecommendationSuggestions(Map<String, Object> patientContext);\n}"
