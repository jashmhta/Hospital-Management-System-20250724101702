package com.hospital.hms.cds.controller;\n\nimport com.hospital.hms.cds.dto.ClinicalRuleCreateRequestDto;\nimport com.hospital.hms.cds.dto.ClinicalRuleResponseDto;\nimport com.hospital.hms.cds.dto.ClinicalRuleSearchCriteria;\nimport com.hospital.hms.cds.entity.RuleCategory;\nimport com.hospital.hms.cds.entity.RuleSeverity;\nimport com.hospital.hms.cds.service.ClinicalRuleService;\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.Parameter;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.validation.Valid;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.UUID;\n\n/**\n * REST Controller for Clinical Decision Support Rules\n * \n * @author HMS Enterprise Team\n * @version 1.0.0\n */\n@RestController\n@RequestMapping(\"/api/v1/clinical-rules\")\n@Tag(name = \"Clinical Decision Support\", description = \"AI-powered clinical decision support and rule management\")\npublic class ClinicalRuleController {\n\n    private static final Logger logger = LoggerFactory.getLogger(ClinicalRuleController.class);\n    \n    private final ClinicalRuleService clinicalRuleService;\n\n    @Autowired\n    public ClinicalRuleController(ClinicalRuleService clinicalRuleService) {\n        this.clinicalRuleService = clinicalRuleService;\n    }\n\n    @PostMapping\n    @Operation(summary = \"Create new clinical rule\", description = \"Create a new clinical decision support rule\")\n    @ApiResponse(responseCode = \"201\", description = \"Rule created successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<ClinicalRuleResponseDto> createRule(\n            @Valid @RequestBody ClinicalRuleCreateRequestDto createRequest) {\n        \n        logger.info(\"Creating new clinical rule: {}\", createRequest.getRuleCode());\n        ClinicalRuleResponseDto response = clinicalRuleService.createRule(createRequest);\n        return new ResponseEntity<>(response, HttpStatus.CREATED);\n    }\n\n    @PutMapping(\"/{ruleId}\")\n    @Operation(summary = \"Update clinical rule\", description = \"Update an existing clinical rule\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule updated successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<ClinicalRuleResponseDto> updateRule(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId,\n            @Valid @RequestBody ClinicalRuleCreateRequestDto updateRequest) {\n        \n        logger.info(\"Updating clinical rule: {}\", ruleId);\n        ClinicalRuleResponseDto response = clinicalRuleService.updateRule(ruleId, updateRequest);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/{ruleId}\")\n    @Operation(summary = \"Get rule by ID\", description = \"Retrieve clinical rule by ID\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<ClinicalRuleResponseDto> getRuleById(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId) {\n        \n        ClinicalRuleResponseDto response = clinicalRuleService.getRuleById(ruleId);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/code/{ruleCode}\")\n    @Operation(summary = \"Get rule by code\", description = \"Retrieve clinical rule by code\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<ClinicalRuleResponseDto> getRuleByCode(\n            @Parameter(description = \"Rule code\") @PathVariable String ruleCode) {\n        \n        ClinicalRuleResponseDto response = clinicalRuleService.getRuleByCode(ruleCode);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/active\")\n    @Operation(summary = \"Get active rules\", description = \"Retrieve all active clinical rules\")\n    @ApiResponse(responseCode = \"200\", description = \"Active rules retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> getActiveRules() {\n        \n        List<ClinicalRuleResponseDto> response = clinicalRuleService.getActiveRules();\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/category/{category}\")\n    @Operation(summary = \"Get rules by category\", description = \"Retrieve rules by category\")\n    @ApiResponse(responseCode = \"200\", description = \"Rules retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> getRulesByCategory(\n            @Parameter(description = \"Rule category\") @PathVariable RuleCategory category) {\n        \n        List<ClinicalRuleResponseDto> response = clinicalRuleService.getRulesByCategory(category);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/severity/{severity}\")\n    @Operation(summary = \"Get rules by severity\", description = \"Retrieve rules by severity level\")\n    @ApiResponse(responseCode = \"200\", description = \"Rules retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> getRulesBySeverity(\n            @Parameter(description = \"Rule severity\") @PathVariable RuleSeverity severity) {\n        \n        List<ClinicalRuleResponseDto> response = clinicalRuleService.getRulesBySeverity(severity);\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/search\")\n    @Operation(summary = \"Search rules\", description = \"Search clinical rules with filters and pagination\")\n    @ApiResponse(responseCode = \"200\", description = \"Search completed successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<Page<ClinicalRuleResponseDto>> searchRules(\n            @RequestBody ClinicalRuleSearchCriteria criteria,\n            Pageable pageable) {\n        \n        Page<ClinicalRuleResponseDto> response = clinicalRuleService.searchRules(criteria, pageable);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/applicable\")\n    @Operation(summary = \"Get applicable rules\", description = \"Get rules applicable for patient context\")\n    @ApiResponse(responseCode = \"200\", description = \"Applicable rules retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> getApplicableRules(\n            @RequestParam(required = false) Integer patientAge,\n            @RequestParam(required = false) String gender,\n            @RequestParam(required = false) String clinicalDomain) {\n        \n        List<ClinicalRuleResponseDto> response = clinicalRuleService.getApplicableRules(patientAge, gender, clinicalDomain);\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/evaluate\")\n    @Operation(summary = \"Evaluate rules\", description = \"Evaluate clinical rules against patient data\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule evaluation completed successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> evaluateRules(\n            @RequestBody Map<String, Object> patientData) {\n        \n        logger.info(\"Evaluating clinical rules for patient data\");\n        List<ClinicalRuleResponseDto> response = clinicalRuleService.evaluateRules(patientData);\n        return ResponseEntity.ok(response);\n    }\n\n    @PatchMapping(\"/{ruleId}/toggle\")\n    @Operation(summary = \"Toggle rule status\", description = \"Activate or deactivate a clinical rule\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule status updated successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN')\")\n    public ResponseEntity<ClinicalRuleResponseDto> toggleRuleStatus(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId,\n            @Parameter(description = \"Activate rule\") @RequestParam boolean activate) {\n        \n        logger.info(\"Toggling rule status: {} to {}\", ruleId, activate ? \"active\" : \"inactive\");\n        ClinicalRuleResponseDto response = clinicalRuleService.toggleRuleStatus(ruleId, activate);\n        return ResponseEntity.ok(response);\n    }\n\n    @DeleteMapping(\"/{ruleId}\")\n    @Operation(summary = \"Delete rule\", description = \"Soft delete a clinical rule\")\n    @ApiResponse(responseCode = \"204\", description = \"Rule deleted successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN')\")\n    public ResponseEntity<Void> deleteRule(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId) {\n        \n        logger.info(\"Deleting clinical rule: {}\", ruleId);\n        clinicalRuleService.deleteRule(ruleId);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/{ruleId}/statistics\")\n    @Operation(summary = \"Get rule statistics\", description = \"Get performance statistics for a rule\")\n    @ApiResponse(responseCode = \"200\", description = \"Statistics retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<Map<String, Object>> getRuleStatistics(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId) {\n        \n        Map<String, Object> response = clinicalRuleService.getRuleStatistics(ruleId);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/metrics\")\n    @Operation(summary = \"Get performance metrics\", description = \"Get overall CDS performance metrics\")\n    @ApiResponse(responseCode = \"200\", description = \"Metrics retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<Map<String, Object>> getPerformanceMetrics() {\n        \n        Map<String, Object> response = clinicalRuleService.getPerformanceMetrics();\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/expiring\")\n    @Operation(summary = \"Get expiring rules\", description = \"Get rules expiring within specified days\")\n    @ApiResponse(responseCode = \"200\", description = \"Expiring rules retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> getExpiringRules(\n            @Parameter(description = \"Days ahead\") @RequestParam(defaultValue = \"30\") int daysAhead) {\n        \n        List<ClinicalRuleResponseDto> response = clinicalRuleService.getExpiringRules(daysAhead);\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/import\")\n    @Operation(summary = \"Import rules\", description = \"Bulk import clinical rules\")\n    @ApiResponse(responseCode = \"201\", description = \"Rules imported successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> importRules(\n            @Valid @RequestBody List<ClinicalRuleCreateRequestDto> rules) {\n        \n        logger.info(\"Importing {} clinical rules\", rules.size());\n        List<ClinicalRuleResponseDto> response = clinicalRuleService.importRules(rules);\n        return new ResponseEntity<>(response, HttpStatus.CREATED);\n    }\n\n    @PostMapping(\"/export\")\n    @Operation(summary = \"Export rules\", description = \"Export clinical rules by criteria\")\n    @ApiResponse(responseCode = \"200\", description = \"Rules exported successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<List<ClinicalRuleResponseDto>> exportRules(\n            @RequestBody ClinicalRuleSearchCriteria criteria) {\n        \n        logger.info(\"Exporting clinical rules with criteria\");\n        List<ClinicalRuleResponseDto> response = clinicalRuleService.exportRules(criteria);\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/validate\")\n    @Operation(summary = \"Validate rule logic\", description = \"Validate rule condition expression\")\n    @ApiResponse(responseCode = \"200\", description = \"Validation completed successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<Map<String, Object>> validateRuleLogic(\n            @RequestParam String conditionExpression,\n            @RequestBody Map<String, Object> testData) {\n        \n        Map<String, Object> response = clinicalRuleService.validateRuleLogic(conditionExpression, testData);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/{ruleId}/execution-history\")\n    @Operation(summary = \"Get execution history\", description = \"Get rule execution history\")\n    @ApiResponse(responseCode = \"200\", description = \"Execution history retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<List<Map<String, Object>>> getRuleExecutionHistory(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId,\n            @Parameter(description = \"Days to look back\") @RequestParam(defaultValue = \"30\") int days) {\n        \n        List<Map<String, Object>> response = clinicalRuleService.getRuleExecutionHistory(ruleId, days);\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/{ruleId}/test\")\n    @Operation(summary = \"Test rule\", description = \"Test rule against sample data\")\n    @ApiResponse(responseCode = \"200\", description = \"Rule test completed successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<Map<String, Object>> testRule(\n            @Parameter(description = \"Rule ID\") @PathVariable UUID ruleId,\n            @RequestBody Map<String, Object> testData) {\n        \n        Map<String, Object> response = clinicalRuleService.testRule(ruleId, testData);\n        return ResponseEntity.ok(response);\n    }\n\n    @GetMapping(\"/dashboard\")\n    @Operation(summary = \"Get dashboard data\", description = \"Get CDS dashboard data\")\n    @ApiResponse(responseCode = \"200\", description = \"Dashboard data retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN')\")\n    public ResponseEntity<Map<String, Object>> getDashboardData() {\n        \n        Map<String, Object> response = clinicalRuleService.getDashboardData();\n        return ResponseEntity.ok(response);\n    }\n\n    @PostMapping(\"/recommendations\")\n    @Operation(summary = \"Get recommendations\", description = \"Get recommendation suggestions based on patient context\")\n    @ApiResponse(responseCode = \"200\", description = \"Recommendations retrieved successfully\")\n    @PreAuthorize(\"hasRole('CLINICAL_ADMIN') or hasRole('PHYSICIAN') or hasRole('NURSE')\")\n    public ResponseEntity<List<String>> getRecommendationSuggestions(\n            @RequestBody Map<String, Object> patientContext) {\n        \n        List<String> response = clinicalRuleService.getRecommendationSuggestions(patientContext);\n        return ResponseEntity.ok(response);\n    }\n}"
