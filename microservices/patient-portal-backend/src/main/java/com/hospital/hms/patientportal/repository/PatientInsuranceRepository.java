package com.hospital.hms.patientportal.repository;

import com.hospital.hms.patientportal.entity.PatientEntity;
import com.hospital.hms.patientportal.entity.PatientInsuranceEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Patient Insurance Repository
 * 
 * Advanced repository with custom queries for insurance management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface PatientInsuranceRepository extends JpaRepository<PatientInsuranceEntity, String> {

    /**
     * Find insurance by patient
     */
    List<PatientInsuranceEntity> findByPatientOrderByCoverageOrderAsc(PatientEntity patient);

    /**
     * Find active insurance by patient
     */
    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.patient = :patient AND \" +\n           \"i.status = 'ACTIVE' AND \" +\n           \"i.effectiveDate <= CURRENT_DATE AND \" +\n           \"(i.expiryDate IS NULL OR i.expiryDate > CURRENT_DATE) \" +\n           \"ORDER BY i.coverageOrder ASC\")\n    List<PatientInsuranceEntity> findActiveInsuranceByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find primary insurance by patient\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.patient = :patient AND \" +\n           \"i.isPrimary = true AND i.status = 'ACTIVE' \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    Optional<PatientInsuranceEntity> findPrimaryInsuranceByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find insurance by policy number\n     */\n    Optional<PatientInsuranceEntity> findByPolicyNumber(String policyNumber);\n\n    /**\n     * Find insurance by member ID\n     */\n    Optional<PatientInsuranceEntity> findByMemberId(String memberId);\n\n    /**\n     * Find insurance by company\n     */\n    List<PatientInsuranceEntity> findByInsuranceCompanyIgnoreCaseOrderByCreatedAtDesc(String insuranceCompany);\n\n    /**\n     * Find insurance by plan type\n     */\n    List<PatientInsuranceEntity> findByPlanTypeIgnoreCaseOrderByCreatedAtDesc(String planType);\n\n    /**\n     * Find insurance by status\n     */\n    List<PatientInsuranceEntity> findByStatusOrderByCreatedAtDesc(PatientInsuranceEntity.InsuranceStatus status);\n\n    /**\n     * Find expired insurance\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"i.expiryDate IS NOT NULL AND i.expiryDate < CURRENT_DATE \" +\n           \"ORDER BY i.expiryDate ASC\")\n    List<PatientInsuranceEntity> findExpiredInsurance();\n\n    /**\n     * Find insurance expiring soon\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"i.expiryDate IS NOT NULL AND \" +\n           \"i.expiryDate BETWEEN CURRENT_DATE AND :expiryThreshold \" +\n           \"ORDER BY i.expiryDate ASC\")\n    List<PatientInsuranceEntity> findInsuranceExpiringSoon(@Param(\"expiryThreshold\") LocalDate expiryThreshold);\n\n    /**\n     * Find unverified insurance\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.isVerified = false \" +\n           \"ORDER BY i.createdAt ASC\")\n    List<PatientInsuranceEntity> findUnverifiedInsurance();\n\n    /**\n     * Find insurance needing verification\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"i.isVerified = false OR \" +\n           \"i.lastVerifiedDate IS NULL OR \" +\n           \"i.lastVerifiedDate < :verificationThreshold \" +\n           \"ORDER BY i.lastVerifiedDate ASC NULLS FIRST\")\n    List<PatientInsuranceEntity> findInsuranceNeedingVerification(\n            @Param(\"verificationThreshold\") LocalDateTime verificationThreshold);\n\n    /**\n     * Find insurance needing eligibility check\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"i.eligibilityCheckedDate IS NULL OR \" +\n           \"i.eligibilityCheckedDate < :eligibilityThreshold \" +\n           \"ORDER BY i.eligibilityCheckedDate ASC NULLS FIRST\")\n    List<PatientInsuranceEntity> findInsuranceNeedingEligibilityCheck(\n            @Param(\"eligibilityThreshold\") LocalDateTime eligibilityThreshold);\n\n    /**\n     * Find insurance by effective date range\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"i.effectiveDate BETWEEN :startDate AND :endDate \" +\n           \"ORDER BY i.effectiveDate ASC\")\n    List<PatientInsuranceEntity> findByEffectiveDateBetween(\n            @Param(\"startDate\") LocalDate startDate,\n            @Param(\"endDate\") LocalDate endDate);\n\n    /**\n     * Find insurance by subscriber\n     */\n    List<PatientInsuranceEntity> findBySubscriberIdOrderByCreatedAtDesc(String subscriberId);\n\n    /**\n     * Find insurance by relationship to subscriber\n     */\n    List<PatientInsuranceEntity> findByRelationshipToSubscriberOrderByCreatedAtDesc(\n            PatientInsuranceEntity.RelationshipToSubscriber relationship);\n\n    /**\n     * Find insurance with prescription coverage\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.prescriptionCoverage = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceWithPrescriptionCoverage();\n\n    /**\n     * Find insurance with dental coverage\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.dentalCoverage = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceWithDentalCoverage();\n\n    /**\n     * Find insurance with vision coverage\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.visionCoverage = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceWithVisionCoverage();\n\n    /**\n     * Find insurance with mental health coverage\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.mentalHealthCoverage = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceWithMentalHealthCoverage();\n\n    /**\n     * Find insurance requiring referrals\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.requiresReferral = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceRequiringReferrals();\n\n    /**\n     * Find insurance requiring authorization\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE i.requiresAuthorization = true \" +\n           \"ORDER BY i.effectiveDate DESC\")\n    List<PatientInsuranceEntity> findInsuranceRequiringAuthorization();\n\n    /**\n     * Find insurance by employer\n     */\n    List<PatientInsuranceEntity> findByEmployerNameIgnoreCaseOrderByCreatedAtDesc(String employerName);\n\n    /**\n     * Advanced insurance search\n     */\n    @Query(\"SELECT i FROM PatientInsuranceEntity i WHERE \" +\n           \"(:patientId IS NULL OR i.patient.patientId = :patientId) AND \" +\n           \"(:insuranceCompany IS NULL OR LOWER(i.insuranceCompany) LIKE LOWER(CONCAT('%', :insuranceCompany, '%'))) AND \" +\n           \"(:planType IS NULL OR LOWER(i.planType) LIKE LOWER(CONCAT('%', :planType, '%'))) AND \" +\n           \"(:status IS NULL OR i.status = :status) AND \" +\n           \"(:isPrimary IS NULL OR i.isPrimary = :isPrimary) AND \" +\n           \"(:policyNumber IS NULL OR i.policyNumber = :policyNumber) AND \" +\n           \"(:memberId IS NULL OR i.memberId = :memberId) AND \" +\n           \"(:subscriberId IS NULL OR i.subscriberId = :subscriberId) AND \" +\n           \"(:employerName IS NULL OR LOWER(i.employerName) LIKE LOWER(CONCAT('%', :employerName, '%')))\")\n    Page<PatientInsuranceEntity> searchInsurance(\n            @Param(\"patientId\") String patientId,\n            @Param(\"insuranceCompany\") String insuranceCompany,\n            @Param(\"planType\") String planType,\n            @Param(\"status\") PatientInsuranceEntity.InsuranceStatus status,\n            @Param(\"isPrimary\") Boolean isPrimary,\n            @Param(\"policyNumber\") String policyNumber,\n            @Param(\"memberId\") String memberId,\n            @Param(\"subscriberId\") String subscriberId,\n            @Param(\"employerName\") String employerName,\n            Pageable pageable);\n\n    /**\n     * Count insurance by status\n     */\n    @Query(\"SELECT i.status, COUNT(i) FROM PatientInsuranceEntity i GROUP BY i.status\")\n    List<Object[]> countInsuranceByStatus();\n\n    /**\n     * Count insurance by company\n     */\n    @Query(\"SELECT i.insuranceCompany, COUNT(i) FROM PatientInsuranceEntity i \" +\n           \"GROUP BY i.insuranceCompany ORDER BY COUNT(i) DESC\")\n    List<Object[]> countInsuranceByCompany();\n\n    /**\n     * Count insurance by plan type\n     */\n    @Query(\"SELECT i.planType, COUNT(i) FROM PatientInsuranceEntity i \" +\n           \"WHERE i.planType IS NOT NULL GROUP BY i.planType\")\n    List<Object[]> countInsuranceByPlanType();\n\n    /**\n     * Count insurance by relationship\n     */\n    @Query(\"SELECT i.relationshipToSubscriber, COUNT(i) FROM PatientInsuranceEntity i \" +\n           \"GROUP BY i.relationshipToSubscriber\")\n    List<Object[]> countInsuranceByRelationship();\n\n    /**\n     * Get insurance statistics\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(i) as totalInsurance, \" +\n           \"COUNT(CASE WHEN i.status = 'ACTIVE' THEN 1 END) as activeInsurance, \" +\n           \"COUNT(CASE WHEN i.isPrimary = true THEN 1 END) as primaryInsurance, \" +\n           \"COUNT(CASE WHEN i.isVerified = true THEN 1 END) as verifiedInsurance, \" +\n           \"COUNT(CASE WHEN i.prescriptionCoverage = true THEN 1 END) as prescriptionCoverage, \" +\n           \"COUNT(CASE WHEN i.dentalCoverage = true THEN 1 END) as dentalCoverage, \" +\n           \"COUNT(CASE WHEN i.visionCoverage = true THEN 1 END) as visionCoverage \" +\n           \"FROM PatientInsuranceEntity i\")\n    Object[] getInsuranceStatistics();\n\n    /**\n     * Update verification status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.isVerified = :verified, \" +\n           \"i.verifiedBy = :verifiedBy, i.lastVerifiedDate = CURRENT_TIMESTAMP \" +\n           \"WHERE i.insuranceId = :insuranceId\")\n    int updateVerificationStatus(\n            @Param(\"insuranceId\") String insuranceId,\n            @Param(\"verified\") Boolean verified,\n            @Param(\"verifiedBy\") String verifiedBy);\n\n    /**\n     * Update eligibility status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.eligibilityStatus = :status, \" +\n           \"i.eligibilityResponse = :response, i.eligibilityCheckedDate = CURRENT_TIMESTAMP \" +\n           \"WHERE i.insuranceId = :insuranceId\")\n    int updateEligibilityStatus(\n            @Param(\"insuranceId\") String insuranceId,\n            @Param(\"status\") String status,\n            @Param(\"response\") String response);\n\n    /**\n     * Update deductible amounts\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.deductibleMetAmount = :metAmount \" +\n           \"WHERE i.insuranceId = :insuranceId\")\n    int updateDeductibleMetAmount(\n            @Param(\"insuranceId\") String insuranceId,\n            @Param(\"metAmount\") Double metAmount);\n\n    /**\n     * Update out-of-pocket amounts\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.outOfPocketMet = :metAmount \" +\n           \"WHERE i.insuranceId = :insuranceId\")\n    int updateOutOfPocketMetAmount(\n            @Param(\"insuranceId\") String insuranceId,\n            @Param(\"metAmount\") Double metAmount);\n\n    /**\n     * Update insurance status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.status = :status, \" +\n           \"i.updatedAt = CURRENT_TIMESTAMP WHERE i.insuranceId = :insuranceId\")\n    int updateInsuranceStatus(\n            @Param(\"insuranceId\") String insuranceId,\n            @Param(\"status\") PatientInsuranceEntity.InsuranceStatus status);\n\n    /**\n     * Set primary insurance\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.isPrimary = false \" +\n           \"WHERE i.patient = :patient AND i.isPrimary = true\")\n    int clearPrimaryInsurance(@Param(\"patient\") PatientEntity patient);\n\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.isPrimary = true \" +\n           \"WHERE i.insuranceId = :insuranceId\")\n    int setPrimaryInsurance(@Param(\"insuranceId\") String insuranceId);\n\n    /**\n     * Auto-expire insurance\n     */\n    @Modifying\n    @Query(\"UPDATE PatientInsuranceEntity i SET i.status = 'EXPIRED' \" +\n           \"WHERE i.expiryDate < CURRENT_DATE AND i.status = 'ACTIVE'\")\n    int autoExpireInsurance();\n\n    /**\n     * Count patient's insurance\n     */\n    long countByPatient(PatientEntity patient);\n\n    /**\n     * Count patient's active insurance\n     */\n    @Query(\"SELECT COUNT(i) FROM PatientInsuranceEntity i WHERE i.patient = :patient AND \" +\n           \"i.status = 'ACTIVE' AND i.effectiveDate <= CURRENT_DATE AND \" +\n           \"(i.expiryDate IS NULL OR i.expiryDate > CURRENT_DATE)\")\n    long countActiveInsuranceByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Check if policy number exists\n     */\n    boolean existsByPolicyNumber(String policyNumber);\n\n    /**\n     * Check if member ID exists\n     */\n    boolean existsByMemberId(String memberId);\n\n    /**\n     * Find duplicate insurance policies\n     */\n    @Query(\"SELECT i.policyNumber, COUNT(i) FROM PatientInsuranceEntity i \" +\n           \"WHERE i.policyNumber IS NOT NULL GROUP BY i.policyNumber HAVING COUNT(i) > 1\")\n    List<Object[]> findDuplicatePolicies();\n\n    /**\n     * Find patients with multiple primary insurance\n     */\n    @Query(\"SELECT i.patient, COUNT(i) FROM PatientInsuranceEntity i \" +\n           \"WHERE i.isPrimary = true GROUP BY i.patient HAVING COUNT(i) > 1\")\n    List<Object[]> findPatientsWithMultiplePrimary();\n}