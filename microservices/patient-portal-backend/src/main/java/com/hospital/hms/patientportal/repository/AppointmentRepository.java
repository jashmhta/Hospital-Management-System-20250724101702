package com.hospital.hms.patientportal.repository;

import com.hospital.hms.patientportal.entity.AppointmentEntity;
import com.hospital.hms.patientportal.entity.PatientEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Appointment Repository
 * 
 * Advanced repository with custom queries for appointment management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface AppointmentRepository extends JpaRepository<AppointmentEntity, String> {

    /**
     * Find appointments by patient
     */
    List<AppointmentEntity> findByPatientOrderByAppointmentDateTimeDesc(PatientEntity patient);

    /**
     * Find appointments by patient and status
     */
    List<AppointmentEntity> findByPatientAndStatusOrderByAppointmentDateTimeDesc(
            PatientEntity patient, AppointmentEntity.AppointmentStatus status);

    /**
     * Find appointments by confirmation code
     */
    Optional<AppointmentEntity> findByConfirmationCode(String confirmationCode);

    /**
     * Find upcoming appointments for patient
     */
    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.patient = :patient AND \" +\n           \"a.appointmentDateTime > CURRENT_TIMESTAMP AND \" +\n           \"a.status IN ('SCHEDULED', 'CONFIRMED') \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findUpcomingAppointmentsByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find past appointments for patient\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.patient = :patient AND \" +\n           \"a.appointmentDateTime < CURRENT_TIMESTAMP \" +\n           \"ORDER BY a.appointmentDateTime DESC\")\n    List<AppointmentEntity> findPastAppointmentsByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find appointments by provider\n     */\n    List<AppointmentEntity> findByProviderIdOrderByAppointmentDateTimeAsc(String providerId);\n\n    /**\n     * Find appointments by provider and date range\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.providerId = :providerId AND \" +\n           \"a.appointmentDateTime BETWEEN :startDateTime AND :endDateTime \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findByProviderAndDateRange(\n            @Param(\"providerId\") String providerId,\n            @Param(\"startDateTime\") LocalDateTime startDateTime,\n            @Param(\"endDateTime\") LocalDateTime endDateTime);\n\n    /**\n     * Find appointments by date range\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"a.appointmentDateTime BETWEEN :startDateTime AND :endDateTime \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findByDateRange(\n            @Param(\"startDateTime\") LocalDateTime startDateTime,\n            @Param(\"endDateTime\") LocalDateTime endDateTime);\n\n    /**\n     * Find appointments by date and status\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"DATE(a.appointmentDateTime) = :date AND a.status = :status \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findByDateAndStatus(\n            @Param(\"date\") LocalDate date,\n            @Param(\"status\") AppointmentEntity.AppointmentStatus status);\n\n    /**\n     * Find today's appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"DATE(a.appointmentDateTime) = CURRENT_DATE \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findTodaysAppointments();\n\n    /**\n     * Find appointments needing reminders\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"a.reminderSent = false AND \" +\n           \"a.appointmentDateTime BETWEEN CURRENT_TIMESTAMP AND :reminderThreshold AND \" +\n           \"a.status IN ('SCHEDULED', 'CONFIRMED')\")\n    List<AppointmentEntity> findAppointmentsNeedingReminders(\n            @Param(\"reminderThreshold\") LocalDateTime reminderThreshold);\n\n    /**\n     * Find conflicting appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"a.providerId = :providerId AND \" +\n           \"a.status IN ('SCHEDULED', 'CONFIRMED') AND \" +\n           \"a.appointmentId != :excludeAppointmentId AND \" +\n           \"((a.appointmentDateTime <= :startTime AND \" +\n           \"TIMESTAMPADD(MINUTE, a.durationMinutes, a.appointmentDateTime) > :startTime) OR \" +\n           \"(a.appointmentDateTime < :endTime AND \" +\n           \"TIMESTAMPADD(MINUTE, a.durationMinutes, a.appointmentDateTime) >= :endTime) OR \" +\n           \"(a.appointmentDateTime >= :startTime AND a.appointmentDateTime < :endTime))\")\n    List<AppointmentEntity> findConflictingAppointments(\n            @Param(\"providerId\") String providerId,\n            @Param(\"startTime\") LocalDateTime startTime,\n            @Param(\"endTime\") LocalDateTime endTime,\n            @Param(\"excludeAppointmentId\") String excludeAppointmentId);\n\n    /**\n     * Find appointments by type\n     */\n    List<AppointmentEntity> findByAppointmentType(AppointmentEntity.AppointmentType appointmentType);\n\n    /**\n     * Find telehealth appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.isTelehealth = true \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findTelehealthAppointments();\n\n    /**\n     * Find no-show appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.noShow = true \" +\n           \"ORDER BY a.appointmentDateTime DESC\")\n    List<AppointmentEntity> findNoShowAppointments();\n\n    /**\n     * Find cancelled appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.status = 'CANCELLED' \" +\n           \"ORDER BY a.cancelledAt DESC\")\n    List<AppointmentEntity> findCancelledAppointments();\n\n    /**\n     * Find appointments by department\n     */\n    List<AppointmentEntity> findByDepartmentIgnoreCaseOrderByAppointmentDateTimeAsc(String department);\n\n    /**\n     * Find appointments by specialty\n     */\n    List<AppointmentEntity> findBySpecialtyIgnoreCaseOrderByAppointmentDateTimeAsc(String specialty);\n\n    /**\n     * Find follow-up appointments\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE a.isFollowUp = true \" +\n           \"ORDER BY a.appointmentDateTime ASC\")\n    List<AppointmentEntity> findFollowUpAppointments();\n\n    /**\n     * Count appointments by status\n     */\n    @Query(\"SELECT a.status, COUNT(a) FROM AppointmentEntity a GROUP BY a.status\")\n    List<Object[]> countAppointmentsByStatus();\n\n    /**\n     * Count appointments by type\n     */\n    @Query(\"SELECT a.appointmentType, COUNT(a) FROM AppointmentEntity a GROUP BY a.appointmentType\")\n    List<Object[]> countAppointmentsByType();\n\n    /**\n     * Count appointments by provider\n     */\n    @Query(\"SELECT a.providerId, a.providerName, COUNT(a) FROM AppointmentEntity a \" +\n           \"GROUP BY a.providerId, a.providerName ORDER BY COUNT(a) DESC\")\n    List<Object[]> countAppointmentsByProvider();\n\n    /**\n     * Get appointment statistics for date range\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(a) as totalAppointments, \" +\n           \"COUNT(CASE WHEN a.status = 'COMPLETED' THEN 1 END) as completedAppointments, \" +\n           \"COUNT(CASE WHEN a.status = 'CANCELLED' THEN 1 END) as cancelledAppointments, \" +\n           \"COUNT(CASE WHEN a.noShow = true THEN 1 END) as noShowAppointments, \" +\n           \"AVG(a.waitTimeMinutes) as averageWaitTime \" +\n           \"FROM AppointmentEntity a WHERE \" +\n           \"a.appointmentDateTime BETWEEN :startDate AND :endDate\")\n    Object[] getAppointmentStatistics(\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate);\n\n    /**\n     * Find patient's appointment history with pagination\n     */\n    Page<AppointmentEntity> findByPatientOrderByAppointmentDateTimeDesc(\n            PatientEntity patient, Pageable pageable);\n\n    /**\n     * Advanced appointment search\n     */\n    @Query(\"SELECT a FROM AppointmentEntity a WHERE \" +\n           \"(:patientId IS NULL OR a.patient.patientId = :patientId) AND \" +\n           \"(:providerId IS NULL OR a.providerId = :providerId) AND \" +\n           \"(:status IS NULL OR a.status = :status) AND \" +\n           \"(:appointmentType IS NULL OR a.appointmentType = :appointmentType) AND \" +\n           \"(:department IS NULL OR LOWER(a.department) LIKE LOWER(CONCAT('%', :department, '%'))) AND \" +\n           \"(:specialty IS NULL OR LOWER(a.specialty) LIKE LOWER(CONCAT('%', :specialty, '%'))) AND \" +\n           \"(:startDate IS NULL OR a.appointmentDateTime >= :startDate) AND \" +\n           \"(:endDate IS NULL OR a.appointmentDateTime <= :endDate)\")\n    Page<AppointmentEntity> searchAppointments(\n            @Param(\"patientId\") String patientId,\n            @Param(\"providerId\") String providerId,\n            @Param(\"status\") AppointmentEntity.AppointmentStatus status,\n            @Param(\"appointmentType\") AppointmentEntity.AppointmentType appointmentType,\n            @Param(\"department\") String department,\n            @Param(\"specialty\") String specialty,\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate,\n            Pageable pageable);\n\n    /**\n     * Update appointment status\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.status = :status, \" +\n           \"a.updatedAt = CURRENT_TIMESTAMP WHERE a.appointmentId = :appointmentId\")\n    int updateAppointmentStatus(\n            @Param(\"appointmentId\") String appointmentId,\n            @Param(\"status\") AppointmentEntity.AppointmentStatus status);\n\n    /**\n     * Update reminder sent status\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.reminderSent = true, \" +\n           \"a.reminderSentAt = CURRENT_TIMESTAMP WHERE a.appointmentId = :appointmentId\")\n    int markReminderSent(@Param(\"appointmentId\") String appointmentId);\n\n    /**\n     * Check-in appointment\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.status = 'CHECKED_IN', \" +\n           \"a.checkInTime = CURRENT_TIMESTAMP WHERE a.appointmentId = :appointmentId\")\n    int checkInAppointment(@Param(\"appointmentId\") String appointmentId);\n\n    /**\n     * Complete appointment\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.status = 'COMPLETED', \" +\n           \"a.checkOutTime = CURRENT_TIMESTAMP WHERE a.appointmentId = :appointmentId\")\n    int completeAppointment(@Param(\"appointmentId\") String appointmentId);\n\n    /**\n     * Cancel appointment\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.status = 'CANCELLED', \" +\n           \"a.cancelledAt = CURRENT_TIMESTAMP, a.cancellationReason = :reason, \" +\n           \"a.cancelledBy = :cancelledBy WHERE a.appointmentId = :appointmentId\")\n    int cancelAppointment(\n            @Param(\"appointmentId\") String appointmentId,\n            @Param(\"reason\") String reason,\n            @Param(\"cancelledBy\") String cancelledBy);\n\n    /**\n     * Mark as no-show\n     */\n    @Modifying\n    @Query(\"UPDATE AppointmentEntity a SET a.noShow = true, a.status = 'NO_SHOW' \" +\n           \"WHERE a.appointmentId = :appointmentId\")\n    int markAsNoShow(@Param(\"appointmentId\") String appointmentId);\n\n    /**\n     * Find available time slots\n     */\n    @Query(\"SELECT DISTINCT a.appointmentDateTime FROM AppointmentEntity a WHERE \" +\n           \"a.providerId = :providerId AND \" +\n           \"DATE(a.appointmentDateTime) = :date AND \" +\n           \"a.status IN ('SCHEDULED', 'CONFIRMED')\")\n    List<LocalDateTime> findBookedTimeSlots(\n            @Param(\"providerId\") String providerId,\n            @Param(\"date\") LocalDate date);\n\n    /**\n     * Count patient's appointments\n     */\n    long countByPatient(PatientEntity patient);\n\n    /**\n     * Count patient's completed appointments\n     */\n    long countByPatientAndStatus(PatientEntity patient, AppointmentEntity.AppointmentStatus status);\n\n    /**\n     * Find patient's last appointment\n     */\n    Optional<AppointmentEntity> findFirstByPatientAndStatusInOrderByAppointmentDateTimeDesc(\n            PatientEntity patient, List<AppointmentEntity.AppointmentStatus> statuses);\n}