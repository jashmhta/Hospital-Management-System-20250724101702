package com.hospital.hms.patientportal.repository;

import com.hospital.hms.patientportal.entity.PatientEntity;
import com.hospital.hms.patientportal.entity.PatientSessionEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Patient Session Repository
 * 
 * Advanced repository with custom queries for session management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface PatientSessionRepository extends JpaRepository<PatientSessionEntity, String> {

    /**
     * Find session by token
     */
    Optional<PatientSessionEntity> findBySessionToken(String sessionToken);

    /**
     * Find session by refresh token
     */
    Optional<PatientSessionEntity> findByRefreshToken(String refreshToken);

    /**
     * Find session by access token
     */
    Optional<PatientSessionEntity> findByAccessToken(String accessToken);

    /**\n     * Find active sessions by patient\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE s.patient = :patient AND \" +\n           \"s.status = 'ACTIVE' AND s.expiresAt > CURRENT_TIMESTAMP \" +\n           \"ORDER BY s.lastActivity DESC\")\n    List<PatientSessionEntity> findActiveSessionsByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find all sessions by patient\n     */\n    List<PatientSessionEntity> findByPatientOrderByCreatedAtDesc(PatientEntity patient);\n\n    /**\n     * Find sessions by status\n     */\n    List<PatientSessionEntity> findByStatusOrderByCreatedAtDesc(PatientSessionEntity.SessionStatus status);\n\n    /**\n     * Find expired sessions\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"s.expiresAt < CURRENT_TIMESTAMP AND s.status = 'ACTIVE' \" +\n           \"ORDER BY s.expiresAt ASC\")\n    List<PatientSessionEntity> findExpiredSessions();\n\n    /**\n     * Find sessions expiring soon\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"s.status = 'ACTIVE' AND \" +\n           \"s.expiresAt BETWEEN CURRENT_TIMESTAMP AND :threshold \" +\n           \"ORDER BY s.expiresAt ASC\")\n    List<PatientSessionEntity> findSessionsExpiringSoon(@Param(\"threshold\") LocalDateTime threshold);\n\n    /**\n     * Find sessions by IP address\n     */\n    List<PatientSessionEntity> findByIpAddressOrderByCreatedAtDesc(String ipAddress);\n\n    /**\n     * Find sessions by device\n     */\n    List<PatientSessionEntity> findByDeviceIdOrderByCreatedAtDesc(String deviceId);\n\n    /**\n     * Find sessions by location\n     */\n    List<PatientSessionEntity> findByLocationCountryAndLocationCityOrderByCreatedAtDesc(\n            String country, String city);\n\n    /**\n     * Find suspicious sessions\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"s.status = 'SUSPICIOUS' OR s.failedAttempts > 5 OR s.securityWarnings > 3 \" +\n           \"ORDER BY s.lastActivity DESC\")\n    List<PatientSessionEntity> findSuspiciousSessions();\n\n    /**\n     * Find concurrent sessions for patient\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE s.patient = :patient AND \" +\n           \"s.status = 'ACTIVE' AND s.expiresAt > CURRENT_TIMESTAMP \" +\n           \"ORDER BY s.lastActivity DESC\")\n    List<PatientSessionEntity> findConcurrentSessions(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find long-running sessions\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"s.status = 'ACTIVE' AND \" +\n           \"s.createdAt < :longSessionThreshold \" +\n           \"ORDER BY s.createdAt ASC\")\n    List<PatientSessionEntity> findLongRunningSessions(@Param(\"longSessionThreshold\") LocalDateTime longSessionThreshold);\n\n    /**\n     * Find sessions from different locations for same patient\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE s.patient = :patient AND \" +\n           \"s.status = 'ACTIVE' AND s.expiresAt > CURRENT_TIMESTAMP AND \" +\n           \"(s.ipAddress != :currentIp OR s.locationCountry != :currentCountry) \" +\n           \"ORDER BY s.lastActivity DESC\")\n    List<PatientSessionEntity> findSessionsFromDifferentLocations(\n            @Param(\"patient\") PatientEntity patient,\n            @Param(\"currentIp\") String currentIp,\n            @Param(\"currentCountry\") String currentCountry);\n\n    /**\n     * Find sessions by browser\n     */\n    List<PatientSessionEntity> findByBrowserContainingIgnoreCaseOrderByCreatedAtDesc(String browser);\n\n    /**\n     * Find sessions by operating system\n     */\n    List<PatientSessionEntity> findByOperatingSystemContainingIgnoreCaseOrderByCreatedAtDesc(String os);\n\n    /**\n     * Find sessions by device type\n     */\n    List<PatientSessionEntity> findByDeviceTypeIgnoreCaseOrderByCreatedAtDesc(String deviceType);\n\n    /**\n     * Find sessions with high activity\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"s.pageViews > :pageViewThreshold OR s.actionsPerformed > :actionThreshold \" +\n           \"ORDER BY s.pageViews DESC, s.actionsPerformed DESC\")\n    List<PatientSessionEntity> findHighActivitySessions(\n            @Param(\"pageViewThreshold\") Integer pageViewThreshold,\n            @Param(\"actionThreshold\") Integer actionThreshold);\n\n    /**\n     * Find sessions needing cleanup\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"(s.status = 'TERMINATED' OR s.status = 'EXPIRED') AND \" +\n           \"s.terminatedAt < :cleanupThreshold\")\n    List<PatientSessionEntity> findSessionsForCleanup(@Param(\"cleanupThreshold\") LocalDateTime cleanupThreshold);\n\n    /**\n     * Find remember me sessions\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE s.rememberMe = true \" +\n           \"ORDER BY s.createdAt DESC\")\n    List<PatientSessionEntity> findRememberMeSessions();\n\n    /**\n     * Find trusted device sessions\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE s.isTrustedDevice = true \" +\n           \"ORDER BY s.lastActivity DESC\")\n    List<PatientSessionEntity> findTrustedDeviceSessions();\n\n    /**\n     * Advanced session search\n     */\n    @Query(\"SELECT s FROM PatientSessionEntity s WHERE \" +\n           \"(:patientId IS NULL OR s.patient.patientId = :patientId) AND \" +\n           \"(:status IS NULL OR s.status = :status) AND \" +\n           \"(:ipAddress IS NULL OR s.ipAddress = :ipAddress) AND \" +\n           \"(:deviceType IS NULL OR LOWER(s.deviceType) LIKE LOWER(CONCAT('%', :deviceType, '%'))) AND \" +\n           \"(:browser IS NULL OR LOWER(s.browser) LIKE LOWER(CONCAT('%', :browser, '%'))) AND \" +\n           \"(:country IS NULL OR LOWER(s.locationCountry) LIKE LOWER(CONCAT('%', :country, '%'))) AND \" +\n           \"(:startDate IS NULL OR s.createdAt >= :startDate) AND \" +\n           \"(:endDate IS NULL OR s.createdAt <= :endDate)\")\n    Page<PatientSessionEntity> searchSessions(\n            @Param(\"patientId\") String patientId,\n            @Param(\"status\") PatientSessionEntity.SessionStatus status,\n            @Param(\"ipAddress\") String ipAddress,\n            @Param(\"deviceType\") String deviceType,\n            @Param(\"browser\") String browser,\n            @Param(\"country\") String country,\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate,\n            Pageable pageable);\n\n    /**\n     * Count sessions by status\n     */\n    @Query(\"SELECT s.status, COUNT(s) FROM PatientSessionEntity s GROUP BY s.status\")\n    List<Object[]> countSessionsByStatus();\n\n    /**\n     * Count sessions by device type\n     */\n    @Query(\"SELECT s.deviceType, COUNT(s) FROM PatientSessionEntity s \" +\n           \"WHERE s.deviceType IS NOT NULL GROUP BY s.deviceType\")\n    List<Object[]> countSessionsByDeviceType();\n\n    /**\n     * Count sessions by browser\n     */\n    @Query(\"SELECT s.browser, COUNT(s) FROM PatientSessionEntity s \" +\n           \"WHERE s.browser IS NOT NULL GROUP BY s.browser\")\n    List<Object[]> countSessionsByBrowser();\n\n    /**\n     * Count sessions by country\n     */\n    @Query(\"SELECT s.locationCountry, COUNT(s) FROM PatientSessionEntity s \" +\n           \"WHERE s.locationCountry IS NOT NULL GROUP BY s.locationCountry\")\n    List<Object[]> countSessionsByCountry();\n\n    /**\n     * Get session statistics\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(s) as totalSessions, \" +\n           \"COUNT(CASE WHEN s.status = 'ACTIVE' THEN 1 END) as activeSessions, \" +\n           \"COUNT(CASE WHEN s.status = 'EXPIRED' THEN 1 END) as expiredSessions, \" +\n           \"COUNT(CASE WHEN s.status = 'SUSPICIOUS' THEN 1 END) as suspiciousSessions, \" +\n           \"COUNT(CASE WHEN s.mfaVerified = true THEN 1 END) as mfaVerifiedSessions, \" +\n           \"AVG(s.pageViews) as averagePageViews, \" +\n           \"AVG(s.actionsPerformed) as averageActions \" +\n           \"FROM PatientSessionEntity s WHERE \" +\n           \"s.createdAt BETWEEN :startDate AND :endDate\")\n    Object[] getSessionStatistics(\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate);\n\n    /**\n     * Update last activity\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.lastActivity = CURRENT_TIMESTAMP, \" +\n           \"s.pageViews = s.pageViews + 1 WHERE s.sessionId = :sessionId\")\n    int updateLastActivity(@Param(\"sessionId\") String sessionId);\n\n    /**\n     * Update session tokens\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.accessToken = :accessToken, \" +\n           \"s.refreshToken = :refreshToken WHERE s.sessionId = :sessionId\")\n    int updateSessionTokens(\n            @Param(\"sessionId\") String sessionId,\n            @Param(\"accessToken\") String accessToken,\n            @Param(\"refreshToken\") String refreshToken);\n\n    /**\n     * Terminate session\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.status = 'TERMINATED', \" +\n           \"s.terminatedAt = CURRENT_TIMESTAMP, s.terminationReason = :reason \" +\n           \"WHERE s.sessionId = :sessionId\")\n    int terminateSession(@Param(\"sessionId\") String sessionId, @Param(\"reason\") String reason);\n\n    /**\n     * Extend session\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.expiresAt = :newExpiryTime \" +\n           \"WHERE s.sessionId = :sessionId\")\n    int extendSession(@Param(\"sessionId\") String sessionId, @Param(\"newExpiryTime\") LocalDateTime newExpiryTime);\n\n    /**\n     * Mark sessions as expired\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.status = 'EXPIRED', \" +\n           \"s.terminatedAt = CURRENT_TIMESTAMP, s.terminationReason = 'EXPIRED' \" +\n           \"WHERE s.expiresAt < CURRENT_TIMESTAMP AND s.status = 'ACTIVE'\")\n    int expireOldSessions();\n\n    /**\n     * Record failed attempt\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.failedAttempts = s.failedAttempts + 1 \" +\n           \"WHERE s.sessionId = :sessionId\")\n    int recordFailedAttempt(@Param(\"sessionId\") String sessionId);\n\n    /**\n     * Record security warning\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.securityWarnings = s.securityWarnings + 1 \" +\n           \"WHERE s.sessionId = :sessionId\")\n    int recordSecurityWarning(@Param(\"sessionId\") String sessionId);\n\n    /**\n     * Terminate all patient sessions\n     */\n    @Modifying\n    @Query(\"UPDATE PatientSessionEntity s SET s.status = 'TERMINATED', \" +\n           \"s.terminatedAt = CURRENT_TIMESTAMP, s.terminationReason = :reason \" +\n           \"WHERE s.patient = :patient AND s.status = 'ACTIVE'\")\n    int terminateAllPatientSessions(@Param(\"patient\") PatientEntity patient, @Param(\"reason\") String reason);\n\n    /**\n     * Count active sessions for patient\n     */\n    @Query(\"SELECT COUNT(s) FROM PatientSessionEntity s WHERE s.patient = :patient AND \" +\n           \"s.status = 'ACTIVE' AND s.expiresAt > CURRENT_TIMESTAMP\")\n    long countActiveSessionsByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Find most recent session for patient\n     */\n    Optional<PatientSessionEntity> findFirstByPatientOrderByLastActivityDesc(PatientEntity patient);\n\n    /**\n     * Delete old terminated sessions\n     */\n    @Modifying\n    @Query(\"DELETE FROM PatientSessionEntity s WHERE \" +\n           \"s.status IN ('TERMINATED', 'EXPIRED') AND s.terminatedAt < :threshold\")\n    int deleteOldTerminatedSessions(@Param(\"threshold\") LocalDateTime threshold);\n\n    /**\n     * Check if session token exists\n     */\n    boolean existsBySessionToken(String sessionToken);\n\n    /**\n     * Check if access token exists\n     */\n    boolean existsByAccessToken(String accessToken);\n\n    /**\n     * Check if refresh token exists\n     */\n    boolean existsByRefreshToken(String refreshToken);\n}