package com.hms.analytics.controller;

import com.hms.analytics.entity.DataSource;
import com.hms.analytics.entity.IngestionJob;
import com.hms.analytics.service.AnalyticsDataIngestionService;
import com.hms.analytics.dto.DataSourceCreateRequest;
import com.hms.analytics.dto.DataSourceResponse;
import com.hms.analytics.dto.IngestionJobRequest;
import com.hms.analytics.dto.IngestionJobResponse;
import com.hms.analytics.dto.ApiResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * Analytics Data Ingestion Controller
 * 
 * Comprehensive REST API for managing healthcare data ingestion,
 * ETL pipelines, and analytics data streaming with enterprise-grade
 * security, monitoring, and HIPAA compliance features.
 */
@RestController
@RequestMapping("/api/v1/analytics/ingestion")
@Tag(name = "Analytics Data Ingestion", description = "Healthcare Analytics Data Ingestion and ETL Management")
@Validated
@CrossOrigin(origins = {"https://analytics.hospital.com", "https://dashboard.hospital.com"})\npublic class AnalyticsDataIngestionController {\n\n    private static final Logger logger = LoggerFactory.getLogger(AnalyticsDataIngestionController.class);\n\n    @Autowired\n    private AnalyticsDataIngestionService ingestionService;\n\n    // =================\n    // DATA SOURCE MANAGEMENT\n    // =================\n\n    /**\n     * Create new data source\n     */\n    @PostMapping(\"/data-sources\")\n    @Operation(summary = \"Create Data Source\", \n               description = \"Create a new healthcare data source for analytics ingestion\")\n    @ApiResponses(value = {\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"201\", description = \"Data source created successfully\"),\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"400\", description = \"Invalid input data\"),\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"409\", description = \"Data source already exists\")\n    })\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER')\")\n    public ResponseEntity<ApiResponse<DataSourceResponse>> createDataSource(\n            @Valid @RequestBody DataSourceCreateRequest request) {\n        \n        logger.info(\"Creating new data source: {}\", request.getSourceName());\n        \n        try {\n            DataSource dataSource = mapToDataSource(request);\n            DataSource createdSource = ingestionService.createDataSource(dataSource);\n            DataSourceResponse response = mapToDataSourceResponse(createdSource);\n            \n            return ResponseEntity.status(HttpStatus.CREATED)\n                .body(ApiResponse.success(response, \"Data source created successfully\"));\n                \n        } catch (Exception e) {\n            logger.error(\"Error creating data source: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to create data source: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Get all data sources\n     */\n    @GetMapping(\"/data-sources\")\n    @Operation(summary = \"Get Data Sources\", \n               description = \"Retrieve all healthcare data sources with optional filtering\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Page<DataSourceResponse>>> getDataSources(\n            @Parameter(description = \"Page number (0-based)\") \n            @RequestParam(defaultValue = \"0\") @Min(0) int page,\n            @Parameter(description = \"Page size\") \n            @RequestParam(defaultValue = \"20\") @Min(1) @Max(100) int size,\n            @Parameter(description = \"Sort field\") \n            @RequestParam(defaultValue = \"createdAt\") String sortBy,\n            @Parameter(description = \"Sort direction\") \n            @RequestParam(defaultValue = \"DESC\") String sortDir,\n            @Parameter(description = \"Filter by source type\") \n            @RequestParam(required = false) DataSource.SourceType sourceType,\n            @Parameter(description = \"Filter by category\") \n            @RequestParam(required = false) DataSource.DataCategory category,\n            @Parameter(description = \"Filter by status\") \n            @RequestParam(required = false) DataSource.SourceStatus status,\n            @Parameter(description = \"Search term\") \n            @RequestParam(required = false) String search) {\n        \n        try {\n            Sort.Direction direction = Sort.Direction.fromString(sortDir);\n            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortBy));\n            \n            // Implementation would use service method with criteria\n            // For now, simplified implementation\n            Page<DataSource> dataSources = ingestionService.getDataSources(pageable, sourceType, category, status, search);\n            Page<DataSourceResponse> response = dataSources.map(this::mapToDataSourceResponse);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Data sources retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving data sources: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve data sources\"));\n        }\n    }\n\n    /**\n     * Get data source by ID\n     */\n    @GetMapping(\"/data-sources/{id}\")\n    @Operation(summary = \"Get Data Source\", description = \"Retrieve specific data source by ID\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<DataSourceResponse>> getDataSource(\n            @Parameter(description = \"Data source ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            DataSource dataSource = ingestionService.getDataSourceById(id);\n            DataSourceResponse response = mapToDataSourceResponse(dataSource);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Data source retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving data source {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                .body(ApiResponse.error(\"Data source not found\"));\n        }\n    }\n\n    /**\n     * Update data source\n     */\n    @PutMapping(\"/data-sources/{id}\")\n    @Operation(summary = \"Update Data Source\", description = \"Update existing data source configuration\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER')\")\n    public ResponseEntity<ApiResponse<DataSourceResponse>> updateDataSource(\n            @Parameter(description = \"Data source ID\") @PathVariable @NotNull Long id,\n            @Valid @RequestBody DataSourceCreateRequest request) {\n        \n        try {\n            DataSource updatedSource = ingestionService.updateDataSource(id, mapToDataSource(request));\n            DataSourceResponse response = mapToDataSourceResponse(updatedSource);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Data source updated successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error updating data source {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to update data source: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Delete data source\n     */\n    @DeleteMapping(\"/data-sources/{id}\")\n    @Operation(summary = \"Delete Data Source\", description = \"Delete data source and associated jobs\")\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public ResponseEntity<ApiResponse<Void>> deleteDataSource(\n            @Parameter(description = \"Data source ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            ingestionService.deleteDataSource(id);\n            return ResponseEntity.ok(ApiResponse.success(null, \"Data source deleted successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error deleting data source {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to delete data source: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Test data source connection\n     */\n    @PostMapping(\"/data-sources/{id}/test-connection\")\n    @Operation(summary = \"Test Data Source Connection\", \n               description = \"Test connectivity to the data source\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> testConnection(\n            @Parameter(description = \"Data source ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            Map<String, Object> result = ingestionService.testDataSourceConnection(id);\n            return ResponseEntity.ok(ApiResponse.success(result, \"Connection test completed\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error testing connection for data source {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Connection test failed: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Get data source analytics\n     */\n    @GetMapping(\"/data-sources/{id}/analytics\")\n    @Operation(summary = \"Get Data Source Analytics\", \n               description = \"Retrieve performance and usage analytics for data source\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> getDataSourceAnalytics(\n            @Parameter(description = \"Data source ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            Map<String, Object> analytics = ingestionService.getDataSourceAnalytics(id);\n            return ResponseEntity.ok(ApiResponse.success(analytics, \"Analytics retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving analytics for data source {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve analytics\"));\n        }\n    }\n\n    // =================\n    // INGESTION JOB MANAGEMENT\n    // =================\n\n    /**\n     * Start ingestion job\n     */\n    @PostMapping(\"/jobs\")\n    @Operation(summary = \"Start Ingestion Job\", \n               description = \"Start a new data ingestion job for specified data source\")\n    @ApiResponses(value = {\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"201\", description = \"Job started successfully\"),\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"400\", description = \"Invalid job request\"),\n        @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = \"409\", description = \"Concurrent job limit exceeded\")\n    })\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<IngestionJobResponse>> startIngestionJob(\n            @Valid @RequestBody IngestionJobRequest request) {\n        \n        logger.info(\"Starting ingestion job for data source: {}\", request.getDataSourceId());\n        \n        try {\n            IngestionJob job = ingestionService.startIngestionJob(\n                request.getDataSourceId(), \n                request.getJobType(), \n                request.getConfiguration());\n            \n            IngestionJobResponse response = mapToJobResponse(job);\n            \n            return ResponseEntity.status(HttpStatus.CREATED)\n                .body(ApiResponse.success(response, \"Ingestion job started successfully\"));\n                \n        } catch (Exception e) {\n            logger.error(\"Error starting ingestion job: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to start ingestion job: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Get ingestion job status\n     */\n    @GetMapping(\"/jobs/{id}\")\n    @Operation(summary = \"Get Job Status\", description = \"Retrieve ingestion job status and details\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<IngestionJobResponse>> getJobStatus(\n            @Parameter(description = \"Job ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            IngestionJob job = ingestionService.getJobStatus(id);\n            IngestionJobResponse response = mapToJobResponse(job);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Job status retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving job status {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.NOT_FOUND)\n                .body(ApiResponse.error(\"Job not found\"));\n        }\n    }\n\n    /**\n     * Get all ingestion jobs\n     */\n    @GetMapping(\"/jobs\")\n    @Operation(summary = \"Get Ingestion Jobs\", \n               description = \"Retrieve ingestion jobs with optional filtering\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Page<IngestionJobResponse>>> getIngestionJobs(\n            @Parameter(description = \"Page number (0-based)\") \n            @RequestParam(defaultValue = \"0\") @Min(0) int page,\n            @Parameter(description = \"Page size\") \n            @RequestParam(defaultValue = \"20\") @Min(1) @Max(100) int size,\n            @Parameter(description = \"Sort field\") \n            @RequestParam(defaultValue = \"createdAt\") String sortBy,\n            @Parameter(description = \"Sort direction\") \n            @RequestParam(defaultValue = \"DESC\") String sortDir,\n            @Parameter(description = \"Filter by data source ID\") \n            @RequestParam(required = false) Long dataSourceId,\n            @Parameter(description = \"Filter by job status\") \n            @RequestParam(required = false) IngestionJob.JobStatus status,\n            @Parameter(description = \"Filter by job type\") \n            @RequestParam(required = false) IngestionJob.JobType jobType,\n            @Parameter(description = \"Filter by triggered user\") \n            @RequestParam(required = false) String triggeredBy) {\n        \n        try {\n            Sort.Direction direction = Sort.Direction.fromString(sortDir);\n            Pageable pageable = PageRequest.of(page, size, Sort.by(direction, sortBy));\n            \n            Page<IngestionJob> jobs = ingestionService.getIngestionJobs(\n                pageable, dataSourceId, status, jobType, triggeredBy);\n            Page<IngestionJobResponse> response = jobs.map(this::mapToJobResponse);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Jobs retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving ingestion jobs: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve jobs\"));\n        }\n    }\n\n    /**\n     * Cancel ingestion job\n     */\n    @PostMapping(\"/jobs/{id}/cancel\")\n    @Operation(summary = \"Cancel Job\", description = \"Cancel running or pending ingestion job\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER')\")\n    public ResponseEntity<ApiResponse<IngestionJobResponse>> cancelJob(\n            @Parameter(description = \"Job ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            IngestionJob job = ingestionService.cancelJob(id);\n            IngestionJobResponse response = mapToJobResponse(job);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Job cancelled successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error cancelling job {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to cancel job: \" + e.getMessage()));\n        }\n    }\n\n    /**\n     * Retry failed job\n     */\n    @PostMapping(\"/jobs/{id}/retry\")\n    @Operation(summary = \"Retry Job\", description = \"Retry failed ingestion job\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER')\")\n    public ResponseEntity<ApiResponse<IngestionJobResponse>> retryJob(\n            @Parameter(description = \"Job ID\") @PathVariable @NotNull Long id) {\n        \n        try {\n            IngestionJob job = ingestionService.retryJob(id);\n            IngestionJobResponse response = mapToJobResponse(job);\n            \n            return ResponseEntity.ok(ApiResponse.success(response, \"Job retry initiated successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrying job {}: {}\", id, e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\n                .body(ApiResponse.error(\"Failed to retry job: \" + e.getMessage()));\n        }\n    }\n\n    // =================\n    // MONITORING AND ANALYTICS\n    // =================\n\n    /**\n     * Get system health metrics\n     */\n    @GetMapping(\"/health\")\n    @Operation(summary = \"Get System Health\", \n               description = \"Retrieve overall system health and performance metrics\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> getSystemHealth() {\n        \n        try {\n            Map<String, Object> health = ingestionService.getSystemHealth();\n            return ResponseEntity.ok(ApiResponse.success(health, \"System health retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving system health: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve system health\"));\n        }\n    }\n\n    /**\n     * Get ingestion statistics\n     */\n    @GetMapping(\"/statistics\")\n    @Operation(summary = \"Get Ingestion Statistics\", \n               description = \"Retrieve comprehensive ingestion statistics and trends\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> getStatistics(\n            @Parameter(description = \"Start date for statistics\") \n            @RequestParam(required = false) String startDate,\n            @Parameter(description = \"End date for statistics\") \n            @RequestParam(required = false) String endDate) {\n        \n        try {\n            LocalDateTime start = startDate != null ? LocalDateTime.parse(startDate) : null;\n            LocalDateTime end = endDate != null ? LocalDateTime.parse(endDate) : null;\n            \n            Map<String, Object> statistics = ingestionService.getIngestionStatistics(start, end);\n            return ResponseEntity.ok(ApiResponse.success(statistics, \"Statistics retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving statistics: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve statistics\"));\n        }\n    }\n\n    /**\n     * Get data quality reports\n     */\n    @GetMapping(\"/quality-report\")\n    @Operation(summary = \"Get Data Quality Report\", \n               description = \"Retrieve comprehensive data quality assessment report\")\n    @PreAuthorize(\"hasRole('ADMIN') or hasRole('DATA_ENGINEER') or hasRole('ANALYST')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> getQualityReport(\n            @Parameter(description = \"Data source ID\") @RequestParam(required = false) Long dataSourceId,\n            @Parameter(description = \"Time period in days\") @RequestParam(defaultValue = \"30\") int days) {\n        \n        try {\n            Map<String, Object> qualityReport = ingestionService.getDataQualityReport(dataSourceId, days);\n            return ResponseEntity.ok(ApiResponse.success(qualityReport, \"Quality report retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving quality report: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve quality report\"));\n        }\n    }\n\n    // =================\n    // UTILITY ENDPOINTS\n    // =================\n\n    /**\n     * Get system configuration\n     */\n    @GetMapping(\"/configuration\")\n    @Operation(summary = \"Get System Configuration\", \n               description = \"Retrieve current system configuration and settings\")\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public ResponseEntity<ApiResponse<Map<String, Object>>> getConfiguration() {\n        \n        try {\n            Map<String, Object> configuration = ingestionService.getSystemConfiguration();\n            return ResponseEntity.ok(ApiResponse.success(configuration, \"Configuration retrieved successfully\"));\n            \n        } catch (Exception e) {\n            logger.error(\"Error retrieving configuration: {}\", e.getMessage(), e);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                .body(ApiResponse.error(\"Failed to retrieve configuration\"));\n        }\n    }\n\n    // =================\n    // HELPER METHODS\n    // =================\n\n    private DataSource mapToDataSource(DataSourceCreateRequest request) {\n        DataSource dataSource = new DataSource();\n        dataSource.setSourceName(request.getSourceName());\n        dataSource.setSourceCode(request.getSourceCode());\n        dataSource.setSourceType(request.getSourceType());\n        dataSource.setCategory(request.getCategory());\n        dataSource.setDescription(request.getDescription());\n        dataSource.setConnectionString(request.getConnectionString());\n        dataSource.setApiEndpoint(request.getApiEndpoint());\n        dataSource.setAuthenticationType(request.getAuthenticationType());\n        dataSource.setSyncFrequencyMinutes(request.getSyncFrequencyMinutes());\n        dataSource.setBatchSize(request.getBatchSize());\n        dataSource.setDataFormat(request.getDataFormat());\n        dataSource.setSchemaValidation(request.getSchemaValidation());\n        dataSource.setDataEncryption(request.getDataEncryption());\n        dataSource.setHipaaCompliant(request.getHipaaCompliant());\n        return dataSource;\n    }\n\n    private DataSourceResponse mapToDataSourceResponse(DataSource dataSource) {\n        DataSourceResponse response = new DataSourceResponse();\n        response.setId(dataSource.getId());\n        response.setSourceName(dataSource.getSourceName());\n        response.setSourceCode(dataSource.getSourceCode());\n        response.setSourceType(dataSource.getSourceType());\n        response.setCategory(dataSource.getCategory());\n        response.setDescription(dataSource.getDescription());\n        response.setStatus(dataSource.getStatus());\n        response.setSyncFrequencyMinutes(dataSource.getSyncFrequencyMinutes());\n        response.setLastSyncAt(dataSource.getLastSyncAt());\n        response.setNextSyncAt(dataSource.getNextSyncAt());\n        response.setRecordsProcessed(dataSource.getRecordsProcessed());\n        response.setRecordsFailed(dataSource.getRecordsFailed());\n        response.setErrorRate(dataSource.getErrorRate());\n        response.setHealthy(dataSource.isHealthy());\n        response.setCreatedAt(dataSource.getCreatedAt());\n        response.setUpdatedAt(dataSource.getUpdatedAt());\n        return response;\n    }\n\n    private IngestionJobResponse mapToJobResponse(IngestionJob job) {\n        IngestionJobResponse response = new IngestionJobResponse();\n        response.setId(job.getId());\n        response.setJobId(job.getJobId());\n        response.setJobName(job.getJobName());\n        response.setJobType(job.getJobType());\n        response.setStatus(job.getStatus());\n        response.setDataSourceId(job.getDataSource().getId());\n        response.setDataSourceName(job.getDataSource().getSourceName());\n        response.setPriority(job.getPriority());\n        response.setStartedAt(job.getStartedAt());\n        response.setCompletedAt(job.getCompletedAt());\n        response.setDurationMs(job.getDurationMs());\n        response.setRecordsTotal(job.getRecordsTotal());\n        response.setRecordsProcessed(job.getRecordsProcessed());\n        response.setRecordsFailed(job.getRecordsFailed());\n        response.setProgressPercentage(job.getProgressPercentage());\n        response.setQualityScore(job.getQualityScore());\n        response.setTriggeredBy(job.getTriggeredBy());\n        response.setTriggerType(job.getTriggerType());\n        response.setCreatedAt(job.getCreatedAt());\n        return response;\n    }\n}\n"
