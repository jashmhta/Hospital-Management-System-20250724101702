server:
  port: 8092
  servlet:
    context-path: /state-registry

spring:
  application:
    name: state-registry-integration-service
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/hms_state_registry
    username: ${DB_USERNAME:hms_user}
    password: ${DB_PASSWORD:hms_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1800000
      connection-timeout: 20000
      
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        
  # Cache Configuration (Redis)
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes
      key-prefix: "state-registry:"
      use-key-prefix: true
      
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: 3
      jedis:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/hms}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/hms/protocol/openid_connect/certs}
          
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: state-registry-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.hospital.hms.registry.dto"

# Service Discovery (Eureka)
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  info:
    git:
      mode: full

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: State Registry Integration Service API
    description: Public health reporting and state registry integration service
    version: 1.0.0
    contact:
      name: HMS Enterprise Team
      email: support@hms-enterprise.com

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      registry-submission:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 5s
      
  retry:
    instances:
      registry-submission:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        
  timelimiter:
    instances:
      registry-submission:
        timeout-duration: 30s

# Custom Application Properties
hms:
  state-registry:
    # Registry Configuration
    registries:
      birth:
        endpoint: ${BIRTH_REGISTRY_ENDPOINT:https://state-vital-records.gov/api/birth}
        auth-token: ${BIRTH_REGISTRY_TOKEN:}
        timeout: 30s
        format: HL7
      death:
        endpoint: ${DEATH_REGISTRY_ENDPOINT:https://state-vital-records.gov/api/death}
        auth-token: ${DEATH_REGISTRY_TOKEN:}
        timeout: 30s
        format: HL7
      disease-surveillance:
        endpoint: ${DISEASE_SURVEILLANCE_ENDPOINT:https://state-health.gov/api/surveillance}
        auth-token: ${DISEASE_SURVEILLANCE_TOKEN:}
        timeout: 60s
        format: FHIR
      immunization:
        endpoint: ${IMMUNIZATION_REGISTRY_ENDPOINT:https://state-immunization.gov/api/immunizations}
        auth-token: ${IMMUNIZATION_REGISTRY_TOKEN:}
        timeout: 30s
        format: HL7
      cancer:
        endpoint: ${CANCER_REGISTRY_ENDPOINT:https://state-cancer.gov/api/cancer}
        auth-token: ${CANCER_REGISTRY_TOKEN:}
        timeout: 120s
        format: FHIR
        
    # Validation Configuration
    validation:
      enabled: true
      strict-mode: false
      quality-threshold: 80.0
      
    # Compliance Configuration
    compliance:
      monitoring-enabled: true
      alert-overdue-reports: true
      overdue-threshold-hours: 24
      mandatory-report-tracking: true
      
    # Submission Configuration
    submission:
      retry-attempts: 3
      retry-delay: 5s
      batch-size: 50
      async-processing: true
      
    # FHIR Configuration
    fhir:
      enabled: true
      server-url: ${FHIR_SERVER_URL:http://localhost:8080/fhir}
      version: R4
      
    # External Services
    external-services:
      patient-service:
        url: ${PATIENT_SERVICE_URL:http://localhost:8081}
        timeout: 10s
      provider-service:
        url: ${PROVIDER_SERVICE_URL:http://localhost:8083}
        timeout: 10s

# Logging Configuration
logging:
  level:
    com.hospital.hms.registry: DEBUG
    org.springframework.security: INFO
    org.springframework.kafka: INFO
    org.hibernate.SQL: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/state-registry-service.log
    max-size: 100MB
    max-history: 30

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
      
  datasource:
    url: jdbc:postgresql://localhost:5432/hms_state_registry_dev
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    
logging:
  level:
    com.hospital.hms.registry: DEBUG
    org.springframework.security: DEBUG
    root: INFO

hms:
  state-registry:
    validation:
      strict-mode: false
    compliance:
      alert-overdue-reports: false

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
      
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:hms_state_registry_prod}
    hikari:
      maximum-pool-size: 50
      
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    
logging:
  level:
    com.hospital.hms.registry: INFO
    org.springframework.security: WARN
    root: WARN
    
hms:
  state-registry:
    validation:
      strict-mode: true
    compliance:
      alert-overdue-reports: true
    submission:
      batch-size: 100
