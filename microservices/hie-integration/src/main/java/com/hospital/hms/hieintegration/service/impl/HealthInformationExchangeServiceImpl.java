package com.hospital.hms.hieintegration.service.impl;

import com.hospital.hms.hieintegration.dto.HieCreateRequestDto;
import com.hospital.hms.hieintegration.dto.HieResponseDto;
import com.hospital.hms.hieintegration.entity.HealthInformationExchange;
import com.hospital.hms.hieintegration.entity.HieStatus;
import com.hospital.hms.hieintegration.entity.HieType;
import com.hospital.hms.hieintegration.mapper.HealthInformationExchangeMapper;
import com.hospital.hms.hieintegration.repository.HealthInformationExchangeRepository;
import com.hospital.hms.hieintegration.repository.HieConnectionRepository;
import com.hospital.hms.hieintegration.repository.HieDataExchangeRepository;
import com.hospital.hms.hieintegration.service.HealthInformationExchangeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Implementation of Health Information Exchange Service
 * 
 * @author HMS Enterprise Team\n * @version 1.0.0\n */\n@Service\n@Transactional\n@RequiredArgsConstructor\n@Slf4j\npublic class HealthInformationExchangeServiceImpl implements HealthInformationExchangeService {\n\n    private final HealthInformationExchangeRepository hieRepository;\n    private final HieDataExchangeRepository dataExchangeRepository;\n    private final HieConnectionRepository connectionRepository;\n    private final HealthInformationExchangeMapper hieMapper;\n\n    @Override\n    @CacheEvict(value = \"hie-cache\", allEntries = true)\n    public HieResponseDto createHie(HieCreateRequestDto createRequest) {\n        log.info(\"Creating new HIE with code: {}\", createRequest.getHieCode());\n        \n        // Validate uniqueness\n        if (hieRepository.existsByHieCode(createRequest.getHieCode())) {\n            throw new IllegalArgumentException(\"HIE code already exists: \" + createRequest.getHieCode());\n        }\n        \n        if (hieRepository.existsByHieNameIgnoreCase(createRequest.getHieName())) {\n            throw new IllegalArgumentException(\"HIE name already exists: \" + createRequest.getHieName());\n        }\n        \n        HealthInformationExchange hie = hieMapper.toEntity(createRequest);\n        hie.setCreatedBy(getCurrentUser());\n        \n        HealthInformationExchange savedHie = hieRepository.save(hie);\n        log.info(\"Successfully created HIE with ID: {}\", savedHie.getId());\n        \n        return hieMapper.toResponseDto(savedHie);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public HieResponseDto updateHie(UUID hieId, HieCreateRequestDto updateRequest) {\n        log.info(\"Updating HIE with ID: {}\", hieId);\n        \n        HealthInformationExchange existingHie = findHieById(hieId);\n        \n        // Validate uniqueness for name/code changes\n        if (!existingHie.getHieCode().equals(updateRequest.getHieCode()) && \n            hieRepository.existsByHieCode(updateRequest.getHieCode())) {\n            throw new IllegalArgumentException(\"HIE code already exists: \" + updateRequest.getHieCode());\n        }\n        \n        if (!existingHie.getHieName().equalsIgnoreCase(updateRequest.getHieName()) && \n            hieRepository.existsByHieNameIgnoreCase(updateRequest.getHieName())) {\n            throw new IllegalArgumentException(\"HIE name already exists: \" + updateRequest.getHieName());\n        }\n        \n        hieMapper.updateEntityFromDto(updateRequest, existingHie);\n        existingHie.setLastModifiedBy(getCurrentUser());\n        \n        HealthInformationExchange updatedHie = hieRepository.save(existingHie);\n        log.info(\"Successfully updated HIE with ID: {}\", updatedHie.getId());\n        \n        return hieMapper.toResponseDto(updatedHie);\n    }\n\n    @Override\n    @Cacheable(value = \"hie-by-id\", key = \"#hieId\")\n    @Transactional(readOnly = true)\n    public HieResponseDto getHieById(UUID hieId) {\n        log.debug(\"Fetching HIE by ID: {}\", hieId);\n        HealthInformationExchange hie = findHieById(hieId);\n        HieResponseDto response = hieMapper.toResponseDto(hie);\n        \n        // Enrich with statistics and status\n        enrichHieResponse(response, hie);\n        \n        return response;\n    }\n\n    @Override\n    @Cacheable(value = \"hie-by-code\", key = \"#hieCode\")\n    @Transactional(readOnly = true)\n    public HieResponseDto getHieByCode(String hieCode) {\n        log.debug(\"Fetching HIE by code: {}\", hieCode);\n        HealthInformationExchange hie = hieRepository.findByHieCode(hieCode)\n            .orElseThrow(() -> new NoSuchElementException(\"HIE not found with code: \" + hieCode));\n        \n        HieResponseDto response = hieMapper.toResponseDto(hie);\n        enrichHieResponse(response, hie);\n        \n        return response;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public HieResponseDto getHieByName(String hieName) {\n        log.debug(\"Fetching HIE by name: {}\", hieName);\n        HealthInformationExchange hie = hieRepository.findByHieNameIgnoreCase(hieName)\n            .orElseThrow(() -> new NoSuchElementException(\"HIE not found with name: \" + hieName));\n        \n        HieResponseDto response = hieMapper.toResponseDto(hie);\n        enrichHieResponse(response, hie);\n        \n        return response;\n    }\n\n    @Override\n    @Cacheable(value = \"hie-cache\")\n    @Transactional(readOnly = true)\n    public Page<HieResponseDto> getAllHies(Pageable pageable) {\n        log.debug(\"Fetching all HIEs with pagination: {}\", pageable);\n        return hieRepository.findAll(pageable)\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            });\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesByStatus(HieStatus status) {\n        log.debug(\"Fetching HIEs by status: {}\", status);\n        return hieRepository.findByStatus(status).stream()\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            })\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesByType(HieType hieType) {\n        log.debug(\"Fetching HIEs by type: {}\", hieType);\n        return hieRepository.findByHieType(hieType).stream()\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            })\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesByGeographicRegion(String geographicRegion) {\n        log.debug(\"Fetching HIEs by geographic region: {}\", geographicRegion);\n        return hieRepository.findByGeographicRegionIgnoreCase(geographicRegion).stream()\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            })\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Page<HieResponseDto> searchHies(String searchTerm, Pageable pageable) {\n        log.debug(\"Searching HIEs with term: {}\", searchTerm);\n        return hieRepository.searchByNameOrDescription(searchTerm, pageable)\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            });\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesWithActiveDataSharingAgreements() {\n        log.debug(\"Fetching HIEs with active data sharing agreements\");\n        LocalDateTime now = LocalDateTime.now();\n        return hieRepository.findByActiveDataSharingAgreement(now).stream()\n            .map(hie -> {\n                HieResponseDto response = hieMapper.toResponseDto(hie);\n                enrichHieResponseBasic(response, hie);\n                return response;\n            })\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesSupportingFhirVersion(String fhirVersion) {\n        log.debug(\"Fetching HIEs supporting FHIR version: {}\", fhirVersion);\n        return hieRepository.findBySupportedFhirVersionsContaining(fhirVersion).stream()\n            .map(hieMapper::toResponseDto)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesSupportingHl7Version(String hl7Version) {\n        log.debug(\"Fetching HIEs supporting HL7 version: {}\", hl7Version);\n        return hieRepository.findBySupportedHl7VersionsContaining(hl7Version).stream()\n            .map(hieMapper::toResponseDto)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHighPerformanceHies() {\n        log.debug(\"Fetching high performance HIEs\");\n        return hieRepository.findByUptimePercentageGreaterThanEqual(99.0).stream()\n            .filter(hie -> hie.getAverageResponseTimeMs() != null && hie.getAverageResponseTimeMs() <= 2000)\n            .filter(hie -> hie.getSuccessRatePercentage() != null && hie.getSuccessRatePercentage() >= 98.0)\n            .map(hieMapper::toResponseDto)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesWithPerformanceIssues() {\n        log.debug(\"Fetching HIEs with performance issues\");\n        return hieRepository.findHiesWithPerformanceIssues(95.0, 5000L, 90.0).stream()\n            .map(hieMapper::toResponseDto)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public List<HieResponseDto> getHiesDueForConnectionTest() {\n        log.debug(\"Fetching HIEs due for connection test\");\n        LocalDateTime testDueTime = LocalDateTime.now().minus(15, ChronoUnit.MINUTES);\n        return hieRepository.findHiesDueForConnectionTest(testDueTime).stream()\n            .map(hieMapper::toResponseDto)\n            .collect(Collectors.toList());\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public HieResponseDto updateHieStatus(UUID hieId, HieStatus status) {\n        log.info(\"Updating HIE status. ID: {}, Status: {}\", hieId, status);\n        \n        HealthInformationExchange hie = findHieById(hieId);\n        hie.setStatus(status);\n        hie.setLastModifiedBy(getCurrentUser());\n        \n        HealthInformationExchange updatedHie = hieRepository.save(hie);\n        log.info(\"Successfully updated HIE status for ID: {}\", hieId);\n        \n        return hieMapper.toResponseDto(updatedHie);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void updatePerformanceMetrics(UUID hieId, Double uptimePercentage, \n                                       Long averageResponseTimeMs, Double successRatePercentage) {\n        log.debug(\"Updating performance metrics for HIE ID: {}\", hieId);\n        \n        int updated = hieRepository.updatePerformanceMetrics(hieId, uptimePercentage, \n                                                           averageResponseTimeMs, successRatePercentage);\n        \n        if (updated == 0) {\n            throw new NoSuchElementException(\"HIE not found with ID: \" + hieId);\n        }\n        \n        log.debug(\"Successfully updated performance metrics for HIE ID: {}\", hieId);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void recordSuccessfulConnection(UUID hieId) {\n        log.debug(\"Recording successful connection for HIE ID: {}\", hieId);\n        \n        int updated = hieRepository.updateLastSuccessfulConnection(hieId, LocalDateTime.now());\n        \n        if (updated == 0) {\n            throw new NoSuchElementException(\"HIE not found with ID: \" + hieId);\n        }\n        \n        log.debug(\"Successfully recorded successful connection for HIE ID: {}\", hieId);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void recordFailedConnection(UUID hieId) {\n        log.debug(\"Recording failed connection for HIE ID: {}\", hieId);\n        \n        int updated = hieRepository.updateLastFailedConnection(hieId, LocalDateTime.now());\n        \n        if (updated == 0) {\n            throw new NoSuchElementException(\"HIE not found with ID: \" + hieId);\n        }\n        \n        log.debug(\"Successfully recorded failed connection for HIE ID: {}\", hieId);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> testHieConnectivity(UUID hieId) {\n        log.info(\"Testing HIE connectivity for ID: {}\", hieId);\n        HealthInformationExchange hie = findHieById(hieId);\n        \n        Map<String, Object> testResults = new HashMap<>();\n        testResults.put(\"hieId\", hieId);\n        testResults.put(\"hieName\", hie.getHieName());\n        testResults.put(\"testDate\", LocalDateTime.now());\n        \n        // Test basic connectivity\n        testResults.put(\"connectivity\", testBasicConnectivity(hie));\n        \n        return testResults;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> testAllHieEndpoints(UUID hieId) {\n        log.info(\"Testing all HIE endpoints for ID: {}\", hieId);\n        HealthInformationExchange hie = findHieById(hieId);\n        \n        Map<String, Object> testResults = new HashMap<>();\n        testResults.put(\"hieId\", hieId);\n        testResults.put(\"hieName\", hie.getHieName());\n        testResults.put(\"testDate\", LocalDateTime.now());\n        \n        // Test all configured endpoints\n        Map<String, Object> endpointTests = new HashMap<>();\n        \n        if (hie.getFhirEndpoint() != null) {\n            endpointTests.put(\"fhir\", testEndpoint(hie.getFhirEndpoint()));\n        }\n        \n        if (hie.getHl7Endpoint() != null) {\n            endpointTests.put(\"hl7\", testEndpoint(hie.getHl7Endpoint()));\n        }\n        \n        if (hie.getRestEndpoint() != null) {\n            endpointTests.put(\"rest\", testEndpoint(hie.getRestEndpoint()));\n        }\n        \n        if (hie.getSoapEndpoint() != null) {\n            endpointTests.put(\"soap\", testEndpoint(hie.getSoapEndpoint()));\n        }\n        \n        testResults.put(\"endpoints\", endpointTests);\n        \n        return testResults;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> validateHieConfiguration(UUID hieId) {\n        log.info(\"Validating HIE configuration for ID: {}\", hieId);\n        HealthInformationExchange hie = findHieById(hieId);\n        \n        Map<String, Object> validation = new HashMap<>();\n        List<String> errors = new ArrayList<>();\n        List<String> warnings = new ArrayList<>();\n        \n        // Validate required fields\n        if (hie.getHieCode() == null || hie.getHieCode().trim().isEmpty()) {\n            errors.add(\"HIE code is required\");\n        }\n        \n        if (hie.getHieName() == null || hie.getHieName().trim().isEmpty()) {\n            errors.add(\"HIE name is required\");\n        }\n        \n        // Validate endpoints\n        if (hie.getFhirEndpoint() == null && hie.getHl7Endpoint() == null && \n            hie.getRestEndpoint() == null && hie.getSoapEndpoint() == null) {\n            warnings.add(\"No endpoints configured\");\n        }\n        \n        // Validate contact information\n        if (hie.getPrimaryContactEmail() == null || hie.getPrimaryContactEmail().trim().isEmpty()) {\n            warnings.add(\"Primary contact email not provided\");\n        }\n        \n        // Validate data sharing agreement\n        if (hie.getDataSharingAgreementId() == null) {\n            warnings.add(\"Data sharing agreement not configured\");\n        }\n        \n        validation.put(\"hieId\", hieId);\n        validation.put(\"valid\", errors.isEmpty());\n        validation.put(\"errors\", errors);\n        validation.put(\"warnings\", warnings);\n        validation.put(\"validatedAt\", LocalDateTime.now());\n        \n        return validation;\n    }\n\n    @Override\n    @Cacheable(value = \"hie-statistics\")\n    @Transactional(readOnly = true)\n    public Map<String, Object> getHieStatistics() {\n        log.debug(\"Generating HIE statistics\");\n        \n        Map<String, Object> statistics = new HashMap<>();\n        \n        // Basic counts\n        statistics.put(\"totalHies\", hieRepository.count());\n        statistics.put(\"activeHies\", hieRepository.countByStatus(HieStatus.ACTIVE));\n        statistics.put(\"inactiveHies\", hieRepository.countByStatus(HieStatus.INACTIVE));\n        statistics.put(\"suspendedHies\", hieRepository.countByStatus(HieStatus.SUSPENDED));\n        \n        // Status distribution\n        List<Object[]> statusStats = hieRepository.getHieStatisticsByStatus();\n        Map<String, Long> statusDistribution = new HashMap<>();\n        for (Object[] stat : statusStats) {\n            statusDistribution.put(stat[1].toString(), (Long) stat[0]);\n        }\n        statistics.put(\"statusDistribution\", statusDistribution);\n        \n        // Type distribution\n        List<Object[]> typeStats = hieRepository.getHieTypeDistribution();\n        Map<String, Long> typeDistribution = new HashMap<>();\n        for (Object[] stat : typeStats) {\n            typeDistribution.put(stat[1].toString(), (Long) stat[0]);\n        }\n        statistics.put(\"typeDistribution\", typeDistribution);\n        \n        statistics.put(\"generatedAt\", LocalDateTime.now());\n        \n        return statistics;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<HieStatus, Long> getHieStatusDistribution() {\n        log.debug(\"Getting HIE status distribution\");\n        \n        return Arrays.stream(HieStatus.values())\n            .collect(Collectors.toMap(\n                status -> status,\n                status -> hieRepository.countByStatus(status)\n            ));\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<HieType, Long> getHieTypeDistribution() {\n        log.debug(\"Getting HIE type distribution\");\n        \n        return Arrays.stream(HieType.values())\n            .collect(Collectors.toMap(\n                type -> type,\n                type -> hieRepository.countByHieType(type)\n            ));\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> getHiePerformanceSummary(UUID hieId, LocalDateTime startDate, LocalDateTime endDate) {\n        log.debug(\"Generating HIE performance summary for ID: {}\", hieId);\n        \n        HealthInformationExchange hie = findHieById(hieId);\n        \n        Map<String, Object> summary = new HashMap<>();\n        summary.put(\"hieId\", hieId);\n        summary.put(\"hieName\", hie.getHieName());\n        summary.put(\"startDate\", startDate);\n        summary.put(\"endDate\", endDate);\n        \n        // Get exchange statistics\n        long totalExchanges = dataExchangeRepository.countByHieIdAndExchangeStatus(hieId, null);\n        long successfulExchanges = dataExchangeRepository.countByHieIdAndExchangeStatus(hieId, \n            com.hospital.hms.hieintegration.entity.ExchangeStatus.COMPLETED);\n        long failedExchanges = dataExchangeRepository.countByHieIdAndExchangeStatus(hieId, \n            com.hospital.hms.hieintegration.entity.ExchangeStatus.FAILED);\n        \n        summary.put(\"totalExchanges\", totalExchanges);\n        summary.put(\"successfulExchanges\", successfulExchanges);\n        summary.put(\"failedExchanges\", failedExchanges);\n        summary.put(\"successRate\", totalExchanges > 0 ? (double) successfulExchanges / totalExchanges * 100 : 0);\n        \n        // Current metrics\n        summary.put(\"currentUptimePercentage\", hie.getUptimePercentage());\n        summary.put(\"currentAverageResponseTime\", hie.getAverageResponseTimeMs());\n        summary.put(\"currentSuccessRatePercentage\", hie.getSuccessRatePercentage());\n        \n        summary.put(\"generatedAt\", LocalDateTime.now());\n        \n        return summary;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> getHieUptimeReport(UUID hieId, LocalDateTime startDate, LocalDateTime endDate) {\n        log.debug(\"Generating HIE uptime report for ID: {}\", hieId);\n        \n        Double uptimePercentage = connectionRepository.getUptimePercentageForHie(hieId, startDate, endDate);\n        \n        Map<String, Object> report = new HashMap<>();\n        report.put(\"hieId\", hieId);\n        report.put(\"startDate\", startDate);\n        report.put(\"endDate\", endDate);\n        report.put(\"uptimePercentage\", uptimePercentage != null ? uptimePercentage : 0.0);\n        report.put(\"generatedAt\", LocalDateTime.now());\n        \n        return report;\n    }\n\n    @Override\n    public void refreshPerformanceMetrics(UUID hieId) {\n        log.info(\"Refreshing performance metrics for HIE ID: {}\", hieId);\n        \n        // Calculate metrics based on recent connection tests and exchanges\n        LocalDateTime last30Days = LocalDateTime.now().minus(30, ChronoUnit.DAYS);\n        \n        Double uptimePercentage = connectionRepository.getUptimePercentageForHie(hieId, last30Days, LocalDateTime.now());\n        \n        // Calculate other metrics...\n        // This is a simplified implementation\n        updatePerformanceMetrics(hieId, \n            uptimePercentage != null ? uptimePercentage : 0.0, \n            null, null);\n        \n        log.info(\"Successfully refreshed performance metrics for HIE ID: {}\", hieId);\n    }\n\n    @Override\n    public void refreshAllPerformanceMetrics() {\n        log.info(\"Refreshing performance metrics for all HIEs\");\n        \n        List<HealthInformationExchange> allHies = hieRepository.findByStatus(HieStatus.ACTIVE);\n        \n        for (HealthInformationExchange hie : allHies) {\n            try {\n                refreshPerformanceMetrics(hie.getId());\n            } catch (Exception e) {\n                log.error(\"Failed to refresh metrics for HIE ID: {}\", hie.getId(), e);\n            }\n        }\n        \n        log.info(\"Completed refreshing performance metrics for all HIEs\");\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void archiveHie(UUID hieId) {\n        log.info(\"Archiving HIE with ID: {}\", hieId);\n        updateHieStatus(hieId, HieStatus.INACTIVE);\n        log.info(\"Successfully archived HIE with ID: {}\", hieId);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void reactivateHie(UUID hieId) {\n        log.info(\"Reactivating HIE with ID: {}\", hieId);\n        updateHieStatus(hieId, HieStatus.ACTIVE);\n        log.info(\"Successfully reactivated HIE with ID: {}\", hieId);\n    }\n\n    @Override\n    @CacheEvict(value = {\"hie-cache\", \"hie-by-id\"}, key = \"#hieId\")\n    public void deleteHie(UUID hieId) {\n        log.info(\"Soft deleting HIE with ID: {}\", hieId);\n        \n        HealthInformationExchange hie = findHieById(hieId);\n        hie.setStatus(HieStatus.DECOMMISSIONED);\n        hie.setLastModifiedBy(getCurrentUser());\n        \n        hieRepository.save(hie);\n        log.info(\"Successfully soft deleted HIE with ID: {}\", hieId);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> exportHieConfiguration(UUID hieId) {\n        log.info(\"Exporting HIE configuration for ID: {}\", hieId);\n        \n        HealthInformationExchange hie = findHieById(hieId);\n        HieResponseDto response = hieMapper.toResponseDto(hie);\n        \n        Map<String, Object> export = new HashMap<>();\n        export.put(\"hie\", response);\n        export.put(\"exportedAt\", LocalDateTime.now());\n        export.put(\"exportedBy\", getCurrentUser());\n        \n        return export;\n    }\n\n    @Override\n    @CacheEvict(value = \"hie-cache\", allEntries = true)\n    public HieResponseDto importHieConfiguration(Map<String, Object> configuration) {\n        log.info(\"Importing HIE configuration\");\n        \n        // Extract HIE data from configuration\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> hieData = (Map<String, Object>) configuration.get(\"hie\");\n        \n        if (hieData == null) {\n            throw new IllegalArgumentException(\"HIE configuration data not found\");\n        }\n        \n        // Convert to create request (simplified implementation)\n        HieCreateRequestDto createRequest = new HieCreateRequestDto();\n        createRequest.setHieCode((String) hieData.get(\"hieCode\"));\n        createRequest.setHieName((String) hieData.get(\"hieName\"));\n        // ... set other fields\n        \n        return createHie(createRequest);\n    }\n\n    @Override\n    @CacheEvict(value = \"hie-cache\", allEntries = true)\n    public int bulkUpdateHieStatus(List<UUID> hieIds, HieStatus status) {\n        log.info(\"Bulk updating HIE status for {} HIEs to {}\", hieIds.size(), status);\n        \n        int updated = 0;\n        for (UUID hieId : hieIds) {\n            try {\n                updateHieStatus(hieId, status);\n                updated++;\n            } catch (Exception e) {\n                log.error(\"Failed to update status for HIE ID: {}\", hieId, e);\n            }\n        }\n        \n        log.info(\"Successfully updated status for {} out of {} HIEs\", updated, hieIds.size());\n        return updated;\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public String getHieHealthStatus(UUID hieId) {\n        log.debug(\"Getting health status for HIE ID: {}\", hieId);\n        \n        HealthInformationExchange hie = findHieById(hieId);\n        \n        if (hie.getStatus() != HieStatus.ACTIVE) {\n            return \"INACTIVE\";\n        }\n        \n        // Check performance metrics\n        if (hie.getUptimePercentage() != null && hie.getUptimePercentage() >= 99.0 &&\n            hie.getSuccessRatePercentage() != null && hie.getSuccessRatePercentage() >= 98.0 &&\n            hie.getAverageResponseTimeMs() != null && hie.getAverageResponseTimeMs() <= 2000) {\n            return \"HEALTHY\";\n        }\n        \n        if (hie.getUptimePercentage() != null && hie.getUptimePercentage() >= 95.0 &&\n            hie.getSuccessRatePercentage() != null && hie.getSuccessRatePercentage() >= 90.0) {\n            return \"DEGRADED\";\n        }\n        \n        return \"CRITICAL\";\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public boolean isHieNameAvailable(String hieName) {\n        return !hieRepository.existsByHieNameIgnoreCase(hieName);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public boolean isHieCodeAvailable(String hieCode) {\n        return !hieRepository.existsByHieCode(hieCode);\n    }\n\n    @Override\n    @Transactional(readOnly = true)\n    public Map<String, Object> generateConnectivityReport(LocalDateTime startDate, LocalDateTime endDate) {\n        log.info(\"Generating connectivity report from {} to {}\", startDate, endDate);\n        \n        Map<String, Object> report = new HashMap<>();\n        report.put(\"startDate\", startDate);\n        report.put(\"endDate\", endDate);\n        report.put(\"generatedAt\", LocalDateTime.now());\n        \n        // Get all active HIEs\n        List<HealthInformationExchange> activeHies = hieRepository.findByStatus(HieStatus.ACTIVE);\n        \n        List<Map<String, Object>> hieReports = new ArrayList<>();\n        for (HealthInformationExchange hie : activeHies) {\n            Map<String, Object> hieReport = new HashMap<>();\n            hieReport.put(\"hieId\", hie.getId());\n            hieReport.put(\"hieName\", hie.getHieName());\n            hieReport.put(\"uptimePercentage\", hie.getUptimePercentage());\n            hieReport.put(\"averageResponseTime\", hie.getAverageResponseTimeMs());\n            hieReport.put(\"successRate\", hie.getSuccessRatePercentage());\n            hieReport.put(\"healthStatus\", getHieHealthStatus(hie.getId()));\n            \n            hieReports.add(hieReport);\n        }\n        \n        report.put(\"hieReports\", hieReports);\n        report.put(\"totalHies\", activeHies.size());\n        \n        return report;\n    }\n\n    @Override\n    public void scheduleConnectivityTests() {\n        log.info(\"Scheduling connectivity tests for all HIEs\");\n        \n        List<HealthInformationExchange> hiesDueForTest = getHiesDueForConnectionTest().stream()\n            .map(dto -> findHieById(dto.getId()))\n            .collect(Collectors.toList());\n        \n        for (HealthInformationExchange hie : hiesDueForTest) {\n            try {\n                // Schedule test (this would typically be done via message queue)\n                log.info(\"Scheduling connectivity test for HIE: {}\", hie.getHieName());\n                \n                // For now, just run the test synchronously\n                Map<String, Object> testResults = testHieConnectivity(hie.getId());\n                processConnectivityTestResults(hie.getId(), testResults);\n                \n            } catch (Exception e) {\n                log.error(\"Failed to schedule connectivity test for HIE ID: {}\", hie.getId(), e);\n            }\n        }\n        \n        log.info(\"Completed scheduling connectivity tests\");\n    }\n\n    @Override\n    public void processConnectivityTestResults(UUID hieId, Map<String, Object> testResults) {\n        log.info(\"Processing connectivity test results for HIE ID: {}\", hieId);\n        \n        try {\n            // Extract test results and update HIE status\n            @SuppressWarnings(\"unchecked\")\n            Map<String, Object> connectivity = (Map<String, Object>) testResults.get(\"connectivity\");\n            \n            if (connectivity != null) {\n                Boolean success = (Boolean) connectivity.get(\"success\");\n                \n                if (Boolean.TRUE.equals(success)) {\n                    recordSuccessfulConnection(hieId);\n                } else {\n                    recordFailedConnection(hieId);\n                }\n            }\n            \n            log.info(\"Successfully processed connectivity test results for HIE ID: {}\", hieId);\n            \n        } catch (Exception e) {\n            log.error(\"Failed to process connectivity test results for HIE ID: {}\", hieId, e);\n        }\n    }\n\n    // Private helper methods\n\n    private HealthInformationExchange findHieById(UUID hieId) {\n        return hieRepository.findById(hieId)\n            .orElseThrow(() -> new NoSuchElementException(\"HIE not found with ID: \" + hieId));\n    }\n\n    private void enrichHieResponse(HieResponseDto response, HealthInformationExchange hie) {\n        // Add computed fields and statistics\n        response.setHealthStatus(getHieHealthStatus(hie.getId()));\n        response.setIsOperational(hie.getStatus() == HieStatus.ACTIVE);\n        \n        // Add statistics\n        long totalExchanges = dataExchangeRepository.countByHieId(hie.getId());\n        response.setTotalExchanges(totalExchanges);\n        \n        // Add days since last success/failure\n        if (hie.getLastSuccessfulConnection() != null) {\n            response.setDaysSinceLastSuccess(\n                (int) ChronoUnit.DAYS.between(hie.getLastSuccessfulConnection(), LocalDateTime.now()));\n        }\n        \n        if (hie.getLastFailedConnection() != null) {\n            response.setDaysSinceLastFailure(\n                (int) ChronoUnit.DAYS.between(hie.getLastFailedConnection(), LocalDateTime.now()));\n        }\n        \n        // Mask sensitive data\n        maskSensitiveData(response);\n    }\n\n    private void enrichHieResponseBasic(HieResponseDto response, HealthInformationExchange hie) {\n        response.setHealthStatus(getHieHealthStatus(hie.getId()));\n        response.setIsOperational(hie.getStatus() == HieStatus.ACTIVE);\n        maskSensitiveData(response);\n    }\n\n    private void maskSensitiveData(HieResponseDto response) {\n        // Mask client secret\n        response.setHasClientSecret(response.getClientId() != null && !response.getClientId().isEmpty());\n        \n        // Mask client ID (show only first and last 2 characters)\n        if (response.getClientId() != null && response.getClientId().length() > 4) {\n            String clientId = response.getClientId();\n            response.setClientId(clientId.substring(0, 2) + \"****\" + \n                               clientId.substring(clientId.length() - 2));\n        }\n        \n        // Mask certificate thumbprint\n        if (response.getCertificateThumbprint() != null && response.getCertificateThumbprint().length() > 8) {\n            String thumbprint = response.getCertificateThumbprint();\n            response.setCertificateThumbprint(thumbprint.substring(0, 4) + \"****\" + \n                                            thumbprint.substring(thumbprint.length() - 4));\n        }\n    }\n\n    private Map<String, Object> testBasicConnectivity(HealthInformationExchange hie) {\n        Map<String, Object> result = new HashMap<>();\n        \n        try {\n            // Simplified connectivity test\n            // In a real implementation, this would make actual HTTP requests\n            result.put(\"success\", true);\n            result.put(\"responseTime\", 1000L);\n            result.put(\"statusCode\", 200);\n            result.put(\"message\", \"Connection successful\");\n        } catch (Exception e) {\n            result.put(\"success\", false);\n            result.put(\"error\", e.getMessage());\n        }\n        \n        return result;\n    }\n\n    private Map<String, Object> testEndpoint(String endpointUrl) {\n        Map<String, Object> result = new HashMap<>();\n        \n        try {\n            // Simplified endpoint test\n            // In a real implementation, this would make actual HTTP requests\n            result.put(\"url\", endpointUrl);\n            result.put(\"success\", true);\n            result.put(\"responseTime\", 800L);\n            result.put(\"statusCode\", 200);\n        } catch (Exception e) {\n            result.put(\"url\", endpointUrl);\n            result.put(\"success\", false);\n            result.put(\"error\", e.getMessage());\n        }\n        \n        return result;\n    }\n\n    private String getCurrentUser() {\n        // In a real implementation, this would get the current user from security context\n        return \"system\";\n    }\n}\n"
