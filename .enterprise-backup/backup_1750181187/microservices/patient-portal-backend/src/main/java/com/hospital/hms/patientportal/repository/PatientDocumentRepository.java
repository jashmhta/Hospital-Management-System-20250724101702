package com.hospital.hms.patientportal.repository;

import com.hospital.hms.patientportal.entity.PatientDocumentEntity;
import com.hospital.hms.patientportal.entity.PatientEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Patient Document Repository
 * 
 * Advanced repository with custom queries for document management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface PatientDocumentRepository extends JpaRepository<PatientDocumentEntity, String> {

    /**
     * Find documents by patient
     */
    List<PatientDocumentEntity> findByPatientOrderByCreatedAtDesc(PatientEntity patient);

    /**
     * Find documents by patient and status
     */\n    List<PatientDocumentEntity> findByPatientAndStatusOrderByCreatedAtDesc(\n            PatientEntity patient, PatientDocumentEntity.DocumentStatus status);\n\n    /**\n     * Find documents by patient and type\n     */\n    List<PatientDocumentEntity> findByPatientAndDocumentTypeOrderByCreatedAtDesc(\n            PatientEntity patient, PatientDocumentEntity.DocumentType documentType);\n\n    /**\n     * Find documents by file hash\n     */\n    Optional<PatientDocumentEntity> findByFileHash(String fileHash);\n\n    /**\n     * Find documents by provider\n     */\n    List<PatientDocumentEntity> findByProviderIdOrderByCreatedAtDesc(String providerId);\n\n    /**\n     * Find sensitive documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE d.isSensitive = true \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findSensitiveDocuments();\n\n    /**\n     * Find encrypted documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE d.isEncrypted = true \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findEncryptedDocuments();\n\n    /**\n     * Find documents requiring encryption\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.requiresEncryption = true AND d.isEncrypted = false \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findDocumentsRequiringEncryption();\n\n    /**\n     * Find expired documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.expirationDate IS NOT NULL AND d.expirationDate < CURRENT_TIMESTAMP \" +\n           \"ORDER BY d.expirationDate ASC\")\n    List<PatientDocumentEntity> findExpiredDocuments();\n\n    /**\n     * Find documents expiring soon\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.expirationDate IS NOT NULL AND \" +\n           \"d.expirationDate BETWEEN CURRENT_TIMESTAMP AND :threshold \" +\n           \"ORDER BY d.expirationDate ASC\")\n    List<PatientDocumentEntity> findDocumentsExpiringSoon(@Param(\"threshold\") LocalDateTime threshold);\n\n    /**\n     * Find unverified documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE d.isVerified = false \" +\n           \"ORDER BY d.createdAt ASC\")\n    List<PatientDocumentEntity> findUnverifiedDocuments();\n\n    /**\n     * Find documents by category\n     */\n    List<PatientDocumentEntity> findByDocumentCategoryIgnoreCaseOrderByCreatedAtDesc(String documentCategory);\n\n    /**\n     * Find documents by appointment\n     */\n    List<PatientDocumentEntity> findByAppointmentIdOrderByCreatedAtDesc(String appointmentId);\n\n    /**\n     * Find documents by visit\n     */\n    List<PatientDocumentEntity> findByVisitIdOrderByCreatedAtDesc(String visitId);\n\n    /**\n     * Find documents by date range\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.documentDate BETWEEN :startDate AND :endDate \" +\n           \"ORDER BY d.documentDate DESC\")\n    List<PatientDocumentEntity> findByDocumentDateBetween(\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate);\n\n    /**\n     * Find documents by upload date range\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.createdAt BETWEEN :startDate AND :endDate \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findByUploadDateBetween(\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate);\n\n    /**\n     * Find documents by file type\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"LOWER(d.mimeType) LIKE LOWER(CONCAT('%', :fileType, '%')) \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findByFileType(@Param(\"fileType\") String fileType);\n\n    /**\n     * Find large documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE d.fileSize > :sizeThreshold \" +\n           \"ORDER BY d.fileSize DESC\")\n    List<PatientDocumentEntity> findLargeDocuments(@Param(\"sizeThreshold\") Long sizeThreshold);\n\n    /**\n     * Find frequently accessed documents\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE d.accessCount > :accessThreshold \" +\n           \"ORDER BY d.accessCount DESC\")\n    List<PatientDocumentEntity> findFrequentlyAccessedDocuments(@Param(\"accessThreshold\") Integer accessThreshold);\n\n    /**\n     * Find documents with specific tags\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"d.tags IS NOT NULL AND LOWER(d.tags) LIKE LOWER(CONCAT('%', :tag, '%')) \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> findByTag(@Param(\"tag\") String tag);\n\n    /**\n     * Search documents by name or description\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"LOWER(d.documentName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR \" +\n           \"LOWER(d.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')) \" +\n           \"ORDER BY d.createdAt DESC\")\n    List<PatientDocumentEntity> searchDocuments(@Param(\"searchTerm\") String searchTerm);\n\n    /**\n     * Advanced document search\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"(:patientId IS NULL OR d.patient.patientId = :patientId) AND \" +\n           \"(:documentType IS NULL OR d.documentType = :documentType) AND \" +\n           \"(:status IS NULL OR d.status = :status) AND \" +\n           \"(:category IS NULL OR LOWER(d.documentCategory) LIKE LOWER(CONCAT('%', :category, '%'))) AND \" +\n           \"(:providerId IS NULL OR d.providerId = :providerId) AND \" +\n           \"(:department IS NULL OR LOWER(d.department) LIKE LOWER(CONCAT('%', :department, '%'))) AND \" +\n           \"(:startDate IS NULL OR d.documentDate >= :startDate) AND \" +\n           \"(:endDate IS NULL OR d.documentDate <= :endDate) AND \" +\n           \"(:searchTerm IS NULL OR LOWER(d.documentName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR \" +\n           \"LOWER(d.description) LIKE LOWER(CONCAT('%', :searchTerm, '%')))\")\n    Page<PatientDocumentEntity> searchDocumentsAdvanced(\n            @Param(\"patientId\") String patientId,\n            @Param(\"documentType\") PatientDocumentEntity.DocumentType documentType,\n            @Param(\"status\") PatientDocumentEntity.DocumentStatus status,\n            @Param(\"category\") String category,\n            @Param(\"providerId\") String providerId,\n            @Param(\"department\") String department,\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate,\n            @Param(\"searchTerm\") String searchTerm,\n            Pageable pageable);\n\n    /**\n     * Count documents by type\n     */\n    @Query(\"SELECT d.documentType, COUNT(d) FROM PatientDocumentEntity d GROUP BY d.documentType\")\n    List<Object[]> countDocumentsByType();\n\n    /**\n     * Count documents by status\n     */\n    @Query(\"SELECT d.status, COUNT(d) FROM PatientDocumentEntity d GROUP BY d.status\")\n    List<Object[]> countDocumentsByStatus();\n\n    /**\n     * Count documents by category\n     */\n    @Query(\"SELECT d.documentCategory, COUNT(d) FROM PatientDocumentEntity d \" +\n           \"WHERE d.documentCategory IS NOT NULL GROUP BY d.documentCategory\")\n    List<Object[]> countDocumentsByCategory();\n\n    /**\n     * Get document statistics\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(d) as totalDocuments, \" +\n           \"COUNT(CASE WHEN d.status = 'ACTIVE' THEN 1 END) as activeDocuments, \" +\n           \"COUNT(CASE WHEN d.isSensitive = true THEN 1 END) as sensitiveDocuments, \" +\n           \"COUNT(CASE WHEN d.isEncrypted = true THEN 1 END) as encryptedDocuments, \" +\n           \"COUNT(CASE WHEN d.isVerified = true THEN 1 END) as verifiedDocuments, \" +\n           \"SUM(d.fileSize) as totalStorageUsed, \" +\n           \"AVG(d.fileSize) as averageFileSize \" +\n           \"FROM PatientDocumentEntity d\")\n    Object[] getDocumentStatistics();\n\n    /**\n     * Get storage usage by patient\n     */\n    @Query(\"SELECT d.patient.patientId, SUM(d.fileSize) FROM PatientDocumentEntity d \" +\n           \"GROUP BY d.patient.patientId ORDER BY SUM(d.fileSize) DESC\")\n    List<Object[]> getStorageUsageByPatient();\n\n    /**\n     * Find documents needing cleanup\n     */\n    @Query(\"SELECT d FROM PatientDocumentEntity d WHERE \" +\n           \"(d.status = 'DELETED' AND d.updatedAt < :deletionThreshold) OR \" +\n           \"(d.retentionPeriodDays IS NOT NULL AND \" +\n           \"d.createdAt < DATEADD(DAY, -d.retentionPeriodDays, CURRENT_TIMESTAMP))\")\n    List<PatientDocumentEntity> findDocumentsForCleanup(@Param(\"deletionThreshold\") LocalDateTime deletionThreshold);\n\n    /**\n     * Update access count\n     */\n    @Modifying\n    @Query(\"UPDATE PatientDocumentEntity d SET d.accessCount = d.accessCount + 1, \" +\n           \"d.lastAccessed = CURRENT_TIMESTAMP WHERE d.documentId = :documentId\")\n    int incrementAccessCount(@Param(\"documentId\") String documentId);\n\n    /**\n     * Update download count\n     */\n    @Modifying\n    @Query(\"UPDATE PatientDocumentEntity d SET d.downloadCount = d.downloadCount + 1, \" +\n           \"d.lastDownloaded = CURRENT_TIMESTAMP WHERE d.documentId = :documentId\")\n    int incrementDownloadCount(@Param(\"documentId\") String documentId);\n\n    /**\n     * Update verification status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientDocumentEntity d SET d.isVerified = :verified, \" +\n           \"d.verifiedBy = :verifiedBy, d.verifiedAt = CURRENT_TIMESTAMP, \" +\n           \"d.verificationNotes = :notes WHERE d.documentId = :documentId\")\n    int updateVerificationStatus(\n            @Param(\"documentId\") String documentId,\n            @Param(\"verified\") Boolean verified,\n            @Param(\"verifiedBy\") String verifiedBy,\n            @Param(\"notes\") String notes);\n\n    /**\n     * Update document status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientDocumentEntity d SET d.status = :status, \" +\n           \"d.updatedAt = CURRENT_TIMESTAMP WHERE d.documentId = :documentId\")\n    int updateDocumentStatus(\n            @Param(\"documentId\") String documentId,\n            @Param(\"status\") PatientDocumentEntity.DocumentStatus status);\n\n    /**\n     * Update encryption status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientDocumentEntity d SET d.isEncrypted = :encrypted, \" +\n           \"d.encryptionKeyId = :keyId WHERE d.documentId = :documentId\")\n    int updateEncryptionStatus(\n            @Param(\"documentId\") String documentId,\n            @Param(\"encrypted\") Boolean encrypted,\n            @Param(\"keyId\") String keyId);\n\n    /**\n     * Count patient's documents\n     */\n    long countByPatient(PatientEntity patient);\n\n    /**\n     * Count patient's documents by type\n     */\n    long countByPatientAndDocumentType(PatientEntity patient, PatientDocumentEntity.DocumentType documentType);\n\n    /**\n     * Count patient's active documents\n     */\n    long countByPatientAndStatus(PatientEntity patient, PatientDocumentEntity.DocumentStatus status);\n\n    /**\n     * Get total storage used by patient\n     */\n    @Query(\"SELECT COALESCE(SUM(d.fileSize), 0) FROM PatientDocumentEntity d WHERE d.patient = :patient\")\n    Long getTotalStorageByPatient(@Param(\"patient\") PatientEntity patient);\n\n    /**\n     * Check if file hash exists\n     */\n    boolean existsByFileHash(String fileHash);\n\n    /**\n     * Find duplicate documents\n     */\n    @Query(\"SELECT d.fileHash, COUNT(d) FROM PatientDocumentEntity d \" +\n           \"WHERE d.fileHash IS NOT NULL GROUP BY d.fileHash HAVING COUNT(d) > 1\")\n    List<Object[]> findDuplicateDocuments();\n}