package com.hospital.hms.patientportal.repository;

import com.hospital.hms.patientportal.entity.PatientEntity;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Patient Repository
 * 
 * Advanced repository with custom queries for patient management.
 * 
 * @author HMS Enterprise Team
 * @version 1.0.0
 */
@Repository
public interface PatientRepository extends JpaRepository<PatientEntity, String> {

    /**
     * Find patient by username
     */
    Optional<PatientEntity> findByUsernameIgnoreCase(String username);

    /**
     * Find patient by email
     */
    Optional<PatientEntity> findByEmailIgnoreCase(String email);

    /**
     * Find patient by medical record number
     */
    Optional<PatientEntity> findByMedicalRecordNumber(String medicalRecordNumber);

    /**
     * Find patient by phone number
     */
    Optional<PatientEntity> findByPhoneNumber(String phoneNumber);

    /**
     * Find patients by status
     */
    List<PatientEntity> findByStatus(PatientEntity.PatientStatus status);

    /**
     * Find patients by date range
     */
    @Query(\"SELECT p FROM PatientEntity p WHERE p.createdAt BETWEEN :startDate AND :endDate\")\n    List<PatientEntity> findPatientsCreatedBetween(\n            @Param(\"startDate\") LocalDateTime startDate,\n            @Param(\"endDate\") LocalDateTime endDate);\n\n    /**\n     * Find patients by birth date range\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE p.dateOfBirth BETWEEN :startDate AND :endDate\")\n    List<PatientEntity> findPatientsByBirthDateBetween(\n            @Param(\"startDate\") LocalDate startDate,\n            @Param(\"endDate\") LocalDate endDate);\n\n    /**\n     * Search patients by name\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"LOWER(CONCAT(p.firstName, ' ', COALESCE(p.middleName, ''), ' ', p.lastName)) LIKE LOWER(CONCAT('%', :name, '%'))\")\n    List<PatientEntity> searchByName(@Param(\"name\") String name);\n\n    /**\n     * Find patients by gender\n     */\n    List<PatientEntity> findByGender(PatientEntity.Gender gender);\n\n    /**\n     * Find patients by city\n     */\n    List<PatientEntity> findByCityIgnoreCase(String city);\n\n    /**\n     * Find patients by state\n     */\n    List<PatientEntity> findByStateIgnoreCase(String state);\n\n    /**\n     * Find patients by blood group\n     */\n    List<PatientEntity> findByBloodGroupIgnoreCase(String bloodGroup);\n\n    /**\n     * Find patients who have MFA enabled\n     */\n    List<PatientEntity> findByMfaEnabledTrue();\n\n    /**\n     * Find patients with unverified email\n     */\n    List<PatientEntity> findByEmailVerifiedFalse();\n\n    /**\n     * Find patients with unverified phone\n     */\n    List<PatientEntity> findByPhoneVerifiedFalse();\n\n    /**\n     * Find patients who haven't accepted terms\n     */\n    List<PatientEntity> findByTermsAcceptedFalse();\n\n    /**\n     * Find patients by age range\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN :minAge AND :maxAge\")\n    List<PatientEntity> findPatientsByAgeRange(\n            @Param(\"minAge\") int minAge,\n            @Param(\"maxAge\") int maxAge);\n\n    /**\n     * Find recently active patients\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE p.lastLogin > :threshold\")\n    List<PatientEntity> findRecentlyActivePatients(@Param(\"threshold\") LocalDateTime threshold);\n\n    /**\n     * Find inactive patients\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"(p.lastLogin IS NULL OR p.lastLogin < :threshold) AND p.status = 'ACTIVE'\")\n    List<PatientEntity> findInactivePatients(@Param(\"threshold\") LocalDateTime threshold);\n\n    /**\n     * Advanced patient search with multiple criteria\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"(:firstName IS NULL OR LOWER(p.firstName) LIKE LOWER(CONCAT('%', :firstName, '%'))) AND \" +\n           \"(:lastName IS NULL OR LOWER(p.lastName) LIKE LOWER(CONCAT('%', :lastName, '%'))) AND \" +\n           \"(:email IS NULL OR LOWER(p.email) LIKE LOWER(CONCAT('%', :email, '%'))) AND \" +\n           \"(:phone IS NULL OR p.phoneNumber LIKE CONCAT('%', :phone, '%')) AND \" +\n           \"(:mrn IS NULL OR p.medicalRecordNumber = :mrn) AND \" +\n           \"(:gender IS NULL OR p.gender = :gender) AND \" +\n           \"(:status IS NULL OR p.status = :status) AND \" +\n           \"(:city IS NULL OR LOWER(p.city) LIKE LOWER(CONCAT('%', :city, '%'))) AND \" +\n           \"(:state IS NULL OR LOWER(p.state) LIKE LOWER(CONCAT('%', :state, '%')))\")\n    Page<PatientEntity> searchPatients(\n            @Param(\"firstName\") String firstName,\n            @Param(\"lastName\") String lastName,\n            @Param(\"email\") String email,\n            @Param(\"phone\") String phone,\n            @Param(\"mrn\") String mrn,\n            @Param(\"gender\") PatientEntity.Gender gender,\n            @Param(\"status\") PatientEntity.PatientStatus status,\n            @Param(\"city\") String city,\n            @Param(\"state\") String state,\n            Pageable pageable);\n\n    /**\n     * Count patients by status\n     */\n    @Query(\"SELECT p.status, COUNT(p) FROM PatientEntity p GROUP BY p.status\")\n    List<Object[]> countPatientsByStatus();\n\n    /**\n     * Count patients by gender\n     */\n    @Query(\"SELECT p.gender, COUNT(p) FROM PatientEntity p GROUP BY p.gender\")\n    List<Object[]> countPatientsByGender();\n\n    /**\n     * Count patients by age groups\n     */\n    @Query(\"SELECT \" +\n           \"CASE \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) < 18 THEN 'Under 18' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 18 AND 30 THEN '18-30' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 31 AND 50 THEN '31-50' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 51 AND 70 THEN '51-70' \" +\n           \"ELSE 'Over 70' END as ageGroup, \" +\n           \"COUNT(p) FROM PatientEntity p GROUP BY \" +\n           \"CASE \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) < 18 THEN 'Under 18' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 18 AND 30 THEN '18-30' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 31 AND 50 THEN '31-50' \" +\n           \"WHEN YEAR(CURRENT_DATE) - YEAR(p.dateOfBirth) BETWEEN 51 AND 70 THEN '51-70' \" +\n           \"ELSE 'Over 70' END\")\n    List<Object[]> countPatientsByAgeGroup();\n\n    /**\n     * Count patients by location\n     */\n    @Query(\"SELECT p.state, COUNT(p) FROM PatientEntity p WHERE p.state IS NOT NULL GROUP BY p.state\")\n    List<Object[]> countPatientsByState();\n\n    /**\n     * Find patients with birthdays today\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"MONTH(p.dateOfBirth) = MONTH(CURRENT_DATE) AND \" +\n           \"DAY(p.dateOfBirth) = DAY(CURRENT_DATE)\")\n    List<PatientEntity> findPatientsWithBirthdayToday();\n\n    /**\n     * Find patients with upcoming birthdays\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"(MONTH(p.dateOfBirth) = MONTH(CURRENT_DATE) AND DAY(p.dateOfBirth) > DAY(CURRENT_DATE)) OR \" +\n           \"(MONTH(p.dateOfBirth) = MONTH(CURRENT_DATE) + 1 AND DAY(p.dateOfBirth) <= :daysAhead)\")\n    List<PatientEntity> findPatientsWithUpcomingBirthdays(@Param(\"daysAhead\") int daysAhead);\n\n    /**\n     * Update last login time\n     */\n    @Modifying\n    @Query(\"UPDATE PatientEntity p SET p.lastLogin = :loginTime WHERE p.patientId = :patientId\")\n    int updateLastLogin(@Param(\"patientId\") String patientId, @Param(\"loginTime\") LocalDateTime loginTime);\n\n    /**\n     * Update email verification status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientEntity p SET p.emailVerified = :verified WHERE p.patientId = :patientId\")\n    int updateEmailVerificationStatus(@Param(\"patientId\") String patientId, @Param(\"verified\") Boolean verified);\n\n    /**\n     * Update phone verification status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientEntity p SET p.phoneVerified = :verified WHERE p.patientId = :patientId\")\n    int updatePhoneVerificationStatus(@Param(\"patientId\") String patientId, @Param(\"verified\") Boolean verified);\n\n    /**\n     * Update MFA settings\n     */\n    @Modifying\n    @Query(\"UPDATE PatientEntity p SET p.mfaEnabled = :enabled, p.mfaSecret = :secret WHERE p.patientId = :patientId\")\n    int updateMfaSettings(\n            @Param(\"patientId\") String patientId,\n            @Param(\"enabled\") Boolean enabled,\n            @Param(\"secret\") String secret);\n\n    /**\n     * Update patient status\n     */\n    @Modifying\n    @Query(\"UPDATE PatientEntity p SET p.status = :status, p.updatedAt = CURRENT_TIMESTAMP WHERE p.patientId = :patientId\")\n    int updatePatientStatus(@Param(\"patientId\") String patientId, @Param(\"status\") PatientEntity.PatientStatus status);\n\n    /**\n     * Find duplicate patients by email\n     */\n    @Query(\"SELECT p.email, COUNT(p) FROM PatientEntity p GROUP BY p.email HAVING COUNT(p) > 1\")\n    List<Object[]> findDuplicateEmails();\n\n    /**\n     * Find duplicate patients by phone\n     */\n    @Query(\"SELECT p.phoneNumber, COUNT(p) FROM PatientEntity p WHERE p.phoneNumber IS NOT NULL \" +\n           \"GROUP BY p.phoneNumber HAVING COUNT(p) > 1\")\n    List<Object[]> findDuplicatePhoneNumbers();\n\n    /**\n     * Get patient statistics\n     */\n    @Query(\"SELECT \" +\n           \"COUNT(p) as totalPatients, \" +\n           \"COUNT(CASE WHEN p.status = 'ACTIVE' THEN 1 END) as activePatients, \" +\n           \"COUNT(CASE WHEN p.mfaEnabled = true THEN 1 END) as mfaEnabledPatients, \" +\n           \"COUNT(CASE WHEN p.emailVerified = true THEN 1 END) as emailVerifiedPatients, \" +\n           \"COUNT(CASE WHEN p.lastLogin > :recentThreshold THEN 1 END) as recentlyActivePatients \" +\n           \"FROM PatientEntity p\")\n    Object[] getPatientStatistics(@Param(\"recentThreshold\") LocalDateTime recentThreshold);\n\n    /**\n     * Find patients requiring attention\n     */\n    @Query(\"SELECT p FROM PatientEntity p WHERE \" +\n           \"p.emailVerified = false OR \" +\n           \"p.phoneVerified = false OR \" +\n           \"p.termsAccepted = false OR \" +\n           \"(p.lastLogin IS NULL AND p.createdAt < :newUserThreshold)\")\n    Page<PatientEntity> findPatientsRequiringAttention(\n            @Param(\"newUserThreshold\") LocalDateTime newUserThreshold,\n            Pageable pageable);\n\n    /**\n     * Check if username exists\n     */\n    boolean existsByUsernameIgnoreCase(String username);\n\n    /**\n     * Check if email exists\n     */\n    boolean existsByEmailIgnoreCase(String email);\n\n    /**\n     * Check if medical record number exists\n     */\n    boolean existsByMedicalRecordNumber(String medicalRecordNumber);\n\n    /**\n     * Check if phone number exists\n     */\n    boolean existsByPhoneNumber(String phoneNumber);\n}