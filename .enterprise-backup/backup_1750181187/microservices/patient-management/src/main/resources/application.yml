server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /
  shutdown: graceful
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain

spring:
  application:
    name: patient-management-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:h2:mem:patientdb}
    username: ${SPRING_DATASOURCE_USERNAME:sa}
    password: ${SPRING_DATASOURCE_PASSWORD:}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER:org.h2.Driver}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000

  jpa:
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:update}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
    open-in-view: false

  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    enabled: ${LIQUIBASE_ENABLED:true}

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    database: 0
    timeout: 2000ms
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false

  cloud:
    config:
      enabled: ${CONFIG_SERVER_ENABLED:false}
      uri: ${CONFIG_SERVER_URI:http://localhost:8888}
      fail-fast: false
      retry:
        initial-interval: 1000
        max-attempts: 6
        max-interval: 2000

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/auth/realms/hms}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/auth/realms/hms/protocol/openid_connect/certs}

  sleuth:
    zipkin:
      base-url: ${ZIPKIN_BASE_URL:http://localhost:9411}
    sampler:
      probability: ${SLEUTH_SAMPLE_RATE:0.1}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
    healthcheck:
      enabled: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: "@project.version@"
      description: "Patient Management Microservice"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,env,configprops,mappings
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}

info:
  app:
    name: "@project.name@"
    description: "@project.description@"
    version: "@project.version@"
    encoding: "@project.build.sourceEncoding@"
    java:
      version: "@java.version@"

logging:
  level:
    com.hospital.hms: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.springframework.cloud.netflix.eureka: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/patient-management-service.log
    max-size: 100MB
    max-history: 30

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
    config-url: /v3/api-docs/swagger-config
  show-actuator: true
  group-configs:
    - group: patient-management
      paths-to-match: /api/v1/patients/**
      packages-to-scan: com.hospital.hms.patientmanagement.controller

# Application Specific Configuration
app:
  patient:
    mrn:
      prefix: "HMS"
      length: 10
      format: "numeric" # numeric, alphanumeric
    validation:
      name:
        min-length: 2
        max-length: 100
      phone:
        format: "international" # us, international
        required: false
      email:
        required: false
        validation: strict
    search:
      max-results: 1000
      default-page-size: 20
    cache:
      enabled: true
      ttl: 600 # seconds
    fhir:
      enabled: true
      base-url: ${FHIR_BASE_URL:http://localhost:8080/fhir}
      version: "R4"
    integration:
      external-systems:
        enabled: false
        timeout: 30000
        retry-attempts: 3

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:defaultSecretKeyForDevelopmentOnlyChangeInProduction}
    expiration: 86400 # 24 hours in seconds
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
  rate-limit:
    enabled: true
    requests-per-minute: 100
    burst-capacity: 200

# Database specific configurations for different profiles
---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:postgres}:5432/${POSTGRES_DB:patient_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
---
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true
      path: /h2-console
  liquibase:
    enabled: false
---
spring:
  config:
    activate:
      on-profile: production
  datasource:
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  cache:
    redis:
      time-to-live: 3600000 # 1 hour
  sleuth:
    sampler:
      probability: 0.01 # 1% sampling in production

logging:
  level:
    com.hospital.hms: INFO
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

management:
  endpoint:
    health:
      show-details: when-authorized
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
