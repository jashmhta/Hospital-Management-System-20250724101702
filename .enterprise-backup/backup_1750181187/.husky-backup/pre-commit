#!/usr/bin/env sh
# HMS Enterprise Pre-commit Hook
# Zero-tolerance security and quality enforcement

. "$(dirname -- "$0")/_/husky.sh"

echo "🏥 HMS Enterprise Pre-commit Validation Starting..."
echo "=============================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check command success
check_success() {
    if [ $? -eq 0 ]; then
        print_status $GREEN "✅ $1 passed"
        return 0
    else
        print_status $RED "❌ $1 failed"
        return 1
    fi
}

# Exit on first failure
set -e

# 1. STAGE: Code Formatting
print_status $BLUE "🎨 STAGE 1: Code Formatting Validation"
print_status $YELLOW "Running Prettier format check..."
npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}" --ignore-path .prettierignore
check_success "Prettier format validation"

# 2. STAGE: TypeScript Type Checking
print_status $BLUE "🔍 STAGE 2: TypeScript Type Checking"
print_status $YELLOW "Running TypeScript strict type checking..."
npx tsc --noEmit --strict
check_success "TypeScript type checking"

# 3. STAGE: Linting
print_status $BLUE "📝 STAGE 3: ESLint Code Quality"
print_status $YELLOW "Running ESLint with enterprise-grade rules..."
npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
check_success "ESLint validation"

# 4. STAGE: Security Scanning
print_status $BLUE "🔒 STAGE 4: Security Validation"

# Audit npm dependencies
print_status $YELLOW "Checking for high-severity vulnerabilities..."
npm audit --audit-level=high
check_success "NPM security audit"

# Check for secrets
print_status $YELLOW "Scanning for exposed secrets..."
if command -v gitleaks >/dev/null 2>&1; then
    gitleaks detect --staged --verbose --report-format json --report-path gitleaks-report.json
    check_success "Secret detection"
else
    print_status $YELLOW "⚠️  Gitleaks not installed, skipping secret detection"
fi

# License compliance check
print_status $YELLOW "Validating license compliance..."
npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense" --excludePrivatePackages
check_success "License compliance"

# 5. STAGE: Healthcare Compliance
print_status $BLUE "🏥 STAGE 5: Healthcare Compliance Validation"

# Check for PHI data patterns
print_status $YELLOW "Scanning for potential PHI data exposure..."
if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
    -E "(ssn|social.*security|patient.*id|medical.*record|phi|protected.*health)" src/ microservices/ || true; then
    print_status $YELLOW "⚠️  Potential PHI patterns detected - review required"
else
    print_status $GREEN "✅ No obvious PHI patterns detected"
fi

# Check for hardcoded credentials
print_status $YELLOW "Checking for hardcoded credentials..."
if grep -r --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
    -E "(password|secret|key|token|api_key).*=.*['\"][^'\"]{8,}" src/ microservices/ || true; then
    print_status $RED "❌ Potential hardcoded credentials detected"
    exit 1
else
    print_status $GREEN "✅ No hardcoded credentials detected"
fi

# 6. STAGE: Unit Tests (for critical files)
print_status $BLUE "🧪 STAGE 6: Critical Unit Tests"
print_status $YELLOW "Running unit tests for changed files..."

# Get list of changed TypeScript/JavaScript files
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -n "$CHANGED_FILES" ]; then
    # Check if any test files exist for changed files
    TEST_FILES_EXIST=false
    for file in $CHANGED_FILES; do
        # Check for corresponding test files
        base_name=$(basename "$file" | sed 's/\.[^.]*$//')
        dir_name=$(dirname "$file")
        
        # Look for test files in various patterns
        if ls "${dir_name}"/${base_name}.{test,spec}.{ts,tsx,js,jsx} 2>/dev/null || \
           ls "${dir_name}/__tests__"/${base_name}.{test,spec}.{ts,tsx,js,jsx} 2>/dev/null || \
           ls "${dir_name}/../__tests__"/${base_name}.{test,spec}.{ts,tsx,js,jsx} 2>/dev/null; then
            TEST_FILES_EXIST=true
            break
        fi
    done
    
    if [ "$TEST_FILES_EXIST" = true ]; then
        npm run test:unit -- --watchAll=false --passWithNoTests --bail
        check_success "Unit tests"
    else
        print_status $YELLOW "⚠️  No test files found for changed files"
    fi
else
    print_status $YELLOW "ℹ️  No TypeScript/JavaScript files changed"
fi

# 7. STAGE: Commit Message Validation
print_status $BLUE "📋 STAGE 7: Commit Message Validation"
print_status $YELLOW "Validating commit message format..."

# Check if commitlint is available
if command -v npx commitlint >/dev/null 2>&1; then
    npx commitlint --edit "$1"
    check_success "Commit message format"
else
    print_status $YELLOW "⚠️  Commitlint not available, skipping commit message validation"
fi

# 8. STAGE: Build Validation
print_status $BLUE "🏗️  STAGE 8: Build Validation"
print_status $YELLOW "Validating that the project builds successfully..."
npm run build
check_success "Build validation"

# Success message
print_status $GREEN "✅ All pre-commit validations passed!"
print_status $GREEN "🚀 Ready for commit and CI/CD pipeline"
echo "=============================================="
echo "🏥 HMS Enterprise Pre-commit Validation Complete"
