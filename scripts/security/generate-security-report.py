#!/usr/bin/env python3\n\"\"\"\nEnterprise Security Report Generator\nHospital Management System\n\nGenerates comprehensive security reports by analyzing various security scan results\nand producing actionable insights for healthcare compliance.\n\nFeatures:\n- SAST/DAST vulnerability analysis\n- Dependency vulnerability assessment\n- Infrastructure security evaluation\n- HIPAA/SOX compliance mapping\n- Executive summary generation\n- Remediation prioritization\n\"\"\"\n\nimport json\nimport os\nimport sys\nimport logging\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom dataclasses import dataclass, asdict\nfrom enum import Enum\nimport argparse\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom jinja2 import Template\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('security-report-generation.log'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nclass SeverityLevel(Enum):\n    \"\"\"Security vulnerability severity levels\"\"\"\n    CRITICAL = \"critical\"\n    HIGH = \"high\"\n    MEDIUM = \"medium\"\n    LOW = \"low\"\n    INFO = \"info\"\n\nclass ComplianceFramework(Enum):\n    \"\"\"Healthcare compliance frameworks\"\"\"\n    HIPAA = \"hipaa\"\n    SOX = \"sox\"\n    GDPR = \"gdpr\"\n    HITECH = \"hitech\"\n    PCI_DSS = \"pci_dss\"\n    SOC2 = \"soc2\"\n\n@dataclass\nclass SecurityVulnerability:\n    \"\"\"Represents a security vulnerability\"\"\"\n    id: str\n    title: str\n    description: str\n    severity: SeverityLevel\n    category: str\n    file_path: Optional[str]\n    line_number: Optional[int]\n    cwe_id: Optional[str]\n    cvss_score: Optional[float]\n    remediation: str\n    compliance_impact: List[ComplianceFramework]\n    false_positive: bool = False\n    remediation_effort: str = \"medium\"\n    business_impact: str = \"medium\"\n\n@dataclass\nclass SecurityReport:\n    \"\"\"Complete security assessment report\"\"\"\n    timestamp: datetime\n    scan_summary: Dict[str, Any]\n    vulnerabilities: List[SecurityVulnerability]\n    compliance_status: Dict[str, Any]\n    risk_assessment: Dict[str, Any]\n    recommendations: List[str]\n    executive_summary: str\n\nclass SecurityReportGenerator:\n    \"\"\"Generates comprehensive security reports for HMS\"\"\"\n    \n    def __init__(self, report_dir: str = \"security-reports\"):\n        self.report_dir = Path(report_dir)\n        self.report_dir.mkdir(exist_ok=True)\n        self.vulnerabilities: List[SecurityVulnerability] = []\n        self.scan_results: Dict[str, Any] = {}\n        \n        # Healthcare-specific security mappings\n        self.healthcare_security_mapping = {\n            \"data_exposure\": [ComplianceFramework.HIPAA, ComplianceFramework.GDPR],\n            \"authentication\": [ComplianceFramework.HIPAA, ComplianceFramework.SOX],\n            \"encryption\": [ComplianceFramework.HIPAA, ComplianceFramework.HITECH],\n            \"access_control\": [ComplianceFramework.HIPAA, ComplianceFramework.SOC2],\n            \"audit_logging\": [ComplianceFramework.HIPAA, ComplianceFramework.SOX],\n            \"sql_injection\": [ComplianceFramework.HIPAA, ComplianceFramework.PCI_DSS],\n            \"xss\": [ComplianceFramework.HIPAA, ComplianceFramework.PCI_DSS],\n        }\n        \n        # CVSS score to severity mapping\n        self.cvss_severity_mapping = {\n            (9.0, 10.0): SeverityLevel.CRITICAL,\n            (7.0, 8.9): SeverityLevel.HIGH,\n            (4.0, 6.9): SeverityLevel.MEDIUM,\n            (0.1, 3.9): SeverityLevel.LOW,\n            (0.0, 0.0): SeverityLevel.INFO,\n        }\n    \n    def load_scan_results(self) -> None:\n        \"\"\"Load all security scan results\"\"\"\n        logger.info(\"Loading security scan results...\")\n        \n        # Load different types of scan results\n        scan_types = [\n            \"semgrep\", \"codeql\", \"snyk\", \"trivy\", \"bandit\",\n            \"eslint-security\", \"checkov\", \"terrascan\", \"tfsec\"\n        ]\n        \n        for scan_type in scan_types:\n            try:\n                self._load_scan_result(scan_type)\n            except Exception as e:\n                logger.warning(f\"Failed to load {scan_type} results: {e}\")\n    \n    def _load_scan_result(self, scan_type: str) -> None:\n        \"\"\"Load specific scan result\"\"\"\n        result_files = list(self.report_dir.glob(f\"*{scan_type}*.json\"))\n        \n        for result_file in result_files:\n            try:\n                with open(result_file) as f:\n                    data = json.load(f)\n                    self.scan_results[scan_type] = data\n                    self._parse_scan_result(scan_type, data)\n                    logger.info(f\"Loaded {scan_type} results from {result_file}\")\n            except Exception as e:\n                logger.error(f\"Error loading {result_file}: {e}\")\n    \n    def _parse_scan_result(self, scan_type: str, data: Dict[str, Any]) -> None:\n        \"\"\"Parse scan results and extract vulnerabilities\"\"\"\n        if scan_type == \"semgrep\":\n            self._parse_semgrep_results(data)\n        elif scan_type == \"snyk\":\n            self._parse_snyk_results(data)\n        elif scan_type == \"trivy\":\n            self._parse_trivy_results(data)\n        elif scan_type == \"checkov\":\n            self._parse_checkov_results(data)\n        # Add more parsers as needed\n    \n    def _parse_semgrep_results(self, data: Dict[str, Any]) -> None:\n        \"\"\"Parse Semgrep SAST results\"\"\"\n        if \"results\" not in data:\n            return\n            \n        for result in data[\"results\"]:\n            try:\n                # Determine compliance impact based on vulnerability type\n                compliance_impact = self._determine_compliance_impact(\n                    result.get(\"check_id\", \"\").lower()\n                )\n                \n                vulnerability = SecurityVulnerability(\n                    id=f\"semgrep-{result.get('check_id', 'unknown')}\",\n                    title=result.get(\"message\", \"Security Issue\"),\n                    description=result.get(\"extra\", {}).get(\"message\", \"\"),\n                    severity=self._map_severity(result.get(\"extra\", {}).get(\"severity\", \"INFO\")),\n                    category=\"SAST\",\n                    file_path=result.get(\"path\"),\n                    line_number=result.get(\"start\", {}).get(\"line\"),\n                    cwe_id=self._extract_cwe(result),\n                    cvss_score=None,\n                    remediation=self._generate_remediation(result),\n                    compliance_impact=compliance_impact,\n                    remediation_effort=self._assess_remediation_effort(result),\n                    business_impact=self._assess_business_impact(result)\n                )\n                self.vulnerabilities.append(vulnerability)\n            except Exception as e:\n                logger.error(f\"Error parsing Semgrep result: {e}\")\n    \n    def _parse_snyk_results(self, data: Dict[str, Any]) -> None:\n        \"\"\"Parse Snyk dependency scan results\"\"\"\n        vulnerabilities = data.get(\"vulnerabilities\", [])\n        \n        for vuln in vulnerabilities:\n            try:\n                vulnerability = SecurityVulnerability(\n                    id=f\"snyk-{vuln.get('id', 'unknown')}\",\n                    title=vuln.get(\"title\", \"Dependency Vulnerability\"),\n                    description=vuln.get(\"description\", \"\"),\n                    severity=self._map_severity(vuln.get(\"severity\", \"medium\")),\n                    category=\"Dependency\",\n                    file_path=vuln.get(\"from\", [None])[0],\n                    line_number=None,\n                    cwe_id=vuln.get(\"cwe\"),\n                    cvss_score=vuln.get(\"cvssScore\"),\n                    remediation=self._generate_dependency_remediation(vuln),\n                    compliance_impact=[ComplianceFramework.HIPAA, ComplianceFramework.SOX],\n                    remediation_effort=\"low\",\n                    business_impact=self._assess_dependency_impact(vuln)\n                )\n                self.vulnerabilities.append(vulnerability)\n            except Exception as e:\n                logger.error(f\"Error parsing Snyk result: {e}\")\n    \n    def _parse_trivy_results(self, data: Dict[str, Any]) -> None:\n        \"\"\"Parse Trivy container scan results\"\"\"\n        results = data.get(\"Results\", [])\n        \n        for result in results:\n            vulnerabilities = result.get(\"Vulnerabilities\", [])\n            for vuln in vulnerabilities:\n                try:\n                    vulnerability = SecurityVulnerability(\n                        id=f\"trivy-{vuln.get('VulnerabilityID', 'unknown')}\",\n                        title=vuln.get(\"Title\", \"Container Vulnerability\"),\n                        description=vuln.get(\"Description\", \"\"),\n                        severity=self._map_severity(vuln.get(\"Severity\", \"MEDIUM\")),\n                        category=\"Container\",\n                        file_path=result.get(\"Target\"),\n                        line_number=None,\n                        cwe_id=None,\n                        cvss_score=None,\n                        remediation=self._generate_container_remediation(vuln),\n                        compliance_impact=[ComplianceFramework.HIPAA, ComplianceFramework.SOC2],\n                        remediation_effort=\"medium\",\n                        business_impact=\"high\"\n                    )\n                    self.vulnerabilities.append(vulnerability)\n                except Exception as e:\n                    logger.error(f\"Error parsing Trivy result: {e}\")\n    \n    def _parse_checkov_results(self, data: Dict[str, Any]) -> None:\n        \"\"\"Parse Checkov infrastructure scan results\"\"\"\n        failed_checks = data.get(\"results\", {}).get(\"failed_checks\", [])\n        \n        for check in failed_checks:\n            try:\n                vulnerability = SecurityVulnerability(\n                    id=f\"checkov-{check.get('check_id', 'unknown')}\",\n                    title=check.get(\"check_name\", \"Infrastructure Issue\"),\n                    description=check.get(\"description\", \"\"),\n                    severity=self._map_checkov_severity(check.get(\"severity\")),\n                    category=\"Infrastructure\",\n                    file_path=check.get(\"file_path\"),\n                    line_number=check.get(\"file_line_range\", [None])[0],\n                    cwe_id=None,\n                    cvss_score=None,\n                    remediation=self._generate_infrastructure_remediation(check),\n                    compliance_impact=[ComplianceFramework.HIPAA, ComplianceFramework.SOC2],\n                    remediation_effort=\"medium\",\n                    business_impact=\"medium\"\n                )\n                self.vulnerabilities.append(vulnerability)\n            except Exception as e:\n                logger.error(f\"Error parsing Checkov result: {e}\")\n    \n    def _determine_compliance_impact(self, check_id: str) -> List[ComplianceFramework]:\n        \"\"\"Determine which compliance frameworks are impacted\"\"\"\n        impact = []\n        \n        for category, frameworks in self.healthcare_security_mapping.items():\n            if category in check_id:\n                impact.extend(frameworks)\n        \n        # Default to HIPAA for healthcare systems\n        if not impact:\n            impact = [ComplianceFramework.HIPAA]\n            \n        return list(set(impact))  # Remove duplicates\n    \n    def _map_severity(self, severity_str: str) -> SeverityLevel:\n        \"\"\"Map string severity to SeverityLevel enum\"\"\"\n        severity_mapping = {\n            \"critical\": SeverityLevel.CRITICAL,\n            \"high\": SeverityLevel.HIGH,\n            \"medium\": SeverityLevel.MEDIUM,\n            \"low\": SeverityLevel.LOW,\n            \"info\": SeverityLevel.INFO,\n            \"error\": SeverityLevel.HIGH,\n            \"warning\": SeverityLevel.MEDIUM,\n        }\n        \n        return severity_mapping.get(\n            severity_str.lower(), \n            SeverityLevel.MEDIUM\n        )\n    \n    def _map_checkov_severity(self, severity: str) -> SeverityLevel:\n        \"\"\"Map Checkov severity to SeverityLevel\"\"\"\n        if not severity:\n            return SeverityLevel.MEDIUM\n            \n        severity_mapping = {\n            \"CRITICAL\": SeverityLevel.CRITICAL,\n            \"HIGH\": SeverityLevel.HIGH,\n            \"MEDIUM\": SeverityLevel.MEDIUM,\n            \"LOW\": SeverityLevel.LOW,\n        }\n        \n        return severity_mapping.get(severity.upper(), SeverityLevel.MEDIUM)\n    \n    def _extract_cwe(self, result: Dict[str, Any]) -> Optional[str]:\n        \"\"\"Extract CWE ID from scan result\"\"\"\n        # Look for CWE in various locations\n        cwe_locations = [\n            result.get(\"extra\", {}).get(\"cwe\"),\n            result.get(\"cwe\"),\n            result.get(\"owasp\"),\n        ]\n        \n        for cwe in cwe_locations:\n            if cwe and isinstance(cwe, str) and \"CWE\" in cwe.upper():\n                return cwe\n                \n        return None\n    \n    def _generate_remediation(self, result: Dict[str, Any]) -> str:\n        \"\"\"Generate remediation advice\"\"\"\n        base_remediation = \"Review and fix the identified security issue.\"\n        \n        check_id = result.get(\"check_id\", \"\").lower()\n        \n        if \"sql-injection\" in check_id:\n            return \"Use parameterized queries or prepared statements to prevent SQL injection.\"\n        elif \"xss\" in check_id:\n            return \"Sanitize user input and use proper output encoding to prevent XSS attacks.\"\n        elif \"hardcoded\" in check_id:\n            return \"Remove hardcoded secrets and use secure configuration management.\"\n        elif \"crypto\" in check_id:\n            return \"Use strong cryptographic algorithms and proper key management.\"\n        elif \"auth\" in check_id:\n            return \"Implement proper authentication and authorization controls.\"\n        \n        return base_remediation\n    \n    def _generate_dependency_remediation(self, vuln: Dict[str, Any]) -> str:\n        \"\"\"Generate dependency-specific remediation\"\"\"\n        if \"upgradePath\" in vuln and vuln[\"upgradePath\"]:\n            return f\"Upgrade to version {vuln['upgradePath'][-1]} or apply the suggested patch.\"\n        elif \"fixedIn\" in vuln and vuln[\"fixedIn\"]:\n            return f\"Upgrade to a fixed version: {', '.join(vuln['fixedIn'])}\"\n        else:\n            return \"Review the vulnerability and apply available patches or workarounds.\"\n    \n    def _generate_container_remediation(self, vuln: Dict[str, Any]) -> str:\n        \"\"\"Generate container-specific remediation\"\"\"\n        if \"FixedVersion\" in vuln and vuln[\"FixedVersion\"]:\n            return f\"Update base image or package to version {vuln['FixedVersion']}\"\n        else:\n            return \"Update the affected package or use a patched base image.\"\n    \n    def _generate_infrastructure_remediation(self, check: Dict[str, Any]) -> str:\n        \"\"\"Generate infrastructure-specific remediation\"\"\"\n        return check.get(\"guideline\", \"Follow security best practices for infrastructure configuration.\")\n    \n    def _assess_remediation_effort(self, result: Dict[str, Any]) -> str:\n        \"\"\"Assess the effort required for remediation\"\"\"\n        check_id = result.get(\"check_id\", \"\").lower()\n        \n        if any(keyword in check_id for keyword in [\"hardcoded\", \"config\"]):\n            return \"low\"\n        elif any(keyword in check_id for keyword in [\"crypto\", \"auth\"]):\n            return \"high\"\n        else:\n            return \"medium\"\n    \n    def _assess_business_impact(self, result: Dict[str, Any]) -> str:\n        \"\"\"Assess business impact of the vulnerability\"\"\"\n        check_id = result.get(\"check_id\", \"\").lower()\n        \n        if any(keyword in check_id for keyword in [\"sql-injection\", \"rce\", \"lfi\"]):\n            return \"critical\"\n        elif any(keyword in check_id for keyword in [\"xss\", \"csrf\", \"auth\"]):\n            return \"high\"\n        else:\n            return \"medium\"\n    \n    def _assess_dependency_impact(self, vuln: Dict[str, Any]) -> str:\n        \"\"\"Assess business impact of dependency vulnerability\"\"\"\n        cvss_score = vuln.get(\"cvssScore\", 0)\n        \n        if cvss_score >= 9.0:\n            return \"critical\"\n        elif cvss_score >= 7.0:\n            return \"high\"\n        elif cvss_score >= 4.0:\n            return \"medium\"\n        else:\n            return \"low\"\n    \n    def generate_compliance_assessment(self) -> Dict[str, Any]:\n        \"\"\"Generate compliance framework assessment\"\"\"\n        compliance_status = {}\n        \n        for framework in ComplianceFramework:\n            framework_vulns = [\n                v for v in self.vulnerabilities\n                if framework in v.compliance_impact\n            ]\n            \n            critical_count = len([v for v in framework_vulns if v.severity == SeverityLevel.CRITICAL])\n            high_count = len([v for v in framework_vulns if v.severity == SeverityLevel.HIGH])\n            \n            # Calculate compliance score (simplified)\n            total_score = 100\n            penalty = (critical_count * 25) + (high_count * 10)\n            score = max(0, total_score - penalty)\n            \n            compliance_status[framework.value] = {\n                \"score\": score,\n                \"status\": \"compliant\" if score >= 90 else \"at_risk\" if score >= 70 else \"non_compliant\",\n                \"critical_issues\": critical_count,\n                \"high_issues\": high_count,\n                \"total_issues\": len(framework_vulns),\n                \"recommendations\": self._generate_compliance_recommendations(framework, framework_vulns)\n            }\n        \n        return compliance_status\n    \n    def _generate_compliance_recommendations(self, framework: ComplianceFramework, vulnerabilities: List[SecurityVulnerability]) -> List[str]:\n        \"\"\"Generate framework-specific recommendations\"\"\"\n        recommendations = []\n        \n        if framework == ComplianceFramework.HIPAA:\n            critical_vulns = [v for v in vulnerabilities if v.severity == SeverityLevel.CRITICAL]\n            if critical_vulns:\n                recommendations.append(\"Immediately address critical vulnerabilities that could lead to PHI exposure\")\n            \n            auth_issues = [v for v in vulnerabilities if \"auth\" in v.category.lower()]\n            if auth_issues:\n                recommendations.append(\"Strengthen authentication and access controls per HIPAA requirements\")\n        \n        elif framework == ComplianceFramework.SOX:\n            if any(\"financial\" in v.file_path or \"\" for v in vulnerabilities if v.file_path):\n                recommendations.append(\"Review financial data processing controls for SOX compliance\")\n        \n        return recommendations\n    \n    def generate_risk_assessment(self) -> Dict[str, Any]:\n        \"\"\"Generate overall risk assessment\"\"\"\n        total_vulns = len(self.vulnerabilities)\n        \n        severity_counts = {\n            \"critical\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.CRITICAL]),\n            \"high\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.HIGH]),\n            \"medium\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.MEDIUM]),\n            \"low\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.LOW]),\n        }\n        \n        # Calculate risk score\n        risk_score = (\n            severity_counts[\"critical\"] * 10 +\n            severity_counts[\"high\"] * 5 +\n            severity_counts[\"medium\"] * 2 +\n            severity_counts[\"low\"] * 1\n        )\n        \n        risk_level = \"low\"\n        if risk_score > 50:\n            risk_level = \"critical\"\n        elif risk_score > 20:\n            risk_level = \"high\"\n        elif risk_score > 10:\n            risk_level = \"medium\"\n        \n        return {\n            \"total_vulnerabilities\": total_vulns,\n            \"severity_distribution\": severity_counts,\n            \"risk_score\": risk_score,\n            \"risk_level\": risk_level,\n            \"trend_analysis\": self._generate_trend_analysis(),\n            \"top_categories\": self._get_top_vulnerability_categories(),\n        }\n    \n    def _generate_trend_analysis(self) -> Dict[str, Any]:\n        \"\"\"Generate vulnerability trend analysis\"\"\"\n        # This would compare with historical data in a real implementation\n        return {\n            \"trend\": \"stable\",\n            \"change_percentage\": 0,\n            \"note\": \"Baseline assessment - no historical data available\"\n        }\n    \n    def _get_top_vulnerability_categories(self) -> List[Dict[str, Any]]:\n        \"\"\"Get top vulnerability categories\"\"\"\n        category_counts = {}\n        \n        for vuln in self.vulnerabilities:\n            category = vuln.category\n            if category not in category_counts:\n                category_counts[category] = 0\n            category_counts[category] += 1\n        \n        # Sort by count and return top 5\n        sorted_categories = sorted(\n            category_counts.items(),\n            key=lambda x: x[1],\n            reverse=True\n        )\n        \n        return [\n            {\"category\": cat, \"count\": count}\n            for cat, count in sorted_categories[:5]\n        ]\n    \n    def generate_recommendations(self) -> List[str]:\n        \"\"\"Generate actionable recommendations\"\"\"\n        recommendations = []\n        \n        critical_vulns = [v for v in self.vulnerabilities if v.severity == SeverityLevel.CRITICAL]\n        if critical_vulns:\n            recommendations.append(\n                f\"URGENT: Address {len(critical_vulns)} critical vulnerabilities immediately \"\n                \"as they pose immediate risk to patient data and system integrity.\"\n            )\n        \n        high_vulns = [v for v in self.vulnerabilities if v.severity == SeverityLevel.HIGH]\n        if high_vulns:\n            recommendations.append(\n                f\"Prioritize resolution of {len(high_vulns)} high-severity vulnerabilities \"\n                \"within the next sprint cycle.\"\n            )\n        \n        # Category-specific recommendations\n        sast_vulns = [v for v in self.vulnerabilities if v.category == \"SAST\"]\n        if sast_vulns:\n            recommendations.append(\n                \"Implement automated SAST scanning in the CI/CD pipeline to catch \"\n                \"security issues early in the development process.\"\n            )\n        \n        dependency_vulns = [v for v in self.vulnerabilities if v.category == \"Dependency\"]\n        if dependency_vulns:\n            recommendations.append(\n                \"Establish a regular dependency update schedule and enable automated \"\n                \"vulnerability monitoring for third-party packages.\"\n            )\n        \n        # Healthcare-specific recommendations\n        recommendations.extend([\n            \"Conduct regular penetration testing focused on healthcare-specific attack vectors.\",\n            \"Implement comprehensive audit logging for all patient data access.\",\n            \"Ensure all data transmission is encrypted with TLS 1.3 or higher.\",\n            \"Establish incident response procedures for potential PHI breaches.\",\n            \"Regular security awareness training for all healthcare staff.\"\n        ])\n        \n        return recommendations\n    \n    def generate_executive_summary(self, risk_assessment: Dict[str, Any], compliance_status: Dict[str, Any]) -> str:\n        \"\"\"Generate executive summary\"\"\"\n        total_vulns = risk_assessment[\"total_vulnerabilities\"]\n        risk_level = risk_assessment[\"risk_level\"]\n        critical_count = risk_assessment[\"severity_distribution\"][\"critical\"]\n        high_count = risk_assessment[\"severity_distribution\"][\"high\"]\n        \n        summary = f\"\"\"\n        EXECUTIVE SECURITY ASSESSMENT SUMMARY\n        \n        The Hospital Management System security assessment identified {total_vulns} vulnerabilities \n        across the application stack, with an overall risk level of {risk_level.upper()}.\n        \n        KEY FINDINGS:\n        • {critical_count} CRITICAL vulnerabilities requiring immediate attention\n        • {high_count} HIGH-severity issues that should be addressed within the current sprint\n        • Overall security posture: {risk_level.upper()} risk\n        \n        COMPLIANCE STATUS:\n        \"\"\"\n        \n        for framework, status in compliance_status.items():\n            summary += f\"\\n        • {framework.upper()}: {status['status'].upper()} (Score: {status['score']}/100)\"\n        \n        summary += f\"\"\"\n        \n        IMMEDIATE ACTIONS REQUIRED:\n        1. Address all CRITICAL vulnerabilities within 24-48 hours\n        2. Implement additional security controls for healthcare data protection\n        3. Establish continuous security monitoring and alerting\n        4. Schedule regular security assessments and penetration testing\n        \n        The organization should prioritize security remediation to ensure patient data \n        protection and regulatory compliance.\n        \"\"\"\n        \n        return summary\n    \n    def generate_charts(self) -> None:\n        \"\"\"Generate security assessment charts\"\"\"\n        logger.info(\"Generating security assessment charts...\")\n        \n        # Set up matplotlib for healthcare-appropriate styling\n        plt.style.use('seaborn-v0_8')\n        sns.set_palette(\"husl\")\n        \n        # Configure fonts for cross-platform compatibility\n        plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial', 'Liberation Sans']\n        plt.rcParams['axes.unicode_minus'] = False\n        \n        # Create charts\n        self._create_severity_distribution_chart()\n        self._create_category_breakdown_chart()\n        self._create_compliance_score_chart()\n        self._create_risk_trend_chart()\n    \n    def _create_severity_distribution_chart(self) -> None:\n        \"\"\"Create vulnerability severity distribution chart\"\"\"\n        severity_counts = {\n            \"Critical\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.CRITICAL]),\n            \"High\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.HIGH]),\n            \"Medium\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.MEDIUM]),\n            \"Low\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.LOW]),\n        }\n        \n        plt.figure(figsize=(10, 6))\n        colors = ['#d32f2f', '#f57c00', '#fbc02d', '#388e3c']\n        bars = plt.bar(severity_counts.keys(), severity_counts.values(), color=colors)\n        \n        plt.title('Security Vulnerability Distribution by Severity', fontsize=16, fontweight='bold')\n        plt.xlabel('Severity Level', fontsize=12)\n        plt.ylabel('Number of Vulnerabilities', fontsize=12)\n        \n        # Add value labels on bars\n        for bar in bars:\n            height = bar.get_height()\n            plt.text(bar.get_x() + bar.get_width()/2., height + 0.1,\n                    f'{int(height)}', ha='center', va='bottom', fontweight='bold')\n        \n        plt.tight_layout()\n        plt.savefig(self.report_dir / 'severity_distribution.png', dpi=300, bbox_inches='tight')\n        plt.close()\n    \n    def _create_category_breakdown_chart(self) -> None:\n        \"\"\"Create vulnerability category breakdown chart\"\"\"\n        category_counts = {}\n        for vuln in self.vulnerabilities:\n            category = vuln.category\n            category_counts[category] = category_counts.get(category, 0) + 1\n        \n        if not category_counts:\n            return\n        \n        plt.figure(figsize=(10, 8))\n        plt.pie(category_counts.values(), labels=category_counts.keys(), autopct='%1.1f%%',\n               startangle=90, colors=sns.color_palette(\"husl\", len(category_counts)))\n        plt.title('Vulnerability Distribution by Category', fontsize=16, fontweight='bold')\n        plt.axis('equal')\n        plt.tight_layout()\n        plt.savefig(self.report_dir / 'category_breakdown.png', dpi=300, bbox_inches='tight')\n        plt.close()\n    \n    def _create_compliance_score_chart(self) -> None:\n        \"\"\"Create compliance framework scores chart\"\"\"\n        compliance_status = self.generate_compliance_assessment()\n        \n        frameworks = list(compliance_status.keys())\n        scores = [compliance_status[fw]['score'] for fw in frameworks]\n        \n        plt.figure(figsize=(12, 6))\n        colors = ['#4caf50' if score >= 90 else '#ff9800' if score >= 70 else '#f44336' for score in scores]\n        bars = plt.bar(frameworks, scores, color=colors)\n        \n        plt.title('Compliance Framework Scores', fontsize=16, fontweight='bold')\n        plt.xlabel('Compliance Framework', fontsize=12)\n        plt.ylabel('Compliance Score (%)', fontsize=12)\n        plt.ylim(0, 100)\n        \n        # Add score labels on bars\n        for bar, score in zip(bars, scores):\n            plt.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 1,\n                    f'{score}%', ha='center', va='bottom', fontweight='bold')\n        \n        # Add compliance threshold lines\n        plt.axhline(y=90, color='green', linestyle='--', alpha=0.7, label='Compliant (90%+)')\n        plt.axhline(y=70, color='orange', linestyle='--', alpha=0.7, label='At Risk (70%+)')\n        \n        plt.legend()\n        plt.tight_layout()\n        plt.savefig(self.report_dir / 'compliance_scores.png', dpi=300, bbox_inches='tight')\n        plt.close()\n    \n    def _create_risk_trend_chart(self) -> None:\n        \"\"\"Create risk trend analysis chart\"\"\"\n        # This would show historical trends in a real implementation\n        # For now, create a placeholder chart\n        \n        plt.figure(figsize=(12, 6))\n        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\n        risk_scores = [45, 42, 38, 35, 32, 30]  # Example trending down\n        \n        plt.plot(months, risk_scores, marker='o', linewidth=2, markersize=8, color='#2196f3')\n        plt.title('Security Risk Trend Analysis', fontsize=16, fontweight='bold')\n        plt.xlabel('Month', fontsize=12)\n        plt.ylabel('Risk Score', fontsize=12)\n        plt.grid(True, alpha=0.3)\n        \n        # Add risk level zones\n        plt.axhspan(0, 20, alpha=0.2, color='green', label='Low Risk')\n        plt.axhspan(20, 40, alpha=0.2, color='yellow', label='Medium Risk')\n        plt.axhspan(40, 60, alpha=0.2, color='orange', label='High Risk')\n        plt.axhspan(60, 100, alpha=0.2, color='red', label='Critical Risk')\n        \n        plt.legend()\n        plt.tight_layout()\n        plt.savefig(self.report_dir / 'risk_trend.png', dpi=300, bbox_inches='tight')\n        plt.close()\n    \n    def generate_html_report(self, report: SecurityReport) -> str:\n        \"\"\"Generate HTML report\"\"\"\n        logger.info(\"Generating HTML security report...\")\n        \n        html_template = \"\"\"\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Hospital Management System - Security Assessment Report</title>\n            <style>\n                body {\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    line-height: 1.6;\n                    margin: 0;\n                    padding: 20px;\n                    background-color: #f8f9fa;\n                }\n                .container {\n                    max-width: 1200px;\n                    margin: 0 auto;\n                    background-color: white;\n                    box-shadow: 0 0 20px rgba(0,0,0,0.1);\n                    border-radius: 8px;\n                    overflow: hidden;\n                }\n                .header {\n                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                    color: white;\n                    padding: 30px;\n                    text-align: center;\n                }\n                .header h1 {\n                    margin: 0;\n                    font-size: 2.5em;\n                }\n                .header p {\n                    margin: 10px 0 0 0;\n                    opacity: 0.9;\n                }\n                .content {\n                    padding: 30px;\n                }\n                .executive-summary {\n                    background-color: #e3f2fd;\n                    border-left: 5px solid #2196f3;\n                    padding: 20px;\n                    margin-bottom: 30px;\n                    border-radius: 0 8px 8px 0;\n                }\n                .metrics-grid {\n                    display: grid;\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n                    gap: 20px;\n                    margin-bottom: 30px;\n                }\n                .metric-card {\n                    background-color: #fff;\n                    border: 1px solid #e0e0e0;\n                    border-radius: 8px;\n                    padding: 20px;\n                    text-align: center;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n                .metric-value {\n                    font-size: 2.5em;\n                    font-weight: bold;\n                    margin-bottom: 10px;\n                }\n                .metric-label {\n                    color: #666;\n                    font-size: 0.9em;\n                    text-transform: uppercase;\n                    letter-spacing: 1px;\n                }\n                .critical { color: #d32f2f; }\n                .high { color: #f57c00; }\n                .medium { color: #fbc02d; }\n                .low { color: #388e3c; }\n                .vulnerability-table {\n                    width: 100%;\n                    border-collapse: collapse;\n                    margin-bottom: 30px;\n                }\n                .vulnerability-table th,\n                .vulnerability-table td {\n                    border: 1px solid #ddd;\n                    padding: 12px;\n                    text-align: left;\n                }\n                .vulnerability-table th {\n                    background-color: #f5f5f5;\n                    font-weight: bold;\n                }\n                .severity-badge {\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    color: white;\n                    font-size: 0.8em;\n                    font-weight: bold;\n                    text-transform: uppercase;\n                }\n                .severity-critical { background-color: #d32f2f; }\n                .severity-high { background-color: #f57c00; }\n                .severity-medium { background-color: #fbc02d; color: #333; }\n                .severity-low { background-color: #388e3c; }\n                .charts-section {\n                    margin-top: 40px;\n                }\n                .chart {\n                    text-align: center;\n                    margin-bottom: 30px;\n                }\n                .chart img {\n                    max-width: 100%;\n                    height: auto;\n                    border-radius: 8px;\n                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n                }\n                .recommendations {\n                    background-color: #fff3e0;\n                    border-left: 5px solid #ff9800;\n                    padding: 20px;\n                    margin-top: 30px;\n                    border-radius: 0 8px 8px 0;\n                }\n                .recommendations h3 {\n                    margin-top: 0;\n                    color: #e65100;\n                }\n                .recommendations ul {\n                    padding-left: 20px;\n                }\n                .footer {\n                    background-color: #f5f5f5;\n                    padding: 20px;\n                    text-align: center;\n                    border-top: 1px solid #e0e0e0;\n                    color: #666;\n                }\n                @media (max-width: 768px) {\n                    .metrics-grid {\n                        grid-template-columns: 1fr;\n                    }\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <div class=\"header\">\n                    <h1>🏥 Security Assessment Report</h1>\n                    <p>Hospital Management System</p>\n                    <p>Generated on {{ report.timestamp.strftime('%B %d, %Y at %I:%M %p') }}</p>\n                </div>\n                \n                <div class=\"content\">\n                    <div class=\"executive-summary\">\n                        <h2>📋 Executive Summary</h2>\n                        <pre>{{ report.executive_summary }}</pre>\n                    </div>\n                    \n                    <div class=\"metrics-grid\">\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value\">{{ report.scan_summary.total_vulnerabilities }}</div>\n                            <div class=\"metric-label\">Total Vulnerabilities</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value critical\">{{ report.scan_summary.severity_distribution.critical }}</div>\n                            <div class=\"metric-label\">Critical</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value high\">{{ report.scan_summary.severity_distribution.high }}</div>\n                            <div class=\"metric-label\">High</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value medium\">{{ report.scan_summary.severity_distribution.medium }}</div>\n                            <div class=\"metric-label\">Medium</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value low\">{{ report.scan_summary.severity_distribution.low }}</div>\n                            <div class=\"metric-label\">Low</div>\n                        </div>\n                        <div class=\"metric-card\">\n                            <div class=\"metric-value\">{{ report.risk_assessment.risk_score }}</div>\n                            <div class=\"metric-label\">Risk Score</div>\n                        </div>\n                    </div>\n                    \n                    <h2>🔍 Vulnerability Details</h2>\n                    <table class=\"vulnerability-table\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Severity</th>\n                                <th>Category</th>\n                                <th>File</th>\n                                <th>Compliance Impact</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {% for vuln in report.vulnerabilities[:20] %}\n                            <tr>\n                                <td>{{ vuln.title }}</td>\n                                <td>\n                                    <span class=\"severity-badge severity-{{ vuln.severity.value }}\">\n                                        {{ vuln.severity.value }}\n                                    </span>\n                                </td>\n                                <td>{{ vuln.category }}</td>\n                                <td>{{ vuln.file_path or 'N/A' }}</td>\n                                <td>{{ ', '.join([f.value.upper() for f in vuln.compliance_impact]) }}</td>\n                            </tr>\n                            {% endfor %}\n                        </tbody>\n                    </table>\n                    \n                    {% if report.vulnerabilities|length > 20 %}\n                    <p><em>Showing top 20 vulnerabilities. Total: {{ report.vulnerabilities|length }}</em></p>\n                    {% endif %}\n                    \n                    <div class=\"charts-section\">\n                        <h2>📊 Security Metrics</h2>\n                        \n                        <div class=\"chart\">\n                            <h3>Vulnerability Severity Distribution</h3>\n                            <img src=\"severity_distribution.png\" alt=\"Severity Distribution Chart\">\n                        </div>\n                        \n                        <div class=\"chart\">\n                            <h3>Vulnerability Categories</h3>\n                            <img src=\"category_breakdown.png\" alt=\"Category Breakdown Chart\">\n                        </div>\n                        \n                        <div class=\"chart\">\n                            <h3>Compliance Framework Scores</h3>\n                            <img src=\"compliance_scores.png\" alt=\"Compliance Scores Chart\">\n                        </div>\n                        \n                        <div class=\"chart\">\n                            <h3>Risk Trend Analysis</h3>\n                            <img src=\"risk_trend.png\" alt=\"Risk Trend Chart\">\n                        </div>\n                    </div>\n                    \n                    <div class=\"recommendations\">\n                        <h3>🎯 Recommendations</h3>\n                        <ul>\n                            {% for recommendation in report.recommendations %}\n                            <li>{{ recommendation }}</li>\n                            {% endfor %}\n                        </ul>\n                    </div>\n                </div>\n                \n                <div class=\"footer\">\n                    <p>This report was generated automatically by the HMS Security Assessment System.</p>\n                    <p>For questions or concerns, contact the Information Security team.</p>\n                </div>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n        \n        template = Template(html_template)\n        html_content = template.render(report=report)\n        \n        html_file = self.report_dir / \"security-compliance-report.html\"\n        with open(html_file, 'w', encoding='utf-8') as f:\n            f.write(html_content)\n        \n        logger.info(f\"HTML report generated: {html_file}\")\n        return str(html_file)\n    \n    def generate_json_report(self, report: SecurityReport) -> str:\n        \"\"\"Generate JSON report for programmatic access\"\"\"\n        logger.info(\"Generating JSON security report...\")\n        \n        # Convert dataclasses to dictionaries\n        json_data = {\n            \"timestamp\": report.timestamp.isoformat(),\n            \"scan_summary\": report.scan_summary,\n            \"vulnerabilities\": [\n                {\n                    **asdict(vuln),\n                    \"severity\": vuln.severity.value,\n                    \"compliance_impact\": [f.value for f in vuln.compliance_impact]\n                }\n                for vuln in report.vulnerabilities\n            ],\n            \"compliance_status\": report.compliance_status,\n            \"risk_assessment\": report.risk_assessment,\n            \"recommendations\": report.recommendations,\n            \"executive_summary\": report.executive_summary,\n        }\n        \n        json_file = self.report_dir / \"security-compliance-report.json\"\n        with open(json_file, 'w', encoding='utf-8') as f:\n            json.dump(json_data, f, indent=2, ensure_ascii=False)\n        \n        logger.info(f\"JSON report generated: {json_file}\")\n        return str(json_file)\n    \n    def generate_report(self) -> SecurityReport:\n        \"\"\"Generate complete security report\"\"\"\n        logger.info(\"Starting comprehensive security report generation...\")\n        \n        # Load all scan results\n        self.load_scan_results()\n        \n        # Generate assessments\n        compliance_status = self.generate_compliance_assessment()\n        risk_assessment = self.generate_risk_assessment()\n        recommendations = self.generate_recommendations()\n        executive_summary = self.generate_executive_summary(risk_assessment, compliance_status)\n        \n        # Create scan summary\n        scan_summary = {\n            \"total_vulnerabilities\": len(self.vulnerabilities),\n            \"severity_distribution\": {\n                \"critical\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.CRITICAL]),\n                \"high\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.HIGH]),\n                \"medium\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.MEDIUM]),\n                \"low\": len([v for v in self.vulnerabilities if v.severity == SeverityLevel.LOW]),\n            },\n            \"scan_types\": list(self.scan_results.keys()),\n            \"scan_date\": datetime.now().isoformat(),\n        }\n        \n        # Create report\n        report = SecurityReport(\n            timestamp=datetime.now(),\n            scan_summary=scan_summary,\n            vulnerabilities=self.vulnerabilities,\n            compliance_status=compliance_status,\n            risk_assessment=risk_assessment,\n            recommendations=recommendations,\n            executive_summary=executive_summary\n        )\n        \n        # Generate charts and reports\n        self.generate_charts()\n        html_file = self.generate_html_report(report)\n        json_file = self.generate_json_report(report)\n        \n        logger.info(f\"Security report generation completed successfully\")\n        logger.info(f\"HTML Report: {html_file}\")\n        logger.info(f\"JSON Report: {json_file}\")\n        \n        return report\n\ndef main():\n    \"\"\"Main function\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Generate comprehensive security report for Hospital Management System\"\n    )\n    parser.add_argument(\n        \"--report-dir\",\n        default=\"security-reports\",\n        help=\"Directory containing security scan results\"\n    )\n    parser.add_argument(\n        \"--output-dir\",\n        default=\".\",\n        help=\"Directory to save generated reports\"\n    )\n    parser.add_argument(\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"Enable verbose logging\"\n    )\n    \n    args = parser.parse_args()\n    \n    if args.verbose:\n        logging.getLogger().setLevel(logging.DEBUG)\n    \n    try:\n        # Initialize report generator\n        generator = SecurityReportGenerator(args.report_dir)\n        \n        # Generate report\n        report = generator.generate_report()\n        \n        # Print summary\n        print(\"\\n\" + \"=\"*80)\n        print(\"SECURITY ASSESSMENT SUMMARY\")\n        print(\"=\"*80)\n        print(f\"Total Vulnerabilities: {len(report.vulnerabilities)}\")\n        print(f\"Critical: {report.scan_summary['severity_distribution']['critical']}\")\n        print(f\"High: {report.scan_summary['severity_distribution']['high']}\")\n        print(f\"Medium: {report.scan_summary['severity_distribution']['medium']}\")\n        print(f\"Low: {report.scan_summary['severity_distribution']['low']}\")\n        print(f\"Overall Risk Level: {report.risk_assessment['risk_level'].upper()}\")\n        print(\"\\nCompliance Status:\")\n        for framework, status in report.compliance_status.items():\n            print(f\"  {framework.upper()}: {status['status'].upper()} ({status['score']}/100)\")\n        print(\"\\nReports generated in the current directory.\")\n        print(\"=\"*80)\n        \n        # Exit with error code if critical vulnerabilities found\n        critical_count = report.scan_summary['severity_distribution']['critical']\n        if critical_count > 0:\n            print(f\"\\n❌ CRITICAL: {critical_count} critical vulnerabilities found!\")\n            sys.exit(1)\n        \n        high_count = report.scan_summary['severity_distribution']['high']\n        if high_count > 5:  # Threshold for acceptable high-severity issues\n            print(f\"\\n⚠️ WARNING: {high_count} high-severity vulnerabilities found!\")\n            sys.exit(1)\n        \n        print(\"\\n✅ Security assessment completed successfully.\")\n        sys.exit(0)\n        \n    except Exception as e:\n        logger.error(f\"Security report generation failed: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n"
      }
    }
  ]
}