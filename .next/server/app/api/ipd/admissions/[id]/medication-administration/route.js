(()=>{var e={};e.id=6955,e.ids=[6955],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33159:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73327:()=>{},99463:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>_,routeModule:()=>m,serverHooks:()=>p,workAsyncStorage:()=>c,workUnitAsyncStorage:()=>l});var i={};r.r(i),r.d(i,{GET:()=>d,POST:()=>u});var s=r(2179),n=r(20540),a=r(57395),o=r(8306);async function d(e,{params:t}){try{let e=await Object(function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}())();if(!e||!e.user)return o.NextResponse.json({error:"Unauthorized"},{status:401});let{id:r}=await t,i=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}())(),s=await i.query(`
      SELECT a.*, p.first_name as patient_first_name, p.last_name as patient_last_name;
      FROM admissions a;
      JOIN patients p ON a.patient_id = p.id;
      WHERE a.id = ?
    `,[r]),n=s.results&&s.results.length>0?s.results[0]:void 0;if(!n)return o.NextResponse.json({error:"Admission not found"},{status:404});let a="Nurse"===e.user.roleName,d="Doctor"===e.user.roleName,u="Admin"===e.user.roleName,m=e.user.permissions?.includes("medication_administration:view")??!1;if(!a&&!d&&!u&&!m)return o.NextResponse.json({error:"Forbidden"},{status:403});let c=await i.query(`
      SELECT ma.*, 
             m.generic_name as medication_name, -- Changed from pharmacy_inventory to medications;
             m.brand_name as medication_brand_name, -- Added brand name;
             u.first_name as administered_by_first_name, 
             u.last_name as administered_by_last_name;
      FROM medication_administration ma;
      JOIN medications m ON ma.medication_id = m.id -- Changed from pharmacy_inventory;
      JOIN users u ON ma.administered_by = u.id;
      WHERE ma.admission_id = ?
      ORDER BY ma.administered_time DESC;
    `,[r]);return o.NextResponse.json({admission:n,medication_administration:c.results||[]})}catch(t){console.error("Error fetching medication administration records:",t);let e=t instanceof Error?t.message:String(t);return o.NextResponse.json({error:"Failed to fetch medication administration records",details:e},{status:500})}}async function u(e,{params:t}){try{let r=await Object(function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}())();if(!r||!r.user)return o.NextResponse.json({error:"Unauthorized"},{status:401});let i="Nurse"===r.user.roleName,s="Doctor"===r.user.roleName,n=r.user.permissions?.includes("medication_administration:create")??!1;if(!i&&!s&&!n)return o.NextResponse.json({error:"Forbidden"},{status:403});let{id:a}=await t,d=await e.json();for(let e of["medication_id","dosage","route"])if(!d[e])return o.NextResponse.json({error:`Missing required field: ${e}`},{status:400});let u=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}())(),m=await u.query("SELECT id, status FROM admissions WHERE id = ?",[a]),c=m.results&&m.results.length>0?m.results[0]:void 0;if(!c)return o.NextResponse.json({error:"Admission not found"},{status:404});if("active"!==c.status)return o.NextResponse.json({error:"Cannot record medication administration for a non-active admission"},{status:409});let l=await u.query("SELECT id FROM medications WHERE id = ?",[d.medication_id]);if(!(l.results&&l.results.length>0?l.results[0]:void 0))return o.NextResponse.json({error:"Medication not found"},{status:404});return await u.query(`
      INSERT INTO medication_administration (
        admission_id, medication_id, administered_by, administered_time, dosage, route, notes;
      ) VALUES (?, ?, ?, ?, ?, ?, ?)
    `,[a,d.medication_id,r.user.userId,d.administered_time||new Date().toISOString(),d.dosage,d.route,d.notes||void 0]),o.NextResponse.json({message:"Medication administration recorded (mock operation)"},{status:201})}catch(t){console.error("Error creating medication administration record:",t);let e=t instanceof Error?t.message:String(t);return o.NextResponse.json({error:"Failed to create medication administration record",details:e},{status:500})}}!function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}(),function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}();let m=new s.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/ipd/admissions/[id]/medication-administration/route",pathname:"/api/ipd/admissions/[id]/medication-administration",filename:"route",bundlePath:"app/api/ipd/admissions/[id]/medication-administration/route"},resolvedPagePath:"/workspace/Hospital-Management-System/src/app/api/ipd/admissions/[id]/medication-administration/route.ts",nextConfigOutput:"",userland:i}),{workAsyncStorage:c,workUnitAsyncStorage:l,serverHooks:p}=m;function _(){return(0,a.patchFetch)({workAsyncStorage:c,workUnitAsyncStorage:l})}}};var t=require("../../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),i=t.X(0,[7395,6088],()=>r(99463));module.exports=i})();