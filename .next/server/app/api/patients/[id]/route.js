(()=>{var e={};e.id=3246,e.ids=[3246],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33159:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73327:()=>{},96538:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>b,routeModule:()=>m,serverHooks:()=>f,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>_});var n={};r.r(n),r.d(n,{DELETE:()=>c,GET:()=>l,PUT:()=>p});var a=r(2179),s=r(20540),o=r(57395),i=r(8306),d=r(72482);!function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}(),function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}();let u=d.z.object({mrn:d.z.string().optional(),first_name:d.z.string().min(1,"First name is required").optional(),last_name:d.z.string().min(1,"Last name is required").optional(),date_of_birth:d.z.string().refine(e=>!isNaN(Date.parse(e)),{message:"Invalid date of birth format"}).optional(),gender:d.z.enum(["Male","Female","Other","Unknown"]).optional(),contact_number:d.z.string().optional().nullable(),email:d.z.string().email("Invalid email address").optional().nullable(),address_line1:d.z.string().optional().nullable(),address_line2:d.z.string().optional().nullable(),city:d.z.string().optional().nullable(),state:d.z.string().optional().nullable(),postal_code:d.z.string().optional().nullable(),country:d.z.string().optional().nullable(),emergency_contact_name:d.z.string().optional().nullable(),emergency_contact_relation:d.z.string().optional().nullable(),emergency_contact_number:d.z.string().optional().nullable(),blood_group:d.z.string().optional().nullable(),allergies:d.z.string().optional().nullable(),medical_history_summary:d.z.string().optional().nullable(),insurance_provider:d.z.string().optional().nullable(),insurance_policy_number:d.z.string().optional().nullable()}).partial();async function l(e,{params:t}){if(!(await Object(function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}())()).isLoggedIn)return i.NextResponse.json({message:"Unauthorized"},{status:401});let{id:r}=await t;if(!r)return i.NextResponse.json({message:"Patient ID is required"},{status:400});try{let e=`
            SELECT;
                p.*,
                u_created.name as created_by_user_name,
                u_updated.name as updated_by_user_name;
            FROM Patients p;
            LEFT JOIN Users u_created ON p.created_by_user_id = u_created.id;
            LEFT JOIN Users u_updated ON p.updated_by_user_id = u_updated.id;
            WHERE p.patient_id = ?
        `,t=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}()).prepare(e).bind(r).first();if(!t)return i.NextResponse.json({message:"Patient not found"},{status:404});return i.NextResponse.json(t)}catch(t){console.error(`Error fetching patient ${r}:`,t);let e="An unknown error occurred";return t instanceof Error&&(e=t.message),i.NextResponse.json({message:"Error fetching patient details",details:e},{status:500})}}async function p(e,{params:t}){let r=await Object(function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}())();if(!r.isLoggedIn)return i.NextResponse.json({message:"Unauthorized"},{status:401});if(!r.user)return i.NextResponse.json({message:"User not found in session"},{status:500});let{id:n}=await t;if(!n)return i.NextResponse.json({message:"Patient ID is required"},{status:400});try{let t=await e.json(),a=u.safeParse(t);if(!a.success)return i.NextResponse.json({message:"Invalid input",errors:a.error.errors},{status:400});let s=a.data;if(0===Object.keys(s).length)return i.NextResponse.json({message:"No update fields provided"},{status:400});let o=new Date().toISOString(),d=r.user.userId,l={...s};l.updated_at=o,l.updated_by_user_id=d;let p=Object.keys(l).map(e=>`${e} = ?`).join(", "),c=Object.values(l),m=`UPDATE Patients SET ${p} WHERE patient_id = ?`;c.push(n);let g=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}()).prepare(m).bind(...c).run();if((!g.success||g.meta&&0===g.meta.changes)&&(console.warn(`Update attempt for patient ${n} resulted in 0 changes or failed:`,g),!g.success))throw Error("Failed to update patient record");let _=`
            SELECT p.*, u_updated.name as updated_by_user_name;
            FROM Patients p;
            LEFT JOIN Users u_updated ON p.updated_by_user_id = u_updated.id;
            WHERE p.patient_id = ?
        `,f=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}()).prepare(_).bind(n).first();if(!f)throw console.error(`Failed to fetch updated patient data for ID ${n} after update.`),Error("Failed to retrieve updated patient data");return i.NextResponse.json(f)}catch(t){console.error(`Error updating patient ${n}:`,t);let e="An unknown error occurred";return t instanceof Error&&(e=t.message),i.NextResponse.json({message:"Error updating patient",details:e},{status:500})}}async function c(e,{params:t}){let r=await Object(function(){var e=Error("Cannot find module '@/lib/session'");throw e.code="MODULE_NOT_FOUND",e}())();if(!r.isLoggedIn||!r.user||"Admin"!==r.user.roleName)return i.NextResponse.json({message:"Forbidden"},{status:403});let{id:n}=await t;if(!n)return i.NextResponse.json({message:"Patient ID is required"},{status:400});try{let e=await Object(function(){var e=Error("Cannot find module '@/lib/database'");throw e.code="MODULE_NOT_FOUND",e}()).prepare("DELETE FROM Patients WHERE patient_id = ?").bind(n).run();if(!e.success||e.meta&&0===e.meta.changes){if(console.warn(`Delete attempt for patient ${n} resulted in 0 changes or failed:`,e),e.meta?.changes===0)return i.NextResponse.json({message:"Patient not found or already deleted"},{status:404});if(!e.success)throw Error("Failed to delete patient record")}return i.NextResponse.json({message:"Patient deleted successfully"},{status:200})}catch(t){console.error(`Error deleting patient ${n}:`,t);let e="An unknown error occurred";return t instanceof Error&&(e=t.message),i.NextResponse.json({message:"Error deleting patient",details:e},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/patients/[id]/route",pathname:"/api/patients/[id]",filename:"route",bundlePath:"app/api/patients/[id]/route"},resolvedPagePath:"/workspace/Hospital-Management-System/src/app/api/patients/[id]/route.ts",nextConfigOutput:"",userland:n}),{workAsyncStorage:g,workUnitAsyncStorage:_,serverHooks:f}=m;function b(){return(0,o.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:_})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[7395,6088,2482],()=>r(96538));module.exports=n})();