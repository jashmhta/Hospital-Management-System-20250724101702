(()=>{var e={};e.id=416,e.ids=[416],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33159:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},46110:(e,t,a)=>{"use strict";a.r(t),a.d(t,{patchFetch:()=>D,routeModule:()=>c,serverHooks:()=>v,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>g});var r={};a.r(r),a.d(r,{GET:()=>u,POST:()=>d});var i=a(2179),o=a(20540),n=a(57395),s=a(8306),l=a(72482);!function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}();let p=l.z.object({name:l.z.string().min(1,"Name is required"),equipmentType:l.z.enum(["DIAGNOSTIC","THERAPEUTIC","MONITORING","LABORATORY","SURGICAL","LIFE_SUPPORT","OTHER"],{errorMap:()=>({message:"Invalid equipment type"})}),serialNumber:l.z.string().optional(),manufacturer:l.z.string().optional(),model:l.z.string().optional(),purchaseDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),purchasePrice:l.z.number().optional(),warrantyExpiryDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),location:l.z.string().optional(),departmentId:l.z.string().optional(),assignedToId:l.z.string().optional(),status:l.z.enum(["AVAILABLE","IN_USE","UNDER_MAINTENANCE","DISPOSED","LOST"],{errorMap:()=>({message:"Invalid status"})}),notes:l.z.string().optional(),tags:l.z.array(l.z.string()).optional(),deviceIdentifier:l.z.string().optional(),regulatoryClass:l.z.enum(["CLASS_I","CLASS_II","CLASS_III"],{errorMap:()=>({message:"Invalid regulatory class"})}).optional(),riskLevel:l.z.enum(["LOW","MEDIUM","HIGH","CRITICAL"],{errorMap:()=>({message:"Invalid risk level"})}).optional(),lastCalibrationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),nextCalibrationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),calibrationFrequency:l.z.number().optional(),certifications:l.z.array(l.z.string()).optional(),isReusable:l.z.boolean().optional(),sterilizationRequired:l.z.boolean().optional(),lastSterilizationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"})});async function d(e){try{let t=await e.json(),a=p.safeParse(t);if(!a.success)return s.NextResponse.json({error:"Validation error",details:a.error.format()},{status:400});let r=a.data,i={...r,purchaseDate:r.purchaseDate?new Date(r.purchaseDate):void 0,warrantyExpiryDate:r.warrantyExpiryDate?new Date(r.warrantyExpiryDate):void 0,lastCalibrationDate:r.lastCalibrationDate?new Date(r.lastCalibrationDate):void 0,nextCalibrationDate:r.nextCalibrationDate?new Date(r.nextCalibrationDate):void 0,lastSterilizationDate:r.lastSterilizationDate?new Date(r.lastSterilizationDate):void 0},o=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).createBiomedicalEquipment(i);return s.NextResponse.json(o)}catch(e){return console.error("Error creating biomedical equipment:",e),s.NextResponse.json({error:"Failed to create biomedical equipment",details:e.message},{status:500})}}async function u(e){try{let t=e.nextUrl.searchParams,a=parseInt(t.get("skip")||"0"),r=parseInt(t.get("take")||"10"),i=t.get("search")||void 0,o=t.get("equipmentType")||void 0,n=t.get("status")||void 0,l=t.get("departmentId")||void 0,p=t.get("regulatoryClass")||void 0,d=t.get("riskLevel")||void 0,u="true"===t.get("calibrationDue"),c=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).listBiomedicalEquipment({skip:a,take:r,search:i,equipmentType:o,status:n,departmentId:l,regulatoryClass:p,riskLevel:d,calibrationDue:u});return s.NextResponse.json(c)}catch(e){return console.error("Error fetching biomedical equipment:",e),s.NextResponse.json({error:"Failed to fetch biomedical equipment",details:e.message},{status:500})}}let c=new i.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/hr/biomedical/route",pathname:"/api/hr/biomedical",filename:"route",bundlePath:"app/api/hr/biomedical/route"},resolvedPagePath:"/workspace/Hospital-Management-System/src/app/api/hr/biomedical/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:m,workUnitAsyncStorage:g,serverHooks:v}=c;function D(){return(0,n.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:g})}},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73327:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[7395,6088,2482],()=>a(46110));module.exports=r})();