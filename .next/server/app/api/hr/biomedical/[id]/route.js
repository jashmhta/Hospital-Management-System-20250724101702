(()=>{var e={};e.id=8522,e.ids=[8522],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33159:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73327:()=>{},91080:(e,t,a)=>{"use strict";a.r(t),a.d(t,{patchFetch:()=>v,routeModule:()=>m,serverHooks:()=>b,workAsyncStorage:()=>g,workUnitAsyncStorage:()=>D});var r={};a.r(r),a.d(r,{DELETE:()=>c,GET:()=>d,PUT:()=>u});var i=a(2179),o=a(20540),n=a(57395),s=a(8306),l=a(72482);async function d(e,{params:t}){try{let e=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).getBiomedicalEquipment(t.id);if(!e)return s.NextResponse.json({error:"Biomedical equipment not found"},{status:404});return s.NextResponse.json(e)}catch(e){return console.error("Error fetching biomedical equipment:",e),s.NextResponse.json({error:"Failed to fetch biomedical equipment",details:e.message},{status:500})}}!function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}();let p=l.z.object({name:l.z.string().min(1,"Name is required").optional(),equipmentType:l.z.enum(["DIAGNOSTIC","THERAPEUTIC","MONITORING","LABORATORY","SURGICAL","LIFE_SUPPORT","OTHER"],{errorMap:()=>({message:"Invalid equipment type"})}).optional(),serialNumber:l.z.string().optional(),manufacturer:l.z.string().optional(),model:l.z.string().optional(),purchaseDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),purchasePrice:l.z.number().optional(),warrantyExpiryDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),location:l.z.string().optional(),departmentId:l.z.string().optional().nullable(),assignedToId:l.z.string().optional().nullable(),status:l.z.enum(["AVAILABLE","IN_USE","UNDER_MAINTENANCE","DISPOSED","LOST"],{errorMap:()=>({message:"Invalid status"})}).optional(),notes:l.z.string().optional(),tags:l.z.array(l.z.string()).optional(),deviceIdentifier:l.z.string().optional(),regulatoryClass:l.z.enum(["CLASS_I","CLASS_II","CLASS_III"],{errorMap:()=>({message:"Invalid regulatory class"})}).optional(),riskLevel:l.z.enum(["LOW","MEDIUM","HIGH","CRITICAL"],{errorMap:()=>({message:"Invalid risk level"})}).optional(),lastCalibrationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),nextCalibrationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),calibrationFrequency:l.z.number().optional(),certifications:l.z.array(l.z.string()).optional(),isReusable:l.z.boolean().optional(),sterilizationRequired:l.z.boolean().optional(),lastSterilizationDate:l.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"})});async function u(e,{params:t}){try{let a=await e.json(),r=p.safeParse(a);if(!r.success)return s.NextResponse.json({error:"Validation error",details:r.error.format()},{status:400});let i=r.data,o={...i,purchaseDate:i.purchaseDate?new Date(i.purchaseDate):void 0,warrantyExpiryDate:i.warrantyExpiryDate?new Date(i.warrantyExpiryDate):void 0,lastCalibrationDate:i.lastCalibrationDate?new Date(i.lastCalibrationDate):void 0,nextCalibrationDate:i.nextCalibrationDate?new Date(i.nextCalibrationDate):void 0,lastSterilizationDate:i.lastSterilizationDate?new Date(i.lastSterilizationDate):void 0},n=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).updateBiomedicalEquipment(t.id,o);return s.NextResponse.json(n)}catch(e){return console.error("Error updating biomedical equipment:",e),s.NextResponse.json({error:"Failed to update biomedical equipment",details:e.message},{status:500})}}async function c(e,{params:t}){try{return await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).deleteBiomedicalEquipment(t.id),s.NextResponse.json({success:!0})}catch(e){return console.error("Error deleting biomedical equipment:",e),s.NextResponse.json({error:"Failed to delete biomedical equipment",details:e.message},{status:500})}}let m=new i.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/hr/biomedical/[id]/route",pathname:"/api/hr/biomedical/[id]",filename:"route",bundlePath:"app/api/hr/biomedical/[id]/route"},resolvedPagePath:"/workspace/Hospital-Management-System/src/app/api/hr/biomedical/[id]/route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:g,workUnitAsyncStorage:D,serverHooks:b}=m;function v(){return(0,n.patchFetch)({workAsyncStorage:g,workUnitAsyncStorage:D})}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[7395,6088,2482],()=>a(91080));module.exports=r})();