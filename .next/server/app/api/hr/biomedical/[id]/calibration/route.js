(()=>{var e={};e.id=5071,e.ids=[5071],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},30972:(e,r,t)=>{"use strict";t.r(r),t.d(r,{patchFetch:()=>f,routeModule:()=>p,serverHooks:()=>x,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>b});var a={};t.r(a),t.d(a,{GET:()=>u,POST:()=>l});var o=t(2179),i=t(20540),s=t(57395),n=t(8306),d=t(72482);!function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}();let c=d.z.object({date:d.z.string().refine(e=>!isNaN(Date.parse(e)),{message:"Invalid date format"}),performedBy:d.z.string().optional(),result:d.z.enum(["PASS","FAIL","ADJUSTED"],{errorMap:()=>({message:"Invalid result"})}),notes:d.z.string().optional(),nextCalibrationDate:d.z.string().optional().refine(e=>!e||!isNaN(Date.parse(e)),{message:"Invalid date format"}),attachments:d.z.array(d.z.string()).optional()});async function l(e,{params:r}){try{let t=await e.json(),a=c.safeParse(t);if(!a.success)return n.NextResponse.json({error:"Validation error",details:a.error.format()},{status:400});let o=a.data,i={biomedicalEquipmentId:r.id,date:new Date(o.date),performedBy:o.performedBy,result:o.result,notes:o.notes,nextCalibrationDate:o.nextCalibrationDate?new Date(o.nextCalibrationDate):void 0,attachments:o.attachments},s=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).recordCalibration(i);return n.NextResponse.json(s)}catch(e){return console.error("Error recording calibration:",e),n.NextResponse.json({error:"Failed to record calibration",details:e.message},{status:500})}}async function u(e,{params:r}){try{let e=await Object(function(){var e=Error("Cannot find module '@/lib/hr/biomedical-service'");throw e.code="MODULE_NOT_FOUND",e}()).getCalibrationRecords(r.id);return n.NextResponse.json(e)}catch(e){return console.error("Error fetching calibration records:",e),n.NextResponse.json({error:"Failed to fetch calibration records",details:e.message},{status:500})}}let p=new o.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/hr/biomedical/[id]/calibration/route",pathname:"/api/hr/biomedical/[id]/calibration",filename:"route",bundlePath:"app/api/hr/biomedical/[id]/calibration/route"},resolvedPagePath:"/workspace/Hospital-Management-System/src/app/api/hr/biomedical/[id]/calibration/route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:m,workUnitAsyncStorage:b,serverHooks:x}=p;function f(){return(0,s.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:b})}},33159:()=>{},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},73327:()=>{}};var r=require("../../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[7395,6088,2482],()=>t(30972));module.exports=a})();