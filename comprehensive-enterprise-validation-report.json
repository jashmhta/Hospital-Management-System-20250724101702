{
  "validation_results": [
    "ValidationResult(category='TypeScript', test_name='Compilation', status='PASS', score=100.0, details='TypeScript compilation: 0 errors, 0 warnings', errors=[], warnings=[])",
    "ValidationResult(category='ESLint', test_name='Code Quality', status='FAIL', score=98, details='ESLint validation: 0 errors, 2 warnings', errors=[], warnings=['To eliminate this warning, add \"type\": \"module\" to /workspace/Hospital-Management-System/package.json.', '(Use `node --trace-warnings ...` to show where the warning was created)'])",
    "ValidationResult(category='Prettier', test_name='Code Formatting', status='FAIL', score=0.0, details='Prettier formatting: 4234 formatting issues', errors=['[error] src/app/api/appointments/route.ts: SyntaxError: Property assignment expected. (134:23)', '[error]   132 |             notes: appt.notes,', '[error]   133 |             createdAt: appt.created_at,', '[error] > 134 |             patient: {,', '[error]       |                       ^', '[error]   135 |                 id: appt.patient_id,', '[error]   136 |                 firstName: appt.patient_first_name,', '[error]   137 |                 lastName: appt.patient_last_name,', \"[error] src/app/api/auth/login/route.ts: SyntaxError: ')' expected. (42:71)\", '[error]   40 |         \"SELECT u.user_id, u.username, u.email, u.password_hash, u.full_name, u.role_id, u.is_active, r.role_name \" +', '[error]   41 |         \"FROM Users u JOIN Roles r ON u.role_id = r.role_id \" +', '[error] > 42 |         \"WHERE (u.username = ? OR u.email = ?) AND u.is_active = TRUE\";', '[error]      |                                                                       ^', '[error]   43 |     );', '[error]   44 |       .bind(identifier, identifier);', '[error]   45 |       // Define the expected result type more accurately', \"[error] src/app/api/auth/logout/route.ts: SyntaxError: ')' expected. (12:21)\", '[error]   10 |     const session = await getIronSession<IronSessionData>(', '[error]   11 |       cookieStore, // FIX: Pass the store', '[error] > 12 |       sessionOptions;', '[error]      |                     ^', '[error]   13 |     ),', '[error]   14 |     session.destroy(); // Clear the session data', '[error]   15 |', '[error] src/app/api/auth/me/route.ts: SyntaxError: Expression expected. (23:21)', '[error]   21 |     // Mock user details for development', '[error]   22 |     // Assuming user.roles is an array and we take the first role', '[error] > 23 |     const userRole =;', '[error]      |                     ^', '[error]   24 |       user?.roles && user.roles.length > 0 ? user.roles[0] : \"User\"; // Adjusted to use user.roles', '[error]   25 |', '[error]   26 |     const userDetails = {', '[error] src/app/api/auth/register/route.ts: SyntaxError: Expression expected. (107:48)', '[error]   105 |', '[error]   106 | \\t\\tif (!session.user) {', '[error] > 107 | \\t\\t\\tthrow new Error(`Failed to register user: ${}`;', '[error]       | \\t\\t\\t                                            ^', '[error]   108 | \\t\\t}', '[error]   109 |', '[error]   110 | \\t\\t// Optionally: Return the newly created user ID or a success message', '[error] src/app/api/billable-items/route.ts: SyntaxError: Declaration or statement expected. (121:9)', '[error]   119 |             \"INSERT INTO BillableItems (item_code, item_name, description, item_type, unit_price, department, is_taxable, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"', '[error]   120 |         );', '[error] > 121 |         .bind(', '[error]       |         ^', '[error]   122 |             itemData.item_code || null,', '[error]   123 |             itemData.item_name,', '[error]   124 |             itemData.description || null,', '[error] src/app/api/billing/invoices/[id]/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/billing/invoices/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/billing/payments/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', \"[error] src/app/api/billing/service-items/route.ts: SyntaxError: ':' expected. (10:26)\", '[error]    8 |   {', '[error]    9 |     id: \"si_001\",', '[error] > 10 |     \"Doctor Consultation\",', '[error]      |                          ^', '[error]   11 |     \"Consultation\",', '[error]   12 |     0,', '[error]   13 |     1', \"[error] src/app/api/clinical-documentation/[id]/amend/route.ts: SyntaxError: ',' expected. (14:23)\", '[error]   12 |  */', '[error]   13 | export const POST = async (', '[error] > 14 |   request: NextRequest;', '[error]      |                       ^', '[error]   15 |   { params }: { id: string }', '[error]   16 | ) => {', '[error]   17 |   try {', \"[error] src/app/api/clinical-documentation/[id]/route.ts: SyntaxError: ',' expected. (14:23)\", '[error]   12 |  */', '[error]   13 | export const GET = async (', '[error] > 14 |   request: NextRequest;', '[error]      |                       ^', '[error]   15 |   { params }: { id: string }', '[error]   16 | ) => {', '[error]   17 |   try {', \"[error] src/app/api/clinical-documentation/[id]/sign/route.ts: SyntaxError: ',' expected. (14:23)\", '[error]   12 |  */', '[error]   13 | export const POST = async (', '[error] > 14 |   request: NextRequest;', '[error]      |                       ^', '[error]   15 |   { params }: { id: string }', '[error]   16 | ) => {', '[error]   17 |   try {', \"[error] src/app/api/clinical-documentation/route.ts: SyntaxError: ',' expected. (32:19)\", '[error]   30 |     const filters = {', '[error]   31 |       documentType: searchParams.get(\"documentType\") || undefined,', '[error] > 32 |       searchParams.get(\"authorId\") || undefined,', '[error]      |                   ^', '[error]   33 |       searchParams.get(\"dateTo\") || undefined,', '[error]   34 |       page: searchParams.has(\"page\") ? parseInt(searchParams.get(\"page\") as string, 10) : 1,', '[error]   35 |       pageSize: searchParams.has(\"pageSize\") ? parseInt(searchParams.get(\"pageSize\") as string, 10) : 20,', \"[error] src/app/api/clinical-documentation/templates/route.ts: SyntaxError: ',' expected. (27:19)\", '[error]   25 |     const filters = {', '[error]   26 |       templateType: searchParams.get(\"templateType\") || undefined,', '[error] > 27 |       searchParams.has(\"page\") ? Number.parseInt(searchParams.get(\"page\") as string, 10) : 1,', '[error]      |                   ^', '[error]   28 |       pageSize: searchParams.has(\"pageSize\") ? parseInt(searchParams.get(\"pageSize\") as string, 10) : 20,', '[error]   29 |     };', '[error]   30 |', '[error] src/app/api/cloudflare-fix/route.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import type { D1Database } from \"@cloudflare/workers-types\"; // FIX: Import D1Database type', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // import { NextRequest } from \"next/server\"', '[error]   6 | // Define the expected structure of the Cloudflare environment bindings', \"[error] src/app/api/consultations/[consultationId]/route.ts: SyntaxError: '=>' expected. (15:61)\", '[error]   13 |', '[error]   14 | // Helper function to get consultation ID from URL', '[error] > 15 | const getConsultationId = (pathname: string): number | null {', '[error]      |                                                             ^', '[error]   16 |     const parts = pathname.split(\"/\");', '[error]   17 |     const idStr = parts[parts.length - 1];', '[error]   18 |     const id = Number.parseInt(idStr, 10);', \"[error] src/app/api/consultations/route.ts: SyntaxError: ',' expected. (23:72)\", '[error]   21 |     dateTo: z.string().regex(/^\\\\d{4}-\\\\d{2}-\\\\d{2}$/).optional(),', '[error]   22 |     limit: z.coerce.number().int().positive().optional().default(50),', '[error] > 23 |     offset: z.coerce.number().int().nonnegative().optional().default(0);', '[error]      |                                                                        ^', '[error]   24 | });', '[error]   25 |', '[error]   26 | // Define type for the query result row', '[error] src/app/api/dashboard/ipd-stats/route.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { getDB } from \"@/lib/database\";', '[error]   3 | import { getSession } from \"@/lib/session\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | // API route for IPD statistics', '[error]   7 | // Define expected structure for query results where needed', \"[error] src/app/api/diagnostics/lab/critical-values/route.ts: SyntaxError: ':' expected. (73:39)\", '[error]   71 |         await auditLog({', '[error]   72 |           userId: session.user.id,', '[error] > 73 |           \"laboratory_critical_values\",', '[error]      |                                       ^', '[error]   74 |           details: testId, page, pageSize', '[error]   75 |         });', '[error]   76 |', '[error] src/app/api/diagnostics/lab/reference-ranges/route.ts: SyntaxError: Expression expected. (108:23)', '[error]   106 |', '[error]   107 |     // Validate that either numeric values or text value is provided', '[error] > 108 |     if (!session.user)|;', '[error]       |                       ^', '[error]   109 |       (body?.text_value && (body.value_low !== undefined || body.value_high !== undefined));', '[error]   110 |     ) ;', '[error]   111 |       return NextResponse.json(', \"[error] src/app/api/diagnostics/lab/reflex-rules/route.ts: SyntaxError: ',' expected. (97:53)\", '[error]    95 |         pageSize,', '[error]    96 |         totalCount,', '[error] >  97 |         totalPages: Math.ceil(totalCount / pageSize);', '[error]       |                                                     ^', '[error]    98 |       }', '[error]    99 |     });', '[error]   100 |   } catch (error: unknown) {', '[error] src/app/api/diagnostics/lab/results/critical-alerts/route.ts: SyntaxError: Expression expected. (30:65)', '[error]   28 |', '[error]   29 |     // Cache key', '[error] > 30 |     const cacheKey = `diagnostic:lab:critical-alerts:${status ||;', '[error]      |                                                                 ^', '[error]   31 |       \"all\"}:${assignedTo ||', '[error]   32 |       \"all\"}:${page}:${pageSize}:${session.user.id}`;', '[error]   33 |', \"[error] src/app/api/diagnostics/lab/results/delta-checks/route.ts: SyntaxError: ':' expected. (73:36)\", '[error]   71 |         await auditLog({', '[error]   72 |           userId: session.user.id,', '[error] > 73 |           \"laboratory_delta_checks\",', '[error]      |                                    ^', '[error]   74 |           details: testId, page, pageSize', '[error]   75 |         });', '[error]   76 |', '[error] src/app/api/diagnostics/lab/results/route.ts: SyntaxError: Property or signature expected. (10:3)', '[error]    8 | interface FHIRObservation {', '[error]    9 |   resourceType: \"Observation\",', '[error] > 10 |   {', '[error]      |   ^', '[error]   11 |     versionId: string,', '[error]   12 |     lastUpdated: string;', '[error]   13 |     security?: Array<{', \"[error] src/app/api/diagnostics/lab/specimen-tracking/route.ts: SyntaxError: ',' expected. (129:53)\", '[error]   127 |         pageSize,', '[error]   128 |         totalCount,', '[error] > 129 |         totalPages: Math.ceil(totalCount / pageSize);', '[error]       |                                                     ^', '[error]   130 |       }', '[error]   131 |     });', '[error]   132 |   } catch (error: unknown) {', '[error] src/app/api/diagnostics/lab/specimens/route.ts: SyntaxError: Expression expected. (35:62)', '[error]   33 |', '[error]   34 |     // Cache key', '[error] > 35 |     const cacheKey = `diagnostic:lab:specimens:${patientId ||;', '[error]      |                                                              ^', '[error]   36 |       \"\"}:${orderId ||', '[error]   37 |       \"\"}:${status ||', '[error]   38 |       \"\"}:${specimenType ||', \"[error] src/app/api/diagnostics/lab/test-panels/route.ts: SyntaxError: ';' expected. (21:31)\", '[error]   19 |   is_active?: boolean;', '[error]   20 |   patient_preparation?: string;', '[error] > 21 |   available_priorities?: Array>', '[error]      |                               ^', '[error]   22 | }', '[error]   23 |', '[error]   24 | // GET /api/diagnostics/lab/test-panels - Get all test panels', '[error] src/app/api/diagnostics/lab/tests/route.ts: SyntaxError: Property or signature expected. (10:3)', '[error]    8 | interface FHIRDiagnosticReport {', '[error]    9 |   resourceType: \"DiagnosticReport\",', '[error] > 10 |   {', '[error]      |   ^', '[error]   11 |     versionId: string,', '[error]   12 |     lastUpdated: string;', '[error]   13 |     security?: Array<{', \"[error] src/app/api/diagnostics/lab/workflows/route.ts: SyntaxError: ';' expected. (10:15)\", '[error]    8 |   name: string;', '[error]    9 |   description?: string;', '[error] > 10 |   steps: Array>', '[error]      |               ^', '[error]   11 |   is_active?: boolean;', '[error]   12 |   applicable_test_ids?: number[];', '[error]   13 | }', \"[error] src/app/api/diagnostics/pacs/config/route.ts: SyntaxError: ',' expected. (56:105)\", '[error]   54 |           aetitle: decryptSensitiveData(result.results[0].aetitle),', '[error]   55 |           hostname: decryptSensitiveData(result.results[0].hostname),', '[error] > 56 |           username: result.results[0].username ? decryptSensitiveData(result.results[0].username) : null;', '[error]      |                                                                                                         ^', '[error]   57 |           // Don\"t include password in response', '[error]   58 |           password: null', '[error]   59 |         };', '[error] src/app/api/diagnostics/pacs/images/route.ts: SyntaxError: Expression expected. (34:60)', '[error]   32 |', '[error]   33 |     // Cache key', '[error] > 34 |     const cacheKey = `diagnostic:pacs:images:${patientId ||;', '[error]      |                                                            ^', '[error]   35 |       \"\"}:${studyInstanceUid ||', '[error]   36 |       \"\"}:${seriesInstanceUid ||', '[error]   37 |       \"\"}:${modality ||', '[error] src/app/api/diagnostics/pacs/worklist/route.ts: SyntaxError: Expression expected. (38:62)', '[error]   36 |', '[error]   37 |     // Cache key', '[error] > 38 |     const cacheKey = `diagnostic:pacs:worklist:${patientId ||;', '[error]      |                                                              ^', '[error]   39 |       \"\"}:${modality ||', '[error]   40 |       \"\"}:${status ||', '[error]   41 |       \"\"}:${scheduledDate ||', '[error] src/app/api/diagnostics/radiology/orders/route.ts: SyntaxError: Expression expected. (36:65)', '[error]   34 |', '[error]   35 |     // Cache key', '[error] > 36 |     const cacheKey = `diagnostic:radiology:orders:${patientId ||;', '[error]      |                                                                 ^', '[error]   37 |       \"\"}:${status ||', '[error]   38 |       \"\"}:${priority ||', '[error]   39 |       \"\"}:${modality ||', '[error] src/app/api/diagnostics/reports/route.ts: SyntaxError: Expression expected. (38:56)', '[error]   36 |', '[error]   37 |     // Cache key', '[error] > 38 |     const cacheKey = `diagnostic:reports:${patientId ||;', '[error]      |                                                        ^', '[error]   39 |       \"\"}:${reportType ||', '[error]   40 |       \"\"}:${status ||', '[error]   41 |       \"\"}:${fromDate ||', \"[error] src/app/api/doctors/[id]/schedules/route.ts: SyntaxError: '=>' expected. (15:55)\", '[error]   13 |', '[error]   14 | // Helper function to get doctor ID from URL', '[error] > 15 | const getDoctorId = (pathname: string): number | null {', '[error]      |                                                       ^', '[error]   16 |     const parts = pathname.split(\"/\");', '[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part', '[error]   18 |     const id = Number.parseInt(idStr, 10);', '[error] src/app/api/doctors/route.ts: SyntaxError: Expression expected. (37:104)', '[error]   35 |', '[error]   36 |     // 2. Build query based on filters', '[error] > 37 |     let query = \"SELECT d.doctor_id, d.user_id, d.specialty, d.qualifications, u.full_name, u.email \" +;', '[error]      |                                                                                                        ^', '[error]   38 |                 \"FROM Doctors d JOIN Users u ON d.user_id = u.user_id WHERE u.is_active = TRUE\";', '[error]   39 |     const queryParams: string[] = [];', '[error]   40 |', \"[error] src/app/api/er/visits/[id]/alerts/route.ts: SyntaxError: '=>' expected. (30:3)\", '[error]   28 |   _request: NextRequest, // Prefixed as unused', '[error]   29 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error] > 30 | ) {', '[error]      |   ^', '[error]   31 |   try {', '[error]   32 |     // const { env } = getRequestContext(); // Cloudflare specific', '[error]   33 |     // const db = env.DB; // Cloudflare specific', \"[error] src/app/api/er/visits/[id]/route.ts: SyntaxError: '=>' expected. (44:3)\", '[error]   42 |   _request: NextRequest, // FIX: Prefixed as unused, changed Request to NextRequest', '[error]   43 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);', '[error] > 44 | ) {', '[error]      |   ^', '[error]   45 |   try {', '[error]   46 |     // const { env } = getRequestContext(); // Cloudflare specific', '[error]   47 |     // const db = env.DB; // Cloudflare specific', \"[error] src/app/api/er/visits/[id]/statuses/route.ts: SyntaxError: '=>' expected. (11:3)\", '[error]    9 |   _request: NextRequest, // Fixed: Use NextRequest', '[error]   10 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error] > 11 | ) {', '[error]      |   ^', '[error]   12 |   try {', '[error]   13 |     // const { env } = getRequestContext(); // Cloudflare specific', '[error]   14 |     // const db = env.DB; // Cloudflare specific', \"[error] src/app/api/er/visits/[id]/triage/route.ts: SyntaxError: ';' expected. (8:22)\", '[error]    6 |   triage_nurse_id: string | number,', '[error]    7 |   esi_level: number; // Emergency Severity Index (1-5)', '[error] >  8 |   vital_signs: Record> // e.g., { temp: 37.0, hr: 80, rr: 16, bp: \"120/80\", spo2: 98 }', '[error]      |                      ^', '[error]    9 |   assessment_notes?: string | null; // FIX: Allow null', '[error]   10 |   triage_timestamp?: string; // Optional, defaults to now', '[error]   11 | }', \"[error] src/app/api/er/visits/route.ts: SyntaxError: ':' expected. (29:15)\", '[error]   27 |   {', '[error]   28 |     id: 1,', '[error] > 29 |     \"John Doe\", // Denormalized for easier display', '[error]      |               ^', '[error]   30 |     mrn: \"MRN001\", // Denormalized', '[error]   31 |     arrival_timestamp: [0] - 3 * 60 * 60 * 1000).toISOString(), // 3 hours ago', '[error]   32 |     chief_complaint: \"Chest pain\",', '[error] src/app/api/fhir/r4/[...resource]/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { FHIRMedicationRequest } from \"@/lib/fhir/medication\";', '[error]    8 | import { FHIRPatient } from \"@/lib/fhir/patient\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * FHIR R4 API Routes Implementation;', '[error] src/app/api/fhir/r4/route.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { fhirService } from \"@/lib/fhir/fhir.service\";', '[error]   5 | import type { FHIRBundle } from \"@/lib/fhir/types\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * FHIR R4 Batch/Transaction Processing Endpoint;', '[error] src/app/api/financial-reporting/reports/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/health/cache/route.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cache } from \"@/lib/cache\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Cache Health Check Endpoint;', '[error] src/app/api/health/db/route.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { PrismaClient } from \"@prisma/client\";', '[error]   3 | import { NextRequest, NextResponse } from \"next/server\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Database Health Check Endpoint;', '[error] src/app/api/health/route.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 |', '[error]   5 | import { cache } from \"@/lib/cache\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Health Check API Endpoints;', \"[error] src/app/api/hr/assets/[id]/maintenance/route.ts: SyntaxError: ',' expected. (24:23)\", '[error]   22 | // POST handler for recording maintenance', '[error]   23 | export const _POST = async (', '[error] > 24 |   request: NextRequest;', '[error]      |                       ^', '[error]   25 |   { params }: { id: string }', '[error]   26 | ) => {', '[error]   27 |   try {', \"[error] src/app/api/hr/assets/[id]/route.ts: SyntaxError: ',' expected. (8:23)\", '[error]    6 | // GET handler for retrieving a specific asset', '[error]    7 | export const _GET = async (', '[error] >  8 |   request: NextRequest;', '[error]      |                       ^', '[error]    9 |   { params }: { id: string }', '[error]   10 | ) => {', '[error]   11 |   try {', '[error] src/app/api/hr/assets/route.ts: SyntaxError: Declaration or statement expected. (86:7)', '[error]   84 |     const location = searchParams.get(\"location\") || undefined;', '[error]   85 |     const purchaseDateStart = searchParams.get(\"purchaseDateStart\");', '[error] > 86 |       ? ;', '[error]      |       ^', '[error]   87 |       : undefined;', '[error]   88 |     const purchaseDateEnd = searchParams.get(\"purchaseDateEnd\");', '[error]   89 |       ? ;', '[error] src/app/api/hr/attendance/route.ts: SyntaxError: Expression expected. (77:45)', '[error]   75 |', '[error]   76 |     // Parse filter parameters', '[error] > 77 |     const date = searchParams.get(\"date\") ? : undefined;', '[error]      |                                             ^', '[error]   78 |     const startDate = searchParams.get(\"startDate\") ? : undefined;', '[error]   79 |     const endDate = searchParams.get(\"endDate\") ? : undefined;', '[error]   80 |     const departmentId = searchParams.get(\"departmentId\") || undefined;', \"[error] src/app/api/hr/biomedical/[id]/calibration/route.ts: SyntaxError: ',' expected. (24:23)\", '[error]   22 | // POST handler for recording calibration', '[error]   23 | export const _POST = async (', '[error] > 24 |   request: NextRequest;', '[error]      |                       ^', '[error]   25 |   { params }: { id: string }', '[error]   26 | ) => {', '[error]   27 |   try {', \"[error] src/app/api/hr/biomedical/[id]/route.ts: SyntaxError: ',' expected. (8:23)\", '[error]    6 | // GET handler for retrieving a specific biomedical equipment', '[error]    7 | export const _GET = async (', '[error] >  8 |   request: NextRequest;', '[error]      |                       ^', '[error]    9 |   { params }: { id: string }', '[error]   10 | ) => {', '[error]   11 |   try {', \"[error] src/app/api/hr/biomedical/route.ts: SyntaxError: ',' expected. (29:39)\", '[error]   27 |   }),', '[error]   28 |   notes: z.string().optional(),', '[error] > 29 |   tags: z.array(z.string()).optional();', '[error]      |                                       ^', '[error]   30 |   // Biomedical specific fields', '[error]   31 |   deviceIdentifier: z.string().optional(),', '[error]   32 |   regulatoryClass: z.enum([\"CLASS_I\", \"CLASS_II\", \"CLASS_III\"], {', \"[error] src/app/api/hr/payroll/periods/route.ts: SyntaxError: ',' expected. (44:22)\", '[error]   42 |       endDate: new Date(endDate),', '[error]   43 |       paymentDate: new Date(paymentDate),', '[error] > 44 |       status: \"DRAFT\";', '[error]      |                      ^', '[error]   45 |       notes,', '[error]   46 |     });', '[error]   47 |', \"[error] src/app/api/hr/payroll/salary-structures/route.ts: SyntaxError: ')' expected. (23:7)\", '[error]   21 |       taxable: z.boolean(),', '[error]   22 |       isBase: z.boolean().optional()', '[error] > 23 |     });', '[error]      |       ^', '[error]   24 |   ).min(1, \"At least one component is required\"),', '[error]   25 | });', '[error]   26 |', \"[error] src/app/api/hr/staff/[id]/route.ts: SyntaxError: ',' expected. (25:23)\", '[error]   23 | // GET /api/hr/staff/[id]', '[error]   24 | export const _GET = async (', '[error] > 25 |   request: NextRequest;', '[error]      |                       ^', '[error]   26 |   { params }: { id: string }', '[error]   27 | ) => {', '[error]   28 |   try {', '[error] src/app/api/hr/staff/route.ts: SyntaxError: Expression expected. (17:44)', '[error]   15 |   phone: z.string().optional(),', '[error]   16 |   address: z.any().optional(),', '[error] > 17 |   joiningDate: z.string().transform(val => ,', '[error]      |                                            ^', '[error]   18 |   departmentId: z.string().optional(),', '[error]   19 |   userId: z.string().optional(),', '[error]   20 |   photo: z.string().optional(),', '[error] src/app/api/insurance/claims/[id]/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/insurance/claims/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/insurance/policies/[id]/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', '[error] src/app/api/insurance/policies/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest } from \"next/server\";', '[error]     | ^', '[error]   3 | import { z } from \"zod\";', '[error]   4 |', '[error]   5 | import { prisma } from \"@/lib/prisma\";', \"[error] src/app/api/insurance/pre-authorizations/route.ts: SyntaxError: ':' expected. (27:19)\", '[error]   25 |   {', '[error]   26 |     _id: 1,', '[error] > 27 |     \"Appendectomy\",', '[error]      |                   ^', '[error]   28 |     [0] - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago', '[error]   29 |     status: \"Approved\", // e.g., \"Pending\", \"Approved\", \"Rejected\", \"More Info Required\"', '[error]   30 |     authorization_number: \"AUTH12345\",', \"[error] src/app/api/insurance/providers/route.ts: SyntaxError: ':' expected. (20:18)\", '[error]   18 |   {', '[error]   19 |     _id: 1,', '[error] > 20 |     \"Alice Brown\",', '[error]      |                  ^', '[error]   21 |     \"555-1111\",', '[error]   22 |     1', '[error]   23 |   },', \"[error] src/app/api/integration/support-services/route.ts: SyntaxError: ',' expected. (17:23)\", '[error]   15 |  */', '[error]   16 | export const GET = async (', '[error] > 17 |   request: NextRequest;', '[error]      |                       ^', '[error]   18 |   { params }: { patientId: string }', '[error]   19 | ) => {', '[error]   20 |   return errorHandlingMiddleware(request, async (req) => {', \"[error] src/app/api/inventory-items/[itemId]/batches/route.ts: SyntaxError: '=>' expected. (15:53)\", '[error]   13 |', '[error]   14 | // Helper function to get item ID from URL', '[error] > 15 | const getItemId = (pathname: string): number | null {', '[error]      |                                                     ^', '[error]   16 |     // Pathname might be /api/inventory-items/123/batches', '[error]   17 |     const parts = pathname.split(\"/\");', '[error]   18 |     const idStr = parts[parts.length - 2]; // Second to last part', \"[error] src/app/api/inventory-items/route.ts: SyntaxError: ',' expected. (89:52)\", '[error]   87 |     unit_of_measure: z.string().optional(),', '[error]   88 |     reorder_level: z.number().int().nonnegative().optional().default(0),', '[error] > 89 |     is_active: z.boolean().optional().default(true);', '[error]      |                                                    ^', '[error]   90 | });', '[error]   91 |', '[error]   92 | export const _POST = async (request: Request) => {', \"[error] src/app/api/invoices/[invoiceId]/items/route.ts: SyntaxError: '=>' expected. (14:56)\", '[error]   12 |', '[error]   13 | // Helper function to get invoice ID from URL', '[error] > 14 | const getInvoiceId = (pathname: string): number | null {', '[error]      |                                                        ^', '[error]   15 |     // Pathname might be /api/invoices/123/items', '[error]   16 |     const parts = pathname.split(\"/\");', '[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part', \"[error] src/app/api/invoices/[invoiceId]/payments/route.ts: SyntaxError: '=>' expected. (13:56)\", '[error]   11 |', '[error]   12 | // Helper function to get invoice ID from URL', '[error] > 13 | const getInvoiceId = (pathname: string): number | null {', '[error]      |                                                        ^', '[error]   14 |     // Pathname might be /api/invoices/123/payments', '[error]   15 |     const parts = pathname.split(\"/\");', '[error]   16 |     const idStr = parts[parts.length - 2]; // Second to last part', \"[error] src/app/api/invoices/[invoiceId]/route.ts: SyntaxError: '=>' expected. (16:56)\", '[error]   14 |', '[error]   15 | // Helper function to get invoice ID from URL', '[error] > 16 | const getInvoiceId = (pathname: string): number | null {', '[error]      |                                                        ^', '[error]   17 |     // Pathname might be /api/invoices/123', '[error]   18 |     const parts = pathname.split(\"/\");', '[error]   19 |     const idStr = parts[parts.length - 1]; // Last part', \"[error] src/app/api/invoices/route.ts: SyntaxError: ',' expected. (26:43)\", '[error]   24 |       description: z.string(),', '[error]   25 |       quantity: z.number().positive(),', '[error] > 26 |       unit_price: z.number().nonnegative();', '[error]      |                                           ^', '[error]   27 |     });', '[error]   28 |   ).min(1, \"At least one invoice item is required\"),', '[error]   29 | });', \"[error] src/app/api/ipd/[admissionId]/progress-notes/route.ts: SyntaxError: ',' expected. (19:25)\", '[error]   17 | // GET /api/ipd/[admissionId]/progress-notes - Fetch progress notes for an admission', '[error]   18 | export const _GET = async (', '[error] > 19 |     request: NextRequest;', '[error]      |                         ^', '[error]   20 |     { params }: { params: Promise<{ admissionId: string }> }', '[error]   21 | ) => {', '[error]   22 |     const session = await getSession();', \"[error] src/app/api/ipd/admissions/[id]/discharge/route.ts: SyntaxError: ',' expected. (11:24)\", '[error]    9 | // GET /api/ipd/admissions/[id]/discharge - Get discharge summary for an admission', '[error]   10 | export const _GET = async (', '[error] > 11 |   _request: NextRequest;', '[error]      |                        ^', '[error]   12 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   13 | ) {', '[error]   14 |   try {', \"[error] src/app/api/ipd/admissions/[id]/medication-administration/route.ts: SyntaxError: ',' expected. (16:24)\", '[error]   14 | // GET /api/ipd/admissions/[id]/medication-administration - Get all medication administration records for an admission', '[error]   15 | export const _GET = async (', '[error] > 16 |   _request: NextRequest;', '[error]      |                        ^', '[error]   17 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   18 | ) {', '[error]   19 |   try {', \"[error] src/app/api/ipd/admissions/[id]/nursing-notes/route.ts: SyntaxError: ',' expected. (18:24)\", '[error]   16 | // GET /api/ipd/admissions/[id]/nursing-notes - Get all nursing notes for an admission', '[error]   17 | export const _GET = async (', '[error] > 18 |   _request: NextRequest;', '[error]      |                        ^', '[error]   19 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   20 | ) {', '[error]   21 |   try {', \"[error] src/app/api/ipd/admissions/[id]/progress-notes/route.ts: SyntaxError: ',' expected. (16:24)\", '[error]   14 | // GET /api/ipd/admissions/[id]/progress-notes - Get all progress notes for an admission', '[error]   15 | export const _GET = async (', '[error] > 16 |   _request: NextRequest;', '[error]      |                        ^', '[error]   17 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   18 | ) {', '[error]   19 |   try {', \"[error] src/app/api/ipd/admissions/[id]/vital-signs/route.ts: SyntaxError: ',' expected. (20:24)\", '[error]   18 | // GET /api/ipd/admissions/[id]/vital-signs - Get all vital signs for an admission', '[error]   19 | export const _GET = async (', '[error] > 20 |   _request: NextRequest;', '[error]      |                        ^', '[error]   21 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   22 | ) {', '[error]   23 |   try {', '[error] src/app/api/ipd/admissions/route.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest, NextResponse } from \"next/server\";', '[error]     | ^', '[error]   3 |   getAdmissionsFromDB,', '[error]   4 |   getAdmissionByIdFromDB,', '[error]   5 |   createAdmissionInDB,', '[error] src/app/api/ipd/beds/route.ts: SyntaxError: Expression expected. (58:25)', '[error]   56 |   } catch (error: unknown) {', '[error]   57 |', '[error] > 58 |     const errorMessage =;', '[error]      |                         ^', '[error]   59 |       error instanceof Error ? error.message : \"An unknown error occurred\";', '[error]   60 |     return NextResponse.json(', '[error]   61 |       { error: \"Failed to fetch beds\", details: errorMessage },', '[error] src/app/api/ipd/integration/laboratory/route.ts: SyntaxError: Expression expected. (69:5)', '[error]   67 |           { status: 400 }', '[error]   68 |         ),', '[error] > 69 |     }', '[error]      |     ^', '[error]   70 |   } catch (error) {', '[error]   71 |     return handleApiError(error);', '[error]   72 |   }', '[error] src/app/api/ipd/integration/pharmacy/route.ts: SyntaxError: Expression expected. (84:5)', '[error]   82 |           { status: 400 }', '[error]   83 |         ),', '[error] > 84 |     }', '[error]      |     ^', '[error]   85 |   } catch (error) {', '[error]   86 |     return handleApiError(error);', '[error]   87 |   }', '[error] src/app/api/ipd/route.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { IPDProductionService } from \"@/lib/ipd-service.production\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | // Example API route for IPD (Inpatient Department) Management', '[error]   10 | // Schema for IPD Admission', \"[error] src/app/api/lab-orders/[labOrderId]/items/route.ts: SyntaxError: '=>' expected. (14:57)\", '[error]   12 |', '[error]   13 | // Helper function to get lab order ID from URL', '[error] > 14 | const getLabOrderId = (pathname: string): number | null {', '[error]      |                                                         ^', '[error]   15 |     // Pathname might be /api/lab-orders/123/items', '[error]   16 |     const parts = pathname.split(\"/\");', '[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part', '[error] src/app/api/lab-orders/[labOrderId]/route.ts: SyntaxError: Property or signature expected. (20:5)', '[error]   18 |     number,', '[error]   19 |     string,', '[error] > 20 |     string | null,', '[error]      |     ^', '[error]   21 |     string,', '[error]   22 |     string,', '[error]   23 |     doctor_full_name: string | null', \"[error] src/app/api/lab-orders/route.ts: SyntaxError: ',' expected. (23:72)\", '[error]   21 |     dateTo: z.string().regex(/^\\\\d{4}-\\\\d{2}-\\\\d{2}$/).optional(),', '[error]   22 |     limit: z.coerce.number().int().positive().optional().default(50),', '[error] > 23 |     offset: z.coerce.number().int().nonnegative().optional().default(0);', '[error]      |                                                                        ^', '[error]   24 | });', '[error]   25 |', '[error]   26 | // Define the expected structure based on the SELECT query', \"[error] src/app/api/laboratory/categories/route.ts: SyntaxError: ')' expected. (27:60)\", '[error]   25 |     // Assuming db.query exists and returns { results: [...] } based on db.ts mock', '[error]   26 |     const categoriesResult = await database.query(', '[error] > 27 |       \"SELECT * FROM lab_test_categories ORDER BY name ASC\";', '[error]      |                                                            ^', '[error]   28 |     );', '[error]   29 |', '[error]   30 |     return NextResponse.json(categoriesResult.results || []); // Changed .rows to .results', '[error] src/app/api/laboratory/orders/route.ts: SyntaxError: Property or signature expected. (15:3)', '[error]   13 | interface LabOrderInput {', '[error]   14 |   patient_id: number | string,', '[error] > 15 |   LabTestInput[];', '[error]      |   ^', '[error]   16 |   order_date?: string; // Optional, defaults to now', '[error]   17 |   priority?: \"routine\" | \"urgent\" | \"stat\"; // Optional, defaults to routine', '[error]   18 |   notes?: string; // Optional', '[error] src/app/api/laboratory/results/route.ts: SyntaxError: Property or signature expected. (19:3)', '[error]   17 | interface LabResult {', '[error]   18 |   id: number,', '[error] > 19 |   number | null,', '[error]      |   ^', '[error]   20 |   boolean,', '[error]   21 |   number,', '[error]   22 |   number | null,', '[error] src/app/api/laboratory/samples/route.ts: SyntaxError: Property or signature expected. (21:3)', '[error]   19 |   id: number,', '[error]   20 |   string,', '[error] > 21 |   number | null,', '[error]      |   ^', '[error]   22 |   number | null,', '[error]   23 |   \"collected\" | \"received\" | \"processing\" | \"rejected\",', '[error]   24 |   string | null,', '[error] src/app/api/laboratory/tests/route.ts: SyntaxError: Expression expected. (34:16)', '[error]   32 |', '[error]   33 |     // Build query', '[error] > 34 |     let query =;', '[error]      |                ^', '[error]   35 |       \"SELECT t.*, c.name as category_name FROM lab_tests t JOIN lab_test_categories c ON t.category_id = c.id\";', '[error]   36 |     // FIX: Use specific type for params', '[error]   37 |     const parameters: (string | number | boolean)[] = [];', '[error] src/app/api/monitoring/alerts/route.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Monitoring Alerts API Endpoint;', '[error] src/app/api/monitoring/metrics/route.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Monitoring Metrics API Endpoint;', '[error] src/app/api/opd-visits/[visitId]/route.ts: SyntaxError: Property or signature expected. (14:3)', '[error]   12 | interface OPDVisitQueryResult {', '[error]   13 |   opd_visit_id: number,', '[error] > 14 |   number | null,', '[error]      |   ^', '[error]   15 |   visit_datetime: string; // Assuming ISO string format', '[error]   16 |   visit_type: string; // Should ideally be an enum', '[error]   17 |   doctor_id: number,', \"[error] src/app/api/opd-visits/route.ts: SyntaxError: ',' expected. (22:61)\", '[error]   20 |     diagnosis: z.string().optional().nullable(),', '[error]   21 |     treatment_plan: z.string().optional().nullable(),', '[error] > 22 |     follow_up_instructions: z.string().optional().nullable();', '[error]      |                                                             ^', '[error]   23 | });', '[error]   24 |', '[error]   25 | // GET /api/opd-visits - Fetch list of OPD visits (with filtering/pagination);', \"[error] src/app/api/opd/appointments/route.ts: SyntaxError: '=>' expected. (39:67)\", '[error]   37 |', '[error]   38 | // Placeholder function to simulate database interaction', '[error] > 39 | async const getAppointmentsFromDB = (filters: AppointmentFilters) {', '[error]      |                                                                   ^', '[error]   40 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]   41 |   // Replace with actual D1 query when DB is configured', '[error]   42 |   // const { env } = getRequestContext();', \"[error] src/app/api/ot/bookings/[id]/checklist-responses/route.ts: SyntaxError: ';' expected. (10:20)\", '[error]    8 |   checklist_template_id: string; // Assuming ID is string', '[error]    9 |   phase: string; // e.g., \"Pre-Op\", \"Intra-Op\", \"Post-Op\"', '[error] > 10 |   responses: Record> // JSON object { \"itemId\": responseValue, ... }', '[error]      |                    ^', '[error]   11 |   completed_by_id?: string; // Optional, assuming ID is string', '[error]   12 | }', '[error]   13 |', \"[error] src/app/api/ot/bookings/[id]/record/route.ts: SyntaxError: ',' expected. (27:24)\", '[error]   25 | // GET /api/ot/bookings/[id]/record - Get operation record for a booking', '[error]   26 | export const _GET = async (', '[error] > 27 |   _request: NextRequest;', '[error]      |                        ^', '[error]   28 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);', '[error]   29 | ) {', '[error]   30 |   try {', \"[error] src/app/api/ot/bookings/[id]/route.ts: SyntaxError: '=>' expected. (11:3)\", '[error]    9 |   _request: NextRequest, // FIX: Use NextRequest', '[error]   10 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error] > 11 | ) {', '[error]      |   ^', '[error]   12 |   try {', '[error]   13 |     // const { env } = getRequestContext()', '[error]   14 |     // const DB = env.DB', \"[error] src/app/api/ot/bookings/[id]/staff/route.ts: SyntaxError: ',' expected. (14:24)\", '[error]   12 | // GET /api/ot/bookings/[id]/staff - Get staff assigned to a specific OT booking', '[error]   13 | export const _GET = async (', '[error] > 14 |   _request: NextRequest;', '[error]      |                        ^', '[error]   15 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   16 | ) {', '[error]   17 |   try {', '[error] src/app/api/ot/bookings/route.ts: SyntaxError: Declaration or statement expected. (84:7)', '[error]   82 |     const { results } = await DB.prepare(query)', '[error]   83 |       .bind(...parameters);', '[error] > 84 |       .all();', '[error]      |       ^', '[error]   85 |', '[error]   86 |     return NextResponse.json(results);', '[error]   87 |   } catch (error: unknown) {', \"[error] src/app/api/ot/checklist-templates/[id]/route.ts: SyntaxError: ',' expected. (24:24)\", '[error]   22 | // GET /api/ot/checklist-templates/[id] - Get details of a specific checklist template', '[error]   23 | export const _GET = async (', '[error] > 24 |   _request: NextRequest;', '[error]      |                        ^', '[error]   25 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);', '[error]   26 | ) {', '[error]   27 |   try {', '[error] src/app/api/ot/checklist-templates/route.ts: SyntaxError: Property or signature expected. (18:3)', '[error]   16 | interface ChecklistTemplateCreateBody {', '[error]   17 |   name: string,', '[error] > 18 |   ChecklistItem[]', '[error]      |   ^', '[error]   19 | }', '[error]   20 |', '[error]   21 | // GET /api/ot/checklist-templates - List all checklist templates', \"[error] src/app/api/ot/surgery-types/[id]/route.ts: SyntaxError: ',' expected. (25:24)\", '[error]   23 | // GET /api/ot/surgery-types/[id] - Get details of a specific surgery type', '[error]   24 | export const _GET = async (', '[error] > 25 |   _request: NextRequest;', '[error]      |                        ^', '[error]   26 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);', '[error]   27 | ) {', '[error]   28 |   try {', '[error] src/app/api/ot/surgery-types/route.ts: SyntaxError: Expression expected. (31:16)', '[error]   29 |', '[error]   30 |     const DB = process.env.DB as unknown as D1Database', '[error] > 31 |     let query =;', '[error]      |                ^', '[error]   32 |       \"SELECT id, name, description, specialty, estimated_duration_minutes, updated_at FROM SurgeryTypes\";', '[error]   33 |     const parameters: string[] = [];', '[error]   34 |', \"[error] src/app/api/ot/theatres/[id]/route.ts: SyntaxError: ',' expected. (17:24)\", '[error]   15 | // GET /api/ot/theatres/[id] - Get details of a specific operation theatre', '[error]   16 | export const _GET = async (', '[error] > 17 |   _request: NextRequest;', '[error]      |                        ^', '[error]   18 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);', '[error]   19 | ) {', '[error]   20 |   try {', '[error] src/app/api/ot/theatres/route.ts: SyntaxError: Expression expected. (22:16)', '[error]   20 |', '[error]   21 |     const DB = process.env.DB as unknown as D1Database', '[error] > 22 |     let query =;', '[error]      |                ^', '[error]   23 |       \"SELECT id, name, location, specialty, status, updated_at FROM OperationTheatres\";', '[error]   24 |     const parameters: string[] = [];', '[error]   25 |', \"[error] src/app/api/patients/[id]/route.ts: SyntaxError: ',' expected. (33:62)\", '[error]   31 |     medical_history_summary: z.string().optional().nullable(),', '[error]   32 |     insurance_provider: z.string().optional().nullable(),', '[error] > 33 |     insurance_policy_number: z.string().optional().nullable();', '[error]      |                                                              ^', '[error]   34 | }).partial();', '[error]   35 |', '[error]   36 | // GET /api/patients/[id] - Fetch a specific patient by ID', \"[error] src/app/api/patients/[id]/vitals/route.ts: SyntaxError: ',' expected. (24:44)\", '[error]   22 |     bmi: z.number().positive().optional().nullable(),', '[error]   23 |     pain_scale_0_10: z.number().int().min(0).max(10).optional().nullable(),', '[error] > 24 |     notes: z.string().optional().nullable();', '[error]      |                                            ^', '[error]   25 | });', '[error]   26 |', '[error]   27 | // GET /api/patients/[id]/vitals - Fetch vitals for a specific patient', \"[error] src/app/api/patients/register/route.ts: SyntaxError: ',' expected. (24:46)\", '[error]   22 |     state: z.string().optional().nullable(),', '[error]   23 |     postal_code: z.string().optional().nullable(),', '[error] > 24 |     country: z.string().optional().nullable();', '[error]      |                                              ^', '[error]   25 |     // Emergency contact details', '[error]   26 |     emergency_contact_name: z.string().optional().nullable(),', '[error]   27 |     emergency_contact_relation: z.string().optional().nullable(),', \"[error] src/app/api/patients/route.ts: SyntaxError: ',' expected. (25:46)\", '[error]   23 |     state: z.string().optional().nullable(),', '[error]   24 |     postal_code: z.string().optional().nullable(),', '[error] > 25 |     country: z.string().optional().nullable();', '[error]      |                                              ^', '[error]   26 |     // Emergency contact details', '[error]   27 |     emergency_contact_name: z.string().optional().nullable(),', '[error]   28 |     emergency_contact_relation: z.string().optional().nullable(),', '[error] src/app/api/pharmacy/administration/due/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]    8 | import { FHIRMapper } from \"../../../models/fhir-mappers\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Due Medications API Routes;', '[error] src/app/api/pharmacy/administration/education/route.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import { validateEducationRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * Patient Education API Routes;', '[error] src/app/api/pharmacy/administration/missed/route.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../lib/services/pharmacy/pharmacy.service\";', '[error]    7 | import { PharmacyDomain } from \"../../../models/domain-models\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | /**', '[error]   11 |  * Missed Dose API for Medication Administration;', '[error] src/app/api/pharmacy/administration/overdue/route.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../lib/services/pharmacy/pharmacy.service\";', '[error]    7 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | /**', '[error]   11 |  * Overdue Medications API Routes;', '[error] src/app/api/pharmacy/administration/reaction/route.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import { validateReactionRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * Adverse Reaction API Routes;', '[error] src/app/api/pharmacy/administration/reports/route.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { auditLog } from \"../../../../../lib/audit\";', '[error]   5 | import { errorHandler } from \"../../../../../lib/error-handler\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Administration Reports API Routes;', \"[error] src/app/api/pharmacy/administration/route.ts: SyntaxError: ',' expected. (20:33)\", '[error]   18 | // Initialize repositories (in production, use dependency injection);', '[error]   19 | const getMedicationById,', '[error] > 20 |   findAll: () => Promise.resolve([]),', '[error]      |                                 ^', '[error]   21 |   search: () => Promise.resolve([]),', '[error]   22 |   save: () => Promise.resolve(\"\"),', '[error]   23 |   update: () => Promise.resolve(true),', '[error] src/app/api/pharmacy/administration/schedule/[patientId]/route.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../../lib/services/pharmacy/pharmacy.service\";', '[error]    7 | import type { PharmacyDomain } from \"../../../../models/domain-models\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | /**', '[error]   11 |  * Patient Medication Schedule API;', '[error] src/app/api/pharmacy/administration/verify/route.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]    9 | import { BarcodeAdministrationService } from \"../../../services/barcode-administration-service\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * Barcode Verification API for Medication Administration;', '[error] src/app/api/pharmacy/dispensing/partial/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { validatePartialDispensingRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Partial Dispensing API Routes;', '[error] src/app/api/pharmacy/dispensing/route.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 | import type { PharmacyDomain } from \"../../models/domain-models\";', '[error]   11 | import { FHIRMapper } from \"../../models/fhir-mappers\";', '[error] > 12 | }', '[error]      | ^', '[error]   13 |', '[error]   14 | /**', '[error]   15 |  * Dispensing API Routes;', '[error] src/app/api/pharmacy/dispensing/verify/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { validateDispensingVerificationRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Dispensing Verification API Routes;', '[error] src/app/api/pharmacy/interactions/[id]/override/route.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";', '[error]    6 | import { validateInteractionOverrideRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | /**', '[error]   10 |  * Interaction Override API Routes;', '[error] src/app/api/pharmacy/interactions/batch-check/route.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]   11 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";', '[error] > 12 | }', '[error]      | ^', '[error]   13 |', '[error]   14 | /**', '[error]   15 |  * Batch Interaction Check API Routes;', '[error] src/app/api/pharmacy/interactions/drug-allergy/route.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";', '[error] > 11 | }', '[error]      | ^', '[error]   12 |', '[error]   13 | /**', '[error]   14 |  * Drug-Allergy Interaction API Routes;', '[error] src/app/api/pharmacy/interactions/drug-condition/route.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";', '[error] > 11 | }', '[error]      | ^', '[error]   12 |', '[error]   13 | /**', '[error]   14 |  * Drug-Condition Interaction API Routes;', '[error] src/app/api/pharmacy/interactions/drug-drug/route.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]    9 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * Drug-Drug Interaction API Routes;', '[error] src/app/api/pharmacy/interactions/drug-lab/route.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";', '[error] > 11 | }', '[error]      | ^', '[error]   12 |', '[error]   13 | /**', '[error]   14 |  * Drug-Lab Interaction API Routes;', '[error] src/app/api/pharmacy/interactions/route.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 | import type { PharmacyDomain } from \"../../models/domain-models\";', '[error]   10 | import { DrugInteractionService } from \"../../services/drug-interaction-service\";', '[error] > 11 | }', '[error]      | ^', '[error]   12 |', '[error]   13 | /**', '[error]   14 |  * Drug Interaction API Routes;', '[error] src/app/api/pharmacy/inventory/adjustment/route.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";', '[error]    6 | import { validateInventoryAdjustmentRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | /**', '[error]   10 |  * Inventory Adjustment API Routes;', '[error] src/app/api/pharmacy/inventory/expiring/route.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";', '[error]    6 | import { FHIRMapper } from \"../../../models/fhir-mappers\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | /**', '[error]   10 |  * Expiring Medications API Routes;', '[error] src/app/api/pharmacy/inventory/reorder/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { validateReorderRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Automated Reordering API Routes;', '[error] src/app/api/pharmacy/inventory/route.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import { PharmacyDomain } from \"../../models/domain-models\";', '[error]    9 | import { FHIRMapper } from \"../../models/fhir-mappers\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * Inventory API Routes;', '[error] src/app/api/pharmacy/inventory/transfer/route.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";', '[error]    6 | import { validateInventoryTransferRequest } from \"../../../../../lib/validation/pharmacy-validation\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | /**', '[error]   10 |  * Inventory Transfer API Routes;', \"[error] src/app/api/pharmacy/medications/route.ts: SyntaxError: ',' expected. (68:23)\", '[error]   66 |', '[error]   67 |     const { searchParams } = new URL(request.url);', '[error] > 68 |     const searchParams.get(\"search\"),', '[error]      |                       ^', '[error]   69 |       category: searchParams.get(\"category\"),', '[error]   70 |       manufacturer: searchParams.get(\"manufacturer\"),', '[error]   71 |       prescription_required: searchParams.has(\"prescription_required\");', '[error] src/app/api/pharmacy/models/domain-models.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { z } from \"zod\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | /**', '[error]   6 |  * Domain Models for Pharmacy Module;', \"[error] src/app/api/pharmacy/models/fhir-mappers.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   Medication,', '[error]      |   ^', '[error]   12 |   MedicationOrder,', '[error]   13 |   MedicationDispense,', '[error]   14 |   MedicationAdministration,', '[error] src/app/api/pharmacy/prescriptions/renewal/route.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { ErrorHandler } from \"../../../../implementation/utils/error-handler\";', '[error]    8 | import { RBACService } from \"../../../../implementation/utils/rbac-service\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Prescription Renewal API Routes;', '[error] src/app/api/pharmacy/prescriptions/route.ts: SyntaxError: Declaration or statement expected. (13:1)', '[error]   11 | import { FHIRMapper } from \"../../models/fhir-mappers\";', '[error]   12 | import { DrugInteractionService } from \"../../services/drug-interaction-service\";', '[error] > 13 | }', '[error]      | ^', '[error]   14 |', '[error]   15 | /**', '[error]   16 |  * Prescription Management API Routes;', '[error] src/app/api/pharmacy/services/barcode-administration-service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { PharmacyDomain } from \"../models/domain-models\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Barcode Medication Administration Service Implementation;', '[error] src/app/api/pharmacy/services/drug-interaction-service.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { PharmacyDomain } from \"../../../../implementation/models/domain-models\";', '[error]   5 | import type { AuditLogger } from \"../../../../implementation/utils/audit-logger\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Drug Interaction Service;', '[error] src/app/api/pharmacy/services/medication-reconciliation-service.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { PharmacyDomain } from \"../../../../implementation/models/domain-models\";', '[error]   5 | import type { AuditLogger } from \"../../../../implementation/utils/audit-logger\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Medication Reconciliation Service;', \"[error] src/app/api/portal/patient/auth/route.ts: SyntaxError: '=>' expected. (24:69)\", '[error]   22 |', '[error]   23 | // Placeholder function to simulate patient login', '[error] > 24 | async const authenticatePatient = (email: string, password: string) {', '[error]      |                                                                     ^', '[error]   25 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]   26 |   // Replace with actual D1 query and password verification when DB is configured', '[error]   27 |   // const { env } = getRequestContext();', \"[error] src/app/api/prescriptions/[prescriptionId]/items/route.ts: SyntaxError: '=>' expected. (14:61)\", '[error]   12 |', '[error]   13 | // Helper function to get prescription ID from URL', '[error] > 14 | const getPrescriptionId = (pathname: string): number | null {', '[error]      |                                                             ^', '[error]   15 |     // Pathname might be /api/prescriptions/123/items', '[error]   16 |     const parts = pathname.split(\"/\");', '[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part', '[error] src/app/api/prescriptions/[prescriptionId]/route.ts: SyntaxError: Property or signature expected. (29:5)', '[error]   27 |     string,', '[error]   28 |     string,', '[error] > 29 |     string | null,', '[error]      |     ^', '[error]   30 |     string,', '[error]   31 |     inventory_unit_of_measure: string', '[error]   32 | }', \"[error] src/app/api/prescriptions/route.ts: SyntaxError: ',' expected. (18:69)\", '[error]   16 |     route: z.string().optional().nullable(),', '[error]   17 |     instructions: z.string().optional().nullable(),', '[error] > 18 |     quantity_prescribed: z.number().positive().optional().nullable();', '[error]      |                                                                     ^', '[error]   19 | });', '[error]   20 |', '[error]   21 | const prescriptionCreateSchema = z.object({', '[error] src/app/api/radiology-reports/route.ts: SyntaxError: Declaration or statement expected. (100:7)', '[error]    98 |     const result = await database', '[error]    99 |       .prepare(query);', '[error] > 100 |       .bind(...parameters);', '[error]       |       ^', '[error]   101 |       .all<RadiologyReportListItem>();', '[error]   102 |     return NextResponse.json(result.results || []);', '[error]   103 |   } catch (error) {', '[error] src/app/api/radiology/modalities/route.ts: SyntaxError: Declaration or statement expected. (19:3)', '[error]   17 |   const session = await getSession();', '[error]   18 |   if (!session.user);', '[error] > 19 |   )', '[error]      |   ^', '[error]   20 |     return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });', '[error]   21 |', '[error]   22 |   const DB = process.env.DB as unknown as D1Database;', '[error] src/app/api/radiology/orders/[id]/route.ts: SyntaxError: Property or signature expected. (13:1)', '[error]   11 |   clinical_indication?: string;', '[error]   12 |   procedure_type_id?: string;', '[error] > 13 | export const _GET = async (', '[error]      | ^', '[error]   14 |   request: NextRequest;', '[error]   15 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)', '[error]   16 | ) {', \"[error] src/app/api/radiology/orders/route.ts: SyntaxError: '=>' expected. (45:73)\", '[error]   43 |', '[error]   44 | // Placeholder function to simulate database interaction', '[error] > 45 | async const getRadiologyOrdersFromDB = (filters: RadiologyOrderFilters) {', '[error]      |                                                                         ^', '[error]   46 |   // Use interface', '[error]   47 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]   48 |   // Replace with actual D1 query when DB is configured', '[error] src/app/api/radiology/procedure-types/route.ts: SyntaxError: Declaration or statement expected. (20:3)', '[error]   18 |   // Allow broader access for viewing procedure types', '[error]   19 |   if (!session.user);', '[error] > 20 |   )', '[error]      |   ^', '[error]   21 |     return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });', '[error]   22 |', '[error]   23 |   const DB = process.env.DB as unknown as D1Database;', \"[error] src/app/api/radiology/reports/[id]/route.ts: SyntaxError: '=>' expected. (55:26)\", '[error]   53 |   _request: NextRequest, // Renamed to _request as it\"s unused', '[error]   54 |   { params }: { params: Promise<{ id: string }> } // Use Promise type for params (Next.js 15+);', '[error] > 55 | ): Promise<NextResponse> {', '[error]      |                          ^', '[error]   56 |   try {', '[error]   57 |     // Use IronSession<IronSessionData>', '[error]   58 |     const session: IronSession<IronSessionData> = await getSession();', '[error] src/app/api/radiology/reports/route.ts: SyntaxError: Declaration or statement expected. (98:7)', '[error]    96 |     const result = await database', '[error]    97 |       .prepare(query);', '[error] >  98 |       .bind(...parameters);', '[error]       |       ^', '[error]    99 |       .all<RadiologyReportListItem>();', '[error]   100 |     return NextResponse.json(result.results || []);', '[error]   101 |   } catch (error: unknown) {', \"[error] src/app/api/radiology/studies/[id]/route.ts: SyntaxError: ';' expected. (12:19)\", '[error]   10 |   // FIX: Replaced any[] with unknown[]', '[error]   11 |   bind(...parameters: unknown[]): {', '[error] > 12 |     run(): Promise>', '[error]      |                   ^', '[error]   13 |     // FIX: Replaced any with unknown', '[error]   14 |     all<T = unknown>(): Promise>', '[error]   15 |     // FIX: Replaced any with unknown', \"[error] src/app/api/radiology/studies/route.ts: SyntaxError: ';' expected. (12:19)\", '[error]   10 | interface PreparedStatement {', '[error]   11 |   bind(...parameters: (string | number | null)[]): {', '[error] > 12 |     run(): Promise>', '[error]      |                   ^', '[error]   13 |     all<T = unknown>(): Promise>', '[error]   14 |     first<T = unknown>(colName?: string): Promise<T | null>', '[error]   15 |   };', \"[error] src/app/api/route.ts: SyntaxError: ';' expected. (12:19)\", '[error]   10 |   // FIX: Replaced any[] with unknown[]', '[error]   11 |   bind(...parameters: unknown[]): {', '[error] > 12 |     run(): Promise>', '[error]      |                   ^', '[error]   13 |     // FIX: Replaced any with unknown', '[error]   14 |     all<T = unknown>(): Promise>', '[error]   15 |     // FIX: Replaced any with unknown', \"[error] src/app/api/support-services/ambulance/route.ts: SyntaxError: ',' expected. (18:4)\", '[error]   16 |   dropoffLocation: z.string().min(3).max(200),', '[error]   17 |   patientId: z.string().uuid().optional(),', '[error] > 18 |   z.string().max(1000).optional(),', '[error]      |    ^', '[error]   19 |   requestedById: z.string().uuid(),', '[error]   20 |   contactName: z.string().min(2).max(100).optional(),', '[error]   21 |   contactPhone: z.string().min(5).max(20).optional(),', \"[error] src/app/api/support-services/dietary/route.ts: SyntaxError: ',' expected. (19:4)\", '[error]   17 |   allergies: z.array(z.string()).optional(),', '[error]   18 |   preferences: z.array(z.string()).optional(),', '[error] > 19 |   z.string().max(1000).optional(),', '[error]      |    ^', '[error]   20 |   requestedById: z.string().uuid(),', '[error]   21 |   locationId: z.string().uuid();', '[error]   22 | });', \"[error] src/app/api/support-services/feedback/route.ts: SyntaxError: ',' expected. (23:42)\", '[error]   21 |   contactEmail: z.string().email().optional(),', '[error]   22 |   contactPhone: z.string().max(20).optional(),', '[error] > 23 |   isAnonymous: z.boolean().default(false);', '[error]      |                                          ^', '[error]   24 | });', '[error]   25 |', '[error]   26 | const createComplaintSchema = z.object({', \"[error] src/app/api/support-services/housekeeping/route.ts: SyntaxError: ',' expected. (17:4)\", '[error]   15 |   priority: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"URGENT\"]),', '[error]   16 |   description: z.string().min(5).max(500),', '[error] > 17 |   z.string().max(1000).optional(),', '[error]      |    ^', '[error]   18 |   requestedById: z.string().uuid()', '[error]   19 | });', '[error]   20 |', \"[error] src/app/api/support-services/maintenance/route.ts: SyntaxError: ',' expected. (17:4)\", '[error]   15 |   priority: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"URGENT\"]),', '[error]   16 |   description: z.string().min(5).max(500),', '[error] > 17 |   z.string().max(1000).optional(),', '[error]      |    ^', '[error]   18 |   requestedById: z.string().uuid(),', '[error]   19 |   departmentId: z.string().uuid().optional(),', '[error]   20 |   estimatedDuration: z.number().min(1).optional(), // in minutes', \"[error] src/app/api/support-services/marketing/analytics/campaigns/[campaignId]/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const GET = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { campaignId: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/analytics/comparative/route.ts: SyntaxError: ',' expected. (32:49)\", '[error]   30 |', '[error]   31 |       const filters = {', '[error] > 32 |         startDate: searchParams.has(\"startDate\");', '[error]      |                                                 ^', '[error]   33 |           ? new Date(searchParams.get(\"startDate\") as string);', '[error]   34 |           : undefined,', '[error]   35 |         endDate: searchParams.has(\"endDate\");', \"[error] src/app/api/support-services/marketing/campaigns/route.ts: SyntaxError: ',' expected. (16:4)\", '[error]   14 |   status: z.string().optional(),', '[error]   15 |   startDateFrom: z.string().optional().transform(val => val ? new Date(val) : undefined),', '[error] > 16 |   z.string().optional().transform(val => val ? new Date(val) : undefined),', '[error]      |    ^', '[error]   17 |   z.string().default(\"1\").transform(Number),', '[error]   18 |   limit: z.string().default(\"10\").transform(Number);', '[error]   19 | });', \"[error] src/app/api/support-services/marketing/contacts/[id]/link-patient/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const POST = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/contacts/[id]/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const GET = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/contacts/route.ts: SyntaxError: ',' expected. (24:21)\", '[error]   22 |       const filters = {', '[error]   23 |         status: searchParams.get(\"status\") || undefined,', '[error] > 24 |         searchParams.get(\"search\") || undefined,', '[error]      |                     ^', '[error]   25 |         searchParams.has(\"hasPatient\");', '[error]   26 |           ? searchParams.get(\"hasPatient\") === \"true\";', '[error]   27 |           : undefined,', \"[error] src/app/api/support-services/marketing/route.ts: SyntaxError: ',' expected. (16:4)\", '[error]   14 |   status: z.string().optional(),', '[error]   15 |   startDateFrom: z.string().optional().transform(val => val ? new Date(val) : undefined),', '[error] > 16 |   z.string().optional().transform(val => val ? new Date(val) : undefined),', '[error]      |    ^', '[error]   17 |   z.string().default(\"1\").transform(Number),', '[error]   18 |   limit: z.string().default(\"10\").transform(Number);', '[error]   19 | });', \"[error] src/app/api/support-services/marketing/segments/[id]/apply-criteria/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const POST = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/segments/[id]/members/[contactId]/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const POST = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/segments/[id]/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const GET = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/segments/route.ts: SyntaxError: ',' expected. (23:47)\", '[error]   21 |       // Parse query parameters', '[error]   22 |       const filters = {', '[error] > 23 |         isActive: searchParams.has(\"isActive\");', '[error]      |                                               ^', '[error]   24 |           ? searchParams.get(\"isActive\") === \"true\";', '[error]   25 |           : undefined,', '[error]   26 |         search: searchParams.get(\"search\") || undefined,', \"[error] src/app/api/support-services/marketing/templates/[id]/render/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const POST = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/templates/[id]/route.ts: SyntaxError: ',' expected. (15:23)\", '[error]   13 |  */', '[error]   14 | export const GET = async (', '[error] > 15 |   request: NextRequest;', '[error]      |                       ^', '[error]   16 |   { params }: { id: string }', '[error]   17 | ) => {', '[error]   18 |   return withErrorHandling(', \"[error] src/app/api/support-services/marketing/templates/route.ts: SyntaxError: ',' expected. (24:47)\", '[error]   22 |       const filters = {', '[error]   23 |         type: searchParams.get(\"type\") || undefined,', '[error] > 24 |         isActive: searchParams.has(\"isActive\");', '[error]      |                                               ^', '[error]   25 |           ? searchParams.get(\"isActive\") === \"true\";', '[error]   26 |           : undefined,', '[error]   27 |         search: searchParams.get(\"search\") || undefined,', '[error] src/app/api/v2/patients/route.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 |', '[error]   5 | import { PatientCreateSchema, patientManagementService } from \"@/lib/core/patient-management.service\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Enhanced Patient Management API (v2) - Using new service layer;', \"[error] src/app/clinical-documentation/[id]/edit/page.tsx: SyntaxError: ';' expected. (11:22)\", '[error]    9 | const prisma = new PrismaClient();', '[error]   10 |', '[error] > 11 | export default async const _DocumentEditPage = ({', '[error]      |                      ^', '[error]   12 |   params;', '[error]   13 | }: {id: string', '[error]   14 | }) {', \"[error] src/app/clinical-documentation/[id]/page.tsx: SyntaxError: ';' expected. (8:22)\", '[error]    6 | import { DocumentViewer } from \"../../../components/clinical-documentation/document-viewer\";', '[error]    7 | import { authOptions } from \"../../../lib/auth\";', '[error] >  8 | export default async const _DocumentViewPage = ({', '[error]      |                      ^', '[error]    9 |   params;', '[error]   10 | }: {id: string', '[error]   11 | }) {', \"[error] src/app/clinical-documentation/create/page.tsx: SyntaxError: ';' expected. (11:22)\", '[error]    9 | const prisma = new PrismaClient();', '[error]   10 |', '[error] > 11 | export default async const _DocumentCreatePage = ({', '[error]      |                      ^', '[error]   12 |   searchParams;', '[error]   13 | }: {patientId?: string, encounterId?: string', '[error]   14 | }) {', \"[error] src/app/clinical-documentation/page.tsx: SyntaxError: ';' expected. (15:22)\", '[error]   13 | const DEFAULT_PATIENT_ID = \"pat_123456\";', '[error]   14 |', '[error] > 15 | export default async const _ClinicalDocumentationPage = ({', '[error]      |                      ^', '[error]   16 |   searchParams;', '[error]   17 | }: {patientId?: string', '[error]   18 | }) {', '[error] src/app/components/support-services/ambulance/AmbulanceDashboard.tsx: SyntaxError: Expression expected. (18:16)', '[error]   16 | import AmbulanceMap from \"./AmbulanceMap.ts\";', '[error]   17 |', '[error] > 18 | export default const _AmbulanceDashboard = () {', '[error]      |                ^', '[error]   19 |   const router = useRouter();', '[error]   20 |   const [activeTab, setActiveTab] = useState(\"active\");', '[error]   21 |   const [ambulances, setAmbulances] = useState<any[]>([]);', '[error] src/app/components/support-services/ambulance/AmbulanceTripRequestForm.tsx: SyntaxError: Expression expected. (18:16)', '[error]   16 | import { useEffect, useState } from \"react\";', '[error]   17 |', '[error] > 18 | export default const _AmbulanceTripRequestForm = () {', '[error]      |                ^', '[error]   19 |   const router = useRouter();', '[error]   20 |   const [loading, setLoading] = useState(false);', '[error]   21 |   const [submitting, setSubmitting] = useState(false);', \"[error] src/app/components/support-services/dietary/DietaryDashboard.tsx: SyntaxError: ',' expected. (27:7)\", '[error]   25 |   RefreshCw,', '[error]   26 |   Search,', '[error] > 27 |   User;', '[error]      |       ^', '[error]   28 | } from \"lucide-react\";', '[error]   29 |   Select,', '[error]   30 |   SelectContent,', '[error] src/app/components/support-services/dietary/DietaryRequestForm.tsx: SyntaxError: Expression expected. (24:1)', '[error]   22 |   SelectTrigger,', '[error]   23 |   SelectValue,', '[error] > 24 | } from \"@/components/ui/select\";', '[error]      | ^', '[error]   25 | import { Badge } from \"@/components/ui/badge\";', '[error]   26 | import { Checkbox } from \"@/components/ui/checkbox\";', '[error]   27 | import { Input } from \"@/components/ui/input\";', \"[error] src/app/components/support-services/feedback/ComplaintForm.tsx: SyntaxError: ':' expected. (30:3)\", '[error]   28 |   }),', '[error]   29 |   \"Please select a complaint category\"', '[error] > 30 |   }),', '[error]      |   ^', '[error]   31 |   \"Please select a severity level\"', '[error]   32 |   }),', '[error]   33 |   departmentId: z.string().optional(),', '[error] src/app/components/support-services/feedback/FeedbackDashboard.tsx: SyntaxError: Property or signature expected. (59:3)', '[error]   57 |   feedbackByDepartment: { department: string, count: number }[];', '[error]   58 |   overallRating: number,', '[error] > 59 |   Record>', '[error]      |   ^', '[error]   60 |   complaintsByCategory: { category: string, _count: number }[];', '[error]   61 |   complaintsBySeverity: { severity: string, _count: number }[];', '[error]   62 |   complaintsByStatus: { status: string, _count: number }[];', \"[error] src/app/components/support-services/feedback/FeedbackForm.tsx: SyntaxError: ':' expected. (23:3)\", '[error]   21 | const feedbackFormSchema = z.object({', '[error]   22 |   \"Please select a feedback type\"', '[error] > 23 |   }),', '[error]      |   ^', '[error]   24 |   \"Please select a feedback source\"', '[error]   25 |   }),', '[error]   26 |   \"Please provide a rating\"', \"[error] src/app/components/support-services/housekeeping/HousekeepingDashboard.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Button } from \"@/components/ui/button\";', '[error]   15 | import { Badge } from \"@/components/ui/badge\";', '[error] src/app/components/support-services/housekeeping/HousekeepingRequestForm.tsx: SyntaxError: Expression expected. (24:1)', '[error]   22 |   SelectTrigger,', '[error]   23 |   SelectValue,', '[error] > 24 | } from \"@/components/ui/select\";', '[error]      | ^', '[error]   25 | import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";', '[error]   26 | import { Textarea } from \"@/components/ui/textarea\";', '[error]   27 | import { useToast } from \"@/components/ui/use-toast\";', \"[error] src/app/components/support-services/maintenance/MaintenanceDashboard.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Button } from \"@/components/ui/button\";', '[error]   15 | import { Badge } from \"@/components/ui/badge\";', '[error] src/app/components/support-services/maintenance/MaintenanceRequestForm.tsx: SyntaxError: Expression expected. (24:1)', '[error]   22 |   SelectTrigger,', '[error]   23 |   SelectValue,', '[error] > 24 | } from \"@/components/ui/select\";', '[error]      | ^', '[error]   25 | import { Input } from \"@/components/ui/input\";', '[error]   26 | import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";', '[error]   27 | import { Textarea } from \"@/components/ui/textarea\";', \"[error] src/app/components/support-services/marketing/CampaignForm.tsx: SyntaxError: ':' expected. (24:3)\", '[error]   22 |   description: z.string().optional(),', '[error]   23 |   \"Please select a campaign type.\"', '[error] > 24 |   }),', '[error]      |   ^', '[error]   25 |   \"Please select a campaign status.\"', '[error]   26 |   }),', '[error]   27 |   \"Start date is required.\"', '[error] src/app/components/support-services/marketing/ContactManagement.tsx: SyntaxError: Property or signature expected. (19:1)', '[error]   17 |   contactId?: string;', '[error]   18 |   onSuccess?: (contact: unknown) => void', '[error] > 19 | export default const _ContactManagement = ({ contactId, onSuccess }: ContactManagementProps) {', '[error]      | ^', '[error]   20 |   const router = useRouter();', '[error]   21 |   const [isLoading, setIsLoading] = useState<boolean>(false);', '[error]   22 |   const [contact, setContact] = useState<unknown>(null);', '[error] src/app/components/support-services/marketing/MarketingDashboard.tsx: SyntaxError: Expression expected. (39:16)', '[error]   37 | };', '[error]   38 |', '[error] > 39 | export default const _MarketingDashboard = () {', '[error]      |                ^', '[error]   40 |   const router = useRouter();', '[error]   41 |   const [activeTab, setActiveTab] = useState(\"overview\");', '[error]   42 |   const [campaigns, setCampaigns] = useState<Campaign[]>([]);', '[error] src/app/components/support-services/marketing/SegmentBuilder.tsx: SyntaxError: Property or signature expected. (18:1)', '[error]   16 |   segmentId?: string;', '[error]   17 |   onSuccess?: (segment: unknown) => void', '[error] > 18 | export default const _SegmentBuilder = ({ segmentId, onSuccess }: SegmentBuilderProps) {', '[error]      | ^', '[error]   19 |   const router = useRouter();', '[error]   20 |   const [isLoading, setIsLoading] = useState<boolean>(false);', '[error]   21 |   const [segment, setSegment] = useState<unknown>(null);', '[error] src/app/components/support-services/marketing/TemplateEditor.tsx: SyntaxError: Property or signature expected. (20:1)', '[error]   18 |   templateId?: string;', '[error]   19 |   onSuccess?: (template: unknown) => void', '[error] > 20 | export default const _TemplateEditor = ({ templateId, onSuccess }: TemplateEditorProps) {', '[error]      | ^', '[error]   21 |   const router = useRouter();', '[error]   22 |   const [isLoading, setIsLoading] = useState<boolean>(false);', '[error]   23 |   const [template, setTemplate] = useState<unknown>(null);', '[error] src/app/counter.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | \"use server\";', '[error]   4 | // import { getCloudflareContext } from \"@opennextjs/cloudflare\"', \"[error] src/app/dashboard/analytics/page.tsx: SyntaxError: 'from' expected. (1:28)\", '[error] > 1 | import React, { useEffect }, { useState, useEffect, useMemo } from \"react\";', '[error]     |                            ^', '[error]   2 | import {', '[error]   3 |', '[error]   4 | import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";', '[error] src/app/dashboard/appointments/new/page.tsx: SyntaxError: Declaration or statement expected. (18:1)', '[error]   16 | import type { Doctor } from \"@/types/doctor\";', '[error]   17 | import type { Patient } from \"@/types/patient\";', '[error] > 18 | }', '[error]      | ^', '[error]   19 |', '[error]   20 | \"use client\";', '[error]   21 |', '[error] src/app/dashboard/appointments/page.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";', '[error]   6 | }', '[error]   7 |', '[error] src/app/dashboard/billing/create-invoice/page.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect, useCallback } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', \"[error] src/app/dashboard/billing/invoices/page.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error]   9 |', \"[error] src/app/dashboard/billing/page.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Card,', '[error]   8 |   CardContent,', \"[error] src/app/dashboard/billing/service-items/page.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error]   9 |', '[error] src/app/dashboard/dashboard-client-layout.tsx: SyntaxError: Declaration or statement expected. (2:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error] > 2 | }', '[error]     | ^', '[error]   3 |', '[error]   4 | \"use client\";', '[error]   5 |', '[error] src/app/dashboard/er/page.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]     | ^', '[error]   5 | }', '[error]   6 |', '[error]   7 | // src/app/dashboard/er/page.tsx', \"[error] src/app/dashboard/executive/page.tsx: SyntaxError: 'from' expected. (1:28)\", '[error] > 1 | import React, { useEffect }, { useState, useEffect, useMemo } from \"react\";', '[error]     |                            ^', '[error]   2 | import {', '[error]   3 |', '[error]   4 | import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";', \"[error] src/app/dashboard/financial/page.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Card,', '[error]   8 |   CardContent,', \"[error] src/app/dashboard/hr/assets/[id]/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Button } from \"@/components/ui/button\";', '[error]   15 | import { Badge } from \"@/components/ui/badge\";', \"[error] src/app/dashboard/hr/assets/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]   15 |   Table,', \"[error] src/app/dashboard/hr/attendance/[id]/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Button } from \"@/components/ui/button\";', '[error]   15 | import { Badge } from \"@/components/ui/badge\";', \"[error] src/app/dashboard/hr/attendance/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]   15 |   Table,', \"[error] src/app/dashboard/hr/biomedical/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]   15 |   Table,', \"[error] src/app/dashboard/hr/page.tsx: SyntaxError: ',' expected. (14:11)\", '[error]   12 |   Boxes,', '[error]   13 |   Stethoscope,', '[error] > 14 |   BarChart;', '[error]      |           ^', '[error]   15 | } from \"lucide-react\";', '[error]   16 |', '[error]   17 | export default const _HRDashboard = () {', \"[error] src/app/dashboard/hr/payroll/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]   15 |   Table,', \"[error] src/app/dashboard/hr/payroll/periods/[id]/page.tsx: SyntaxError: '}' expected. (13:12)\", '[error]   11 |   CardFooter,', '[error]   12 |   CardHeader,', '[error] > 13 |   CardTitle;', '[error]      |            ^', '[error]   14 | } from \"@/components/ui/card\";', '[error]   15 |   Table,', '[error]   16 |   TableBody,', '[error] src/app/dashboard/hr/staff/[id]/page.tsx: SyntaxError: Declaration or statement expected. (24:1)', '[error]   22 |   TableHeader,', '[error]   23 |   TableRow;', '[error] > 24 | } from \"@/components/ui/table\";', '[error]      | ^', '[error]   25 |   Dialog,', '[error]   26 |   DialogContent,', '[error]   27 |   DialogDescription,', \"[error] src/app/dashboard/hr/staff/[id]/positions/new/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 |   Form,', '[error]   15 |   FormControl,', \"[error] src/app/dashboard/hr/staff/[id]/qualifications/new/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 |   Form,', '[error]   15 |   FormControl,', \"[error] src/app/dashboard/hr/staff/new/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 |   Form,', '[error]   15 |   FormControl,', \"[error] src/app/dashboard/hr/staff/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 |   Table,', '[error]   15 |   TableBody,', \"[error] src/app/dashboard/hr/staff/schedule/page.tsx: SyntaxError: ',' expected. (12:12)\", '[error]   10 |   CardFooter,', '[error]   11 |   CardHeader,', '[error] > 12 |   CardTitle;', '[error]      |            ^', '[error]   13 | } from \"@/components/ui/card\";', '[error]   14 |   Table,', '[error]   15 |   TableBody,', '[error] src/app/dashboard/inventory/new/page.tsx: SyntaxError: Declaration or statement expected. (16:1)', '[error]   14 | import { useToast } from \"@/hooks/use-toast\";', '[error]   15 | import type { BillableItem } from \"@/types/billing\";', '[error] > 16 | }', '[error]      | ^', '[error]   17 |', '[error]   18 | // src/app/dashboard/inventory/new/page.tsx', '[error]   19 | \"use client\";', '[error] src/app/dashboard/inventory/page.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";', '[error]   6 | }', '[error]   7 |', '[error] src/app/dashboard/layout.tsx: SyntaxError: Expression expected. (11:1)', '[error]    9 | // export default const _DashboardLayout = ({', '[error]   10 |   children,', '[error] > 11 | }: {', '[error]      | ^', '[error]   12 |   children: React.ReactNode', '[error]   13 | }) {', '[error]   14 |   return <DashboardClientLayout>{children}>', '[error] src/app/dashboard/ot/page.tsx: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 |', '[error]   3 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | \"use client\";', '[error]   7 | export const dynamic = \"force-dynamic\";', \"[error] src/app/dashboard/page.tsx: SyntaxError: 'from' expected. (7:1)\", '[error]    5 |', '[error]    6 | // src/app/dashboard/page.tsx', '[error] >  7 | \"use client\";', '[error]      | ^', '[error]    8 | export const dynamic = \"force-dynamic\";', '[error]    9 |', '[error]   10 |   Card,', '[error] src/app/dashboard/patients/[id]/edit/page.tsx: SyntaxError: Declaration or statement expected. (16:1)', '[error]   14 | import { useToast } from \"@/hooks/use-toast\";', '[error]   15 | import type { Patient } from \"@/types/patient\";', '[error] > 16 | }', '[error]      | ^', '[error]   17 |', '[error]   18 | // src/app/dashboard/patients/[id]/edit/page.tsx', '[error]   19 | \"use client\";', '[error] src/app/dashboard/patients/[id]/page.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { Edit, Trash2 } from \"lucide-react\";', '[error]     | ^', '[error]   4 | import { useParams, useRouter } from \"next/navigation\";', '[error]   5 |', '[error]   6 | import { Button } from \"@/components/ui/button\";', '[error] src/app/dashboard/patients/new/page.tsx: SyntaxError: Declaration or statement expected. (15:1)', '[error]   13 | import { Textarea } from \"@/components/ui/textarea\";', '[error]   14 | import { useToast } from \"@/hooks/use-toast\";', '[error] > 15 | }', '[error]      | ^', '[error]   16 |', '[error]   17 | // src/app/dashboard/patients/new/page.tsx', '[error]   18 | \"use client\";', '[error] src/app/dashboard/patients/page.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";', '[error]   6 | }', '[error]   7 |', '[error] src/app/dashboard/radiology/orders/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import RadiologyOrderDetail from \"@/components/radiology/radiology-order-detail\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error] src/app/dashboard/radiology/page.tsx: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import RadiologyStudiesList from \"@/components/radiology/radiology-studies-list\";', '[error]    8 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | \"use client\";', '[error]   12 | export const dynamic = \"force-dynamic\";', '[error] src/app/dashboard/radiology/reports/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import RadiologyReportDetail from \"@/components/radiology/radiology-report-detail\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error] src/app/dashboard/radiology/studies/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import RadiologyStudyDetail from \"@/components/radiology/radiology-study-detail\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', \"[error] src/app/ipd/page.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 | export const dynamic = \"force-dynamic\";', '[error]   8 |', '[error]   9 |   Card,', '[error] src/app/laboratory/page.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import React from \"react\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 | export const dynamic = \"force-dynamic\";', '[error] src/app/layout.tsx: SyntaxError: Variable declaration expected. (19:14)', '[error]   17 |', '[error]   18 | // Use metadata from HEAD', '[error] > 19 | export const \"Hospital Management System\",', '[error]      |              ^', '[error]   20 |   description: \"Comprehensive HMS\"', '[error]   21 | };', '[error]   22 |', '[error] src/app/login/page.tsx: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 | import { Label } from \"@/components/ui/label\";', '[error]   10 | import { useToast } from \"@/hooks/use-toast\"; // Assuming use-toast hook is available from template', '[error] > 11 | }', '[error]      | ^', '[error]   12 |', '[error]   13 | // src/app/login/page.tsx', '[error]   14 | \"use client\"; // Add this directive for client-side interactivity', '[error] src/app/opd/page.tsx: SyntaxError: Declaration or statement expected. (13:1)', '[error]   11 | import { Skeleton } from \"@/components/ui/skeleton\"; // Import Skeleton for loading states', '[error]   12 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error] > 13 | }', '[error]      | ^', '[error]   14 |', '[error]   15 | // OPD Dashboard Page', '[error]   16 | \"use client\";', \"[error] src/app/page.tsx: SyntaxError: 'from' expected. (1:28)\", '[error] > 1 | import React, { useEffect }, { useState } from \"react\";', '[error]     |                            ^', '[error]   2 | \"use client\";', '[error]   3 | import { Button } from \"@/components/ui/button\";', '[error]   4 | import { Card } from \"@/components/ui/card\";', \"[error] src/app/patients/[id]/edit/page.tsx: SyntaxError: ';' expected. (9:22)\", '[error]    7 | import { authOptions } from \"../../../../lib/auth\";', '[error]    8 | import { hasPermission } from \"../../../../lib/rbac.service\";', '[error] >  9 | export default async const _PatientEditPage = ({', '[error]      |                      ^', '[error]   10 |   params;', '[error]   11 | }: {id: string', '[error]   12 | }) {', \"[error] src/app/patients/[id]/page.tsx: SyntaxError: ';' expected. (8:22)\", '[error]    6 | import PatientDetail from \"../../../components/patient-management/patient-detail\";', '[error]    7 | import { authOptions } from \"../../../lib/auth\";', '[error] >  8 | export default async const _PatientDetailPage = ({', '[error]      |                      ^', '[error]    9 |   params;', '[error]   10 | }: {id: string', '[error]   11 | }) {', \"[error] src/app/patients/new/page.tsx: SyntaxError: ';' expected. (9:22)\", '[error]    7 | import { authOptions } from \"../../../lib/auth\";', '[error]    8 | import { hasPermission } from \"../../../lib/rbac.service\";', '[error] >  9 | export default async const _NewPatientPage = () {', '[error]      |                      ^', '[error]   10 |   // Get session', '[error]   11 |   const session = await getServerSession(authOptions);', '[error]   12 |', \"[error] src/app/patients/page.tsx: SyntaxError: ';' expected. (8:22)\", '[error]    6 | import PatientList from \"../../components/patient-management/patient-list\";', '[error]    7 | import { authOptions } from \"../../lib/auth\";', '[error] >  8 | export default async const _PatientsPage = ({', '[error]      |                      ^', '[error]    9 |   searchParams;', '[error]   10 | }: {', '[error]   11 |     page?: string;', '[error] src/app/pharmacy/inventory/add/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import type React from \"react\";', '[error]   4 | import { type ChangeEvent, type FormEvent, useEffect, useState } from \"react\"', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error] src/app/pharmacy/inventory/page.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import React from \"react\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 | export const dynamic = \"force-dynamic\";', '[error] src/app/pharmacy/medications/add/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import type React from \"react\";', '[error]   4 | import { type ChangeEvent, type FormEvent, useEffect, useState } from \"react\"', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error] src/app/pharmacy/medications/page.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect, useMemo, type ChangeEvent } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', '[error] src/app/pharmacy/page.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import type React from \"react\"; // Added useState', '[error]   4 | import { useState } from \"react\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | \"use client\";', '[error]   8 | export const dynamic = \"force-dynamic\";', '[error] src/app/select-role/page.tsx: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";', '[error]    8 | import { useToast } from \"@/hooks/use-toast\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | // src/app/select-role/page.tsx', '[error]   12 | \"use client\";', '[error] src/components/billing/billing-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import type React from \"react\";', '[error]   3 | import { type ChangeEvent, useEffect, useState } from \"react\"', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | \"use client\";', '[error]   7 |', '[error] src/components/clinical-documentation/document-editor.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 |   Card,', '[error]   5 |   CardContent,', '[error]   6 |   CardDescription,', '[error] src/components/clinical-documentation/document-list.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 |   Table,', '[error]   5 |   TableHeader,', '[error]   6 |   TableBody,', '[error] src/components/clinical-documentation/document-viewer.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 |   Card,', '[error]   5 |   CardContent,', '[error]   6 |   CardDescription,', \"[error] src/components/er/er-critical-alerts.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 |', '[error]   5 | // src/components/er/ERCriticalAlerts.tsx', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Table,', '[error]   9 |   TableBody,', '[error] src/components/er/er-dashboard-stats.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import {', '[error]   2 |', '[error] > 3 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | // src/components/er/ERDashboardStats.tsx', '[error] src/components/er/er-lab-order-modal.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import React, { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useForm } from \"react-hook-form\";', '[error]     | ^', '[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";', '[error]   6 |', '[error]   7 | import { Button } from \"@/components/ui/button\";', '[error] src/components/er/er-patient-admit-modal.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import React, { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useForm } from \"react-hook-form\";', '[error]     | ^', '[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";', '[error]   6 |', '[error]   7 | import { Button } from \"@/components/ui/button\";', \"[error] src/components/er/er-patient-tracking-board.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 |', '[error]   5 | // src/components/er/ERPatientTrackingBoard.tsx', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Table,', '[error]   9 |   TableBody,', '[error] src/components/er/er-radiology-order-modal.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import React, { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useForm } from \"react-hook-form\";', '[error]     | ^', '[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";', '[error]   6 |', '[error]   7 | import { Button } from \"@/components/ui/button\";', '[error] src/components/er/er-registration-modal.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import React, { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useForm } from \"react-hook-form\";', '[error]     | ^', '[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";', '[error]   6 |', '[error]   7 | import { Button } from \"@/components/ui/button\";', '[error] src/components/er/er-triage-form.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import React, { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useForm } from \"react-hook-form\";', '[error]     | ^', '[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";', '[error]   6 |', '[error]   7 | import { Button } from \"@/components/ui/button\";', '[error] src/components/ipd/admission-form.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";', '[error]   6 | import { Input } from \"@/components/ui/input\";', '[error]   7 | import { Label } from \"@/components/ui/label\";', '[error] src/components/ipd/bed-management-dashboard.tsx: SyntaxError: Identifier expected. (5:1)', '[error]   3 | import {', '[error]   4 |', '[error] > 5 | import { Card, CardContent } from \"@/components/ui/card\"; // Assuming Card and CardContent are correctly imported', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | \"use client\";', '[error] src/components/ipd/discharge-summary.tsx: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | \"use client\";', '[error]   4 |', \"[error] src/components/ipd/ipd-patient-list.tsx: SyntaxError: ',' expected. (47:12)\", '[error]   45 |   const [error, setError] = useState<string | null>(),', '[error]   46 |', '[error] > 47 |   useEffect(() => {', '[error]      |            ^', '[error]   48 |     const fetchPatients = async () => {', '[error]   49 |       try {', '[error]   50 |         setLoading(true),', '[error] src/components/ipd/ipd-pharmacy-integration_old.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 | import type React from \"react\";', '[error]   2 | import { useEffect, useState } from \"react\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', \"[error] src/components/ipd/ipd-pharmacy-integration.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Card,', '[error]   9 |   Table,', \"[error] src/components/ipd/medication-administration.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Card,', '[error]   9 |   CardHeader,', \"[error] src/components/ipd/nursing-notes.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Card,', '[error]   9 |   CardHeader,', \"[error] src/components/ipd/patient-progress-notes.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Card,', '[error]   9 |   CardHeader,', \"[error] src/components/ipd/vital-signs.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Card,', '[error]   9 |   CardHeader,', '[error] src/components/laboratory/order-management.tsx: SyntaxError: Property or signature expected. (33:3)', '[error]   31 | interface OrderItem {', '[error]   32 |   id: string,', '[error] > 33 |   \"pending\" | \"in_progress\" | \"completed\" | \"canceled\",', '[error]      |   ^', '[error]   34 |   price: number', '[error]   35 | }', '[error]   36 |', '[error] src/components/laboratory/result-management.tsx: SyntaxError: Expression expected. (21:1)', '[error]   19 |   // CloseOutlined, // FIX: Removed unused import', '[error]   20 |   EditOutlined,', '[error] > 21 | } from \"@ant-design/icons\";', '[error]      | ^', '[error]   22 | // import dayjs from \"dayjs\"; // FIX: Removed unused import', '[error]   23 | // import type { Dayjs } from \"dayjs\"; // FIX: Removed unused import', '[error]   24 |', '[error] src/components/laboratory/sample-management.tsx: SyntaxError: Expression expected. (21:1)', '[error]   19 |   CheckOutlined,', '[error]   20 |   CloseOutlined,', '[error] > 21 | } from \"@ant-design/icons\";', '[error]      | ^', '[error]   22 | import type { ColumnsType } from \"antd/es/table\";', '[error]   23 | import moment from \"moment\";', '[error]   24 |', '[error] src/components/laboratory/test-catalog-management.tsx: SyntaxError: Expression expected. (19:1)', '[error]   17 |   ReloadOutlined,', '[error]   18 |   EyeOutlined,', '[error] > 19 | } from \"@ant-design/icons\";', '[error]      | ^', '[error]   20 | import type {', '[error]   21 |   FormProps,', '[error]   22 |   TableColumnsType,', '[error] src/components/layout/DashboardLayout.tsx: SyntaxError: Expression expected. (11:16)', '[error]    9 |  * @param children Content to be rendered within the dashboard layout;', '[error]   10 |  */', '[error] > 11 | export default const _DashboardLayout = ({ children }: DashboardLayoutProps) {', '[error]      |                ^', '[error]   12 |   return (', '[error]   13 |     >', '[error]   14 |       {/* Sidebar */}', '[error] src/components/layout/Sidebar.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import Link from \"next/link\";', '[error]   2 | import {', '[error] > 3 | import { usePathname } from \"next/navigation\";', '[error]     | ^', '[error]   4 |', '[error]   5 | import { Button } from \"@/components/ui/button\";', '[error]   6 | import { cn } from \"@/lib/utils\";', '[error] src/components/opd/opd-appointment-list.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', '[error] src/components/opd/opd-consultation-form.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\"; // Added useState, useEffect', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\"; // Added useRouter', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', \"[error] src/components/opd/opd-patient-queue.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Table,', '[error]   8 |   TableBody,', '[error] src/components/opd/opd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import type React from \"react\";', '[error]   3 | import { ChangeEvent, type FormEvent, useEffect, useState } from \"react\"', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | \"use client\";', '[error]   7 |', '[error] src/components/opd/opd-statistics.tsx: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import Image from \"next/image\";', '[error]   3 | import React, { useState, useEffect } from \"react\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | \"use client\";', '[error]   7 |', '[error] src/components/ot/ot-billing-items.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";', '[error]   6 | }', '[error]   7 |', \"[error] src/components/ot/ot-booking-list.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Table,', '[error]   8 |   TableBody,', \"[error] src/components/ot/ot-booking-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', \"[error] src/components/ot/ot-checklist-template-list.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Table,', '[error]   8 |   TableBody,', \"[error] src/components/ot/ot-checklist-template-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', '[error] src/components/ot/ot-dashboard-stats.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { Badge } from \"@/components/ui/badge\";', '[error]    6 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ot/ot-patient-surgeries.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Badge } from \"@/components/ui/badge\";', '[error]     | ^', '[error]   5 | import { Button } from \"@/components/ui/button\";', '[error]   6 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";', '[error]   7 | }', \"[error] src/components/ot/ot-record-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', '[error] src/components/ot/ot-staff-assignment.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";', '[error]   6 | import { Input } from \"@/components/ui/input\";', '[error]   7 | import { Label } from \"@/components/ui/label\";', \"[error] src/components/ot/ot-surgery-type-list.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Table,', '[error]   8 |   TableBody,', \"[error] src/components/ot/ot-surgery-type-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', \"[error] src/components/ot/ot-theatre-list.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   Table,', '[error]   8 |   TableBody,', \"[error] src/components/ot/ot-theatre-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', '[error] src/components/patient-management/patient-detail.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 |   Tabs,', '[error]   5 |   TabsContent,', '[error]   6 |   TabsList,', '[error] src/components/patient-management/patient-form.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 |   Form,', '[error]   5 |   FormControl,', '[error]   6 |   FormDescription,', '[error] src/components/patient-management/patient-list.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import { useState, useEffect } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   5 |   Table,', '[error]   6 |   TableBody,', '[error]   7 |   TableCaption,', '[error] src/components/pharmacy/billing-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 | import type React from \"react\";', '[error]   2 | import { type ChangeEvent, useEffect, useState } from \"react\"', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/pharmacy/ipd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 | import type React from \"react\";', '[error]   2 | import { useEffect, useState } from \"react\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/pharmacy/opd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 | import type React from \"react\";', '[error]   2 | import { ChangeEvent, type FormEvent, useEffect, useState } from \"react\"', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', \"[error] src/components/radiology/create-modality-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', \"[error] src/components/radiology/create-procedure-type-modal.tsx: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 |   Dialog,', '[error]   9 |   DialogContent,', '[error] src/components/radiology/create-radiology-order-modal.tsx: SyntaxError: Identifier expected. (5:1)', '[error]   3 | import {', '[error]   4 |', '[error] > 5 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | \"use client\";', '[error] src/components/radiology/create-radiology-report-modal.tsx: SyntaxError: Identifier expected. (5:1)', '[error]   3 | import {', '[error]   4 |', '[error] > 5 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | \"use client\";', '[error] src/components/radiology/create-radiology-study-modal.tsx: SyntaxError: Identifier expected. (5:1)', '[error]   3 | import {', '[error]   4 |', '[error] > 5 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | \"use client\";', '[error] src/components/radiology/radiology-order-detail.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect } from \"react\";', '[error]   2 | import {', '[error] > 3 | import { useParams, useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', '[error] src/components/radiology/radiology-order-list.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";', '[error]   6 | }', '[error]   7 |', '[error] src/components/radiology/radiology-report-detail.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import { useState, useEffect, useCallback } from \"react\";', '[error]   3 | import {', '[error] > 4 | import { useParams, useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   5 | }', '[error]   6 |', '[error]   7 | \"use client\";', '[error] src/components/radiology/radiology-reports-list.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";', '[error]   6 | }', '[error]   7 |', '[error] src/components/radiology/radiology-settings.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import {', '[error]   3 |', '[error] > 4 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";', '[error]   6 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";', '[error]   7 | }', '[error] src/components/radiology/radiology-studies-list.tsx: SyntaxError: Identifier expected. (5:1)', '[error]   3 | import {', '[error]   4 |', '[error] > 5 | import { Button } from \"@/components/ui/button\";', '[error]     | ^', '[error]   6 | import { Card, CardContent } from \"@/components/ui/card\";', '[error]   7 | }', '[error]   8 |', '[error] src/components/radiology/radiology-study-detail.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import React, { useState, useEffect, type ReactNode, useCallback } from \"react\"; // FIX: Add useCallback', '[error]   2 | import {', '[error] > 3 | import { useParams, useRouter } from \"next/navigation\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', '[error] src/components/theme-provider.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import * as React from \"react\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/ui/accordion.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/alert-dialog.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { buttonVariants } from \"@/components/ui/button\";', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/alert.tsx: SyntaxError: Property assignment expected. (10:5)', '[error]    8 |   \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",', '[error]    9 |   {', '[error] > 10 |     {', '[error]      |     ^', '[error]   11 |         default: \"bg-background text-foreground\",', '[error]   12 |         destructive: \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\"', '[error]   13 |       },', '[error] src/components/ui/aspect-ratio.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/ui/avatar.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', \"[error] src/components/ui/badge.tsx: SyntaxError: ')' expected. (8:170)\", '[error]    6 | import { cn } from \"@/lib/utils\";', '[error]    7 | const badgeVariants = cva(', '[error] >  8 |   \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus: outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\";', '[error]      |                                                                                                                                                                          ^', '[error]    9 |   {', '[error]   10 |         default: \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",', '[error]   11 |         secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",', '[error] src/components/ui/breadcrumb.tsx: SyntaxError: Expression expected. (8:37)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | const Breadcrumb = React.forwardRef<;', '[error]      |                                     ^', '[error]    9 |   HTMLElement,', '[error]   10 |   React.ComponentPropsWithoutRef<\"nav\"> & {', '[error]   11 |     separator?: React.ReactNode;', '[error] src/components/ui/button.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cn } from \"@/lib/utils\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | /**', '[error] src/components/ui/calendar.tsx: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { buttonVariants } from \"@/components/ui/button\";', '[error]    8 | import { cn } from \"@/lib/utils\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | \"use client\";', '[error]   12 |', '[error] src/components/ui/card.tsx: SyntaxError: Expression expected. (6:31)', '[error]   4 |', '[error]   5 | import { cn } from \"@/lib/utils\";', '[error] > 6 | const Card = React.forwardRef<;', '[error]     |                               ^', '[error]   7 |   HTMLDivElement,', '[error]   8 |   React.HTMLAttributes<HTMLDivElement>', '[error]   9 | >(({ className, ...props }, ref) => (', \"[error] src/components/ui/carousel.tsx: SyntaxError: 'from' expected. (5:1)\", '[error]   3 | }', '[error]   4 |', '[error] > 5 | \"use client\";', '[error]     | ^', '[error]   6 |', '[error]   7 |   type UseEmblaCarouselType,', '[error]   8 | } from \"embla-carousel-react\";', '[error] src/components/ui/chart.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/checkbox.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/collapsible.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/ui/command.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { Dialog, DialogContent } from \"@/components/ui/dialog\";', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/context-menu.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', \"[error] src/components/ui/data-table.tsx: SyntaxError: '=>' expected. (18:4)\", '[error]   16 |   className = \"\",', '[error]   17 |   onRowClick,', '[error] > 18 | }) {', '[error]      |    ^', '[error]   19 |   const [currentPage, setCurrentPage] = React.useState(1);', '[error]   20 |   const totalPages = Math.ceil(data.length / pageSize);', '[error]   21 |', \"[error] src/components/ui/date-picker.tsx: SyntaxError: '=>' expected. (18:4)\", '[error]   16 |   disabled = false,', '[error]   17 |   className = \"\",', '[error] > 18 | }) {', '[error]      |    ^', '[error]   19 |   const [isOpen, setIsOpen] = React.useState(false);', '[error]   20 |   const [date, setDate] = React.useState(value || null);', '[error]   21 |', '[error] src/components/ui/dialog.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/drawer.tsx: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 |', '[error]   5 | import { cn } from \"@/lib/utils\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | \"use client\";', '[error]   9 |', '[error] src/components/ui/dropdown-menu.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/form.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import * as React from \"react\";', '[error]   3 | import {', '[error] > 4 | import { Slot } from \"@radix-ui/react-slot\";', '[error]     | ^', '[error]   5 | }', '[error]   6 |', '[error]   7 | \"use client\";', '[error] src/components/ui/hover-card.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/index.tsx: SyntaxError: Declaration or statement expected. (11:3)', '[error]    9 | // Button component Props', '[error]   10 | type ButtonProperties= {};', '[error] > 11 |   extends React.ButtonHTMLAttributes<HTMLButtonElement> {', '[error]      |   ^', '[error]   12 |   children?: React.ReactNode;', '[error]   13 |   variant?: \"default\" | \"destructive\" | \"outline\" | \"ghost\" | \"success\";', '[error]   14 |   size?: \"sm\" | \"md\" | \"lg\" | \"icon\";', '[error] src/components/ui/input-otp.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/input.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cn } from \"@/lib/utils\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | /**', '[error] src/components/ui/label.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cn } from \"@/lib/utils\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | /**', '[error] src/components/ui/logo.tsx: SyntaxError: Expression expected. (28:5)', '[error]   26 |', '[error]   27 |   return (', '[error] > 28 |     >', '[error]      |     ^', '[error]   29 | <div className=\"relative\"', '[error]   30 |         style={{ width: sizeMap[size].logo, height: sizeMap[size].logo }}', '[error]   31 |       >', '[error] src/components/ui/menubar.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/navigation-menu.tsx: SyntaxError: Expression expected. (9:41)', '[error]    7 |', '[error]    8 | import { cn } from \"@/lib/utils\";', '[error] >  9 | const NavigationMenu = React.forwardRef<;', '[error]      |                                         ^', '[error]   10 |   React.ElementRef<typeof NavigationMenuPrimitive.Root>,', '[error]   11 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>', '[error]   12 | >(({ className, children, ...props }, ref) => (', \"[error] src/components/ui/pagination.tsx: SyntaxError: Unexpected token. Did you mean `{'>'}` or `&gt;`? (14:4)\", '[error]   12 |     className={cn(\"mx-auto flex w-full justify-center\", className)}', '[error]   13 |     {...props}', '[error] > 14 |   />', '[error]      |    ^', '[error]   15 | );', '[error]   16 | Pagination.displayName = \"Pagination\";', '[error]   17 |', '[error] src/components/ui/popover.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/progress.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/radio-group.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/resizable.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/scroll-area.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/select.tsx: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cn } from \"@/lib/utils\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |   }>;', '[error]   7 | }', '[error]   8 |', '[error] src/components/ui/separator.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/sheet.tsx: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |', '[error]    8 | import { cn } from \"@/lib/utils\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | \"use client\";', '[error]   12 |', '[error] src/components/ui/sidebar.tsx: SyntaxError: Identifier expected. (4:1)', '[error]   2 | import * as React from \"react\";', '[error]   3 | import {', '[error] > 4 | import { PanelLeft } from \"lucide-react\";', '[error]     | ^', '[error]   5 | import { Slot } from \"@radix-ui/react-slot\";', '[error]   6 | import { VariantProps, cva } from \"class-variance-authority\";', '[error]   7 |', \"[error] src/components/ui/skeleton.tsx: SyntaxError: ',' expected. (5:11)\", '[error]   3 | const Skeleton = ({', '[error]   4 |   className,', '[error] > 5 |   ...props;', '[error]     |           ^', '[error]   6 | }: React.HTMLAttributes<HTMLDivElement>) {', '[error]   7 |   return (', '[error]   8 | <div', '[error] src/components/ui/slider.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/sonner.tsx: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { useTheme } from \"next-themes\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | \"use client\";', '[error]   6 |', '[error] src/components/ui/switch.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/table.tsx: SyntaxError: Expression expected. (6:32)', '[error]   4 |', '[error]   5 | import { cn } from \"@/lib/utils\";', '[error] > 6 | const Table = React.forwardRef<;', '[error]     |                                ^', '[error]   7 |   HTMLTableElement,', '[error]   8 |   React.HTMLAttributes<HTMLTableElement>', '[error]   9 | >(({ className, ...props }, ref) => (', '[error] src/components/ui/tabs.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/textarea.tsx: SyntaxError: Expression expected. (6:35)', '[error]   4 |', '[error]   5 | import { cn } from \"@/lib/utils\";', '[error] > 6 | const Textarea = React.forwardRef<;', '[error]     |                                   ^', '[error]   7 |   HTMLTextAreaElement,', '[error]   8 |   React.ComponentProps<\"textarea\">', '[error]   9 | >(({ className, ...props }, ref) => {', '[error] src/components/ui/toast.tsx: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |', '[error]    8 | import { cn } from \"@/lib/utils\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | \"use client\";', '[error]   12 |', '[error] src/components/ui/toaster.tsx: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import {', '[error]   2 |', '[error] > 3 | import { useToast } from \"@/hooks/use-toast\";', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | \"use client\";', '[error] src/components/ui/toggle-group.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { toggleVariants } from \"@/components/ui/toggle\";', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/toggle.tsx: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |', '[error]    7 | import { cn } from \"@/lib/utils\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | \"use client\";', '[error]   11 |', '[error] src/components/ui/tooltip.tsx: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 |', '[error]    6 | import { cn } from \"@/lib/utils\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | \"use client\";', '[error]   10 |', '[error] src/components/ui/use-toast.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 |', '[error]   5 | import type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | // Inspired by react-hot-toast library', '[error]   9 | const TOAST_LIMIT = 1;', \"[error] src/hooks/use-toast.ts: SyntaxError: 'from' expected. (6:1)\", '[error]   4 | }', '[error]   5 |', '[error] > 6 | \"use client\";', '[error]     | ^', '[error]   7 |', '[error]   8 | // Inspired by react-hot-toast library', '[error]   9 |   ToastActionElement,', \"[error] src/lib/__tests__/notifications.test.ts: SyntaxError: ',' expected. (165:19)\", '[error]   163 | \\t\\t\\t\\t\\tresource_id: 123,', '[error]   164 | \\t\\t\\t\\t\\tpriority: \"medium\",', '[error] > 165 | \\t\\t\\t\\t\\tmetadata: \"{\"testId\": 456}\",', '[error]       | \\t\\t\\t\\t\\t             ^', '[error]   166 | \\t\\t\\t\\t\\tcreated_at: \"2023-01-01T12:00:00Z\",', '[error]   167 | \\t\\t\\t\\t\\tread: false,', '[error]   168 | \\t\\t\\t\\t},', '[error] src/lib/ai/clinical-decision-support.service.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { EventEmitter } from \"events\";', '[error]   3 | import { PrismaClient } from \"@prisma/client\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Clinical Decision Support System (CDSS)', '[error] src/lib/analytics/business-intelligence.service.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { EventEmitter } from \"events\";', '[error]   3 | import { PrismaClient } from \"@prisma/client\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Business Intelligence Service;', '[error] src/lib/audit.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { prisma } from \"@/lib/prisma\";', '[error]   3 | import { SecurityService } from \"@/lib/security.service\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Audit Logger Service for HMS Support Services;', '[error] src/lib/audit/audit-logger.service.js: SyntaxError: Unexpected token (6:68)', '[error]   4 |         extendStatics = Object.setPrototypeOf ||', '[error]   5 |             ({ __proto__: [] } instanceof Array && ((d, b) => { d.__proto__ = b; })) ||', '[error] > 6 |             ((d, b) => { for (var p in b) \\\\1 {\\\\n  \\\\2 d[p] = b[p]; });', '[error]     |                                                                    ^', '[error]   7 |         return extendStatics(d, b);', '[error]   8 |     };', '[error]   9 |     return (d, b) => {', '[error] src/lib/audit/audit-logger.service.ts: SyntaxError: Expression expected. (1:18)', '[error] > 1 |   organizationId?: string;', '[error]     |                  ^', '[error]   2 |   location?: string;', '[error]   3 |', '[error]   4 |', '[error] src/lib/audit/audit-service.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { prisma } from \"@/lib/prisma\";', '[error]    6 | // src/lib/audit/audit-service.ts', '[error] >  7 | }', '[error]      | ^', '[error]    8 | }', '[error]    9 |', '[error]   10 | }', '[error] src/lib/auth.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import jwt from \"jsonwebtoken\";', '[error]   4 | import { NextRequest } from \"next/server\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | // JWT Configuration', '[error] src/lib/auth/auth-service.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { prisma } from \"@/lib/prisma\";', '[error]    8 | // src/lib/auth/auth-service.ts', '[error] >  9 | }', '[error]      | ^', '[error]   10 | }', '[error]   11 |', '[error]   12 | }', '[error] src/lib/authUtils.test.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { comparePassword, hashPassword } from \"./authUtils.ts\"', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | // SEC-2: Unit tests for password hashing and verification functions', '[error]   8 | // Research notes: research_notes_password_hashing.md (covers bcrypt)', \"[error] src/lib/authUtils.ts: SyntaxError: '=>' expected. (5:72)\", '[error]   3 | const SALT_ROUNDS = 10;', '[error]   4 |', '[error] > 5 | export const _hashPassword = async (password: string): Promise<string> {', '[error]     |                                                                        ^', '[error]   6 |   return await bcrypt.hash(password, SALT_ROUNDS);', '[error]   7 | export const _comparePassword = async (password: string, hash: string): Promise<boolean> {', '[error]   8 |   return await bcrypt.compare(password, hash);', '[error] src/lib/barcode.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { createHash } from \"crypto\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | /**', '[error]   6 |  * Barcode generation and processing utilities for HMS Diagnostics Module;', '[error] src/lib/cache.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { createClient } from \"redis\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | /**', '[error]   6 |  * Cache service for the HMS application;', '[error] src/lib/cache/cache.service.ts: SyntaxError: Invalid character. (1:39)', '[error] > 1 | import { EventEmitter } from \"events\";\\\\nimport { v4 as uuidv4 } from \"uuid\";\\\\nimport Redis from \"ioredis\";\\\\nimport LRU from \"lru-cache\";\\\\nimport crypto from \"crypto\";\\\\n\\\\nexport interface CacheConfig {\\\\n  redisUrl?: string;\\\\n  maxMemoryItems?: number;\\\\n  defaultTTL?: number; // in seconds\\\\n  enableCompression?: boolean;\\\\n  enableDistribution?: boolean;\\\\n  keyPrefix?: string;\\\\n  serializer?: \"json\" | \"msgpack\" | \"custom\";\\\\n  compressionThreshold?: number; // bytes\\\\n}\\\\n\\\\nexport interface CacheOptions {\\\\n  ttl?: number; // Time to live in seconds\\\\n  tags?: string[]; // For cache invalidation\\\\n  version?: string; // For versioned caching\\\\n  compress?: boolean;\\\\n  serialize?: boolean;\\\\n  namespace?: string;\\\\n  priority?: \"low\" | \"normal\" | \"high\" | \"critical\";\\\\n}\\\\n\\\\nexport interface CacheEntry<T = any> {\\\\n  key: string;\\\\n  value: T;\\\\n  ttl: number;\\\\n  createdAt: Date;\\\\n  expiresAt: Date;\\\\n  lastAccessed: Date;\\\\n  accessCount: number;\\\\n  tags: string[];\\\\n  version?: string;\\\\n  namespace?: string;\\\\n  priority: \"low\" | \"normal\" | \"high\" | \"critical\";\\\\n  size: number; // in bytes\\\\n  compressed: boolean;\\\\n  metadata?: Record>\\\\n}\\\\n\\\\nexport interface CacheStats {\\\\n  hits: number;\\\\n  misses: number;\\\\n  hitRate: number;\\\\n  totalItems: number;\\\\n  memoryUsage: number;\\\\n  redisUsage?: number;\\\\n  evictions: number;\\\\n  compressionRatio?: number;\\\\n  averageItemSize: number;\\\\n  operationsPerSecond: number;\\\\n  distributedInvalidations: number;\\\\n}\\\\n\\\\nexport interface CacheKeyPattern {\\\\n  pattern: string;\\\\n  ttl: number;\\\\n  tags: string[];\\\\n  priority: \"low\" | \"normal\" | \"high\" | \"critical\";\\\\n  compress?: boolean;\\\\n}\\\\n\\\\nexport interface CacheInvalidationRule {\\\\n  id: string;\\\\n  name: string;\\\\n  triggers: CacheInvalidationTrigger[];\\\\n  targets: CacheInvalidationTarget[];\\\\n  isActive: boolean;\\\\n  createdAt: Date;\\\\n  lastTriggered?: Date;\\\\n  triggerCount: number;\\\\n}\\\\n\\\\nexport interface CacheInvalidationTrigger {\\\\n  type: \"time\" | \"event\" | \"dependency\" | \"manual\";\\\\n  condition: unknown;\\\\n  schedule?: string; // cron expression for time-based\\\\n  eventType?: string; // for event-based\\\\n  dependencies?: string[]; // for dependency-based\\\\n}\\\\n\\\\nexport interface CacheInvalidationTarget {\\\\n  type: \"key\" | \"pattern\" | \"tag\" | \"namespace\";\\\\n  value: string;\\\\n  cascade?: boolean; // whether to invalidate dependent caches\\\\n}\\\\n\\\\nclass CacheService extends EventEmitter {\\\\n  private redis?: Redis;\\\\n  private memoryCache: LRU>\\\\n  private config: Required>\\\\n  private stats: CacheStats;\\\\n  private keyPatterns: Map<string, CacheKeyPattern> = new Map();\\\\n  private invalidationRules: Map<string, CacheInvalidationRule> = new Map();\\\\n  private compressionEnabled: boolean;\\\\n  private compressionThreshold: number;\\\\n  private nodeId: string;\\\\n  private operationCounter = 0;\\\\n  private operationStartTime = crypto.getRandomValues([0];\\\\n  \\\\n  constructor(config: CacheConfig = {}) {\\\\n    super();\\\\n    \\\\n    this.config = {\\\\n      redisUrl: config.redisUrl || \"redis://localhost:6379\",\\\\n      maxMemoryItems: config.maxMemoryItems || 10000,\\\\n      defaultTTL: config.defaultTTL || 3600, // 1 hour\\\\n      enableCompression: config.enableCompression ?? true,\\\\n      enableDistribution: config.enableDistribution ?? true,\\\\n      keyPrefix: config.keyPrefix || \"hms:cache:\",\\\\n      serializer: config.serializer || \"json\",\\\\n      compressionThreshold: config.compressionThreshold || 1024 // 1KB\\\\n    };\\\\n    \\\\n    this.compressionEnabled = this.config.enableCompression;\\\\n    this.compressionThreshold = this.config.compressionThreshold;\\\\n    this.nodeId = uuidv4();\\\\n    \\\\n    // Initialize memory cache\\\\n    this.memoryCache = new LRU({\\\\n      max: this.config.maxMemoryItems,\\\\n      dispose: (key, entry) => {\\\\n        this.stats.evictions++;\\\\n        this.emit(\"cache_eviction\", { key, entry });\\\\n      },\\\\n      updateAgeOnGet: true\\\\n    });\\\\n    \\\\n    // Initialize stats\\\\n    this.stats = {\\\\n      hits: 0,\\\\n      misses: 0,\\\\n      hitRate: 0,\\\\n      totalItems: 0,\\\\n      memoryUsage: 0,\\\\n      evictions: 0,\\\\n      averageItemSize: 0,\\\\n      operationsPerSecond: 0,\\\\n      distributedInvalidations: 0\\\\n    };\\\\n    \\\\n    // Initialize Redis if enabled\\\\n    if (!session.user) {\\\\n      this.initializeRedis();\\\\n    }\\\\n    \\\\n    // Initialize default cache patterns\\\\n    this.initializeDefaultPatterns();\\\\n    \\\\n    // Start periodic cleanup and stats update\\\\n    setInterval(() => this.updateStats(), 60000); // Every minute\\\\n    setInterval(() => this.cleanup(), 300000); // Every 5 minutes\\\\n  }\\\\n\\\\n  /**\\\\n   * Get value from cache\\\\n   */\\\\n  async get<T = any>(key: string, options: Partial<CacheOptions> = {}): Promise<T | null> {\\\\n    const fullKey = this.buildKey(key, options.namespace);\\\\n    \\\\n    try {\\\\n      // Try memory cache first\\\\n      const memoryEntry = this.memoryCache.get(fullKey);\\\\n      if (!session.user) {\\\\n        memoryEntry.lastAccessed = new Date();\\\\n        memoryEntry.accessCount++;\\\\n        this.stats.hits++;\\\\n        this.operationCounter++;\\\\n        \\\\n        this.emit(\"cache_hit\", key: fullKey, source: \"memory\", entry: memoryEntry );\\\\n        return memoryEntry.value as T;\\\\n      }\\\\n      \\\\n      // Try Redis cache\\\\n      if (!session.user) {\\\\n        const redisValue = await this.redis.get(fullKey);\\\\n        if (!session.user) {\\\\n          const entry = await this.deserializeEntry(redisValue);\\\\n          if (!session.user) {\\\\n            // Store in memory cache for faster access\\\\n            entry.lastAccessed = new Date();\\\\n            entry.accessCount++;\\\\n            this.memoryCache.set(fullKey, entry);\\\\n            \\\\n            this.stats.hits++;\\\\n            this.operationCounter++;\\\\n            \\\\n            this.emit(\"cache_hit\", { key: fullKey, source: \"redis\", entry });\\\\n            return entry.value as T;\\\\n          }\\\\n        }\\\\n      }\\\\n      \\\\n      // Cache miss\\\\n      this.stats.misses++;\\\\n      this.operationCounter++;\\\\n      this.emit(\"cache_miss\", { key: fullKey });\\\\n      \\\\n      return null;\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"get\", key: fullKey, error });\\\\n      return null;\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Set value in cache\\\\n   */\\\\n  async set<T = any>(;\\\\n    key: string, \\\\n    value: T, \\\\n    options: CacheOptions = {}\\\\n  ): Promise<boolean> {\\\\n    const fullKey = this.buildKey(key, options.namespace);\\\\n    \\\\n    try {\\\\n      const ttl = options.ttl || this.config.defaultTTL;\\\\n      const priority = options.priority || \"normal\";\\\\n      const tags = options.tags || [];\\\\n      const compress = options.compress ?? this.shouldCompress(value);\\\\n      \\\\n      // Apply cache pattern if exists\\\\n      const pattern = this.findMatchingPattern(key);\\\\n      if (!session.user) {\\\\n        options.ttl = pattern.ttl;\\\\n        options.tags = [...tags, ...pattern.tags];\\\\n        options.priority = pattern.priority;\\\\n        options.compress = pattern.compress ?? compress;\\\\n      }\\\\n      \\\\n      const entry: CacheEntry<T> = {\\\\n        key: fullKey,\\\\n        value,\\\\n        ttl,\\\\n        createdAt: new Date(),\\\\n        expiresAt: [0] + ttl * 1000),\\\\n        lastAccessed: new Date(),\\\\n        accessCount: 0,\\\\n        tags: options.tags || [],\\\\n        version: options.version,\\\\n        namespace: options.namespace,\\\\n        priority,\\\\n        size: this.calculateSize(value),\\\\n        compressed: compress,\\\\n        metadata: {}\\\\n      };\\\\n      \\\\n      // Compress if needed\\\\n      if (!session.user) {\\\\n        entry.value = await this.compress(value) as T;\\\\n      }\\\\n      \\\\n      // Store in memory cache\\\\n      this.memoryCache.set(fullKey, entry);\\\\n      \\\\n      // Store in Redis if enabled\\\\n      if (!session.user) {\\\\n        const serialized = await this.serializeEntry(entry);\\\\n        await this.redis.setex(fullKey, ttl, serialized);\\\\n        \\\\n        // Store tags for invalidation\\\\n        if (!session.user) {\\\\n          await this.storeTagMappings(fullKey, tags);\\\\n        }\\\\n      }\\\\n      \\\\n      this.operationCounter++;\\\\n      this.emit(\"cache_set\", { key: fullKey, entry });\\\\n      \\\\n      return true;\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"set\", key: fullKey, error });\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Get or set pattern - get value, or compute and cache if not found\\\\n   */\\\\n  async getOrSet<T = any>(;\\\\n    key: string,\\\\n    factory: () => Promise<T> | T,\\\\n    options: CacheOptions = {}\\\\n  ): Promise<T> {\\\\n    const cached = await this.get<T>(key, options);\\\\n    if (!session.user) {\\\\n      return cached;\\\\n    }\\\\n    \\\\n    const value = await factory();\\\\n    await this.set(key, value, options);\\\\n    return value;\\\\n  }\\\\n\\\\n  /**\\\\n   * Delete specific key\\\\n   */\\\\n  async delete(key: string, namespace?: string): Promise<boolean> {\\\\n    const fullKey = this.buildKey(key, namespace);\\\\n    \\\\n    try {\\\\n      // Remove from memory cache\\\\n      this.memoryCache.delete(fullKey);\\\\n      \\\\n      // Remove from Redis\\\\n      if (!session.user) {\\\\n        await this.redis.del(fullKey);\\\\n        await this.removeTagMappings(fullKey);\\\\n      }\\\\n      \\\\n      this.operationCounter++;\\\\n      this.emit(\"cache_delete\", { key: fullKey });\\\\n      \\\\n      return true;\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"delete\", key: fullKey, error });\\\\n      return false;\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Clear cache by pattern\\\\n   */\\\\n  async deletePattern(pattern: string, namespace?: string): Promise<number> {\\\\n    const fullPattern = this.buildKey(pattern, namespace);\\\\n    let deletedCount = 0;\\\\n    \\\\n    try {\\\\n      // Clear from memory cache\\\\n      const memoryKeys = Array.from(this.memoryCache.keys());\\\\n      for (const key of memoryKeys) {\\\\n        if (!session.user) {\\\\n          this.memoryCache.delete(key);\\\\n          deletedCount++;\\\\n        }\\\\n      }\\\\n      \\\\n      // Clear from Redis\\\\n      if (!session.user) {\\\\n        const redisKeys = await this.redis.keys(fullPattern);\\\\n        if (!session.user) {\\\\n          await this.redis.del(...redisKeys);\\\\n          deletedCount += redisKeys.length;\\\\n          \\\\n          // Remove tag mappings\\\\n          for (const key of redisKeys) {\\\\n            await this.removeTagMappings(key);\\\\n          }\\\\n        }\\\\n      }\\\\n      \\\\n      this.operationCounter++;\\\\n      this.emit(\"cache_delete_pattern\", { pattern: fullPattern, deletedCount });\\\\n      \\\\n      return deletedCount;\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"deletePattern\", pattern: fullPattern, error });\\\\n      return 0;\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Clear cache by tags\\\\n   */\\\\n  async deleteByTags(tags: string[]): Promise<number> {\\\\n    if (!session.user)eturn 0;\\\\n    \\\\n    let deletedCount = 0;\\\\n    \\\\n    try {\\\\n      const keysToDelete = new Set<string>();\\\\n      \\\\n      // Find all keys with these tags\\\\n      for (const tag of tags) {\\\\n        const tagKey = `${this.config.keyPrefix}tags:${tag}`;\\\\n        const keys = await this.redis.smembers(tagKey);\\\\n        keys.forEach(key => keysToDelete.add(key));\\\\n      }\\\\n      \\\\n      // Delete the keys\\\\n      for (const key of keysToDelete) {\\\\n        await this.delete(key.replace(this.config.keyPrefix, \"\"));\\\\n        deletedCount++;\\\\n      }\\\\n      \\\\n      this.emit(\"cache_delete_tags\", { tags, deletedCount });\\\\n      \\\\n      return deletedCount;\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"deleteByTags\", tags, error });\\\\n      return 0;\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Clear all cache\\\\n   */\\\\n  async clear(): Promise<void> {\\\\n    try {\\\\n      // Clear memory cache\\\\n      this.memoryCache.clear();\\\\n      \\\\n      // Clear Redis cache\\\\n      if (!session.user) {\\\\n        const keys = await this.redis.keys(`${this.config.keyPrefix}*`);\\\\n        if (!session.user) {\\\\n          await this.redis.del(...keys);\\\\n        }\\\\n      }\\\\n      \\\\n      this.emit(\"cache_clear\");\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      this.emit(\"cache_error\", { operation: \"clear\", error });\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Check if key exists\\\\n   */\\\\n  async exists(key: string, namespace?: string): Promise<boolean> {\\\\n    const fullKey = this.buildKey(key, namespace);\\\\n    \\\\n    // Check memory cache\\\\n    if (!session.user) {\\\\n      const entry = this.memoryCache.get(fullKey)!;\\\\n      if (!session.user) {\\\\n        return true;\\\\n      }\\\\n    }\\\\n    \\\\n    // Check Redis cache\\\\n    if (!session.user) {\\\\n      const exists = await this.redis.exists(fullKey);\\\\n      return exists === 1;\\\\n    }\\\\n    \\\\n    return false;\\\\n  }\\\\n\\\\n  /**\\\\n   * Get cache statistics\\\\n   */\\\\n  getStats(): CacheStats {\\\\n    this.updateStats();\\\\n    return { ...this.stats };\\\\n  }\\\\n\\\\n  /**\\\\n   * Register cache key pattern\\\\n   */\\\\n  registerPattern(name: string, pattern: CacheKeyPattern): void {\\\\n    this.keyPatterns.set(name, pattern);\\\\n    this.emit(\"pattern_registered\", { name, pattern });\\\\n  }\\\\n\\\\n  /**\\\\n   * Create cache invalidation rule\\\\n   */\\\\n  createInvalidationRule(\\\\n    name: string,\\\\n    triggers: CacheInvalidationTrigger[],\\\\n    targets: CacheInvalidationTarget[]\\\\n  ): string {\\\\n    const ruleId = uuidv4();\\\\n    \\\\n    const rule: CacheInvalidationRule = {\\\\n      id: ruleId,\\\\n      name,\\\\n      triggers,\\\\n      targets,\\\\n      isActive: true,\\\\n      createdAt: new Date(),\\\\n      triggerCount: 0\\\\n    };\\\\n    \\\\n    this.invalidationRules.set(ruleId, rule);\\\\n    this.emit(\"invalidation_rule_created\", rule);\\\\n    \\\\n    return ruleId;\\\\n  }\\\\n\\\\n  /**\\\\n   * Trigger cache invalidation\\\\n   */\\\\n  async invalidate(eventType: string, eventData?: unknown): Promise<void> {\\\\n    const triggeredRules: CacheInvalidationRule[] = [];\\\\n    \\\\n    for (const rule of this.invalidationRules.values()) {\\\\n      if (!session.user)ontinue;\\\\n      \\\\n      const shouldTrigger = rule.triggers.some(trigger => {\\\\n        if (!session.user)n          return true;\\\\n        \\\\n        if (!session.user) {\\\\n          return true;\\\\n        }\\\\n        return false;\\\\n      });\\\\n      \\\\n      if (!session.user) {\\\\n        triggeredRules.push(rule);\\\\n        rule.lastTriggered = new Date();\\\\n        rule.triggerCount++;\\\\n      }\\\\n    }\\\\n    \\\\n    // Execute invalidation targets\\\\n    for (const rule of triggeredRules) {\\\\n      for (const target of rule.targets) {\\\\n        await this.executeInvalidationTarget(target);\\\\n      }\\\\n    }\\\\n    \\\\n    if (!session.user) {\\\\n      this.emit(\"cache_invalidation\", { \\\\n        eventType, \\\\n        eventData, \\\\n        triggeredRules: triggeredRules.map(r => r.name) \\\\n      });\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Warm up cache with commonly accessed data\\\\n   */\\\\n  async warmup(entries: Array<{ key: string, factory: () => Promise> options?: CacheOptions }>): Promise<void> {\\\\n    const warmupPromises = entries.map(async ({ key, factory, options }) => {\\\\n      try {\\\\n        const exists = await this.exists(key, options?.namespace);\\\\n        if (!session.user) {\\\\n          const value = await factory();\\\\n          await this.set(key, value, options);\\\\n        }\\\\n      } catch (error) {\\\\n        // Debug logging removed\\\\n      }\\\\n    });\\\\n    \\\\n    await Promise.allSettled(warmupPromises);\\\\n    this.emit(\"cache_warmup_complete\", { entriesCount: entries.length });\\\\n  }\\\\n\\\\n  /**\\\\n   * Export cache data for backup\\\\n   */\\\\n  async exportData(): Promise<{ entries: CacheEntry[], metadata: unknown }> {\\\\n    const entries: CacheEntry[] = [];\\\\n    \\\\n    // Export from memory cache\\\\n    for (const [key, entry] of this.memoryCache.entries()) {\\\\n      if (!session.user) {\\\\n        entries.push({ ...entry });\\\\n      }\\\\n    }\\\\n    \\\\n    // Export from Redis would require scanning all keys\\\\n    // This is typically done as a background job\\\\n    \\\\n    return {\\\\n      entries,\\\\n      metadata: {\\\\n        exportedAt: new Date(),\\\\n        nodeId: this.nodeId,\\\\n        totalEntries: entries.length,\\\\n        config: this.config\\\\n      }\\\\n    };\\\\n  }\\\\n\\\\n  /**\\\\n   * Import cache data from backup\\\\n   */\\\\n  async importData(data: { entries: CacheEntry[], metadata: unknown }): Promise<void> {\\\\n    let importedCount = 0;\\\\n    \\\\n    for (const entry of data.entries) {\\\\n      if (!session.user) {\\\\n        // Calculate remaining TTL\\\\n        const remainingTTL = Math.max(0, Math.floor((entry.expiresAt.getTime() - crypto.getRandomValues([0]) / 1000));\\\\n        \\\\n        if (!session.user) {\\\\n          await this.set(entry.key.replace(this.config.keyPrefix, \"\"), entry.value, {\\\\n            ttl: remainingTTL,\\\\n            tags: entry.tags,\\\\n            version: entry.version,\\\\n            namespace: entry.namespace,\\\\n            priority: entry.priority\\\\n          });\\\\n          importedCount++;\\\\n        }\\\\n      }\\\\n    }\\\\n    \\\\n    this.emit(\"cache_import_complete\", { \\\\n      totalEntries: data.entries.length, \\\\n      importedCount \\\\n    });\\\\n  }\\\\n\\\\n  // Private methods\\\\n\\\\n  private async initializeRedis(): Promise<void> {\\\\n    try {\\\\n      this.redis = new Redis(this.config.redisUrl);\\\\n      \\\\n      this.redis.on(\"connect\", () => {\\\\n        // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]     |                                       ^', '[error]   2 |', '[error]   3 | }', '[error]   4 | }', '[error] src/lib/cache/invalidation.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { config } from \"@/config\";', '[error]   3 | import { RedisCache } from \"./redis.ts\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |     await RedisCache.deletePattern(`${config.cache.prefix.test}list:*`);', '[error]   6 |', '[error]   7 |     // Invalidate related entities', '[error] src/lib/cache/metrics.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { RedisCache } from \"./redis.ts\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |   }', '[error]   5 |', '[error]   6 |   /**', '[error] src/lib/cache/redis-cache.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { cache } from \"../cache\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Enterprise Redis Caching Implementation;', \"[error] src/lib/cache/redis-cluster.ts: SyntaxError: ';' expected. (34:31)\", '[error]   32 |', '[error]   33 |       // Function to generate the cache value', '[error] > 34 |       generator: () => Promise>', '[error]      |                               ^', '[error]   35 |', '[error]   36 |       // TTL for this cache entry', '[error]   37 |       ttl?: number;', '[error] src/lib/cache/redis.ts: SyntaxError: Declaration or statement expected. (22:1)', '[error]   20 |', '[error]   21 | // Cache wrapper class', '[error] > 22 | }', '[error]      | ^', '[error]   23 |     } catch (error) {', '[error]   24 |', '[error]   25 |       return null;', \"[error] src/lib/clinical/icd-coding.service.ts: SyntaxError: ',' expected. (38:4)\", '[error]   36 |   billable: z.boolean().default(true),', '[error]   37 |   sex: z.enum([\"male\", \"female\", \"both\"]).default(\"both\"),', '[error] > 38 |   z.number().optional(),', '[error]      |    ^', '[error]   39 |     max: z.number().optional(),', '[error]   40 |     units: z.enum([\"days\", \"months\", \"years\"]).default(\"years\")', '[error]   41 |   }).optional()', '[error] src/lib/database.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 |  * Database connection interface', '[error]   10 |  */', '[error] > 11 | }', '[error]      | ^', '[error]   12 | }', '[error]   13 |', '[error]   14 | /**', '[error] src/lib/database/connection-pool.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { PrismaClient } from \"@prisma/client\";', '[error]   3 | import { Pool } from \"pg\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Enterprise Database Connection Pool Configuration;', '[error] src/lib/database/dynamic-connection-pool.ts: SyntaxError: Declaration or statement expected. (50:1)', '[error]   48 |  * Dynamic Connection Pool that scales based on usage;', '[error]   49 |  */', '[error] > 50 | }', '[error]      | ^', '[error]   51 |     };', '[error]   52 |', '[error]   53 |     this.currentPoolSize = config.minPoolSize;', '[error] src/lib/database/ehr-repository.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 |', '[error]   10 | // Types for EHR entities', '[error] > 11 | }', '[error]      | ^', '[error]   12 |   };', '[error]   13 |', '[error]   14 |   // Clinical coding', '[error] src/lib/database/fhir-adapter.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { type FHIRPatient, FHIRPatientUtils } from \"@/lib/fhir/patient\";', '[error]    8 | import type { FHIRBase } from \"@/lib/fhir/types\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * FHIR Database Adapter;', '[error] src/lib/database/materialized-views.ts: SyntaxError: Declaration or statement expected. (51:1)', '[error]   49 |  * Manages the creation, refreshing, and caching of materialized views for analytical queries;', '[error]   50 |  */', '[error] > 51 | }', '[error]      | ^', '[error]   52 |   ) {}', '[error]   53 |', '[error]   54 |   /**', '[error] src/lib/database/postgresql_adapter.test.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { type IDatabaseAdapter, PostgresqlAdapter } from \"./postgresql_adapter.ts\"', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | // ARCH-1: Unit Tests for PostgresqlAdapter', '[error]   8 | // Research notes: (General Jest/TypeScript testing practices)', '[error] src/lib/database/postgresql_adapter.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { Pool, type PoolClient, type QueryResult } from \"pg\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // ARCH-1: Migrate to Enterprise Database Solution (Implement PostgreSQL Adapter)', '[error]   6 | // Research notes: research_notes_postgresql_adapter_article1.md, research_notes_postgresql_adapter_github_scan.md, research_notes_postgresql_adapter_egomobile_repo.md', '[error] src/lib/database/query-optimizer.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { cache } from \"@/lib/cache\";', '[error]   5 | import { prisma } from \"./connection-pool.ts\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Database Query Optimizer;', \"[error] src/lib/database/sharding-manager.ts: SyntaxError: ';' expected. (28:17)\", '[error]   26 |', '[error]   27 |   // For range-based sharding', '[error] > 28 |   ranges?: Array>', '[error]      |                 ^', '[error]   29 |', '[error]   30 |   // For lookup-based sharding', '[error]   31 |   lookupMap?: Record>', \"[error] src/lib/dataLoader.ts: SyntaxError: '=>' expected. (10:33)\", '[error]    8 |  * Prevents N+1 query problems by batching database requests;', '[error]    9 |  */', '[error] > 10 | export const createLoaders = () {', '[error]      |                                 ^', '[error]   11 |   return {', '[error]   12 |     /**', '[error]   13 |      * Patient loader - batch loads patients by ID;', '[error] src/lib/enterprise/enterprise-api.service.ts: SyntaxError: Declaration or statement expected. (14:1)', '[error]   12 | import { notificationService } from \"../realtime/notification.service\";', '[error]   13 | import { rbacService } from \"../security/rbac.service\";', '[error] > 14 | }', '[error]      | ^', '[error]   15 |', '[error]   16 | /**', '[error]   17 |  * Enterprise API Service;', '[error] src/lib/error-handler.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Error Handler for HMS Support Services Management;', '[error] src/lib/error-handling/resilience.service.ts: SyntaxError: Declaration or statement expected. (39:1)', '[error]   37 |', '[error]   38 | // Custom Error Classes', '[error] > 39 | }', '[error]      | ^', '[error]   40 |     context: Record<string, unknown> = {},', '[error]   41 |     retryable = false', '[error]   42 |   ) {', '[error] src/lib/event-sourcing/event-replay.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * It provides the ability to rebuild system state by replaying events from the event store.', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |   ) {}', '[error]   14 |', '[error]   15 |   /**', '[error] src/lib/event-sourcing/event-store.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 |  * Event interface for domain events;', '[error]   10 |  */', '[error] > 11 | }', '[error]      | ^', '[error]   12 |   };', '[error]   13 | }', '[error]   14 |', '[error] src/lib/fhir/__tests__/fhir-integration.test.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { FHIRIntegrationUtils } from \"../fhir-integration\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * FHIR Integration Tests;', \"[error] src/lib/fhir/appointment.ts: SyntaxError: 'from' expected. (10:3)\", '[error]    8 |  */', '[error]    9 |', '[error] > 10 |   FHIRBase,', '[error]      |   ^', '[error]   11 |   FHIRIdentifier,', '[error]   12 |   FHIRCodeableConcept,', '[error]   13 |   FHIRReference,', \"[error] src/lib/fhir/condition.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRCodeableConcept,', '[error]   14 |   FHIRReference,', \"[error] src/lib/fhir/diagnostic-report.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRCodeableConcept,', '[error]   14 |   FHIRReference,', \"[error] src/lib/fhir/encounter.ts: SyntaxError: 'from' expected. (10:3)\", '[error]    8 |  */', '[error]    9 |', '[error] > 10 |   FHIRBase,', '[error]      |   ^', '[error]   11 |   FHIRIdentifier,', '[error]   12 |   FHIRCodeableConcept,', '[error]   13 |   FHIRReference,', \"[error] src/lib/fhir/fhir-analytics.service.ts: SyntaxError: ';' expected. (2:55)\", '[error]   1 |', '[error] > 2 | import { cacheService } from \"@/lib/cache/redis-cache\",', '[error]     |                                                       ^', '[error]   3 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\",', '[error]   4 |', '[error]   5 |', '[error] src/lib/fhir/fhir-integration.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { type FHIRMedicationRequest, FHIRMedicationUtils } from \"./medication.ts\";', '[error]    6 | import { type FHIRPatient, FHIRPatientUtils } from \"./patient.ts\";', '[error] >  7 | }', '[error]      | ^', '[error]    8 |', '[error]    9 | /**', '[error]   10 |  * FHIR Integration Utilities;', '[error] src/lib/fhir/fhir-r4-base.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * FHIR R4 Base Implementation;', '[error] src/lib/fhir/fhir.service.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 | import { type FHIRPatient, FHIRPatientSearchParams, FHIRPatientUtils } from \"./patient.ts\";', '[error]    9 | import type { FHIRBase, FHIRBundle } from \"./types.ts\";', '[error] > 10 | }', '[error]      | ^', '[error]   11 |', '[error]   12 | /**', '[error]   13 |  * FHIR R4 Service Implementation;', \"[error] src/lib/fhir/location.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRContactPoint,', '[error]   14 |   FHIRAddress,', \"[error] src/lib/fhir/medication.ts: SyntaxError: 'from' expected. (10:3)\", '[error]    8 |  */', '[error]    9 |', '[error] > 10 |   FHIRBase,', '[error]      |   ^', '[error]   11 |   FHIRIdentifier,', '[error]   12 |   FHIRCodeableConcept,', '[error]   13 |   FHIRReference,', \"[error] src/lib/fhir/observation.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRCodeableConcept,', '[error]   14 |   FHIRReference,', \"[error] src/lib/fhir/organization.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRHumanName,', '[error]   14 |   FHIRContactPoint,', \"[error] src/lib/fhir/patient.ts: SyntaxError: 'from' expected. (10:3)\", '[error]    8 |  */', '[error]    9 |', '[error] > 10 |   FHIRBase,', '[error]      |   ^', '[error]   11 |   FHIRIdentifier,', '[error]   12 |   FHIRCodeableConcept,', '[error]   13 |   FHIRReference,', \"[error] src/lib/fhir/practitioner.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRHumanName,', '[error]   14 |   FHIRContactPoint,', \"[error] src/lib/fhir/procedure.ts: SyntaxError: 'from' expected. (11:3)\", '[error]    9 |  */', '[error]   10 |', '[error] > 11 |   FHIRBase,', '[error]      |   ^', '[error]   12 |   FHIRIdentifier,', '[error]   13 |   FHIRCodeableConcept,', '[error]   14 |   FHIRReference,', '[error] src/lib/fhir/types.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * FHIR R4 Base Types and Interfaces;', \"[error] src/lib/graphql/federation.ts: SyntaxError: ',' expected. (43:74)\", '[error]   41 |     metricsCollector.recordTimer(', '[error]   42 |       \"graphql.federation.service_response_time\",', '[error] > 43 |       context.startTime ? crypto.getRandomValues([0] - context.startTime : 0,', '[error]      |                                                                          ^', '[error]   44 |       {', '[error]   45 |         service: serviceName,', '[error]   46 |         operation: operationName', '[error] src/lib/graphql/schema-base.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { PubSub } from \"graphql-subscriptions\";', '[error]   3 | import { gql } from \"graphql-tag\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * GraphQL Schema Base Implementation;', \"[error] src/lib/hr/__tests__/asset-service.test.ts: SyntaxError: ',' expected. (10:9)\", '[error]    8 | jest.mock(\"@prisma/client\", () => {', '[error]    9 |   const mockPrismaClient = {', '[error] > 10 |     jest.fn(),', '[error]      |         ^', '[error]   11 |       findUnique: jest.fn(),', '[error]   12 |       findMany: jest.fn(),', '[error]   13 |       update: jest.fn(),', \"[error] src/lib/hr/__tests__/biomedical-service.test.ts: SyntaxError: ',' expected. (10:9)\", '[error]    8 | jest.mock(\"@prisma/client\", () => {', '[error]    9 |   const mockPrismaClient = {', '[error] > 10 |     jest.fn(),', '[error]      |         ^', '[error]   11 |       findUnique: jest.fn(),', '[error]   12 |       findMany: jest.fn(),', '[error]   13 |       update: jest.fn(),', \"[error] src/lib/hr/__tests__/employee-service.test.ts: SyntaxError: ',' expected. (10:9)\", '[error]    8 | jest.mock(\"@prisma/client\", () => {', '[error]    9 |   const mockPrismaClient = {', '[error] > 10 |     jest.fn(),', '[error]      |         ^', '[error]   11 |       findUnique: jest.fn(),', '[error]   12 |       findMany: jest.fn(),', '[error]   13 |       update: jest.fn(),', \"[error] src/lib/hr/__tests__/payroll-service.test.ts: SyntaxError: ',' expected. (9:9)\", '[error]    7 | jest.mock(\"@prisma/client\", () => {', '[error]    8 |   const mockPrisma = {', '[error] >  9 |     jest.fn(),', '[error]      |         ^', '[error]   10 |       findMany: jest.fn(),', '[error]   11 |       create: jest.fn(),', '[error]   12 |       update: jest.fn(),', '[error] src/lib/hr/asset-service.ts: SyntaxError: Declaration or statement expected. (11:1)', '[error]    9 |  * Optimized with caching, query improvements, and predictive maintenance;', '[error]   10 |  */', '[error] > 11 | }', '[error]      | ^', '[error]   12 |   }) {', '[error]   13 |     const result = await prisma.asset.create({', '[error]   14 |       data,', '[error] src/lib/hr/attendance-service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |  * Service for managing attendance records and biometric verification;', '[error]    7 |  */', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }) {', '[error]   10 |     const { employeeId, date, checkInTime, biometricVerified, notes } = data;', '[error]   11 |', \"[error] src/lib/hr/auth-integration.ts: SyntaxError: ',' expected. (12:27)\", '[error]   10 |  * This connects the HR module with the central HMS authentication system;', '[error]   11 |  */', '[error] > 12 | export const PrismaAdapter(prisma),', '[error]      |                           ^', '[error]   13 |   \"jwt\"', '[error]   14 |   },', '[error]   15 |   \"/login\"', '[error] src/lib/hr/biomedical-service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * Enhanced with caching, query optimization, and FHIR R5 compliance;', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |   }) {', '[error]   14 |     const result = await prisma.biomedicalEquipment.create({', '[error]   15 |       data.serialNumber,', '[error] src/lib/hr/biometric-service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |  * Service for biometric integration and management;', '[error]    7 |  */', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }) {', '[error]   10 |     const { employeeId, templateType, templateData, deviceId, notes } = data;', '[error]   11 |', '[error] src/lib/hr/department-service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |  * Service for managing department and position data;', '[error]    7 |  */', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }) {', '[error]   10 |     return prisma.department.create({', '[error]   11 |       data,', '[error] src/lib/hr/employee-service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * Enhanced with caching and query optimization for improved performance;', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |     }[];', '[error]   14 |     positions?: {', '[error]   15 |       positionId: string,', '[error] src/lib/hr/integration-service.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Integration service for connecting HR & Asset Management with other HMS modules;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   }', '[error]   11 |', '[error]   12 |   /**', '[error] src/lib/hr/payroll-service.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 |  * Service for managing payroll processing and calculations;', '[error]    9 |  */', '[error] > 10 | }', '[error]      | ^', '[error]   11 |   }) {', '[error]   12 |     const { name, startDate, endDate, paymentDate, status, notes } = data;', '[error]   13 |', '[error] src/lib/hr/salary-service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 |  * Service for managing salary structures and payroll components;', '[error]    7 |  */', '[error] >  8 | }', '[error]      | ^', '[error]    9 |     }[];', '[error]   10 |   }) {', '[error]   11 |     const { name, description, components } = data;', '[error] src/lib/hr/types.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Type definitions for the HR & Asset Management module;', '[error] src/lib/integration/gap-implementation-test.ts: SyntaxError: Declaration or statement expected. (15:1)', '[error]   13 |  */', '[error]   14 |', '[error] > 15 | }', '[error]      | ^', '[error]   16 |   };', '[error]   17 |   errors: string[],', '[error]   18 |   recommendations: string[]', '[error] src/lib/integration/integration-hub.service.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { EventEmitter } from \"events\";', '[error]   3 | import { PrismaClient } from \"@prisma/client\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Integration Hub Service;', '[error] src/lib/integration/microservices-gateway.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import { pubsub } from \"@/lib/graphql/schema-base\";', '[error]    8 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |', '[error]   11 | /**', '[error]   12 |  * Microservices Integration Gateway;', '[error] src/lib/ipd.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { getDB } from \"@/lib/database\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // Placeholder for IPD related database functions', '[error]   6 | // FIX: Define a more specific type for Admission data', \"[error] src/lib/ipd/ipd-management.service.ts: SyntaxError: ',' expected. (24:46)\", '[error]   22 |   admitting_diagnosis: z.string().min(1, \"Admitting diagnosis is required\"),', '[error]   23 |   secondary_diagnoses: z.array(z.string()).optional(),', '[error] > 24 |   icd10_codes: z.array(z.string()).optional();', '[error]      |                                              ^', '[error]   25 |', '[error]   26 |   // Care team', '[error]   27 |   attending_doctor_id: z.string().min(1, \"Attending doctor is required\"),', '[error] src/lib/middleware/error-handling.middleware.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { NextRequest, NextResponse } from \"next/server\";', '[error]     | ^', '[error]   3 | }', '[error]   4 |', '[error]   5 | /**', '[error] src/lib/models/ambulance.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Maps to FHIR Device resource;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   }[];', '[error]   11 |   status: \"active\" | \"inactive\" | \"entered-in-error\" | \"unknown\",', '[error]   12 |   {', '[error] src/lib/models/dietary.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Maps to FHIR NutritionOrder resource;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   };', '[error]   11 |   encounter?: {', '[error]   12 |     reference: string', '[error] src/lib/models/feedback.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Maps to FHIR QuestionnaireResponse resource;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   };', '[error]   11 |   authored: string;', '[error]   12 |   author?: {', '[error] src/lib/models/housekeeping.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Maps to FHIR ServiceRequest resource;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |     }[];', '[error]   11 |   }[];', '[error]   12 |   {', '[error] src/lib/models/maintenance.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Maps to FHIR ServiceRequest resource;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |     }[];', '[error]   11 |   }[];', '[error]   12 |   {', '[error] src/lib/models/marketing.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Marketing CRM Module Models;', '[error] src/lib/monitoring/health-monitor.service.ts: SyntaxError: Invalid character. (2:39)', '[error]   1 |', '[error] > 2 | import { EventEmitter } from \"events\";\\\\nimport { v4 as uuidv4 } from \"uuid\";\\\\nimport { PrismaClient } from \"@prisma/client\";\\\\nimport os from \"os\";\\\\nimport { promisify } from \"util\";\\\\nimport { exec } from \"child_process\";\\\\n\\\\nconst execAsync = promisify(exec);\\\\n\\\\nexport interface HealthCheck {\\\\n  id: string;\\\\n  name: string;\\\\n  type: HealthCheckType;\\\\n  status: HealthStatus;\\\\n  lastCheck: Date;\\\\n  nextCheck: Date;\\\\n  interval: number; // in seconds\\\\n  timeout: number; // in seconds\\\\n  retryCount: number;\\\\n  maxRetries: number;\\\\n  configuration: unknown;\\\\n  metrics: HealthMetrics;\\\\n  history: HealthCheckResult[];\\\\n  isEnabled: boolean;\\\\n  tags: string[];\\\\n  dependencies: string[];\\\\n  alertRules: AlertRule[];\\\\n}\\\\n\\\\nexport type HealthCheckType = \\\\n  | \"database\"\\\\n  | \"redis\"\\\\n  | \"api_endpoint\"\\\\n  | \"external_service\"\\\\n  | \"file_system\"\\\\n  | \"memory\"\\\\n  | \"cpu\"\\\\n  | \"disk\"\\\\n  | \"network\"\\\\n  | \"custom\";\\\\n\\\\nexport type HealthStatus = \"healthy\" | \"degraded\" | \"unhealthy\" | \"unknown\";\\\\n\\\\nexport interface HealthCheckResult {\\\\n  timestamp: Date;\\\\n  status: HealthStatus;\\\\n  responseTime: number;\\\\n  message?: string;\\\\n  metrics?: Record>\\\\n  error?: string;\\\\n}\\\\n\\\\nexport interface HealthMetrics {\\\\n  responseTime: {\\\\n    current: number;\\\\n    average: number;\\\\n    min: number;\\\\n    max: number;\\\\n    p95: number;\\\\n    p99: number;\\\\n  };\\\\n  availability: {\\\\n    uptime: number; // percentage\\\\n    totalChecks: number;\\\\n    successfulChecks: number;\\\\n    failedChecks: number;\\\\n  };\\\\n  performance: {\\\\n    throughput?: number;\\\\n    errorRate: number;\\\\n    latency: number;\\\\n  };\\\\n}\\\\n\\\\nexport interface SystemHealth {\\\\n  overall: HealthStatus;\\\\n  timestamp: Date;\\\\n  components: ComponentHealth[];\\\\n  metrics: SystemMetrics;\\\\n  alerts: ActiveAlert[];\\\\n  summary: HealthSummary;\\\\n}\\\\n\\\\nexport interface ComponentHealth {\\\\n  name: string;\\\\n  type: HealthCheckType;\\\\n  status: HealthStatus;\\\\n  responseTime: number;\\\\n  lastCheck: Date;\\\\n  message?: string;\\\\n  metrics?: Record>\\\\n}\\\\n\\\\nexport interface SystemMetrics {\\\\n  cpu: {\\\\n    usage: number; // percentage\\\\n    loadAverage: number[];\\\\n    cores: number;\\\\n  };\\\\n  memory: {\\\\n    used: number; // bytes\\\\n    free: number; // bytes\\\\n    total: number; // bytes\\\\n    usage: number; // percentage\\\\n  };\\\\n  disk: {\\\\n    used: number; // bytes\\\\n    free: number; // bytes\\\\n    total: number; // bytes\\\\n    usage: number; // percentage\\\\n  };\\\\n  network: {\\\\n    inbound: number; // bytes/sec\\\\n    outbound: number; // bytes/sec\\\\n    connections: number;\\\\n  };\\\\n  application: {\\\\n    uptime: number; // seconds\\\\n    activeConnections: number;\\\\n    memoryHeap: number;\\\\n    eventLoopLag: number;\\\\n  };\\\\n}\\\\n\\\\nexport interface AlertRule {\\\\n  id: string;\\\\n  name: string;\\\\n  condition: AlertCondition;\\\\n  severity: AlertSeverity;\\\\n  channels: AlertChannel[];\\\\n  isEnabled: boolean;\\\\n  cooldown: number; // minutes\\\\n  lastTriggered?: Date;\\\\n}\\\\n\\\\nexport interface AlertCondition {\\\\n  metric: string;\\\\n  operator: \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"eq\" | \"ne\";\\\\n  threshold: number;\\\\n  duration: number; // seconds\\\\n  aggregation?: \"avg\" | \"min\" | \"max\" | \"sum\" | \"count\";\\\\n}\\\\n\\\\nexport type AlertSeverity = \"info\" | \"warning\" | \"error\" | \"critical\";\\\\n\\\\nexport interface AlertChannel {\\\\n  type: \"email\" | \"slack\" | \"webhook\" | \"sms\" | \"pagerduty\";\\\\n  configuration: unknown;\\\\n  isEnabled: boolean;\\\\n}\\\\n\\\\nexport interface ActiveAlert {\\\\n  id: string;\\\\n  ruleId: string;\\\\n  ruleName: string;\\\\n  severity: AlertSeverity;\\\\n  status: \"active\" | \"resolved\" | \"silenced\";\\\\n  message: string;\\\\n  triggeredAt: Date;\\\\n  resolvedAt?: Date;\\\\n  silencedUntil?: Date;\\\\n  component: string;\\\\n  metadata: unknown;\\\\n}\\\\n\\\\nexport interface HealthSummary {\\\\n  totalComponents: number;\\\\n  healthyComponents: number;\\\\n  degradedComponents: number;\\\\n  unhealthyComponents: number;\\\\n  unknownComponents: number;\\\\n  overallAvailability: number;\\\\n  averageResponseTime: number;\\\\n  activeAlerts: number;\\\\n  criticalAlerts: number;\\\\n}\\\\n\\\\nexport interface PerformanceBaseline {\\\\n  component: string;\\\\n  metric: string;\\\\n  baseline: number;\\\\n  tolerance: number; // percentage\\\\n  sampleSize: number;\\\\n  confidence: number; // percentage\\\\n  lastUpdated: Date;\\\\n}\\\\n\\\\nclass HealthMonitorService extends EventEmitter {\\\\n  private healthChecks: Map<string, HealthCheck> = new Map();\\\\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\\\\n  private performanceBaselines: Map<string, PerformanceBaseline> = new Map();\\\\n  private prisma: PrismaClient;\\\\n  private monitoringInterval: NodeJS.Timeout;\\\\n  private metricsInterval: NodeJS.Timeout;\\\\n  private isRunning = false;\\\\n  private startTime = new Date();\\\\n  private systemMetricsHistory: SystemMetrics[] = [];\\\\n  private maxHistorySize = 1000;\\\\n\\\\n  constructor() {\\\\n    super();\\\\n    this.prisma = new PrismaClient();\\\\n    \\\\n    // Initialize default health checks\\\\n    this.initializeDefaultChecks();\\\\n    \\\\n    // Start monitoring\\\\n    this.start();\\\\n  }\\\\n\\\\n  /**\\\\n   * Start health monitoring\\\\n   */\\\\n  start(): void {\\\\n    if (!session.user)eturn;\\\\n    \\\\n    this.isRunning = true;\\\\n    this.startTime = new Date();\\\\n    \\\\n    // Run health checks every 30 seconds\\\\n    this.monitoringInterval = setInterval(() => {\\\\n      this.runHealthChecks();\\\\n    }, 30000);\\\\n    \\\\n    // Collect system metrics every 10 seconds\\\\n    this.metricsInterval = setInterval(() => {\\\\n      this.collectSystemMetrics();\\\\n    }, 10000);\\\\n    \\\\n    // Initial health check\\\\n    setTimeout(() => this.runHealthChecks(), 1000);\\\\n    \\\\n    // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]     |                                       ^', '[error]   3 | }', '[error]   4 |', '[error]   5 | /**', '[error] src/lib/monitoring/metrics-collector.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { cacheService } from \"../cache/redis-cache\";', '[error]   5 | import { getDatabaseHealth } from \"../database/connection-pool\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Enterprise Metrics Collection System;', '[error] src/lib/monitoring/rate-limiter.service.ts: SyntaxError: Invalid character. (1:39)', '[error] > 1 | import { EventEmitter } from \"events\";\\\\nimport { v4 as uuidv4 } from \"uuid\";\\\\nimport { PrismaClient } from \"@prisma/client\";\\\\n\\\\nexport interface RateLimitRule {\\\\n  id: string;\\\\n  name: string;\\\\n  pattern: string; // URL pattern or regex\\\\n  method?: string; // HTTP method\\\\n  windowMs: number; // Time window in milliseconds\\\\n  maxRequests: number; // Maximum requests per window\\\\n  scope: \"ip\" | \"user\" | \"organization\" | \"global\";\\\\n  skipSuccessfulRequests?: boolean;\\\\n  skipFailedRequests?: boolean;\\\\n  keyGenerator?: (req: unknown) => string;\\\\n  onLimitReached?: (req: unknown, rateLimitInfo: RateLimitInfo) => void;\\\\n  priority: number; // Higher priority rules are checked first\\\\n  isActive: boolean;\\\\n  metadata: {\\\\n    createdAt: Date;\\\\n    updatedAt: Date;\\\\n    createdBy: string;\\\\n    description?: string;\\\\n  };\\\\n}\\\\n\\\\nexport interface RateLimitInfo {\\\\n  totalHits: number;\\\\n  totalHitsPerWindow: number;\\\\n  remainingPoints: number;\\\\n  msBeforeNext: number;\\\\n  isFirstInWindow: boolean;\\\\n}\\\\n\\\\nexport interface APIMetrics {\\\\n  id: string;\\\\n  endpoint: string;\\\\n  method: string;\\\\n  statusCode: number;\\\\n  responseTime: number;\\\\n  requestSize: number;\\\\n  responseSize: number;\\\\n  userId?: string;\\\\n  organizationId?: string;\\\\n  ipAddress: string;\\\\n  userAgent?: string;\\\\n  timestamp: Date;\\\\n  rateLimitHit?: boolean;\\\\n  error?: string;\\\\n}\\\\n\\\\nexport interface EndpointStats {\\\\n  endpoint: string;\\\\n  method: string;\\\\n  totalRequests: number;\\\\n  totalErrors: number;\\\\n  avgResponseTime: number;\\\\n  minResponseTime: number;\\\\n  maxResponseTime: number;\\\\n  rateLimit90th: number;\\\\n  rateLimit95th: number;\\\\n  rateLimit99th: number;\\\\n  rateLimitHits: number;\\\\n  uniqueUsers: number;\\\\n  uniqueIPs: number;\\\\n  lastRequest: Date;\\\\n  statusCodes: Record>\\\\n}\\\\n\\\\nexport interface AlertRule {\\\\n  id: string;\\\\n  name: string;\\\\n  condition: AlertCondition;\\\\n  threshold: number;\\\\n  windowMs: number;\\\\n  actions: AlertAction[];\\\\n  isActive: boolean;\\\\n  metadata: {\\\\n    createdAt: Date;\\\\n    updatedAt: Date;\\\\n    createdBy: string;\\\\n    description?: string;\\\\n  };\\\\n}\\\\n\\\\nexport interface AlertCondition {\\\\n  metric: \"error_rate\" | \"response_time\" | \"request_rate\" | \"rate_limit_hits\";\\\\n  operator: \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"eq\";\\\\n  scope?: \"global\" | \"endpoint\" | \"user\" | \"organization\";\\\\n  endpoint?: string;\\\\n}\\\\n\\\\nexport interface AlertAction {\\\\n  type: \"email\" | \"webhook\" | \"slack\" | \"log\";\\\\n  configuration: unknown;\\\\n}\\\\n\\\\nexport interface SecurityEvent {\\\\n  id: string;\\\\n  type: \"rate_limit_exceeded\" | \"suspicious_activity\" | \"brute_force\" | \"abuse_detected\";\\\\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\\\\n  source: {\\\\n    ipAddress: string;\\\\n    userAgent?: string;\\\\n    userId?: string;\\\\n    organizationId?: string;\\\\n  };\\\\n  details: unknown;\\\\n  timestamp: Date;\\\\n  resolved: boolean;\\\\n  resolvedAt?: Date;\\\\n  resolvedBy?: string;\\\\n}\\\\n\\\\nclass RateLimiterService extends EventEmitter {\\\\n  private rules: Map<string, RateLimitRule> = new Map();\\\\n  private limitStore: Map<string, Map<string, RateLimitInfo>> = new Map();\\\\n  private metrics: APIMetrics[] = [];\\\\n  private alertRules: Map<string, AlertRule> = new Map();\\\\n  private securityEvents: SecurityEvent[] = [];\\\\n  private prisma: PrismaClient;\\\\n  private metricsRetentionDays = 30;\\\\n  private cleanupInterval: NodeJS.Timeout;\\\\n  private statsInterval: NodeJS.Timeout;\\\\n  private endpointStats: Map<string, EndpointStats> = new Map();\\\\n\\\\n  constructor() {\\\\n    super();\\\\n    this.prisma = new PrismaClient();\\\\n    \\\\n    // Initialize default rules\\\\n    this.initializeDefaultRules();\\\\n    \\\\n    // Cleanup old data every hour\\\\n    this.cleanupInterval = setInterval(() => {\\\\n      this.cleanupOldData();\\\\n    }, 60 * 60 * 1000);\\\\n    \\\\n    // Update stats every 5 minutes\\\\n    this.statsInterval = setInterval(() => {\\\\n      this.updateEndpointStats();\\\\n    }, 5 * 60 * 1000);\\\\n  }\\\\n\\\\n  /**\\\\n   * Check rate limit for a request\\\\n   */\\\\n  async checkRateLimit(request: {\\\\n    url: string;\\\\n    method: string;\\\\n    ip: string;\\\\n    userId?: string;\\\\n    organizationId?: string;\\\\n    userAgent?: string;\\\\n  }): Promise<{ allowed: boolean; rateLimitInfo?: RateLimitInfo; rule?: RateLimitRule }> {\\\\n    try {\\\\n      // Find applicable rules (sorted by priority)\\\\n      const applicableRules = this.findApplicableRules(request.url, request.method);\\\\n        .sort((a, b) => b.priority - a.priority);\\\\n\\\\n      for (const rule of applicableRules) {\\\\n        if (!session.user)ontinue;\\\\n\\\\n        const key = this.generateKey(rule, request);\\\\n        const result = await this.checkRule(rule, key);\\\\n\\\\n        if (!session.user) {\\\\n          // Rate limit exceeded\\\\n          await this.handleRateLimitExceeded(rule, request, result.rateLimitInfo!);\\\\n          return { allowed: false, rateLimitInfo: result.rateLimitInfo, rule };\\\\n        }\\\\n      }\\\\n\\\\n      return { allowed: true };\\\\n    } catch (error) {\\\\n      // Debug logging removed\\\\n      // On error, allow the request\\\\n      return { allowed: true };\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Record API metrics\\\\n   */\\\\n  async recordMetrics(metrics: Omit<APIMetrics, \"id\" | \"timestamp\">): Promise<void> {\\\\n    const apiMetrics: APIMetrics = {\\\\n      ...metrics,\\\\n      id: uuidv4(),\\\\n      timestamp: new Date()\\\\n    };\\\\n\\\\n    this.metrics.push(apiMetrics);\\\\n    \\\\n    // Update real-time stats\\\\n    this.updateRealTimeStats(apiMetrics);\\\\n    \\\\n    // Check alert conditions\\\\n    await this.checkAlertConditions(apiMetrics);\\\\n    \\\\n    this.emit(\"metrics_recorded\", apiMetrics);\\\\n\\\\n    // Keep metrics array size manageable\\\\n    if (!session.user) {\\\\n      this.metrics = this.metrics.slice(-5000);\\\\n    }\\\\n  }\\\\n\\\\n  /**\\\\n   * Create rate limit rule\\\\n   */\\\\n  async createRule(ruleData: Omit<RateLimitRule, \"id\" | \"metadata\"> & {\\\\n    createdBy: string;\\\\n    description?: string;\\\\n  }): Promise<RateLimitRule> {\\\\n    const rule: RateLimitRule = {\\\\n      ...ruleData,\\\\n      id: uuidv4(),\\\\n      metadata: {\\\\n        createdAt: new Date(),\\\\n        updatedAt: new Date(),\\\\n        createdBy: ruleData.createdBy,\\\\n        description: ruleData.description\\\\n      }\\\\n    };\\\\n\\\\n    this.rules.set(rule.id, rule);\\\\n    this.emit(\"rule_created\", rule);\\\\n    \\\\n    return rule;\\\\n  }\\\\n\\\\n  /**\\\\n   * Update rate limit rule\\\\n   */\\\\n  async updateRule(ruleId: string, updates: Partial<RateLimitRule>): Promise<RateLimitRule | null> {\\\\n    const rule = this.rules.get(ruleId);\\\\n    if (!session.user)eturn null;\\\\n\\\\n    const updatedRule = {\\\\n      ...rule,\\\\n      ...updates,\\\\n      metadata: {\\\\n        ...rule.metadata,\\\\n        updatedAt: new Date()\\\\n      }\\\\n    };\\\\n\\\\n    this.rules.set(ruleId, updatedRule);\\\\n    this.emit(\"rule_updated\", updatedRule);\\\\n    \\\\n    return updatedRule;\\\\n  }\\\\n\\\\n  /**\\\\n   * Delete rate limit rule\\\\n   */\\\\n  async deleteRule(ruleId: string): Promise<boolean> {\\\\n    const rule = this.rules.get(ruleId);\\\\n    if (!session.user)eturn false;\\\\n\\\\n    this.rules.delete(ruleId);\\\\n    this.emit(\"rule_deleted\", { ruleId, rule });\\\\n    \\\\n    return true;\\\\n  }\\\\n\\\\n  /**\\\\n   * Create alert rule\\\\n   */\\\\n  async createAlertRule(alertData: Omit<AlertRule, \"id\" | \"metadata\"> & {\\\\n    createdBy: string;\\\\n    description?: string;\\\\n  }): Promise<AlertRule> {\\\\n    const alertRule: AlertRule = {\\\\n      ...alertData,\\\\n      id: uuidv4(),\\\\n      metadata: {\\\\n        createdAt: new Date(),\\\\n        updatedAt: new Date(),\\\\n        createdBy: alertData.createdBy,\\\\n        description: alertData.description\\\\n      }\\\\n    };\\\\n\\\\n    this.alertRules.set(alertRule.id, alertRule);\\\\n    this.emit(\"alert_rule_created\", alertRule);\\\\n    \\\\n    return alertRule;\\\\n  }\\\\n\\\\n  /**\\\\n   * Get API metrics with filters\\\\n   */\\\\n  getMetrics(filters: {\\\\n    startTime?: Date;\\\\n    endTime?: Date;\\\\n    endpoint?: string;\\\\n    method?: string;\\\\n    userId?: string;\\\\n    organizationId?: string;\\\\n    statusCode?: number;\\\\n    minResponseTime?: number;\\\\n    maxResponseTime?: number;\\\\n    limit?: number;\\\\n    offset?: number;\\\\n  } = {}): APIMetrics[] {\\\\n    let filteredMetrics = this.metrics;\\\\n\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.timestamp >= filters.startTime!);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.timestamp <= filters.endTime!);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.endpoint.includes(filters.endpoint!));\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.method === filters.method);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.userId === filters.userId);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.organizationId === filters.organizationId);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.statusCode === filters.statusCode);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.responseTime >= filters.minResponseTime!);\\\\n    }\\\\n    if (!session.user) {\\\\n      filteredMetrics = filteredMetrics.filter(m => m.responseTime <= filters.maxResponseTime!);\\\\n    }\\\\n\\\\n    // Apply pagination\\\\n    const offset = filters.offset || 0;\\\\n    const limit = filters.limit || 100;\\\\n    \\\\n    return filteredMetrics;\\\\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\\\\n      .slice(offset, offset + limit);\\\\n  }\\\\n\\\\n  /**\\\\n   * Get endpoint statistics\\\\n   */\\\\n  getEndpointStats(endpoint?: string): EndpointStats[] {\\\\n    if (!session.user) {\\\\n      const stats = this.endpointStats.get(endpoint);\\\\n      return stats ? [stats] : [];\\\\n    }\\\\n    \\\\n    return Array.from(this.endpointStats.values());\\\\n      .sort((a, b) => b.totalRequests - a.totalRequests);\\\\n  }\\\\n\\\\n  /**\\\\n   * Get rate limit rules\\\\n   */\\\\n  getRules(): RateLimitRule[] {\\\\n    return Array.from(this.rules.values());\\\\n      .sort((a, b) => b.priority - a.priority);\\\\n  }\\\\n\\\\n  /**\\\\n   * Get alert rules\\\\n   */\\\\n  getAlertRules(): AlertRule[] {\\\\n    return Array.from(this.alertRules.values());\\\\n  }\\\\n\\\\n  /**\\\\n   * Get security events\\\\n   */\\\\n  getSecurityEvents(filters: {\\\\n    type?: string;\\\\n    severity?: string;\\\\n    resolved?: boolean;\\\\n    startTime?: Date;\\\\n    endTime?: Date;\\\\n    limit?: number;\\\\n  } = {}): SecurityEvent[] {\\\\n    let events = this.securityEvents;\\\\n\\\\n    if (!session.user) {\\\\n      events = events.filter(e => e.type === filters.type);\\\\n    }\\\\n    if (!session.user) {\\\\n      events = events.filter(e => e.severity === filters.severity);\\\\n    }\\\\n    if (!session.user) {\\\\n      events = events.filter(e => e.resolved === filters.resolved);\\\\n    }\\\\n    if (!session.user) {\\\\n      events = events.filter(e => e.timestamp >= filters.startTime!);\\\\n    }\\\\n    if (!session.user) {\\\\n      events = events.filter(e => e.timestamp <= filters.endTime!);\\\\n    }\\\\n\\\\n    return events;\\\\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\\\\n      .slice(0, filters.limit || 100);\\\\n  }\\\\n\\\\n  /**\\\\n   * Resolve security event\\\\n   */\\\\n  async resolveSecurityEvent(eventId: string, resolvedBy: string): Promise<boolean> {\\\\n    const event = this.securityEvents.find(e => e.id === eventId);\\\\n    if (!session.user)eturn false;\\\\n\\\\n    event.resolved = true;\\\\n    event.resolvedAt = new Date();\\\\n    event.resolvedBy = resolvedBy;\\\\n\\\\n    this.emit(\"security_event_resolved\", event);\\\\n    return true;\\\\n  }\\\\n\\\\n  /**\\\\n   * Get performance summary\\\\n   */\\\\n  getPerformanceSummary(timeRange: \"hour\" | \"day\" | \"week\" = \"hour\"): {\\\\n    totalRequests: number;\\\\n    averageResponseTime: number;\\\\n    errorRate: number;\\\\n    rateLimitHits: number;\\\\n    topEndpoints: Array>\\\\n    statusCodeDistribution: Record>\\\\n    securityEvents: number;\\\\n  } {\\\\n    const now = new Date();\\\\n    const timeRangeMs = {\\\\n      hour: 60 * 60 * 1000,\\\\n      day: 24 * 60 * 60 * 1000,\\\\n      week: 7 * 24 * 60 * 60 * 1000\\\\n    }[timeRange];\\\\n    \\\\n    const startTime = new Date(now.getTime() - timeRangeMs);\\\\n    const recentMetrics = this.metrics.filter(m => m.timestamp >= startTime);\\\\n    \\\\n    const totalRequests = recentMetrics.length;\\\\n    const averageResponseTime = totalRequests > 0;\\\\n      ? recentMetrics.reduce((sum, m) => sum + m.responseTime, 0) / totalRequests \\\\n      : 0;\\\\n    \\\\n    const errorRequests = recentMetrics.filter(m => m.statusCode >= 400).length;\\\\n    const errorRate = totalRequests > 0 ? (errorRequests / totalRequests) * 100 : 0;\\\\n    \\\\n    const rateLimitHits = recentMetrics.filter(m => m.rateLimitHit).length;\\\\n    \\\\n    // Top endpoints\\\\n    const endpointCounts: Record<string, number> = {};\\\\n    recentMetrics.forEach(m => {\\\\n      const key = `/* SECURITY: Template literal eliminated */\\\\n      endpointCounts[key] = (endpointCounts[key] || 0) + 1;\\\\n    });\\\\n    \\\\n    const topEndpoints = Object.entries(endpointCounts);\\\\n      .map(([endpoint, requests]) => ({ endpoint, requests }))\\\\n      .sort((a, b) => b.requests - a.requests)\\\\n      .slice(0, 10);\\\\n    \\\\n    // Status code distribution\\\\n    const statusCodeDistribution: Record<string, number> = {};\\\\n    recentMetrics.forEach(m => {\\\\n      const statusGroup = `${Math.floor(m.statusCode / 100)}xx`;\\\\n      statusCodeDistribution[statusGroup] = (statusCodeDistribution[statusGroup] || 0) + 1;\\\\n    });\\\\n    \\\\n    const recentSecurityEvents = this.securityEvents.filter(e => e.timestamp >= startTime).length;\\\\n    \\\\n    return {\\\\n      totalRequests,\\\\n      averageResponseTime,\\\\n      errorRate,\\\\n      rateLimitHits,\\\\n      topEndpoints,\\\\n      statusCodeDistribution,\\\\n      securityEvents: recentSecurityEvents\\\\n    };\\\\n  }\\\\n\\\\n  // Private methods\\\\n\\\\n  private initializeDefaultRules(): void {\\\\n    // Global rate limit\\\\n    this.createRule({\\\\n      name: \"Global API Rate Limit\",\\\\n      pattern: \"/api/*\",\\\\n      windowMs: 15 * 60 * 1000, // 15 minutes\\\\n      maxRequests: 1000,\\\\n      scope: \"ip\",\\\\n      priority: 1,\\\\n      isActive: true,\\\\n      createdBy: \"system\"\\\\n    });\\\\n\\\\n    // Authentication endpoints\\\\n    this.createRule({\\\\n      name: \"Auth Rate Limit\",\\\\n      pattern: \"/api/auth/*\",\\\\n      windowMs: 15 * 60 * 1000, // 15 minutes\\\\n      maxRequests: 10,\\\\n      scope: \"ip\",\\\\n      priority: 10,\\\\n      isActive: true,\\\\n      createdBy: \"system\"\\\\n    });\\\\n\\\\n    // User-specific rate limit\\\\n    this.createRule({\\\\n      name: \"User API Rate Limit\",\\\\n      pattern: \"/api/*\",\\\\n      windowMs: 60 * 60 * 1000, // 1 hour\\\\n      maxRequests: 5000,\\\\n      scope: \"user\",\\\\n      priority: 5,\\\\n      isActive: true,\\\\n      createdBy: \"system\"\\\\n    });\\\\n  }\\\\n\\\\n  private findApplicableRules(url: string, method: string): RateLimitRule[] {\\\\n    return Array.from(this.rules.values()).filter(rule => {\\\\n      if (!session.user) {\\\\n        return false;\\\\n      }\\\\n      \\\\n      return this.matchesPattern(url, rule.pattern);\\\\n    });\\\\n  }\\\\n\\\\n  private matchesPattern(url: string, pattern: string): boolean {\\\\n    // Simple pattern matching with wildcards\\\\n    const regexPattern = pattern;\\\\n      .replace(/\\\\\\\\*/g, \".*\")\\\\n      .replace(/\\\\\\\\?/g, \".\");\\\\n    \\\\n    const regex = new RegExp(`^${regexPattern}$`);\\\\n    return regex.test(url);\\\\n  }\\\\n\\\\n  private generateKey(rule: RateLimitRule, request: unknown): string {\\\\n    if (!session.user) {\\\\n      return rule.keyGenerator(request);\\\\n    }\\\\n\\\\n    switch (rule.scope) {\\\\n      case \"ip\":\\\\n        return `${rule.id}:${request.ip}`;\\\\n      case \"user\":\\\\n        return `${rule.id}:user:${request.userId || request.ip}`;\\\\n      case \"organization\":\\\\n        return `${rule.id}:org:${request.organizationId || request.ip}`;\\\\n      case \"global\":\\\\n        return `${rule.id}:global`;\\\\n      default:\\\\n        return `${rule.id}:${request.ip}`;\\\\n    }\\\\n  }\\\\n\\\\n  private async checkRule(rule: RateLimitRule, key: string): Promise<{ allowed: boolean; rateLimitInfo?: RateLimitInfo }> {\\\\n    if (!session.user) {\\\\n      this.limitStore.set(rule.id, ;\\\\n    }\\\\n\\\\n    const ruleStore = this.limitStore.get(rule.id)!;\\\\n    const now = crypto.getRandomValues([0];\\\\n    const windowStart = now - rule.windowMs;\\\\n\\\\n    let rateLimitInfo = ruleStore.get(key);\\\\n    \\\\n    if (!session.user) {\\\\n      rateLimitInfo = {\\\\n        totalHits: 0,\\\\n        totalHitsPerWindow: 0,\\\\n        remainingPoints: rule.maxRequests,\\\\n        msBeforeNext: 0,\\\\n        isFirstInWindow: true\\\\n      };\\\\n    } else {\\\\n      // Reset window if expired\\\\n      const timeSinceWindowStart = now - (rateLimitInfo as any).windowStartTime;\\\\n      if (!session.user) {\\\\n        rateLimitInfo.totalHitsPerWindow = 0;\\\\n        rateLimitInfo.isFirstInWindow = true;\\\\n        (rateLimitInfo as any).windowStartTime = now;\\\\n      } else {\\\\n        rateLimitInfo.isFirstInWindow = false;\\\\n      }\\\\n    }\\\\n\\\\n    // Update counters\\\\n    rateLimitInfo.totalHits++;\\\\n    rateLimitInfo.totalHitsPerWindow++;\\\\n    rateLimitInfo.remainingPoints = Math.max(0, rule.maxRequests - rateLimitInfo.totalHitsPerWindow);\\\\n    rateLimitInfo.msBeforeNext = rule.windowMs - (now - ((rateLimitInfo as any).windowStartTime || now));\\\\n\\\\n    if (!session.user)windowStartTime)) {\\\\n      (rateLimitInfo as any).windowStartTime = now;\\\\n    }\\\\n\\\\n    ruleStore.set(key, rateLimitInfo);\\\\n\\\\n    const allowed = rateLimitInfo.totalHitsPerWindow <= rule.maxRequests;\\\\n    return { allowed, rateLimitInfo };\\\\n  }\\\\n\\\\n  private async handleRateLimitExceeded(\\\\n    rule: RateLimitRule,\\\\n    request: unknown,\\\\n    rateLimitInfo: RateLimitInfo\\\\n  ): Promise<void> {\\\\n    // Create security event\\\\n    const securityEvent: SecurityEvent = {\\\\n      id: uuidv4(),\\\\n      type: \"rate_limit_exceeded\",\\\\n      severity: \"medium\",\\\\n      source: {\\\\n        ipAddress: request.ip,\\\\n        userAgent: request.userAgent,\\\\n        userId: request.userId,\\\\n        organizationId: request.organizationId\\\\n      },\\\\n      details: {\\\\n        rule: rule.name,\\\\n        url: request.url,\\\\n        method: request.method,\\\\n        rateLimitInfo\\\\n      },\\\\n      timestamp: new Date(),\\\\n      resolved: false\\\\n    };\\\\n\\\\n    this.securityEvents.push(securityEvent);\\\\n    this.emit(\"rate_limit_exceeded\", { rule, request, rateLimitInfo, securityEvent });\\\\n\\\\n    // Call custom handler if provided\\\\n    if (!session.user) {\\\\n      rule.onLimitReached(request, rateLimitInfo);\\\\n    }\\\\n  }\\\\n\\\\n  private updateRealTimeStats(metrics: APIMetrics): void {\\\\n    const key = `/* SECURITY: Template literal eliminated */\\\\n    let stats = this.endpointStats.get(key);\\\\n\\\\n    if (!session.user) {\\\\n      stats = {\\\\n        endpoint: metrics.endpoint,\\\\n        method: metrics.method,\\\\n        totalRequests: 0,\\\\n        totalErrors: 0,\\\\n        avgResponseTime: 0,\\\\n        minResponseTime: Infinity,\\\\n        maxResponseTime: 0,\\\\n        rateLimit90th: 0,\\\\n        rateLimit95th: 0,\\\\n        rateLimit99th: 0,\\\\n        rateLimitHits: 0,\\\\n        uniqueUsers: 0,\\\\n        uniqueIPs: 0,\\\\n        lastRequest: new Date(),\\\\n        statusCodes: {}\\\\n      };\\\\n      this.endpointStats.set(key, stats);\\\\n    }\\\\n\\\\n    // Update stats\\\\n    stats.totalRequests++;\\\\n    if (!session.user) {\\\\n      stats.totalErrors++;\\\\n    }\\\\n    if (!session.user) {\\\\n      stats.rateLimitHits++;\\\\n    }\\\\n\\\\n    // Update response time stats\\\\n    stats.avgResponseTime = ((stats.avgResponseTime * (stats.totalRequests - 1)) + metrics.responseTime) / stats.totalRequests;\\\\n    stats.minResponseTime = Math.min(stats.minResponseTime, metrics.responseTime);\\\\n    stats.maxResponseTime = Math.max(stats.maxResponseTime, metrics.responseTime);\\\\n    stats.lastRequest = metrics.timestamp;\\\\n\\\\n    // Update status code distribution\\\\n    const statusCode = metrics.statusCode.toString();\\\\n    stats.statusCodes[statusCode] = (stats.statusCodes[statusCode] || 0) + 1;\\\\n  }\\\\n\\\\n  private async checkAlertConditions(metrics: APIMetrics): Promise<void> {\\\\n    for (const alertRule of this.alertRules.values()) {\\\\n      if (!session.user)ontinue;\\\\n\\\\n      const shouldTrigger = await this.evaluateAlertCondition(alertRule, metrics);\\\\n      if (!session.user) {\\\\n        await this.trigger/* SECURITY: Alert removed */\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  private async evaluateAlertCondition(alertRule: AlertRule, metrics: APIMetrics): Promise<boolean> {\\\\n    const now = new Date();\\\\n    const windowStart = new Date(now.getTime() - alertRule.windowMs);\\\\n    const recentMetrics = this.metrics.filter(m => m.timestamp >= windowStart);\\\\n\\\\n    let value: number;\\\\n    \\\\n    switch (alertRule.condition.metric) {\\\\n      case \"error_rate\":\\\\n        const totalRequests = recentMetrics.length;\\\\n        const errorRequests = recentMetrics.filter(m => m.statusCode >= 400).length;\\\\n        value = totalRequests > 0 ? (errorRequests / totalRequests) * 100 : 0;\\\\n        break;\\\\n        \\\\n      case \"response_time\":\\\\n        const responseTimes = recentMetrics.map(m => m.responseTime);\\\\n        value = responseTimes.length > 0;\\\\n          ? responseTimes.reduce((sum, rt) => sum + rt, 0) / responseTimes.length \\\\n          : 0;\\\\n        break;\\\\n        \\\\n      case \"request_rate\":\\\\n        value = recentMetrics.length;\\\\n        break;\\\\n        \\\\n      case \"rate_limit_hits\":\\\\n        value = recentMetrics.filter(m => m.rateLimitHit).length;\\\\n        break;\\\\n        \\\\n      default:\\\\n        return false;\\\\n    }\\\\n\\\\n    // Apply scope filter\\\\n    if (!session.user) {\\\\n      const _scopedMetrics = recentMetrics.filter(m => m.endpoint === alertRule.condition.endpoint);\\\\n      // Recalculate value for scoped metrics\\\\n      // ... (similar logic as above but for scoped metrics)\\\\n    }\\\\n\\\\n    // Evaluate condition\\\\n    switch (alertRule.condition.operator) {\\\\n      case \"gt\": return value > alertRule.threshold;\\\\n      case \"gte\": return value >= alertRule.threshold;\\\\n      case \"lt\": return value < alertRule.threshold;\\\\n      case \"lte\": return value <= alertRule.threshold;\\\\n      case \"eq\": return value === alertRule.threshold;\\\\n      default: return false;\\\\n    }\\\\n  }\\\\n\\\\n  private async trigger/* SECURITY: Alert removed */: Promise<void> {\\\\n    const alert = {\\\\n      id: uuidv4(),\\\\n      ruleId: alertRule.id,\\\\n      ruleName: alertRule.name,\\\\n      condition: alertRule.condition,\\\\n      threshold: alertRule.threshold,\\\\n      triggeredAt: new Date(),\\\\n      metrics\\\\n    };\\\\n\\\\n    this.emit(\"alert_triggered\", alert);\\\\n\\\\n    // Execute alert actions\\\\n    for (const action of alertRule.actions) {\\\\n      try {\\\\n        await this.executeAlertAction(action, alert);\\\\n      } catch (error) {\\\\n        // Debug logging removed\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  private async executeAlertAction(action: AlertAction, alert: unknown): Promise<void> {\\\\n    switch (action.type) {\\\\n      case \"log\":\\\\n        // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement', '[error]     |                                       ^', '[error]   2 |', '[error]   3 | }', '[error]   4 | }', '[error] src/lib/notifications.ts: SyntaxError: Declaration or statement expected. (21:1)', '[error]   19 |  * Notification type definition', '[error]   20 |  */', '[error] > 21 | }', '[error]      | ^', '[error]   22 | }', '[error]   23 |', '[error]   24 | /**', \"[error] src/lib/notifications/external-notification.service.ts: SyntaxError: ',' expected. (12:4)\", '[error]   10 | // Notification Configuration Schema', '[error]   11 | export const NotificationConfigSchema = z.object({', '[error] > 12 |   z.enum([\"twilio\", \"aws_sns\", \"messagebird\"]),', '[error]      |    ^', '[error]   13 |     config: z.record(z.string()),', '[error]   14 |     enabled: z.boolean().default(true)', '[error]   15 |   }).optional(),', '[error] src/lib/performance/database-optimization.service.ts: SyntaxError: Declaration or statement expected. (15:1)', '[error]   13 |  */', '[error]   14 |', '[error] > 15 | }', '[error]      | ^', '[error]   16 |   };', '[error]   17 |   number,', '[error]   18 |     number,', \"[error] src/lib/quality/quality-management-persistent.service.ts: SyntaxError: ';' expected. (132:87)\", '[error]   130 |', '[error]   131 | // Type definitions', '[error] > 132 | export type QualityIndicator = z.infer<typeof QualityIndicatorSchema> & { id?: string export type QualityEvent = z.infer<typeof QualityEventSchema> & { id?: string };', '[error]       |                                                                                       ^', '[error]   133 | export type QualityAssessment = z.infer<typeof QualityAssessmentSchema> & { id?: string };', '[error]   134 | export type ComplianceReport = z.infer<typeof ComplianceReportSchema> & { id?: string };', '[error]   135 | export type ActionPlan = z.infer<typeof ActionPlanSchema> & { id?: string };', '[error] src/lib/quality/quality-management.service.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 |', '[error]   5 | import { type QualityPersistenceService, getQualityPersistenceService } from \"./quality-persistence.service\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Quality Management and Patient Safety Service;', '[error] src/lib/quality/quality-persistence.service.ts: SyntaxError: Declaration or statement expected. (37:1)', '[error]   35 | } from \"./quality-management.service\"', '[error]   36 |', '[error] > 37 | }', '[error]      | ^', '[error]   38 |     };', '[error]   39 |   }', '[error]   40 |', '[error] src/lib/quality/quality-service-integrated.ts: SyntaxError: Identifier expected. (3:1)', '[error]   1 | import {', '[error]   2 |', '[error] > 3 | import { QualityManagementService } from \"./quality-management.service\";', '[error]     | ^', '[error]   4 | import { QualityPersistenceService } from \"./quality-persistence.service\";', '[error]   5 | /**', '[error]   6 |  * Integrated Quality Management Service', '[error] src/lib/rbac.service.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import { AuditLogger } from \"@/lib/audit\";', '[error]   3 | import { AuthorizationError } from \"@/lib/errors\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | /**', '[error]   7 |  * Role-Based Access Control (RBAC) Service for HMS Support Services;', '[error] src/lib/rbac/rbac.service.ts: SyntaxError: Identifier expected. (2:1)', '[error]   1 | import {', '[error] > 2 | import { PrismaClient } from \"@prisma/client\";', '[error]     | ^', '[error]   3 |', '[error]   4 | import { cache } from \"@/lib/cache\";', '[error]   5 | import { logAuditEvent } from \"@/lib/audit\";', '[error] src/lib/rbac/roles.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Enterprise Role-Based Access Control (RBAC) System;', '[error] src/lib/realtime/notification.service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import jwt from \"jsonwebtoken\";', '[error]    7 | import { WebSocket, WebSocketServer } from \"ws\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |', '[error]   10 | /**', '[error]   11 |  * Enterprise Real-time Notification Service;', '[error] src/lib/schemas/ipd-schemas.ts: SyntaxError: Declaration or statement expected. (7:3)', '[error]    5 | const VitalSignsSchema = z.record(z.string(), z.any()).optional().nullable();', '[error]    6 | const MedicationGivenSchema = z;', '[error] >  7 |   .record(z.string(), z.any());', '[error]      |   ^', '[error]    8 |   .optional();', '[error]    9 |   .nullable();', '[error]   10 |', '[error] src/lib/security.service.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import * as crypto from \"crypto\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | /**', '[error]   6 |  * Security Service for HMS Support Services;', '[error] src/lib/security/audit.service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import winston from \"winston\";', '[error]   4 | import { ElasticsearchTransport } from \"winston-elasticsearch\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Enterprise Audit Logging Service;', '[error] src/lib/security/auth.service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 | import { cache } from \"@/lib/cache\";', '[error]   11 | import { decrypt, encrypt } from \"@/lib/security/encryption.service\";', '[error] > 12 | }', '[error]      | ^', '[error]   13 |', '[error]   14 | /**', '[error]   15 |  * Enterprise Authentication Service;', '[error] src/lib/security/encryption.service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import { logAuditEvent } from \"@/lib/audit\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | /**', '[error]   8 |  * Enterprise Field-Level Encryption Service;', '[error] src/lib/security/rbac.service.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import bcrypt from \"bcryptjs\";', '[error]   5 | import jwt from \"jsonwebtoken\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * Enterprise Role-Based Access Control (RBAC) Service;', '[error] src/lib/services/availability.service.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { prisma } from \"@/lib/prisma\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 | }', '[error]   5 |', '[error]   6 | /**', \"[error] src/lib/services/integration/__tests__/hms-integration.service.test.ts: SyntaxError: ',' expected. (9:7)\", '[error]    7 | // Mock dependencies', '[error]    8 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   jest.fn()', '[error]      |       ^', '[error]   10 |   },', '[error]   11 |   jest.fn()', '[error]   12 |   },', '[error] src/lib/services/integration/hms-integration.service.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { prisma } from \"@/lib/prisma\";', '[error]   5 | import { Action, RBACService, Resource } from \"@/lib/rbac.service\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | /**', '[error]   9 |  * HMS Integration Service for Support Services;', '[error] src/lib/services/support-services/ambulance/__tests__/ambulance.service.test.ts: SyntaxError: Property assignment expected. (9:3)', '[error]    7 | // Mock Prisma', '[error]    8 | vi.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   {', '[error]      |   ^', '[error]   10 |       findMany: vi.fn(),', '[error]   11 |       findUnique: vi.fn(),', '[error]   12 |       create: vi.fn(),', '[error] src/lib/services/support-services/ambulance/ambulance.service.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";', '[error]    8 | import { calculateRoute, estimateArrivalTime } from \"@/lib/services/support-services/ambulance/routing.service\";', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   }', '[error]   11 |', '[error]   12 |   /**', '[error] src/lib/services/support-services/dietary/__tests__/dietary.service.test.ts: SyntaxError: Property assignment expected. (9:3)', '[error]    7 | // Mock Prisma', '[error]    8 | vi.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   {', '[error]      |   ^', '[error]   10 |       findMany: vi.fn(),', '[error]   11 |       findUnique: vi.fn(),', '[error]   12 |       create: vi.fn(),', '[error] src/lib/services/support-services/dietary/dietary.service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { prisma } from \"@/lib/prisma\";', '[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }', '[error]   10 |', '[error]   11 |   /**', '[error] src/lib/services/support-services/feedback/__tests__/feedback.service.test.ts: SyntaxError: Property assignment expected. (9:3)', '[error]    7 | // Mock Prisma', '[error]    8 | vi.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   {', '[error]      |   ^', '[error]   10 |       findMany: vi.fn(),', '[error]   11 |       findUnique: vi.fn(),', '[error]   12 |       create: vi.fn(),', '[error] src/lib/services/support-services/feedback/feedback.service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { prisma } from \"@/lib/prisma\";', '[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }', '[error]   10 |', '[error]   11 |   /**', '[error] src/lib/services/support-services/housekeeping/__tests__/housekeeping.service.test.ts: SyntaxError: Property assignment expected. (9:3)', '[error]    7 | // Mock Prisma', '[error]    8 | vi.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   {', '[error]      |   ^', '[error]   10 |       findMany: vi.fn(),', '[error]   11 |       findUnique: vi.fn(),', '[error]   12 |       create: vi.fn(),', '[error] src/lib/services/support-services/housekeeping/housekeeping.service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { prisma } from \"@/lib/prisma\";', '[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }', '[error]   10 |', '[error]   11 |   /**', '[error] src/lib/services/support-services/maintenance/__tests__/maintenance.service.test.ts: SyntaxError: Property assignment expected. (9:3)', '[error]    7 | // Mock Prisma', '[error]    8 | vi.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   {', '[error]      |   ^', '[error]   10 |       findMany: vi.fn(),', '[error]   11 |       findUnique: vi.fn(),', '[error]   12 |       create: vi.fn(),', '[error] src/lib/services/support-services/maintenance/maintenance.service.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { prisma } from \"@/lib/prisma\";', '[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";', '[error] >  8 | }', '[error]      | ^', '[error]    9 |   }', '[error]   10 |', '[error]   11 |   /**', \"[error] src/lib/services/support-services/marketing/__tests__/analytics.service.test.ts: SyntaxError: ',' expected. (8:7)\", '[error]    6 | // Mock dependencies', '[error]    7 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  8 |   jest.fn(),', '[error]      |       ^', '[error]    9 |     findMany: jest.fn()', '[error]   10 |   },', '[error]   11 |   jest.fn(),', \"[error] src/lib/services/support-services/marketing/__tests__/contact.service.test.ts: SyntaxError: ',' expected. (9:7)\", '[error]    7 | // Mock dependencies', '[error]    8 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   jest.fn(),', '[error]      |       ^', '[error]   10 |     findUnique: jest.fn(),', '[error]   11 |     findMany: jest.fn(),', '[error]   12 |     count: jest.fn(),', \"[error] src/lib/services/support-services/marketing/__tests__/marketing.service.test.ts: SyntaxError: ',' expected. (9:7)\", '[error]    7 | // Mock dependencies', '[error]    8 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  9 |   jest.fn(),', '[error]      |       ^', '[error]   10 |     findUnique: jest.fn(),', '[error]   11 |     findMany: jest.fn(),', '[error]   12 |     count: jest.fn(),', \"[error] src/lib/services/support-services/marketing/__tests__/segment.service.test.ts: SyntaxError: ',' expected. (8:7)\", '[error]    6 | // Mock dependencies', '[error]    7 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  8 |   jest.fn(),', '[error]      |       ^', '[error]    9 |     findUnique: jest.fn(),', '[error]   10 |     findMany: jest.fn(),', '[error]   11 |     count: jest.fn(),', \"[error] src/lib/services/support-services/marketing/__tests__/template.service.test.ts: SyntaxError: ',' expected. (8:7)\", '[error]    6 | // Mock dependencies', '[error]    7 | jest.mock(\"@/lib/prisma\", () => ({', '[error] >  8 |   jest.fn(),', '[error]      |       ^', '[error]    9 |     findUnique: jest.fn(),', '[error]   10 |     findMany: jest.fn(),', '[error]   11 |     count: jest.fn(),', '[error] src/lib/services/support-services/marketing/analytics.service.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Service for managing marketing analytics;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |   async recordAnalytics(campaignId: string, data: { date: Date, metrics: unknown }, userId: string): Promise<CampaignAnalytics> {', '[error]   11 |     try {', '[error]   12 |       // Validate analytics data', '[error] src/lib/services/support-services/marketing/contact.service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * Service for managing marketing contacts and related operations;', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |       };', '[error]   14 |', '[error]   15 |       // Create contact in database', '[error] src/lib/services/support-services/marketing/index.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Marketing CRM Module Services Index;', '[error] src/lib/services/support-services/marketing/marketing.service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * Service for managing marketing campaigns and related operations;', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |         },', '[error]   14 |       });', '[error]   15 |', '[error] src/lib/services/support-services/marketing/segment.service.ts: SyntaxError: Declaration or statement expected. (10:1)', '[error]    8 |  * Service for managing contact segments and segmentation;', '[error]    9 |  */', '[error] > 10 | }', '[error]      | ^', '[error]   11 |         }', '[error]   12 |       });', '[error]   13 |', '[error] src/lib/services/support-services/marketing/template.service.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  * Service for managing marketing templates;', '[error]    8 |  */', '[error] >  9 | }', '[error]      | ^', '[error]   10 |         }', '[error]   11 |       });', '[error]   12 |', '[error] src/lib/session.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import type { User } from \"@/types/user\";', '[error]    6 | // Define and export the shape of the session data', '[error] >  7 | }', '[error]      | ^', '[error]    8 | }', '[error]    9 |', '[error]   10 | // Augment the iron-session module to include our IronSessionData definition', '[error] src/lib/utils.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | /**', '[error]   4 |  * Utility function for merging class names with Tailwind CSS;', '[error] src/lib/validation/schemas.ts: SyntaxError: Expression expected. (34:46)', '[error]   32 |   firstName: z.string().min(2, \"First name is required\"),', '[error]   33 |   lastName: z.string().min(2, \"Last name is required\"),', '[error] > 34 |   dateOfBirth: z.string().transform((str) => ,', '[error]      |                                              ^', '[error]   35 |   gender: z.nativeEnum(Gender),', '[error]   36 |   phone: z.string().optional(),', '[error]   37 |   email: z.string().email().optional(),', \"[error] src/middleware.ts: SyntaxError: ';' expected. (2:28)\", '[error]   1 |', '[error] > 2 | import crypto from \"crypto\",', '[error]     |                            ^', '[error]   3 | import { type NextRequest, NextResponse } from \"next/server\",', '[error]   4 | }', '[error]   5 |', '[error] src/middleware/rbac.ts: SyntaxError: Declaration or statement expected. (8:1)', '[error]    6 | import { logger } from \"@/lib/logger\";', '[error]    7 | // src/middleware/rbac.ts', '[error] >  8 | }', '[error]      | ^', '[error]    9 | }', '[error]   10 |', '[error]   11 | export function createRBACMiddleware(routePermission: RoutePermission): unknown {', '[error] src/modules/emergency-department/services/emergency-service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import { prisma } from \"@/lib/prisma\";', '[error]   4 | // src/modules/emergency-department/services/emergency-service.ts', '[error] > 5 | }', '[error]     | ^', '[error]   6 |   };', '[error]   7 | }', '[error]   8 |', '[error] src/modules/opd-management/services/opd-service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import { prisma } from \"@/lib/prisma\";', '[error]   4 | // src/modules/opd-management/services/opd-service.ts', '[error] > 5 | }', '[error]     | ^', '[error]   6 | }', '[error]   7 |', '[error]   8 | }', '[error] src/modules/patient-registration/services/patient-service.ts: SyntaxError: Declaration or statement expected. (7:1)', '[error]    5 | import { prisma } from \"@/lib/prisma\";', '[error]    6 | // src/modules/patient-registration/services/patient-service.ts', '[error] >  7 | }', '[error]      | ^', '[error]    8 | }', '[error]    9 |', '[error]   10 | }', '[error] src/repositories/patient_repository.test.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import type { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\";', '[error]   5 | import { type IPatientRepository, type Patient, type PatientInputData, PatientRepository } from \"./patient_repository.ts\";', '[error] > 6 | }', '[error]     | ^', '[error]   7 |', '[error]   8 | // ARCH-3: Unit Tests for PatientRepository', '[error]   9 |', '[error] src/repositories/patient_repository.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 |', '[error]   4 | import type { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\"', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | // ARCH-3: Create Data Access Layer (DAL) with Repository Pattern (Initial Repositories)', '[error]   8 | // Research notes: (General TypeScript/Node.js data access patterns)', '[error] src/services/ambulance.service.ts: SyntaxError: Invalid character. (9:1)', '[error]    7 |   OUT_OF_SERVICE = \"OUT_OF_SERVICE\",', '[error]    8 |   MAINTENANCE = \"MAINTENANCE\",', '[error] >  9 | \\\\n\\\\nexport AmbulanceType {', '[error]      | ^', '[error]   10 |   BASIC = \"BASIC\",', '[error]   11 |   ADVANCED = \"ADVANCED\",', '[error]   12 |   CRITICAL_CARE = \"CRITICAL_CARE\",', '[error] src/services/audit_log_service.test.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { AuditLogService, type IAuditLogService } from \"./audit_log_service.ts\"', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // SEC-3: Unit Tests for AuditLogService (Placeholder)', '[error]   6 |', '[error] src/services/audit_log_service.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\"; // Or a dedicated logging sink', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // SEC-3: Implement Comprehensive Audit Logging (Initial Service & Integration)', '[error]   6 | // Research notes: research_notes_audit_logging.md', '[error] src/services/auth_service.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // ARCH-2: Implement Service Layer Abstraction (Initial Services)', '[error]   4 | // SEC-2: Complete Authentication Framework Implementation (Strengthen Password Hashing)', '[error] src/services/bloodbank.service.ts: SyntaxError: Invalid character. (13:1)', '[error]   11 |   O_POSITIVE = \"O_POSITIVE\",', '[error]   12 |   O_NEGATIVE = \"O_NEGATIVE\",', '[error] > 13 | \\\\n\\\\nexport BloodDonationStatus {', '[error]      | ^', '[error]   14 |   PENDING = \"PENDING\",', '[error]   15 |   COMPLETED = \"COMPLETED\",', '[error]   16 |   REJECTED = \"REJECTED\",', '[error] src/services/clinical-documentation.service.ts: SyntaxError: Declaration or statement expected. (12:1)', '[error]   10 |  * Service for managing clinical documentation;', '[error]   11 |  */', '[error] > 12 | }', '[error]      | ^', '[error]   13 |       where: { id: data.patientId }', '[error]   14 |     });', '[error]   15 |', '[error] src/services/dietary.service.ts: SyntaxError: Invalid character. (15:1)', '[error]   13 |   NPO = \"NPO\",', '[error]   14 |   CUSTOM = \"CUSTOM\",', '[error] > 15 | \\\\n\\\\nexport DietOrderStatus {', '[error]      | ^', '[error]   16 |   ACTIVE = \"ACTIVE\",', '[error]   17 |   COMPLETED = \"COMPLETED\",', '[error]   18 |   CANCELLED = \"CANCELLED\",', \"[error] src/services/encryption_service_secure.test.ts: SyntaxError: ',' expected. (8:13)\", '[error]    6 |   let encryptionService: SecureEncryptionService;', '[error]    7 |   const testMasterKey = crypto.randomBytes(32).toString(\"base64\"),', '[error] >  8 |   beforeEach(() => {', '[error]      |             ^', '[error]    9 |     encryptionService = new SecureEncryptionService(testMasterKey);', '[error]   10 |   });', '[error]   11 |', '[error] src/services/encryption_service_secure.ts: SyntaxError: Declaration or statement expected. (9:1)', '[error]    7 |  */', '[error]    8 |', '[error] >  9 | }', '[error]      | ^', '[error]   10 | }', '[error]   11 |', '[error]   12 | interface EncryptedData {', '[error] src/services/encryption_service.test.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import { EncryptionService, type IEncryptionService } from \"./encryption_service.ts\"', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // SEC-1: Unit Tests for EncryptionService (Placeholder)', '[error]   6 |', '[error] src/services/encryption_service.ts: SyntaxError: Declaration or statement expected. (18:1)', '[error]   16 |  * Legacy synchronous wrapper for backward compatibility', '[error]   17 |  */', '[error] > 18 | }', '[error]      | ^', '[error]   19 |     }', '[error]   20 |', '[error]   21 |     // For immediate backward compatibility, handle as placeholder', '[error] src/services/housekeeping.service.ts: SyntaxError: Invalid character. (9:1)', '[error]    7 |   COMPLETED = \"COMPLETED\",', '[error]    8 |   CANCELLED = \"CANCELLED\",', '[error] >  9 | \\\\n\\\\nexport HousekeepingTaskPriority {', '[error]      | ^', '[error]   10 |   LOW = \"LOW\",', '[error]   11 |   MEDIUM = \"MEDIUM\",', '[error]   12 |   HIGH = \"HIGH\",', \"[error] src/services/integration/LaboratoryService.ts: SyntaxError: ',' expected. (13:4)\", '[error]   11 | export const LabOrderSchema = z.object({', '[error]   12 |   encounterId: z.string().uuid(),', '[error] > 13 |   z.string().uuid(),', '[error]      |    ^', '[error]   14 |     testName: z.string().min(1),', '[error]   15 |     testCode: z.string().min(1),', '[error]   16 |     specimenType: z.string().min(1),', \"[error] src/services/integration/PharmacyService.ts: SyntaxError: ',' expected. (13:4)\", '[error]   11 | export const MedicationOrderSchema = z.object({', '[error]   12 |   encounterId: z.string().uuid(),', '[error] > 13 |   z.string().uuid(),', '[error]      |    ^', '[error]   14 |     name: z.string().min(1),', '[error]   15 |     dosage: z.string().min(1),', '[error]   16 |     route: z.string().min(1),', \"[error] src/services/laboratory.service.ts: SyntaxError: ',' expected. (35:39)\", '[error]   33 |   isVisible: z.boolean().default(true),', '[error]   34 |   referralTest: z.boolean().default(false),', '[error] > 35 |   referralLabId: z.string().optional();', '[error]      |                                       ^', '[error]   36 | });', '[error]   37 |', '[error]   38 | // Define schema for lab order', '[error] src/services/maintenance.service.ts: SyntaxError: Invalid character. (9:1)', '[error]    7 |   COMPLETED = \"COMPLETED\",', '[error]    8 |   CANCELLED = \"CANCELLED\",', '[error] >  9 | \\\\n\\\\nexport MaintenanceRequestPriority {', '[error]      | ^', '[error]   10 |   LOW = \"LOW\",', '[error]   11 |   MEDIUM = \"MEDIUM\",', '[error]   12 |   HIGH = \"HIGH\",', '[error] src/services/patient_service.ts: SyntaxError: Declaration or statement expected. (5:1)', '[error]   3 | import type { IAuditLogService } from \"./audit_log_service.ts\"; // Import AuditLogService interface', '[error]   4 | import type { IEncryptionService } from \"./encryption_service.ts\";', '[error] > 5 | }', '[error]     | ^', '[error]   6 |', '[error]   7 | // ARCH-2: Implement Service Layer Abstraction (Initial Services)', '[error]   8 | // SEC-1: Implement Field-Level Encryption for PHI (Placeholder Service)', \"[error] src/services/patient-management.service.ts: SyntaxError: ',' expected. (44:31)\", '[error]   42 |   vip: z.boolean().default(false),', '[error]   43 |   confidential: z.boolean().default(false),', '[error] > 44 |   notes: z.string().optional();', '[error]      |                               ^', '[error]   45 | });', '[error]   46 |', '[error]   47 | // Define schema for contact information', '[error] src/types/api.ts: SyntaxError: Declaration or statement expected. (2:1)', '[error]   1 | import type { MedicationAdministrationRecord } from \"./pharmacy.ts\";', '[error] > 2 | }', '[error]     | ^', '[error]   3 |', '[error]   4 | // src/types/api.ts', '[error]   5 |', '[error] src/types/appointment.ts: SyntaxError: Declaration or statement expected. (4:1)', '[error]   2 | import type { Doctor } from \"./doctor.ts\";', '[error]   3 | import type { Patient } from \"./patient.ts\";', '[error] > 4 | }', '[error]     | ^', '[error]   5 |', '[error]   6 | // types/appointment.ts', '[error]   7 | export enum AppointmentStatus {', '[error] src/types/billing.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // types/billing.ts', '[error]   4 |', '[error] src/types/doctor.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import type { User } from \"./user.ts\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // types/doctor.ts', '[error]   6 | }', '[error] src/types/inventory.ts: SyntaxError: Declaration or statement expected. (3:1)', '[error]   1 |', '[error]   2 | import type { BillableItem } from \"./billing.ts\";', '[error] > 3 | }', '[error]     | ^', '[error]   4 |', '[error]   5 | // types/inventory.ts', '[error]   6 | }', '[error] src/types/ipd.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // src/types/ipd.ts', '[error]   4 |', '[error] src/types/opd.ts: SyntaxError: Declaration or statement expected. (2:1)', '[error]   1 | import type { Patient } from \"./patient.ts\";', '[error] > 2 | }', '[error]     | ^', '[error]   3 |', '[error]   4 | // types/opd.ts', '[error]   5 | // import { Doctor } from \"./doctor.ts\"; // FIX: Removed unused import', '[error] src/types/patient.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // types/patient.ts', '[error]   4 |', '[error] src/types/pharmacy.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // src/types/pharmacy.ts', '[error]   4 |', '[error] src/types/schedule.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // types/schedule.ts', '[error]   4 |', '[error] src/types/user.ts: SyntaxError: Declaration or statement expected. (1:1)', '[error] > 1 | }', '[error]     | ^', '[error]   2 |', '[error]   3 | // types/user.ts', '[error]   4 |', '[error] src/utils/api-response.ts: SyntaxError: Declaration or statement expected. (6:1)', '[error]   4 | import { logger } from \"@/lib/logger\";', '[error]   5 | // src/utils/api-response.ts', '[error] > 6 | }', '[error]     | ^', '[error]   7 |   };', '[error]   8 | }', '[error]   9 |', '[warn] Code style issues found in the above file. Run Prettier with --write to fix.'], warnings=[])",
    "ValidationResult(category='Build', test_name='Production Build', status='FAIL', score=0.0, details='Build process: Failed, Artifacts: Present', errors=['Failed to compile.', 'Error:   \\x1b[31mx\\x1b[0m Unexpected token `,`. Expected identifier, string literal, numeric literal or [ for the computed key', 'Syntax Error', \"Error:   \\x1b[31mx\\x1b[0m Expected ',', got ';'\", 'Syntax Error', \"Error:   \\x1b[31mx\\x1b[0m Expected ',', got ';'\", '\\x1b[2m 9\\x1b[0m |     const cookieStore = await cookies(); // REVERT FIX: Add await back based on TS error', 'Syntax Error', 'Error:   \\x1b[31mx\\x1b[0m Expression expected', 'Syntax Error', 'Error:   \\x1b[31mx\\x1b[0m Expression expected', '\\x1b[2m107\\x1b[0m |             throw new Error(`Failed to register user: ${}`;', 'Syntax Error', '> Build failed because of webpack errors'], warnings=[])",
    "ValidationResult(category='Security', test_name='Security Compliance', status='PASS', score=100.0, details='Security validation: 0 critical issues, 1 warnings', errors=[], warnings=['Potential hardcoded secret in authUtils.test.ts'])",
    "ValidationResult(category='Dependencies', test_name='Package Health', status='PASS', score=100.0, details='Dependencies: 0 critical issues, 35 outdated packages', errors=[], warnings=['Outdated package: @jest/globals (current: 29.7.0, latest: 30.0.0)', 'Outdated package: @nx/devkit (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/eslint (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/jest (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/js (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/next (current: 20.8.2, latest: 21.2.0)', 'Outdated package: @nx/node (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/react (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @nx/workspace (current: 20.2.2, latest: 21.2.0)', 'Outdated package: @opentelemetry/auto-instrumentations-node (current: 0.50.2, latest: 0.60.1)', 'Outdated package: @opentelemetry/sdk-node (current: 0.54.2, latest: 0.202.0)', 'Outdated package: @prisma/extension-accelerate (current: 1.3.0, latest: 2.0.1)', 'Outdated package: @storybook/react (current: 8.6.14, latest: 9.0.11)', 'Outdated package: @storybook/react-vite (current: 8.6.14, latest: 9.0.11)', 'Outdated package: @types/jest (current: 29.5.14, latest: 30.0.0)', 'Outdated package: @types/node (current: 22.15.32, latest: 24.0.3)', 'Outdated package: bcryptjs (current: 2.4.3, latest: 3.0.2)', 'Outdated package: caniuse-lite (current: 1.0.30001281, latest: 1.0.30001723)', 'Outdated package: chromatic (current: 11.29.0, latest: 13.0.0)', 'Outdated package: eslint-config-next (current: 15.3.1, latest: 15.3.3)', 'Outdated package: eslint-plugin-sonarjs (current: 2.0.4, latest: 3.0.3)', 'Outdated package: eslint-plugin-unicorn (current: 56.0.1, latest: 59.0.1)', 'Outdated package: express-prom-bundle (current: 7.0.2, latest: 8.0.0)', 'Outdated package: jest (current: 29.7.0, latest: 30.0.0)', 'Outdated package: jest-environment-jsdom (current: 29.7.0, latest: 30.0.0)', 'Outdated package: jose (current: 5.10.0, latest: 6.0.11)', 'Outdated package: lint-staged (current: 15.5.2, latest: 16.1.2)', 'Outdated package: lucide-react (current: 0.503.0, latest: 0.516.0)', 'Outdated package: node-cron (current: 3.0.3, latest: 4.1.0)', 'Outdated package: nx (current: 20.2.2, latest: 21.2.0)', 'Outdated package: react-resizable-panels (current: 2.1.9, latest: 3.0.3)', 'Outdated package: redis (current: 4.7.1, latest: 5.5.6)', 'Outdated package: storybook (current: 8.6.14, latest: 9.0.11)', 'Outdated package: tailwind-merge (current: 2.6.0, latest: 3.3.1)', 'Outdated package: tailwindcss (current: 3.4.17, latest: 4.1.10)'])",
    "ValidationResult(category='Structure', test_name='Code Architecture', status='PASS', score=100.0, details='Code structure: 379 TS files, 192 TSX files, 181 API routes', errors=[], warnings=['API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts', 'API route may be missing proper exports: route.ts'])",
    "ValidationResult(category='Logic', test_name='Business Logic Integrity', status='PASS', score=100.0, details='Logic integrity: 0 critical issues, 10 potential concerns', errors=[], warnings=['Large deletion detected: 38078 lines', 'Large deletion detected: 74855 lines', 'No exports/classes found in src/services/patient_service.ts', 'No exports/classes found in src/services/patient_service.ts', 'No exports/classes found in src/services/auth_service.ts', 'No exports/classes found in src/services/auth_service.ts', 'No exports/classes found in src/lib/auth.ts', 'No exports/classes found in src/lib/auth.ts', 'No exports/classes found in src/lib/database.ts', 'No exports/classes found in src/lib/database.ts'])",
    "ValidationResult(category='Performance', test_name='Performance Metrics', status='PASS', score=100.0, details='Performance: 0 issues, 0 optimizations suggested', errors=[], warnings=[])"
  ],
  "summary": {
    "total_tests": 9,
    "passed": 6,
    "failed": 3,
    "warnings": 0,
    "average_score": 77.55555555555556,
    "grade": "C",
    "enterprise_ready": false,
    "status": "NEEDS IMPROVEMENT",
    "duration": 33.91386890411377
  },
  "detailed_scores": {
    "TypeScript": 100.0,
    "ESLint": 98,
    "Prettier": 0.0,
    "Build": 0.0,
    "Security": 100.0,
    "Dependencies": 100.0,
    "Structure": 100.0,
    "Logic": 100.0,
    "Performance": 100.0
  },
  "all_errors": [
    "[error] src/app/api/appointments/route.ts: SyntaxError: Property assignment expected. (134:23)",
    "[error]   132 |             notes: appt.notes,",
    "[error]   133 |             createdAt: appt.created_at,",
    "[error] > 134 |             patient: {,",
    "[error]       |                       ^",
    "[error]   135 |                 id: appt.patient_id,",
    "[error]   136 |                 firstName: appt.patient_first_name,",
    "[error]   137 |                 lastName: appt.patient_last_name,",
    "[error] src/app/api/auth/login/route.ts: SyntaxError: ')' expected. (42:71)",
    "[error]   40 |         \"SELECT u.user_id, u.username, u.email, u.password_hash, u.full_name, u.role_id, u.is_active, r.role_name \" +",
    "[error]   41 |         \"FROM Users u JOIN Roles r ON u.role_id = r.role_id \" +",
    "[error] > 42 |         \"WHERE (u.username = ? OR u.email = ?) AND u.is_active = TRUE\";",
    "[error]      |                                                                       ^",
    "[error]   43 |     );",
    "[error]   44 |       .bind(identifier, identifier);",
    "[error]   45 |       // Define the expected result type more accurately",
    "[error] src/app/api/auth/logout/route.ts: SyntaxError: ')' expected. (12:21)",
    "[error]   10 |     const session = await getIronSession<IronSessionData>(",
    "[error]   11 |       cookieStore, // FIX: Pass the store",
    "[error] > 12 |       sessionOptions;",
    "[error]      |                     ^",
    "[error]   13 |     ),",
    "[error]   14 |     session.destroy(); // Clear the session data",
    "[error]   15 |",
    "[error] src/app/api/auth/me/route.ts: SyntaxError: Expression expected. (23:21)",
    "[error]   21 |     // Mock user details for development",
    "[error]   22 |     // Assuming user.roles is an array and we take the first role",
    "[error] > 23 |     const userRole =;",
    "[error]      |                     ^",
    "[error]   24 |       user?.roles && user.roles.length > 0 ? user.roles[0] : \"User\"; // Adjusted to use user.roles",
    "[error]   25 |",
    "[error]   26 |     const userDetails = {",
    "[error] src/app/api/auth/register/route.ts: SyntaxError: Expression expected. (107:48)",
    "[error]   105 |",
    "[error]   106 | \t\tif (!session.user) {",
    "[error] > 107 | \t\t\tthrow new Error(`Failed to register user: ${}`;",
    "[error]       | \t\t\t                                            ^",
    "[error]   108 | \t\t}",
    "[error]   109 |",
    "[error]   110 | \t\t// Optionally: Return the newly created user ID or a success message",
    "[error] src/app/api/billable-items/route.ts: SyntaxError: Declaration or statement expected. (121:9)",
    "[error]   119 |             \"INSERT INTO BillableItems (item_code, item_name, description, item_type, unit_price, department, is_taxable, is_active) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\"",
    "[error]   120 |         );",
    "[error] > 121 |         .bind(",
    "[error]       |         ^",
    "[error]   122 |             itemData.item_code || null,",
    "[error]   123 |             itemData.item_name,",
    "[error]   124 |             itemData.description || null,",
    "[error] src/app/api/billing/invoices/[id]/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/billing/invoices/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/billing/payments/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/billing/service-items/route.ts: SyntaxError: ':' expected. (10:26)",
    "[error]    8 |   {",
    "[error]    9 |     id: \"si_001\",",
    "[error] > 10 |     \"Doctor Consultation\",",
    "[error]      |                          ^",
    "[error]   11 |     \"Consultation\",",
    "[error]   12 |     0,",
    "[error]   13 |     1",
    "[error] src/app/api/clinical-documentation/[id]/amend/route.ts: SyntaxError: ',' expected. (14:23)",
    "[error]   12 |  */",
    "[error]   13 | export const POST = async (",
    "[error] > 14 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   15 |   { params }: { id: string }",
    "[error]   16 | ) => {",
    "[error]   17 |   try {",
    "[error] src/app/api/clinical-documentation/[id]/route.ts: SyntaxError: ',' expected. (14:23)",
    "[error]   12 |  */",
    "[error]   13 | export const GET = async (",
    "[error] > 14 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   15 |   { params }: { id: string }",
    "[error]   16 | ) => {",
    "[error]   17 |   try {",
    "[error] src/app/api/clinical-documentation/[id]/sign/route.ts: SyntaxError: ',' expected. (14:23)",
    "[error]   12 |  */",
    "[error]   13 | export const POST = async (",
    "[error] > 14 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   15 |   { params }: { id: string }",
    "[error]   16 | ) => {",
    "[error]   17 |   try {",
    "[error] src/app/api/clinical-documentation/route.ts: SyntaxError: ',' expected. (32:19)",
    "[error]   30 |     const filters = {",
    "[error]   31 |       documentType: searchParams.get(\"documentType\") || undefined,",
    "[error] > 32 |       searchParams.get(\"authorId\") || undefined,",
    "[error]      |                   ^",
    "[error]   33 |       searchParams.get(\"dateTo\") || undefined,",
    "[error]   34 |       page: searchParams.has(\"page\") ? parseInt(searchParams.get(\"page\") as string, 10) : 1,",
    "[error]   35 |       pageSize: searchParams.has(\"pageSize\") ? parseInt(searchParams.get(\"pageSize\") as string, 10) : 20,",
    "[error] src/app/api/clinical-documentation/templates/route.ts: SyntaxError: ',' expected. (27:19)",
    "[error]   25 |     const filters = {",
    "[error]   26 |       templateType: searchParams.get(\"templateType\") || undefined,",
    "[error] > 27 |       searchParams.has(\"page\") ? Number.parseInt(searchParams.get(\"page\") as string, 10) : 1,",
    "[error]      |                   ^",
    "[error]   28 |       pageSize: searchParams.has(\"pageSize\") ? parseInt(searchParams.get(\"pageSize\") as string, 10) : 20,",
    "[error]   29 |     };",
    "[error]   30 |",
    "[error] src/app/api/cloudflare-fix/route.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import type { D1Database } from \"@cloudflare/workers-types\"; // FIX: Import D1Database type",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // import { NextRequest } from \"next/server\"",
    "[error]   6 | // Define the expected structure of the Cloudflare environment bindings",
    "[error] src/app/api/consultations/[consultationId]/route.ts: SyntaxError: '=>' expected. (15:61)",
    "[error]   13 |",
    "[error]   14 | // Helper function to get consultation ID from URL",
    "[error] > 15 | const getConsultationId = (pathname: string): number | null {",
    "[error]      |                                                             ^",
    "[error]   16 |     const parts = pathname.split(\"/\");",
    "[error]   17 |     const idStr = parts[parts.length - 1];",
    "[error]   18 |     const id = Number.parseInt(idStr, 10);",
    "[error] src/app/api/consultations/route.ts: SyntaxError: ',' expected. (23:72)",
    "[error]   21 |     dateTo: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),",
    "[error]   22 |     limit: z.coerce.number().int().positive().optional().default(50),",
    "[error] > 23 |     offset: z.coerce.number().int().nonnegative().optional().default(0);",
    "[error]      |                                                                        ^",
    "[error]   24 | });",
    "[error]   25 |",
    "[error]   26 | // Define type for the query result row",
    "[error] src/app/api/dashboard/ipd-stats/route.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { getDB } from \"@/lib/database\";",
    "[error]   3 | import { getSession } from \"@/lib/session\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | // API route for IPD statistics",
    "[error]   7 | // Define expected structure for query results where needed",
    "[error] src/app/api/diagnostics/lab/critical-values/route.ts: SyntaxError: ':' expected. (73:39)",
    "[error]   71 |         await auditLog({",
    "[error]   72 |           userId: session.user.id,",
    "[error] > 73 |           \"laboratory_critical_values\",",
    "[error]      |                                       ^",
    "[error]   74 |           details: testId, page, pageSize",
    "[error]   75 |         });",
    "[error]   76 |",
    "[error] src/app/api/diagnostics/lab/reference-ranges/route.ts: SyntaxError: Expression expected. (108:23)",
    "[error]   106 |",
    "[error]   107 |     // Validate that either numeric values or text value is provided",
    "[error] > 108 |     if (!session.user)|;",
    "[error]       |                       ^",
    "[error]   109 |       (body?.text_value && (body.value_low !== undefined || body.value_high !== undefined));",
    "[error]   110 |     ) ;",
    "[error]   111 |       return NextResponse.json(",
    "[error] src/app/api/diagnostics/lab/reflex-rules/route.ts: SyntaxError: ',' expected. (97:53)",
    "[error]    95 |         pageSize,",
    "[error]    96 |         totalCount,",
    "[error] >  97 |         totalPages: Math.ceil(totalCount / pageSize);",
    "[error]       |                                                     ^",
    "[error]    98 |       }",
    "[error]    99 |     });",
    "[error]   100 |   } catch (error: unknown) {",
    "[error] src/app/api/diagnostics/lab/results/critical-alerts/route.ts: SyntaxError: Expression expected. (30:65)",
    "[error]   28 |",
    "[error]   29 |     // Cache key",
    "[error] > 30 |     const cacheKey = `diagnostic:lab:critical-alerts:${status ||;",
    "[error]      |                                                                 ^",
    "[error]   31 |       \"all\"}:${assignedTo ||",
    "[error]   32 |       \"all\"}:${page}:${pageSize}:${session.user.id}`;",
    "[error]   33 |",
    "[error] src/app/api/diagnostics/lab/results/delta-checks/route.ts: SyntaxError: ':' expected. (73:36)",
    "[error]   71 |         await auditLog({",
    "[error]   72 |           userId: session.user.id,",
    "[error] > 73 |           \"laboratory_delta_checks\",",
    "[error]      |                                    ^",
    "[error]   74 |           details: testId, page, pageSize",
    "[error]   75 |         });",
    "[error]   76 |",
    "[error] src/app/api/diagnostics/lab/results/route.ts: SyntaxError: Property or signature expected. (10:3)",
    "[error]    8 | interface FHIRObservation {",
    "[error]    9 |   resourceType: \"Observation\",",
    "[error] > 10 |   {",
    "[error]      |   ^",
    "[error]   11 |     versionId: string,",
    "[error]   12 |     lastUpdated: string;",
    "[error]   13 |     security?: Array<{",
    "[error] src/app/api/diagnostics/lab/specimen-tracking/route.ts: SyntaxError: ',' expected. (129:53)",
    "[error]   127 |         pageSize,",
    "[error]   128 |         totalCount,",
    "[error] > 129 |         totalPages: Math.ceil(totalCount / pageSize);",
    "[error]       |                                                     ^",
    "[error]   130 |       }",
    "[error]   131 |     });",
    "[error]   132 |   } catch (error: unknown) {",
    "[error] src/app/api/diagnostics/lab/specimens/route.ts: SyntaxError: Expression expected. (35:62)",
    "[error]   33 |",
    "[error]   34 |     // Cache key",
    "[error] > 35 |     const cacheKey = `diagnostic:lab:specimens:${patientId ||;",
    "[error]      |                                                              ^",
    "[error]   36 |       \"\"}:${orderId ||",
    "[error]   37 |       \"\"}:${status ||",
    "[error]   38 |       \"\"}:${specimenType ||",
    "[error] src/app/api/diagnostics/lab/test-panels/route.ts: SyntaxError: ';' expected. (21:31)",
    "[error]   19 |   is_active?: boolean;",
    "[error]   20 |   patient_preparation?: string;",
    "[error] > 21 |   available_priorities?: Array>",
    "[error]      |                               ^",
    "[error]   22 | }",
    "[error]   23 |",
    "[error]   24 | // GET /api/diagnostics/lab/test-panels - Get all test panels",
    "[error] src/app/api/diagnostics/lab/tests/route.ts: SyntaxError: Property or signature expected. (10:3)",
    "[error]    8 | interface FHIRDiagnosticReport {",
    "[error]    9 |   resourceType: \"DiagnosticReport\",",
    "[error] > 10 |   {",
    "[error]      |   ^",
    "[error]   11 |     versionId: string,",
    "[error]   12 |     lastUpdated: string;",
    "[error]   13 |     security?: Array<{",
    "[error] src/app/api/diagnostics/lab/workflows/route.ts: SyntaxError: ';' expected. (10:15)",
    "[error]    8 |   name: string;",
    "[error]    9 |   description?: string;",
    "[error] > 10 |   steps: Array>",
    "[error]      |               ^",
    "[error]   11 |   is_active?: boolean;",
    "[error]   12 |   applicable_test_ids?: number[];",
    "[error]   13 | }",
    "[error] src/app/api/diagnostics/pacs/config/route.ts: SyntaxError: ',' expected. (56:105)",
    "[error]   54 |           aetitle: decryptSensitiveData(result.results[0].aetitle),",
    "[error]   55 |           hostname: decryptSensitiveData(result.results[0].hostname),",
    "[error] > 56 |           username: result.results[0].username ? decryptSensitiveData(result.results[0].username) : null;",
    "[error]      |                                                                                                         ^",
    "[error]   57 |           // Don\"t include password in response",
    "[error]   58 |           password: null",
    "[error]   59 |         };",
    "[error] src/app/api/diagnostics/pacs/images/route.ts: SyntaxError: Expression expected. (34:60)",
    "[error]   32 |",
    "[error]   33 |     // Cache key",
    "[error] > 34 |     const cacheKey = `diagnostic:pacs:images:${patientId ||;",
    "[error]      |                                                            ^",
    "[error]   35 |       \"\"}:${studyInstanceUid ||",
    "[error]   36 |       \"\"}:${seriesInstanceUid ||",
    "[error]   37 |       \"\"}:${modality ||",
    "[error] src/app/api/diagnostics/pacs/worklist/route.ts: SyntaxError: Expression expected. (38:62)",
    "[error]   36 |",
    "[error]   37 |     // Cache key",
    "[error] > 38 |     const cacheKey = `diagnostic:pacs:worklist:${patientId ||;",
    "[error]      |                                                              ^",
    "[error]   39 |       \"\"}:${modality ||",
    "[error]   40 |       \"\"}:${status ||",
    "[error]   41 |       \"\"}:${scheduledDate ||",
    "[error] src/app/api/diagnostics/radiology/orders/route.ts: SyntaxError: Expression expected. (36:65)",
    "[error]   34 |",
    "[error]   35 |     // Cache key",
    "[error] > 36 |     const cacheKey = `diagnostic:radiology:orders:${patientId ||;",
    "[error]      |                                                                 ^",
    "[error]   37 |       \"\"}:${status ||",
    "[error]   38 |       \"\"}:${priority ||",
    "[error]   39 |       \"\"}:${modality ||",
    "[error] src/app/api/diagnostics/reports/route.ts: SyntaxError: Expression expected. (38:56)",
    "[error]   36 |",
    "[error]   37 |     // Cache key",
    "[error] > 38 |     const cacheKey = `diagnostic:reports:${patientId ||;",
    "[error]      |                                                        ^",
    "[error]   39 |       \"\"}:${reportType ||",
    "[error]   40 |       \"\"}:${status ||",
    "[error]   41 |       \"\"}:${fromDate ||",
    "[error] src/app/api/doctors/[id]/schedules/route.ts: SyntaxError: '=>' expected. (15:55)",
    "[error]   13 |",
    "[error]   14 | // Helper function to get doctor ID from URL",
    "[error] > 15 | const getDoctorId = (pathname: string): number | null {",
    "[error]      |                                                       ^",
    "[error]   16 |     const parts = pathname.split(\"/\");",
    "[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error]   18 |     const id = Number.parseInt(idStr, 10);",
    "[error] src/app/api/doctors/route.ts: SyntaxError: Expression expected. (37:104)",
    "[error]   35 |",
    "[error]   36 |     // 2. Build query based on filters",
    "[error] > 37 |     let query = \"SELECT d.doctor_id, d.user_id, d.specialty, d.qualifications, u.full_name, u.email \" +;",
    "[error]      |                                                                                                        ^",
    "[error]   38 |                 \"FROM Doctors d JOIN Users u ON d.user_id = u.user_id WHERE u.is_active = TRUE\";",
    "[error]   39 |     const queryParams: string[] = [];",
    "[error]   40 |",
    "[error] src/app/api/er/visits/[id]/alerts/route.ts: SyntaxError: '=>' expected. (30:3)",
    "[error]   28 |   _request: NextRequest, // Prefixed as unused",
    "[error]   29 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error] > 30 | ) {",
    "[error]      |   ^",
    "[error]   31 |   try {",
    "[error]   32 |     // const { env } = getRequestContext(); // Cloudflare specific",
    "[error]   33 |     // const db = env.DB; // Cloudflare specific",
    "[error] src/app/api/er/visits/[id]/route.ts: SyntaxError: '=>' expected. (44:3)",
    "[error]   42 |   _request: NextRequest, // FIX: Prefixed as unused, changed Request to NextRequest",
    "[error]   43 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);",
    "[error] > 44 | ) {",
    "[error]      |   ^",
    "[error]   45 |   try {",
    "[error]   46 |     // const { env } = getRequestContext(); // Cloudflare specific",
    "[error]   47 |     // const db = env.DB; // Cloudflare specific",
    "[error] src/app/api/er/visits/[id]/statuses/route.ts: SyntaxError: '=>' expected. (11:3)",
    "[error]    9 |   _request: NextRequest, // Fixed: Use NextRequest",
    "[error]   10 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error] > 11 | ) {",
    "[error]      |   ^",
    "[error]   12 |   try {",
    "[error]   13 |     // const { env } = getRequestContext(); // Cloudflare specific",
    "[error]   14 |     // const db = env.DB; // Cloudflare specific",
    "[error] src/app/api/er/visits/[id]/triage/route.ts: SyntaxError: ';' expected. (8:22)",
    "[error]    6 |   triage_nurse_id: string | number,",
    "[error]    7 |   esi_level: number; // Emergency Severity Index (1-5)",
    "[error] >  8 |   vital_signs: Record> // e.g., { temp: 37.0, hr: 80, rr: 16, bp: \"120/80\", spo2: 98 }",
    "[error]      |                      ^",
    "[error]    9 |   assessment_notes?: string | null; // FIX: Allow null",
    "[error]   10 |   triage_timestamp?: string; // Optional, defaults to now",
    "[error]   11 | }",
    "[error] src/app/api/er/visits/route.ts: SyntaxError: ':' expected. (29:15)",
    "[error]   27 |   {",
    "[error]   28 |     id: 1,",
    "[error] > 29 |     \"John Doe\", // Denormalized for easier display",
    "[error]      |               ^",
    "[error]   30 |     mrn: \"MRN001\", // Denormalized",
    "[error]   31 |     arrival_timestamp: [0] - 3 * 60 * 60 * 1000).toISOString(), // 3 hours ago",
    "[error]   32 |     chief_complaint: \"Chest pain\",",
    "[error] src/app/api/fhir/r4/[...resource]/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { FHIRMedicationRequest } from \"@/lib/fhir/medication\";",
    "[error]    8 | import { FHIRPatient } from \"@/lib/fhir/patient\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * FHIR R4 API Routes Implementation;",
    "[error] src/app/api/fhir/r4/route.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { fhirService } from \"@/lib/fhir/fhir.service\";",
    "[error]   5 | import type { FHIRBundle } from \"@/lib/fhir/types\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * FHIR R4 Batch/Transaction Processing Endpoint;",
    "[error] src/app/api/financial-reporting/reports/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/health/cache/route.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cache } from \"@/lib/cache\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Cache Health Check Endpoint;",
    "[error] src/app/api/health/db/route.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { PrismaClient } from \"@prisma/client\";",
    "[error]   3 | import { NextRequest, NextResponse } from \"next/server\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Database Health Check Endpoint;",
    "[error] src/app/api/health/route.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | import { cache } from \"@/lib/cache\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Health Check API Endpoints;",
    "[error] src/app/api/hr/assets/[id]/maintenance/route.ts: SyntaxError: ',' expected. (24:23)",
    "[error]   22 | // POST handler for recording maintenance",
    "[error]   23 | export const _POST = async (",
    "[error] > 24 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   25 |   { params }: { id: string }",
    "[error]   26 | ) => {",
    "[error]   27 |   try {",
    "[error] src/app/api/hr/assets/[id]/route.ts: SyntaxError: ',' expected. (8:23)",
    "[error]    6 | // GET handler for retrieving a specific asset",
    "[error]    7 | export const _GET = async (",
    "[error] >  8 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]    9 |   { params }: { id: string }",
    "[error]   10 | ) => {",
    "[error]   11 |   try {",
    "[error] src/app/api/hr/assets/route.ts: SyntaxError: Declaration or statement expected. (86:7)",
    "[error]   84 |     const location = searchParams.get(\"location\") || undefined;",
    "[error]   85 |     const purchaseDateStart = searchParams.get(\"purchaseDateStart\");",
    "[error] > 86 |       ? ;",
    "[error]      |       ^",
    "[error]   87 |       : undefined;",
    "[error]   88 |     const purchaseDateEnd = searchParams.get(\"purchaseDateEnd\");",
    "[error]   89 |       ? ;",
    "[error] src/app/api/hr/attendance/route.ts: SyntaxError: Expression expected. (77:45)",
    "[error]   75 |",
    "[error]   76 |     // Parse filter parameters",
    "[error] > 77 |     const date = searchParams.get(\"date\") ? : undefined;",
    "[error]      |                                             ^",
    "[error]   78 |     const startDate = searchParams.get(\"startDate\") ? : undefined;",
    "[error]   79 |     const endDate = searchParams.get(\"endDate\") ? : undefined;",
    "[error]   80 |     const departmentId = searchParams.get(\"departmentId\") || undefined;",
    "[error] src/app/api/hr/biomedical/[id]/calibration/route.ts: SyntaxError: ',' expected. (24:23)",
    "[error]   22 | // POST handler for recording calibration",
    "[error]   23 | export const _POST = async (",
    "[error] > 24 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   25 |   { params }: { id: string }",
    "[error]   26 | ) => {",
    "[error]   27 |   try {",
    "[error] src/app/api/hr/biomedical/[id]/route.ts: SyntaxError: ',' expected. (8:23)",
    "[error]    6 | // GET handler for retrieving a specific biomedical equipment",
    "[error]    7 | export const _GET = async (",
    "[error] >  8 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]    9 |   { params }: { id: string }",
    "[error]   10 | ) => {",
    "[error]   11 |   try {",
    "[error] src/app/api/hr/biomedical/route.ts: SyntaxError: ',' expected. (29:39)",
    "[error]   27 |   }),",
    "[error]   28 |   notes: z.string().optional(),",
    "[error] > 29 |   tags: z.array(z.string()).optional();",
    "[error]      |                                       ^",
    "[error]   30 |   // Biomedical specific fields",
    "[error]   31 |   deviceIdentifier: z.string().optional(),",
    "[error]   32 |   regulatoryClass: z.enum([\"CLASS_I\", \"CLASS_II\", \"CLASS_III\"], {",
    "[error] src/app/api/hr/payroll/periods/route.ts: SyntaxError: ',' expected. (44:22)",
    "[error]   42 |       endDate: new Date(endDate),",
    "[error]   43 |       paymentDate: new Date(paymentDate),",
    "[error] > 44 |       status: \"DRAFT\";",
    "[error]      |                      ^",
    "[error]   45 |       notes,",
    "[error]   46 |     });",
    "[error]   47 |",
    "[error] src/app/api/hr/payroll/salary-structures/route.ts: SyntaxError: ')' expected. (23:7)",
    "[error]   21 |       taxable: z.boolean(),",
    "[error]   22 |       isBase: z.boolean().optional()",
    "[error] > 23 |     });",
    "[error]      |       ^",
    "[error]   24 |   ).min(1, \"At least one component is required\"),",
    "[error]   25 | });",
    "[error]   26 |",
    "[error] src/app/api/hr/staff/[id]/route.ts: SyntaxError: ',' expected. (25:23)",
    "[error]   23 | // GET /api/hr/staff/[id]",
    "[error]   24 | export const _GET = async (",
    "[error] > 25 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   26 |   { params }: { id: string }",
    "[error]   27 | ) => {",
    "[error]   28 |   try {",
    "[error] src/app/api/hr/staff/route.ts: SyntaxError: Expression expected. (17:44)",
    "[error]   15 |   phone: z.string().optional(),",
    "[error]   16 |   address: z.any().optional(),",
    "[error] > 17 |   joiningDate: z.string().transform(val => ,",
    "[error]      |                                            ^",
    "[error]   18 |   departmentId: z.string().optional(),",
    "[error]   19 |   userId: z.string().optional(),",
    "[error]   20 |   photo: z.string().optional(),",
    "[error] src/app/api/insurance/claims/[id]/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/insurance/claims/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/insurance/policies/[id]/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/insurance/policies/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | import { z } from \"zod\";",
    "[error]   4 |",
    "[error]   5 | import { prisma } from \"@/lib/prisma\";",
    "[error] src/app/api/insurance/pre-authorizations/route.ts: SyntaxError: ':' expected. (27:19)",
    "[error]   25 |   {",
    "[error]   26 |     _id: 1,",
    "[error] > 27 |     \"Appendectomy\",",
    "[error]      |                   ^",
    "[error]   28 |     [0] - 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days ago",
    "[error]   29 |     status: \"Approved\", // e.g., \"Pending\", \"Approved\", \"Rejected\", \"More Info Required\"",
    "[error]   30 |     authorization_number: \"AUTH12345\",",
    "[error] src/app/api/insurance/providers/route.ts: SyntaxError: ':' expected. (20:18)",
    "[error]   18 |   {",
    "[error]   19 |     _id: 1,",
    "[error] > 20 |     \"Alice Brown\",",
    "[error]      |                  ^",
    "[error]   21 |     \"555-1111\",",
    "[error]   22 |     1",
    "[error]   23 |   },",
    "[error] src/app/api/integration/support-services/route.ts: SyntaxError: ',' expected. (17:23)",
    "[error]   15 |  */",
    "[error]   16 | export const GET = async (",
    "[error] > 17 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   18 |   { params }: { patientId: string }",
    "[error]   19 | ) => {",
    "[error]   20 |   return errorHandlingMiddleware(request, async (req) => {",
    "[error] src/app/api/inventory-items/[itemId]/batches/route.ts: SyntaxError: '=>' expected. (15:53)",
    "[error]   13 |",
    "[error]   14 | // Helper function to get item ID from URL",
    "[error] > 15 | const getItemId = (pathname: string): number | null {",
    "[error]      |                                                     ^",
    "[error]   16 |     // Pathname might be /api/inventory-items/123/batches",
    "[error]   17 |     const parts = pathname.split(\"/\");",
    "[error]   18 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error] src/app/api/inventory-items/route.ts: SyntaxError: ',' expected. (89:52)",
    "[error]   87 |     unit_of_measure: z.string().optional(),",
    "[error]   88 |     reorder_level: z.number().int().nonnegative().optional().default(0),",
    "[error] > 89 |     is_active: z.boolean().optional().default(true);",
    "[error]      |                                                    ^",
    "[error]   90 | });",
    "[error]   91 |",
    "[error]   92 | export const _POST = async (request: Request) => {",
    "[error] src/app/api/invoices/[invoiceId]/items/route.ts: SyntaxError: '=>' expected. (14:56)",
    "[error]   12 |",
    "[error]   13 | // Helper function to get invoice ID from URL",
    "[error] > 14 | const getInvoiceId = (pathname: string): number | null {",
    "[error]      |                                                        ^",
    "[error]   15 |     // Pathname might be /api/invoices/123/items",
    "[error]   16 |     const parts = pathname.split(\"/\");",
    "[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error] src/app/api/invoices/[invoiceId]/payments/route.ts: SyntaxError: '=>' expected. (13:56)",
    "[error]   11 |",
    "[error]   12 | // Helper function to get invoice ID from URL",
    "[error] > 13 | const getInvoiceId = (pathname: string): number | null {",
    "[error]      |                                                        ^",
    "[error]   14 |     // Pathname might be /api/invoices/123/payments",
    "[error]   15 |     const parts = pathname.split(\"/\");",
    "[error]   16 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error] src/app/api/invoices/[invoiceId]/route.ts: SyntaxError: '=>' expected. (16:56)",
    "[error]   14 |",
    "[error]   15 | // Helper function to get invoice ID from URL",
    "[error] > 16 | const getInvoiceId = (pathname: string): number | null {",
    "[error]      |                                                        ^",
    "[error]   17 |     // Pathname might be /api/invoices/123",
    "[error]   18 |     const parts = pathname.split(\"/\");",
    "[error]   19 |     const idStr = parts[parts.length - 1]; // Last part",
    "[error] src/app/api/invoices/route.ts: SyntaxError: ',' expected. (26:43)",
    "[error]   24 |       description: z.string(),",
    "[error]   25 |       quantity: z.number().positive(),",
    "[error] > 26 |       unit_price: z.number().nonnegative();",
    "[error]      |                                           ^",
    "[error]   27 |     });",
    "[error]   28 |   ).min(1, \"At least one invoice item is required\"),",
    "[error]   29 | });",
    "[error] src/app/api/ipd/[admissionId]/progress-notes/route.ts: SyntaxError: ',' expected. (19:25)",
    "[error]   17 | // GET /api/ipd/[admissionId]/progress-notes - Fetch progress notes for an admission",
    "[error]   18 | export const _GET = async (",
    "[error] > 19 |     request: NextRequest;",
    "[error]      |                         ^",
    "[error]   20 |     { params }: { params: Promise<{ admissionId: string }> }",
    "[error]   21 | ) => {",
    "[error]   22 |     const session = await getSession();",
    "[error] src/app/api/ipd/admissions/[id]/discharge/route.ts: SyntaxError: ',' expected. (11:24)",
    "[error]    9 | // GET /api/ipd/admissions/[id]/discharge - Get discharge summary for an admission",
    "[error]   10 | export const _GET = async (",
    "[error] > 11 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   12 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   13 | ) {",
    "[error]   14 |   try {",
    "[error] src/app/api/ipd/admissions/[id]/medication-administration/route.ts: SyntaxError: ',' expected. (16:24)",
    "[error]   14 | // GET /api/ipd/admissions/[id]/medication-administration - Get all medication administration records for an admission",
    "[error]   15 | export const _GET = async (",
    "[error] > 16 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   17 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   18 | ) {",
    "[error]   19 |   try {",
    "[error] src/app/api/ipd/admissions/[id]/nursing-notes/route.ts: SyntaxError: ',' expected. (18:24)",
    "[error]   16 | // GET /api/ipd/admissions/[id]/nursing-notes - Get all nursing notes for an admission",
    "[error]   17 | export const _GET = async (",
    "[error] > 18 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   19 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   20 | ) {",
    "[error]   21 |   try {",
    "[error] src/app/api/ipd/admissions/[id]/progress-notes/route.ts: SyntaxError: ',' expected. (16:24)",
    "[error]   14 | // GET /api/ipd/admissions/[id]/progress-notes - Get all progress notes for an admission",
    "[error]   15 | export const _GET = async (",
    "[error] > 16 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   17 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   18 | ) {",
    "[error]   19 |   try {",
    "[error] src/app/api/ipd/admissions/[id]/vital-signs/route.ts: SyntaxError: ',' expected. (20:24)",
    "[error]   18 | // GET /api/ipd/admissions/[id]/vital-signs - Get all vital signs for an admission",
    "[error]   19 | export const _GET = async (",
    "[error] > 20 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   21 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   22 | ) {",
    "[error]   23 |   try {",
    "[error] src/app/api/ipd/admissions/route.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest, NextResponse } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 |   getAdmissionsFromDB,",
    "[error]   4 |   getAdmissionByIdFromDB,",
    "[error]   5 |   createAdmissionInDB,",
    "[error] src/app/api/ipd/beds/route.ts: SyntaxError: Expression expected. (58:25)",
    "[error]   56 |   } catch (error: unknown) {",
    "[error]   57 |",
    "[error] > 58 |     const errorMessage =;",
    "[error]      |                         ^",
    "[error]   59 |       error instanceof Error ? error.message : \"An unknown error occurred\";",
    "[error]   60 |     return NextResponse.json(",
    "[error]   61 |       { error: \"Failed to fetch beds\", details: errorMessage },",
    "[error] src/app/api/ipd/integration/laboratory/route.ts: SyntaxError: Expression expected. (69:5)",
    "[error]   67 |           { status: 400 }",
    "[error]   68 |         ),",
    "[error] > 69 |     }",
    "[error]      |     ^",
    "[error]   70 |   } catch (error) {",
    "[error]   71 |     return handleApiError(error);",
    "[error]   72 |   }",
    "[error] src/app/api/ipd/integration/pharmacy/route.ts: SyntaxError: Expression expected. (84:5)",
    "[error]   82 |           { status: 400 }",
    "[error]   83 |         ),",
    "[error] > 84 |     }",
    "[error]      |     ^",
    "[error]   85 |   } catch (error) {",
    "[error]   86 |     return handleApiError(error);",
    "[error]   87 |   }",
    "[error] src/app/api/ipd/route.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { IPDProductionService } from \"@/lib/ipd-service.production\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | // Example API route for IPD (Inpatient Department) Management",
    "[error]   10 | // Schema for IPD Admission",
    "[error] src/app/api/lab-orders/[labOrderId]/items/route.ts: SyntaxError: '=>' expected. (14:57)",
    "[error]   12 |",
    "[error]   13 | // Helper function to get lab order ID from URL",
    "[error] > 14 | const getLabOrderId = (pathname: string): number | null {",
    "[error]      |                                                         ^",
    "[error]   15 |     // Pathname might be /api/lab-orders/123/items",
    "[error]   16 |     const parts = pathname.split(\"/\");",
    "[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error] src/app/api/lab-orders/[labOrderId]/route.ts: SyntaxError: Property or signature expected. (20:5)",
    "[error]   18 |     number,",
    "[error]   19 |     string,",
    "[error] > 20 |     string | null,",
    "[error]      |     ^",
    "[error]   21 |     string,",
    "[error]   22 |     string,",
    "[error]   23 |     doctor_full_name: string | null",
    "[error] src/app/api/lab-orders/route.ts: SyntaxError: ',' expected. (23:72)",
    "[error]   21 |     dateTo: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),",
    "[error]   22 |     limit: z.coerce.number().int().positive().optional().default(50),",
    "[error] > 23 |     offset: z.coerce.number().int().nonnegative().optional().default(0);",
    "[error]      |                                                                        ^",
    "[error]   24 | });",
    "[error]   25 |",
    "[error]   26 | // Define the expected structure based on the SELECT query",
    "[error] src/app/api/laboratory/categories/route.ts: SyntaxError: ')' expected. (27:60)",
    "[error]   25 |     // Assuming db.query exists and returns { results: [...] } based on db.ts mock",
    "[error]   26 |     const categoriesResult = await database.query(",
    "[error] > 27 |       \"SELECT * FROM lab_test_categories ORDER BY name ASC\";",
    "[error]      |                                                            ^",
    "[error]   28 |     );",
    "[error]   29 |",
    "[error]   30 |     return NextResponse.json(categoriesResult.results || []); // Changed .rows to .results",
    "[error] src/app/api/laboratory/orders/route.ts: SyntaxError: Property or signature expected. (15:3)",
    "[error]   13 | interface LabOrderInput {",
    "[error]   14 |   patient_id: number | string,",
    "[error] > 15 |   LabTestInput[];",
    "[error]      |   ^",
    "[error]   16 |   order_date?: string; // Optional, defaults to now",
    "[error]   17 |   priority?: \"routine\" | \"urgent\" | \"stat\"; // Optional, defaults to routine",
    "[error]   18 |   notes?: string; // Optional",
    "[error] src/app/api/laboratory/results/route.ts: SyntaxError: Property or signature expected. (19:3)",
    "[error]   17 | interface LabResult {",
    "[error]   18 |   id: number,",
    "[error] > 19 |   number | null,",
    "[error]      |   ^",
    "[error]   20 |   boolean,",
    "[error]   21 |   number,",
    "[error]   22 |   number | null,",
    "[error] src/app/api/laboratory/samples/route.ts: SyntaxError: Property or signature expected. (21:3)",
    "[error]   19 |   id: number,",
    "[error]   20 |   string,",
    "[error] > 21 |   number | null,",
    "[error]      |   ^",
    "[error]   22 |   number | null,",
    "[error]   23 |   \"collected\" | \"received\" | \"processing\" | \"rejected\",",
    "[error]   24 |   string | null,",
    "[error] src/app/api/laboratory/tests/route.ts: SyntaxError: Expression expected. (34:16)",
    "[error]   32 |",
    "[error]   33 |     // Build query",
    "[error] > 34 |     let query =;",
    "[error]      |                ^",
    "[error]   35 |       \"SELECT t.*, c.name as category_name FROM lab_tests t JOIN lab_test_categories c ON t.category_id = c.id\";",
    "[error]   36 |     // FIX: Use specific type for params",
    "[error]   37 |     const parameters: (string | number | boolean)[] = [];",
    "[error] src/app/api/monitoring/alerts/route.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Monitoring Alerts API Endpoint;",
    "[error] src/app/api/monitoring/metrics/route.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Monitoring Metrics API Endpoint;",
    "[error] src/app/api/opd-visits/[visitId]/route.ts: SyntaxError: Property or signature expected. (14:3)",
    "[error]   12 | interface OPDVisitQueryResult {",
    "[error]   13 |   opd_visit_id: number,",
    "[error] > 14 |   number | null,",
    "[error]      |   ^",
    "[error]   15 |   visit_datetime: string; // Assuming ISO string format",
    "[error]   16 |   visit_type: string; // Should ideally be an enum",
    "[error]   17 |   doctor_id: number,",
    "[error] src/app/api/opd-visits/route.ts: SyntaxError: ',' expected. (22:61)",
    "[error]   20 |     diagnosis: z.string().optional().nullable(),",
    "[error]   21 |     treatment_plan: z.string().optional().nullable(),",
    "[error] > 22 |     follow_up_instructions: z.string().optional().nullable();",
    "[error]      |                                                             ^",
    "[error]   23 | });",
    "[error]   24 |",
    "[error]   25 | // GET /api/opd-visits - Fetch list of OPD visits (with filtering/pagination);",
    "[error] src/app/api/opd/appointments/route.ts: SyntaxError: '=>' expected. (39:67)",
    "[error]   37 |",
    "[error]   38 | // Placeholder function to simulate database interaction",
    "[error] > 39 | async const getAppointmentsFromDB = (filters: AppointmentFilters) {",
    "[error]      |                                                                   ^",
    "[error]   40 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]   41 |   // Replace with actual D1 query when DB is configured",
    "[error]   42 |   // const { env } = getRequestContext();",
    "[error] src/app/api/ot/bookings/[id]/checklist-responses/route.ts: SyntaxError: ';' expected. (10:20)",
    "[error]    8 |   checklist_template_id: string; // Assuming ID is string",
    "[error]    9 |   phase: string; // e.g., \"Pre-Op\", \"Intra-Op\", \"Post-Op\"",
    "[error] > 10 |   responses: Record> // JSON object { \"itemId\": responseValue, ... }",
    "[error]      |                    ^",
    "[error]   11 |   completed_by_id?: string; // Optional, assuming ID is string",
    "[error]   12 | }",
    "[error]   13 |",
    "[error] src/app/api/ot/bookings/[id]/record/route.ts: SyntaxError: ',' expected. (27:24)",
    "[error]   25 | // GET /api/ot/bookings/[id]/record - Get operation record for a booking",
    "[error]   26 | export const _GET = async (",
    "[error] > 27 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   28 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);",
    "[error]   29 | ) {",
    "[error]   30 |   try {",
    "[error] src/app/api/ot/bookings/[id]/route.ts: SyntaxError: '=>' expected. (11:3)",
    "[error]    9 |   _request: NextRequest, // FIX: Use NextRequest",
    "[error]   10 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error] > 11 | ) {",
    "[error]      |   ^",
    "[error]   12 |   try {",
    "[error]   13 |     // const { env } = getRequestContext()",
    "[error]   14 |     // const DB = env.DB",
    "[error] src/app/api/ot/bookings/[id]/staff/route.ts: SyntaxError: ',' expected. (14:24)",
    "[error]   12 | // GET /api/ot/bookings/[id]/staff - Get staff assigned to a specific OT booking",
    "[error]   13 | export const _GET = async (",
    "[error] > 14 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   15 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   16 | ) {",
    "[error]   17 |   try {",
    "[error] src/app/api/ot/bookings/route.ts: SyntaxError: Declaration or statement expected. (84:7)",
    "[error]   82 |     const { results } = await DB.prepare(query)",
    "[error]   83 |       .bind(...parameters);",
    "[error] > 84 |       .all();",
    "[error]      |       ^",
    "[error]   85 |",
    "[error]   86 |     return NextResponse.json(results);",
    "[error]   87 |   } catch (error: unknown) {",
    "[error] src/app/api/ot/checklist-templates/[id]/route.ts: SyntaxError: ',' expected. (24:24)",
    "[error]   22 | // GET /api/ot/checklist-templates/[id] - Get details of a specific checklist template",
    "[error]   23 | export const _GET = async (",
    "[error] > 24 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   25 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);",
    "[error]   26 | ) {",
    "[error]   27 |   try {",
    "[error] src/app/api/ot/checklist-templates/route.ts: SyntaxError: Property or signature expected. (18:3)",
    "[error]   16 | interface ChecklistTemplateCreateBody {",
    "[error]   17 |   name: string,",
    "[error] > 18 |   ChecklistItem[]",
    "[error]      |   ^",
    "[error]   19 | }",
    "[error]   20 |",
    "[error]   21 | // GET /api/ot/checklist-templates - List all checklist templates",
    "[error] src/app/api/ot/surgery-types/[id]/route.ts: SyntaxError: ',' expected. (25:24)",
    "[error]   23 | // GET /api/ot/surgery-types/[id] - Get details of a specific surgery type",
    "[error]   24 | export const _GET = async (",
    "[error] > 25 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   26 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);",
    "[error]   27 | ) {",
    "[error]   28 |   try {",
    "[error] src/app/api/ot/surgery-types/route.ts: SyntaxError: Expression expected. (31:16)",
    "[error]   29 |",
    "[error]   30 |     const DB = process.env.DB as unknown as D1Database",
    "[error] > 31 |     let query =;",
    "[error]      |                ^",
    "[error]   32 |       \"SELECT id, name, description, specialty, estimated_duration_minutes, updated_at FROM SurgeryTypes\";",
    "[error]   33 |     const parameters: string[] = [];",
    "[error]   34 |",
    "[error] src/app/api/ot/theatres/[id]/route.ts: SyntaxError: ',' expected. (17:24)",
    "[error]   15 | // GET /api/ot/theatres/[id] - Get details of a specific operation theatre",
    "[error]   16 | export const _GET = async (",
    "[error] > 17 |   _request: NextRequest;",
    "[error]      |                        ^",
    "[error]   18 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+);",
    "[error]   19 | ) {",
    "[error]   20 |   try {",
    "[error] src/app/api/ot/theatres/route.ts: SyntaxError: Expression expected. (22:16)",
    "[error]   20 |",
    "[error]   21 |     const DB = process.env.DB as unknown as D1Database",
    "[error] > 22 |     let query =;",
    "[error]      |                ^",
    "[error]   23 |       \"SELECT id, name, location, specialty, status, updated_at FROM OperationTheatres\";",
    "[error]   24 |     const parameters: string[] = [];",
    "[error]   25 |",
    "[error] src/app/api/patients/[id]/route.ts: SyntaxError: ',' expected. (33:62)",
    "[error]   31 |     medical_history_summary: z.string().optional().nullable(),",
    "[error]   32 |     insurance_provider: z.string().optional().nullable(),",
    "[error] > 33 |     insurance_policy_number: z.string().optional().nullable();",
    "[error]      |                                                              ^",
    "[error]   34 | }).partial();",
    "[error]   35 |",
    "[error]   36 | // GET /api/patients/[id] - Fetch a specific patient by ID",
    "[error] src/app/api/patients/[id]/vitals/route.ts: SyntaxError: ',' expected. (24:44)",
    "[error]   22 |     bmi: z.number().positive().optional().nullable(),",
    "[error]   23 |     pain_scale_0_10: z.number().int().min(0).max(10).optional().nullable(),",
    "[error] > 24 |     notes: z.string().optional().nullable();",
    "[error]      |                                            ^",
    "[error]   25 | });",
    "[error]   26 |",
    "[error]   27 | // GET /api/patients/[id]/vitals - Fetch vitals for a specific patient",
    "[error] src/app/api/patients/register/route.ts: SyntaxError: ',' expected. (24:46)",
    "[error]   22 |     state: z.string().optional().nullable(),",
    "[error]   23 |     postal_code: z.string().optional().nullable(),",
    "[error] > 24 |     country: z.string().optional().nullable();",
    "[error]      |                                              ^",
    "[error]   25 |     // Emergency contact details",
    "[error]   26 |     emergency_contact_name: z.string().optional().nullable(),",
    "[error]   27 |     emergency_contact_relation: z.string().optional().nullable(),",
    "[error] src/app/api/patients/route.ts: SyntaxError: ',' expected. (25:46)",
    "[error]   23 |     state: z.string().optional().nullable(),",
    "[error]   24 |     postal_code: z.string().optional().nullable(),",
    "[error] > 25 |     country: z.string().optional().nullable();",
    "[error]      |                                              ^",
    "[error]   26 |     // Emergency contact details",
    "[error]   27 |     emergency_contact_name: z.string().optional().nullable(),",
    "[error]   28 |     emergency_contact_relation: z.string().optional().nullable(),",
    "[error] src/app/api/pharmacy/administration/due/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]    8 | import { FHIRMapper } from \"../../../models/fhir-mappers\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Due Medications API Routes;",
    "[error] src/app/api/pharmacy/administration/education/route.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import { validateEducationRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * Patient Education API Routes;",
    "[error] src/app/api/pharmacy/administration/missed/route.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../lib/services/pharmacy/pharmacy.service\";",
    "[error]    7 | import { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | /**",
    "[error]   11 |  * Missed Dose API for Medication Administration;",
    "[error] src/app/api/pharmacy/administration/overdue/route.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../lib/services/pharmacy/pharmacy.service\";",
    "[error]    7 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | /**",
    "[error]   11 |  * Overdue Medications API Routes;",
    "[error] src/app/api/pharmacy/administration/reaction/route.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import { validateReactionRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * Adverse Reaction API Routes;",
    "[error] src/app/api/pharmacy/administration/reports/route.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { auditLog } from \"../../../../../lib/audit\";",
    "[error]   5 | import { errorHandler } from \"../../../../../lib/error-handler\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Administration Reports API Routes;",
    "[error] src/app/api/pharmacy/administration/route.ts: SyntaxError: ',' expected. (20:33)",
    "[error]   18 | // Initialize repositories (in production, use dependency injection);",
    "[error]   19 | const getMedicationById,",
    "[error] > 20 |   findAll: () => Promise.resolve([]),",
    "[error]      |                                 ^",
    "[error]   21 |   search: () => Promise.resolve([]),",
    "[error]   22 |   save: () => Promise.resolve(\"\"),",
    "[error]   23 |   update: () => Promise.resolve(true),",
    "[error] src/app/api/pharmacy/administration/schedule/[patientId]/route.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { getMedicationById, getPrescriptionById } from \"../../../../../../lib/services/pharmacy/pharmacy.service\";",
    "[error]    7 | import type { PharmacyDomain } from \"../../../../models/domain-models\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | /**",
    "[error]   11 |  * Patient Medication Schedule API;",
    "[error] src/app/api/pharmacy/administration/verify/route.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]    9 | import { BarcodeAdministrationService } from \"../../../services/barcode-administration-service\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * Barcode Verification API for Medication Administration;",
    "[error] src/app/api/pharmacy/dispensing/partial/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { validatePartialDispensingRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Partial Dispensing API Routes;",
    "[error] src/app/api/pharmacy/dispensing/route.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 | import type { PharmacyDomain } from \"../../models/domain-models\";",
    "[error]   11 | import { FHIRMapper } from \"../../models/fhir-mappers\";",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |",
    "[error]   14 | /**",
    "[error]   15 |  * Dispensing API Routes;",
    "[error] src/app/api/pharmacy/dispensing/verify/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { validateDispensingVerificationRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Dispensing Verification API Routes;",
    "[error] src/app/api/pharmacy/interactions/[id]/override/route.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";",
    "[error]    6 | import { validateInteractionOverrideRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | /**",
    "[error]   10 |  * Interaction Override API Routes;",
    "[error] src/app/api/pharmacy/interactions/batch-check/route.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]   11 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |",
    "[error]   14 | /**",
    "[error]   15 |  * Batch Interaction Check API Routes;",
    "[error] src/app/api/pharmacy/interactions/drug-allergy/route.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |",
    "[error]   13 | /**",
    "[error]   14 |  * Drug-Allergy Interaction API Routes;",
    "[error] src/app/api/pharmacy/interactions/drug-condition/route.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |",
    "[error]   13 | /**",
    "[error]   14 |  * Drug-Condition Interaction API Routes;",
    "[error] src/app/api/pharmacy/interactions/drug-drug/route.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]    9 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * Drug-Drug Interaction API Routes;",
    "[error] src/app/api/pharmacy/interactions/drug-lab/route.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error]   10 | import { DrugInteractionService } from \"../../../services/drug-interaction-service\";",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |",
    "[error]   13 | /**",
    "[error]   14 |  * Drug-Lab Interaction API Routes;",
    "[error] src/app/api/pharmacy/interactions/route.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 | import type { PharmacyDomain } from \"../../models/domain-models\";",
    "[error]   10 | import { DrugInteractionService } from \"../../services/drug-interaction-service\";",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |",
    "[error]   13 | /**",
    "[error]   14 |  * Drug Interaction API Routes;",
    "[error] src/app/api/pharmacy/inventory/adjustment/route.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";",
    "[error]    6 | import { validateInventoryAdjustmentRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | /**",
    "[error]   10 |  * Inventory Adjustment API Routes;",
    "[error] src/app/api/pharmacy/inventory/expiring/route.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";",
    "[error]    6 | import { FHIRMapper } from \"../../../models/fhir-mappers\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | /**",
    "[error]   10 |  * Expiring Medications API Routes;",
    "[error] src/app/api/pharmacy/inventory/reorder/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { validateReorderRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error]    8 | import type { PharmacyDomain } from \"../../../models/domain-models\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Automated Reordering API Routes;",
    "[error] src/app/api/pharmacy/inventory/route.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import { PharmacyDomain } from \"../../models/domain-models\";",
    "[error]    9 | import { FHIRMapper } from \"../../models/fhir-mappers\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * Inventory API Routes;",
    "[error] src/app/api/pharmacy/inventory/transfer/route.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { errorHandler } from \"../../../../../lib/error-handler\";",
    "[error]    6 | import { validateInventoryTransferRequest } from \"../../../../../lib/validation/pharmacy-validation\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | /**",
    "[error]   10 |  * Inventory Transfer API Routes;",
    "[error] src/app/api/pharmacy/medications/route.ts: SyntaxError: ',' expected. (68:23)",
    "[error]   66 |",
    "[error]   67 |     const { searchParams } = new URL(request.url);",
    "[error] > 68 |     const searchParams.get(\"search\"),",
    "[error]      |                       ^",
    "[error]   69 |       category: searchParams.get(\"category\"),",
    "[error]   70 |       manufacturer: searchParams.get(\"manufacturer\"),",
    "[error]   71 |       prescription_required: searchParams.has(\"prescription_required\");",
    "[error] src/app/api/pharmacy/models/domain-models.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { z } from \"zod\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error]   6 |  * Domain Models for Pharmacy Module;",
    "[error] src/app/api/pharmacy/models/fhir-mappers.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   Medication,",
    "[error]      |   ^",
    "[error]   12 |   MedicationOrder,",
    "[error]   13 |   MedicationDispense,",
    "[error]   14 |   MedicationAdministration,",
    "[error] src/app/api/pharmacy/prescriptions/renewal/route.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { ErrorHandler } from \"../../../../implementation/utils/error-handler\";",
    "[error]    8 | import { RBACService } from \"../../../../implementation/utils/rbac-service\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Prescription Renewal API Routes;",
    "[error] src/app/api/pharmacy/prescriptions/route.ts: SyntaxError: Declaration or statement expected. (13:1)",
    "[error]   11 | import { FHIRMapper } from \"../../models/fhir-mappers\";",
    "[error]   12 | import { DrugInteractionService } from \"../../services/drug-interaction-service\";",
    "[error] > 13 | }",
    "[error]      | ^",
    "[error]   14 |",
    "[error]   15 | /**",
    "[error]   16 |  * Prescription Management API Routes;",
    "[error] src/app/api/pharmacy/services/barcode-administration-service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { PharmacyDomain } from \"../models/domain-models\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Barcode Medication Administration Service Implementation;",
    "[error] src/app/api/pharmacy/services/drug-interaction-service.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { PharmacyDomain } from \"../../../../implementation/models/domain-models\";",
    "[error]   5 | import type { AuditLogger } from \"../../../../implementation/utils/audit-logger\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Drug Interaction Service;",
    "[error] src/app/api/pharmacy/services/medication-reconciliation-service.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { PharmacyDomain } from \"../../../../implementation/models/domain-models\";",
    "[error]   5 | import type { AuditLogger } from \"../../../../implementation/utils/audit-logger\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Medication Reconciliation Service;",
    "[error] src/app/api/portal/patient/auth/route.ts: SyntaxError: '=>' expected. (24:69)",
    "[error]   22 |",
    "[error]   23 | // Placeholder function to simulate patient login",
    "[error] > 24 | async const authenticatePatient = (email: string, password: string) {",
    "[error]      |                                                                     ^",
    "[error]   25 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]   26 |   // Replace with actual D1 query and password verification when DB is configured",
    "[error]   27 |   // const { env } = getRequestContext();",
    "[error] src/app/api/prescriptions/[prescriptionId]/items/route.ts: SyntaxError: '=>' expected. (14:61)",
    "[error]   12 |",
    "[error]   13 | // Helper function to get prescription ID from URL",
    "[error] > 14 | const getPrescriptionId = (pathname: string): number | null {",
    "[error]      |                                                             ^",
    "[error]   15 |     // Pathname might be /api/prescriptions/123/items",
    "[error]   16 |     const parts = pathname.split(\"/\");",
    "[error]   17 |     const idStr = parts[parts.length - 2]; // Second to last part",
    "[error] src/app/api/prescriptions/[prescriptionId]/route.ts: SyntaxError: Property or signature expected. (29:5)",
    "[error]   27 |     string,",
    "[error]   28 |     string,",
    "[error] > 29 |     string | null,",
    "[error]      |     ^",
    "[error]   30 |     string,",
    "[error]   31 |     inventory_unit_of_measure: string",
    "[error]   32 | }",
    "[error] src/app/api/prescriptions/route.ts: SyntaxError: ',' expected. (18:69)",
    "[error]   16 |     route: z.string().optional().nullable(),",
    "[error]   17 |     instructions: z.string().optional().nullable(),",
    "[error] > 18 |     quantity_prescribed: z.number().positive().optional().nullable();",
    "[error]      |                                                                     ^",
    "[error]   19 | });",
    "[error]   20 |",
    "[error]   21 | const prescriptionCreateSchema = z.object({",
    "[error] src/app/api/radiology-reports/route.ts: SyntaxError: Declaration or statement expected. (100:7)",
    "[error]    98 |     const result = await database",
    "[error]    99 |       .prepare(query);",
    "[error] > 100 |       .bind(...parameters);",
    "[error]       |       ^",
    "[error]   101 |       .all<RadiologyReportListItem>();",
    "[error]   102 |     return NextResponse.json(result.results || []);",
    "[error]   103 |   } catch (error) {",
    "[error] src/app/api/radiology/modalities/route.ts: SyntaxError: Declaration or statement expected. (19:3)",
    "[error]   17 |   const session = await getSession();",
    "[error]   18 |   if (!session.user);",
    "[error] > 19 |   )",
    "[error]      |   ^",
    "[error]   20 |     return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });",
    "[error]   21 |",
    "[error]   22 |   const DB = process.env.DB as unknown as D1Database;",
    "[error] src/app/api/radiology/orders/[id]/route.ts: SyntaxError: Property or signature expected. (13:1)",
    "[error]   11 |   clinical_indication?: string;",
    "[error]   12 |   procedure_type_id?: string;",
    "[error] > 13 | export const _GET = async (",
    "[error]      | ^",
    "[error]   14 |   request: NextRequest;",
    "[error]   15 |   { params }: { params: Promise<{ id: string }> } // FIX: Use Promise type for params (Next.js 15+)",
    "[error]   16 | ) {",
    "[error] src/app/api/radiology/orders/route.ts: SyntaxError: '=>' expected. (45:73)",
    "[error]   43 |",
    "[error]   44 | // Placeholder function to simulate database interaction",
    "[error] > 45 | async const getRadiologyOrdersFromDB = (filters: RadiologyOrderFilters) {",
    "[error]      |                                                                         ^",
    "[error]   46 |   // Use interface",
    "[error]   47 |   // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]   48 |   // Replace with actual D1 query when DB is configured",
    "[error] src/app/api/radiology/procedure-types/route.ts: SyntaxError: Declaration or statement expected. (20:3)",
    "[error]   18 |   // Allow broader access for viewing procedure types",
    "[error]   19 |   if (!session.user);",
    "[error] > 20 |   )",
    "[error]      |   ^",
    "[error]   21 |     return NextResponse.json({ error: \"Unauthorized\" }, { status: 403 });",
    "[error]   22 |",
    "[error]   23 |   const DB = process.env.DB as unknown as D1Database;",
    "[error] src/app/api/radiology/reports/[id]/route.ts: SyntaxError: '=>' expected. (55:26)",
    "[error]   53 |   _request: NextRequest, // Renamed to _request as it\"s unused",
    "[error]   54 |   { params }: { params: Promise<{ id: string }> } // Use Promise type for params (Next.js 15+);",
    "[error] > 55 | ): Promise<NextResponse> {",
    "[error]      |                          ^",
    "[error]   56 |   try {",
    "[error]   57 |     // Use IronSession<IronSessionData>",
    "[error]   58 |     const session: IronSession<IronSessionData> = await getSession();",
    "[error] src/app/api/radiology/reports/route.ts: SyntaxError: Declaration or statement expected. (98:7)",
    "[error]    96 |     const result = await database",
    "[error]    97 |       .prepare(query);",
    "[error] >  98 |       .bind(...parameters);",
    "[error]       |       ^",
    "[error]    99 |       .all<RadiologyReportListItem>();",
    "[error]   100 |     return NextResponse.json(result.results || []);",
    "[error]   101 |   } catch (error: unknown) {",
    "[error] src/app/api/radiology/studies/[id]/route.ts: SyntaxError: ';' expected. (12:19)",
    "[error]   10 |   // FIX: Replaced any[] with unknown[]",
    "[error]   11 |   bind(...parameters: unknown[]): {",
    "[error] > 12 |     run(): Promise>",
    "[error]      |                   ^",
    "[error]   13 |     // FIX: Replaced any with unknown",
    "[error]   14 |     all<T = unknown>(): Promise>",
    "[error]   15 |     // FIX: Replaced any with unknown",
    "[error] src/app/api/radiology/studies/route.ts: SyntaxError: ';' expected. (12:19)",
    "[error]   10 | interface PreparedStatement {",
    "[error]   11 |   bind(...parameters: (string | number | null)[]): {",
    "[error] > 12 |     run(): Promise>",
    "[error]      |                   ^",
    "[error]   13 |     all<T = unknown>(): Promise>",
    "[error]   14 |     first<T = unknown>(colName?: string): Promise<T | null>",
    "[error]   15 |   };",
    "[error] src/app/api/route.ts: SyntaxError: ';' expected. (12:19)",
    "[error]   10 |   // FIX: Replaced any[] with unknown[]",
    "[error]   11 |   bind(...parameters: unknown[]): {",
    "[error] > 12 |     run(): Promise>",
    "[error]      |                   ^",
    "[error]   13 |     // FIX: Replaced any with unknown",
    "[error]   14 |     all<T = unknown>(): Promise>",
    "[error]   15 |     // FIX: Replaced any with unknown",
    "[error] src/app/api/support-services/ambulance/route.ts: SyntaxError: ',' expected. (18:4)",
    "[error]   16 |   dropoffLocation: z.string().min(3).max(200),",
    "[error]   17 |   patientId: z.string().uuid().optional(),",
    "[error] > 18 |   z.string().max(1000).optional(),",
    "[error]      |    ^",
    "[error]   19 |   requestedById: z.string().uuid(),",
    "[error]   20 |   contactName: z.string().min(2).max(100).optional(),",
    "[error]   21 |   contactPhone: z.string().min(5).max(20).optional(),",
    "[error] src/app/api/support-services/dietary/route.ts: SyntaxError: ',' expected. (19:4)",
    "[error]   17 |   allergies: z.array(z.string()).optional(),",
    "[error]   18 |   preferences: z.array(z.string()).optional(),",
    "[error] > 19 |   z.string().max(1000).optional(),",
    "[error]      |    ^",
    "[error]   20 |   requestedById: z.string().uuid(),",
    "[error]   21 |   locationId: z.string().uuid();",
    "[error]   22 | });",
    "[error] src/app/api/support-services/feedback/route.ts: SyntaxError: ',' expected. (23:42)",
    "[error]   21 |   contactEmail: z.string().email().optional(),",
    "[error]   22 |   contactPhone: z.string().max(20).optional(),",
    "[error] > 23 |   isAnonymous: z.boolean().default(false);",
    "[error]      |                                          ^",
    "[error]   24 | });",
    "[error]   25 |",
    "[error]   26 | const createComplaintSchema = z.object({",
    "[error] src/app/api/support-services/housekeeping/route.ts: SyntaxError: ',' expected. (17:4)",
    "[error]   15 |   priority: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"URGENT\"]),",
    "[error]   16 |   description: z.string().min(5).max(500),",
    "[error] > 17 |   z.string().max(1000).optional(),",
    "[error]      |    ^",
    "[error]   18 |   requestedById: z.string().uuid()",
    "[error]   19 | });",
    "[error]   20 |",
    "[error] src/app/api/support-services/maintenance/route.ts: SyntaxError: ',' expected. (17:4)",
    "[error]   15 |   priority: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"URGENT\"]),",
    "[error]   16 |   description: z.string().min(5).max(500),",
    "[error] > 17 |   z.string().max(1000).optional(),",
    "[error]      |    ^",
    "[error]   18 |   requestedById: z.string().uuid(),",
    "[error]   19 |   departmentId: z.string().uuid().optional(),",
    "[error]   20 |   estimatedDuration: z.number().min(1).optional(), // in minutes",
    "[error] src/app/api/support-services/marketing/analytics/campaigns/[campaignId]/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const GET = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { campaignId: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/analytics/comparative/route.ts: SyntaxError: ',' expected. (32:49)",
    "[error]   30 |",
    "[error]   31 |       const filters = {",
    "[error] > 32 |         startDate: searchParams.has(\"startDate\");",
    "[error]      |                                                 ^",
    "[error]   33 |           ? new Date(searchParams.get(\"startDate\") as string);",
    "[error]   34 |           : undefined,",
    "[error]   35 |         endDate: searchParams.has(\"endDate\");",
    "[error] src/app/api/support-services/marketing/campaigns/route.ts: SyntaxError: ',' expected. (16:4)",
    "[error]   14 |   status: z.string().optional(),",
    "[error]   15 |   startDateFrom: z.string().optional().transform(val => val ? new Date(val) : undefined),",
    "[error] > 16 |   z.string().optional().transform(val => val ? new Date(val) : undefined),",
    "[error]      |    ^",
    "[error]   17 |   z.string().default(\"1\").transform(Number),",
    "[error]   18 |   limit: z.string().default(\"10\").transform(Number);",
    "[error]   19 | });",
    "[error] src/app/api/support-services/marketing/contacts/[id]/link-patient/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const POST = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/contacts/[id]/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const GET = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/contacts/route.ts: SyntaxError: ',' expected. (24:21)",
    "[error]   22 |       const filters = {",
    "[error]   23 |         status: searchParams.get(\"status\") || undefined,",
    "[error] > 24 |         searchParams.get(\"search\") || undefined,",
    "[error]      |                     ^",
    "[error]   25 |         searchParams.has(\"hasPatient\");",
    "[error]   26 |           ? searchParams.get(\"hasPatient\") === \"true\";",
    "[error]   27 |           : undefined,",
    "[error] src/app/api/support-services/marketing/route.ts: SyntaxError: ',' expected. (16:4)",
    "[error]   14 |   status: z.string().optional(),",
    "[error]   15 |   startDateFrom: z.string().optional().transform(val => val ? new Date(val) : undefined),",
    "[error] > 16 |   z.string().optional().transform(val => val ? new Date(val) : undefined),",
    "[error]      |    ^",
    "[error]   17 |   z.string().default(\"1\").transform(Number),",
    "[error]   18 |   limit: z.string().default(\"10\").transform(Number);",
    "[error]   19 | });",
    "[error] src/app/api/support-services/marketing/segments/[id]/apply-criteria/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const POST = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/segments/[id]/members/[contactId]/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const POST = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/segments/[id]/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const GET = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/segments/route.ts: SyntaxError: ',' expected. (23:47)",
    "[error]   21 |       // Parse query parameters",
    "[error]   22 |       const filters = {",
    "[error] > 23 |         isActive: searchParams.has(\"isActive\");",
    "[error]      |                                               ^",
    "[error]   24 |           ? searchParams.get(\"isActive\") === \"true\";",
    "[error]   25 |           : undefined,",
    "[error]   26 |         search: searchParams.get(\"search\") || undefined,",
    "[error] src/app/api/support-services/marketing/templates/[id]/render/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const POST = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/templates/[id]/route.ts: SyntaxError: ',' expected. (15:23)",
    "[error]   13 |  */",
    "[error]   14 | export const GET = async (",
    "[error] > 15 |   request: NextRequest;",
    "[error]      |                       ^",
    "[error]   16 |   { params }: { id: string }",
    "[error]   17 | ) => {",
    "[error]   18 |   return withErrorHandling(",
    "[error] src/app/api/support-services/marketing/templates/route.ts: SyntaxError: ',' expected. (24:47)",
    "[error]   22 |       const filters = {",
    "[error]   23 |         type: searchParams.get(\"type\") || undefined,",
    "[error] > 24 |         isActive: searchParams.has(\"isActive\");",
    "[error]      |                                               ^",
    "[error]   25 |           ? searchParams.get(\"isActive\") === \"true\";",
    "[error]   26 |           : undefined,",
    "[error]   27 |         search: searchParams.get(\"search\") || undefined,",
    "[error] src/app/api/v2/patients/route.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | import { PatientCreateSchema, patientManagementService } from \"@/lib/core/patient-management.service\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Enhanced Patient Management API (v2) - Using new service layer;",
    "[error] src/app/clinical-documentation/[id]/edit/page.tsx: SyntaxError: ';' expected. (11:22)",
    "[error]    9 | const prisma = new PrismaClient();",
    "[error]   10 |",
    "[error] > 11 | export default async const _DocumentEditPage = ({",
    "[error]      |                      ^",
    "[error]   12 |   params;",
    "[error]   13 | }: {id: string",
    "[error]   14 | }) {",
    "[error] src/app/clinical-documentation/[id]/page.tsx: SyntaxError: ';' expected. (8:22)",
    "[error]    6 | import { DocumentViewer } from \"../../../components/clinical-documentation/document-viewer\";",
    "[error]    7 | import { authOptions } from \"../../../lib/auth\";",
    "[error] >  8 | export default async const _DocumentViewPage = ({",
    "[error]      |                      ^",
    "[error]    9 |   params;",
    "[error]   10 | }: {id: string",
    "[error]   11 | }) {",
    "[error] src/app/clinical-documentation/create/page.tsx: SyntaxError: ';' expected. (11:22)",
    "[error]    9 | const prisma = new PrismaClient();",
    "[error]   10 |",
    "[error] > 11 | export default async const _DocumentCreatePage = ({",
    "[error]      |                      ^",
    "[error]   12 |   searchParams;",
    "[error]   13 | }: {patientId?: string, encounterId?: string",
    "[error]   14 | }) {",
    "[error] src/app/clinical-documentation/page.tsx: SyntaxError: ';' expected. (15:22)",
    "[error]   13 | const DEFAULT_PATIENT_ID = \"pat_123456\";",
    "[error]   14 |",
    "[error] > 15 | export default async const _ClinicalDocumentationPage = ({",
    "[error]      |                      ^",
    "[error]   16 |   searchParams;",
    "[error]   17 | }: {patientId?: string",
    "[error]   18 | }) {",
    "[error] src/app/components/support-services/ambulance/AmbulanceDashboard.tsx: SyntaxError: Expression expected. (18:16)",
    "[error]   16 | import AmbulanceMap from \"./AmbulanceMap.ts\";",
    "[error]   17 |",
    "[error] > 18 | export default const _AmbulanceDashboard = () {",
    "[error]      |                ^",
    "[error]   19 |   const router = useRouter();",
    "[error]   20 |   const [activeTab, setActiveTab] = useState(\"active\");",
    "[error]   21 |   const [ambulances, setAmbulances] = useState<any[]>([]);",
    "[error] src/app/components/support-services/ambulance/AmbulanceTripRequestForm.tsx: SyntaxError: Expression expected. (18:16)",
    "[error]   16 | import { useEffect, useState } from \"react\";",
    "[error]   17 |",
    "[error] > 18 | export default const _AmbulanceTripRequestForm = () {",
    "[error]      |                ^",
    "[error]   19 |   const router = useRouter();",
    "[error]   20 |   const [loading, setLoading] = useState(false);",
    "[error]   21 |   const [submitting, setSubmitting] = useState(false);",
    "[error] src/app/components/support-services/dietary/DietaryDashboard.tsx: SyntaxError: ',' expected. (27:7)",
    "[error]   25 |   RefreshCw,",
    "[error]   26 |   Search,",
    "[error] > 27 |   User;",
    "[error]      |       ^",
    "[error]   28 | } from \"lucide-react\";",
    "[error]   29 |   Select,",
    "[error]   30 |   SelectContent,",
    "[error] src/app/components/support-services/dietary/DietaryRequestForm.tsx: SyntaxError: Expression expected. (24:1)",
    "[error]   22 |   SelectTrigger,",
    "[error]   23 |   SelectValue,",
    "[error] > 24 | } from \"@/components/ui/select\";",
    "[error]      | ^",
    "[error]   25 | import { Badge } from \"@/components/ui/badge\";",
    "[error]   26 | import { Checkbox } from \"@/components/ui/checkbox\";",
    "[error]   27 | import { Input } from \"@/components/ui/input\";",
    "[error] src/app/components/support-services/feedback/ComplaintForm.tsx: SyntaxError: ':' expected. (30:3)",
    "[error]   28 |   }),",
    "[error]   29 |   \"Please select a complaint category\"",
    "[error] > 30 |   }),",
    "[error]      |   ^",
    "[error]   31 |   \"Please select a severity level\"",
    "[error]   32 |   }),",
    "[error]   33 |   departmentId: z.string().optional(),",
    "[error] src/app/components/support-services/feedback/FeedbackDashboard.tsx: SyntaxError: Property or signature expected. (59:3)",
    "[error]   57 |   feedbackByDepartment: { department: string, count: number }[];",
    "[error]   58 |   overallRating: number,",
    "[error] > 59 |   Record>",
    "[error]      |   ^",
    "[error]   60 |   complaintsByCategory: { category: string, _count: number }[];",
    "[error]   61 |   complaintsBySeverity: { severity: string, _count: number }[];",
    "[error]   62 |   complaintsByStatus: { status: string, _count: number }[];",
    "[error] src/app/components/support-services/feedback/FeedbackForm.tsx: SyntaxError: ':' expected. (23:3)",
    "[error]   21 | const feedbackFormSchema = z.object({",
    "[error]   22 |   \"Please select a feedback type\"",
    "[error] > 23 |   }),",
    "[error]      |   ^",
    "[error]   24 |   \"Please select a feedback source\"",
    "[error]   25 |   }),",
    "[error]   26 |   \"Please provide a rating\"",
    "[error] src/app/components/support-services/housekeeping/HousekeepingDashboard.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Button } from \"@/components/ui/button\";",
    "[error]   15 | import { Badge } from \"@/components/ui/badge\";",
    "[error] src/app/components/support-services/housekeeping/HousekeepingRequestForm.tsx: SyntaxError: Expression expected. (24:1)",
    "[error]   22 |   SelectTrigger,",
    "[error]   23 |   SelectValue,",
    "[error] > 24 | } from \"@/components/ui/select\";",
    "[error]      | ^",
    "[error]   25 | import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";",
    "[error]   26 | import { Textarea } from \"@/components/ui/textarea\";",
    "[error]   27 | import { useToast } from \"@/components/ui/use-toast\";",
    "[error] src/app/components/support-services/maintenance/MaintenanceDashboard.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Button } from \"@/components/ui/button\";",
    "[error]   15 | import { Badge } from \"@/components/ui/badge\";",
    "[error] src/app/components/support-services/maintenance/MaintenanceRequestForm.tsx: SyntaxError: Expression expected. (24:1)",
    "[error]   22 |   SelectTrigger,",
    "[error]   23 |   SelectValue,",
    "[error] > 24 | } from \"@/components/ui/select\";",
    "[error]      | ^",
    "[error]   25 | import { Input } from \"@/components/ui/input\";",
    "[error]   26 | import { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";",
    "[error]   27 | import { Textarea } from \"@/components/ui/textarea\";",
    "[error] src/app/components/support-services/marketing/CampaignForm.tsx: SyntaxError: ':' expected. (24:3)",
    "[error]   22 |   description: z.string().optional(),",
    "[error]   23 |   \"Please select a campaign type.\"",
    "[error] > 24 |   }),",
    "[error]      |   ^",
    "[error]   25 |   \"Please select a campaign status.\"",
    "[error]   26 |   }),",
    "[error]   27 |   \"Start date is required.\"",
    "[error] src/app/components/support-services/marketing/ContactManagement.tsx: SyntaxError: Property or signature expected. (19:1)",
    "[error]   17 |   contactId?: string;",
    "[error]   18 |   onSuccess?: (contact: unknown) => void",
    "[error] > 19 | export default const _ContactManagement = ({ contactId, onSuccess }: ContactManagementProps) {",
    "[error]      | ^",
    "[error]   20 |   const router = useRouter();",
    "[error]   21 |   const [isLoading, setIsLoading] = useState<boolean>(false);",
    "[error]   22 |   const [contact, setContact] = useState<unknown>(null);",
    "[error] src/app/components/support-services/marketing/MarketingDashboard.tsx: SyntaxError: Expression expected. (39:16)",
    "[error]   37 | };",
    "[error]   38 |",
    "[error] > 39 | export default const _MarketingDashboard = () {",
    "[error]      |                ^",
    "[error]   40 |   const router = useRouter();",
    "[error]   41 |   const [activeTab, setActiveTab] = useState(\"overview\");",
    "[error]   42 |   const [campaigns, setCampaigns] = useState<Campaign[]>([]);",
    "[error] src/app/components/support-services/marketing/SegmentBuilder.tsx: SyntaxError: Property or signature expected. (18:1)",
    "[error]   16 |   segmentId?: string;",
    "[error]   17 |   onSuccess?: (segment: unknown) => void",
    "[error] > 18 | export default const _SegmentBuilder = ({ segmentId, onSuccess }: SegmentBuilderProps) {",
    "[error]      | ^",
    "[error]   19 |   const router = useRouter();",
    "[error]   20 |   const [isLoading, setIsLoading] = useState<boolean>(false);",
    "[error]   21 |   const [segment, setSegment] = useState<unknown>(null);",
    "[error] src/app/components/support-services/marketing/TemplateEditor.tsx: SyntaxError: Property or signature expected. (20:1)",
    "[error]   18 |   templateId?: string;",
    "[error]   19 |   onSuccess?: (template: unknown) => void",
    "[error] > 20 | export default const _TemplateEditor = ({ templateId, onSuccess }: TemplateEditorProps) {",
    "[error]      | ^",
    "[error]   21 |   const router = useRouter();",
    "[error]   22 |   const [isLoading, setIsLoading] = useState<boolean>(false);",
    "[error]   23 |   const [template, setTemplate] = useState<unknown>(null);",
    "[error] src/app/counter.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | \"use server\";",
    "[error]   4 | // import { getCloudflareContext } from \"@opennextjs/cloudflare\"",
    "[error] src/app/dashboard/analytics/page.tsx: SyntaxError: 'from' expected. (1:28)",
    "[error] > 1 | import React, { useEffect }, { useState, useEffect, useMemo } from \"react\";",
    "[error]     |                            ^",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error]   4 | import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";",
    "[error] src/app/dashboard/appointments/new/page.tsx: SyntaxError: Declaration or statement expected. (18:1)",
    "[error]   16 | import type { Doctor } from \"@/types/doctor\";",
    "[error]   17 | import type { Patient } from \"@/types/patient\";",
    "[error] > 18 | }",
    "[error]      | ^",
    "[error]   19 |",
    "[error]   20 | \"use client\";",
    "[error]   21 |",
    "[error] src/app/dashboard/appointments/page.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/app/dashboard/billing/create-invoice/page.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect, useCallback } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/app/dashboard/billing/invoices/page.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error]   9 |",
    "[error] src/app/dashboard/billing/page.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Card,",
    "[error]   8 |   CardContent,",
    "[error] src/app/dashboard/billing/service-items/page.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error]   9 |",
    "[error] src/app/dashboard/dashboard-client-layout.tsx: SyntaxError: Declaration or statement expected. (2:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error] > 2 | }",
    "[error]     | ^",
    "[error]   3 |",
    "[error]   4 | \"use client\";",
    "[error]   5 |",
    "[error] src/app/dashboard/er/page.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]     | ^",
    "[error]   5 | }",
    "[error]   6 |",
    "[error]   7 | // src/app/dashboard/er/page.tsx",
    "[error] src/app/dashboard/executive/page.tsx: SyntaxError: 'from' expected. (1:28)",
    "[error] > 1 | import React, { useEffect }, { useState, useEffect, useMemo } from \"react\";",
    "[error]     |                            ^",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error]   4 | import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";",
    "[error] src/app/dashboard/financial/page.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Card,",
    "[error]   8 |   CardContent,",
    "[error] src/app/dashboard/hr/assets/[id]/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Button } from \"@/components/ui/button\";",
    "[error]   15 | import { Badge } from \"@/components/ui/badge\";",
    "[error] src/app/dashboard/hr/assets/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]   15 |   Table,",
    "[error] src/app/dashboard/hr/attendance/[id]/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Button } from \"@/components/ui/button\";",
    "[error]   15 | import { Badge } from \"@/components/ui/badge\";",
    "[error] src/app/dashboard/hr/attendance/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]   15 |   Table,",
    "[error] src/app/dashboard/hr/biomedical/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]   15 |   Table,",
    "[error] src/app/dashboard/hr/page.tsx: SyntaxError: ',' expected. (14:11)",
    "[error]   12 |   Boxes,",
    "[error]   13 |   Stethoscope,",
    "[error] > 14 |   BarChart;",
    "[error]      |           ^",
    "[error]   15 | } from \"lucide-react\";",
    "[error]   16 |",
    "[error]   17 | export default const _HRDashboard = () {",
    "[error] src/app/dashboard/hr/payroll/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]   15 |   Table,",
    "[error] src/app/dashboard/hr/payroll/periods/[id]/page.tsx: SyntaxError: '}' expected. (13:12)",
    "[error]   11 |   CardFooter,",
    "[error]   12 |   CardHeader,",
    "[error] > 13 |   CardTitle;",
    "[error]      |            ^",
    "[error]   14 | } from \"@/components/ui/card\";",
    "[error]   15 |   Table,",
    "[error]   16 |   TableBody,",
    "[error] src/app/dashboard/hr/staff/[id]/page.tsx: SyntaxError: Declaration or statement expected. (24:1)",
    "[error]   22 |   TableHeader,",
    "[error]   23 |   TableRow;",
    "[error] > 24 | } from \"@/components/ui/table\";",
    "[error]      | ^",
    "[error]   25 |   Dialog,",
    "[error]   26 |   DialogContent,",
    "[error]   27 |   DialogDescription,",
    "[error] src/app/dashboard/hr/staff/[id]/positions/new/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 |   Form,",
    "[error]   15 |   FormControl,",
    "[error] src/app/dashboard/hr/staff/[id]/qualifications/new/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 |   Form,",
    "[error]   15 |   FormControl,",
    "[error] src/app/dashboard/hr/staff/new/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 |   Form,",
    "[error]   15 |   FormControl,",
    "[error] src/app/dashboard/hr/staff/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 |   Table,",
    "[error]   15 |   TableBody,",
    "[error] src/app/dashboard/hr/staff/schedule/page.tsx: SyntaxError: ',' expected. (12:12)",
    "[error]   10 |   CardFooter,",
    "[error]   11 |   CardHeader,",
    "[error] > 12 |   CardTitle;",
    "[error]      |            ^",
    "[error]   13 | } from \"@/components/ui/card\";",
    "[error]   14 |   Table,",
    "[error]   15 |   TableBody,",
    "[error] src/app/dashboard/inventory/new/page.tsx: SyntaxError: Declaration or statement expected. (16:1)",
    "[error]   14 | import { useToast } from \"@/hooks/use-toast\";",
    "[error]   15 | import type { BillableItem } from \"@/types/billing\";",
    "[error] > 16 | }",
    "[error]      | ^",
    "[error]   17 |",
    "[error]   18 | // src/app/dashboard/inventory/new/page.tsx",
    "[error]   19 | \"use client\";",
    "[error] src/app/dashboard/inventory/page.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/app/dashboard/layout.tsx: SyntaxError: Expression expected. (11:1)",
    "[error]    9 | // export default const _DashboardLayout = ({",
    "[error]   10 |   children,",
    "[error] > 11 | }: {",
    "[error]      | ^",
    "[error]   12 |   children: React.ReactNode",
    "[error]   13 | }) {",
    "[error]   14 |   return <DashboardClientLayout>{children}>",
    "[error] src/app/dashboard/ot/page.tsx: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 |",
    "[error]   3 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error]   7 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/dashboard/page.tsx: SyntaxError: 'from' expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | // src/app/dashboard/page.tsx",
    "[error] >  7 | \"use client\";",
    "[error]      | ^",
    "[error]    8 | export const dynamic = \"force-dynamic\";",
    "[error]    9 |",
    "[error]   10 |   Card,",
    "[error] src/app/dashboard/patients/[id]/edit/page.tsx: SyntaxError: Declaration or statement expected. (16:1)",
    "[error]   14 | import { useToast } from \"@/hooks/use-toast\";",
    "[error]   15 | import type { Patient } from \"@/types/patient\";",
    "[error] > 16 | }",
    "[error]      | ^",
    "[error]   17 |",
    "[error]   18 | // src/app/dashboard/patients/[id]/edit/page.tsx",
    "[error]   19 | \"use client\";",
    "[error] src/app/dashboard/patients/[id]/page.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { Edit, Trash2 } from \"lucide-react\";",
    "[error]     | ^",
    "[error]   4 | import { useParams, useRouter } from \"next/navigation\";",
    "[error]   5 |",
    "[error]   6 | import { Button } from \"@/components/ui/button\";",
    "[error] src/app/dashboard/patients/new/page.tsx: SyntaxError: Declaration or statement expected. (15:1)",
    "[error]   13 | import { Textarea } from \"@/components/ui/textarea\";",
    "[error]   14 | import { useToast } from \"@/hooks/use-toast\";",
    "[error] > 15 | }",
    "[error]      | ^",
    "[error]   16 |",
    "[error]   17 | // src/app/dashboard/patients/new/page.tsx",
    "[error]   18 | \"use client\";",
    "[error] src/app/dashboard/patients/page.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { DashboardLayout } from \"@/components/layout/DashboardLayout\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/app/dashboard/radiology/orders/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import RadiologyOrderDetail from \"@/components/radiology/radiology-order-detail\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/dashboard/radiology/page.tsx: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import RadiologyStudiesList from \"@/components/radiology/radiology-studies-list\";",
    "[error]    8 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | \"use client\";",
    "[error]   12 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/dashboard/radiology/reports/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import RadiologyReportDetail from \"@/components/radiology/radiology-report-detail\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/dashboard/radiology/studies/[id]/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import RadiologyStudyDetail from \"@/components/radiology/radiology-study-detail\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/ipd/page.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 | export const dynamic = \"force-dynamic\";",
    "[error]   8 |",
    "[error]   9 |   Card,",
    "[error] src/app/laboratory/page.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import React from \"react\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/layout.tsx: SyntaxError: Variable declaration expected. (19:14)",
    "[error]   17 |",
    "[error]   18 | // Use metadata from HEAD",
    "[error] > 19 | export const \"Hospital Management System\",",
    "[error]      |              ^",
    "[error]   20 |   description: \"Comprehensive HMS\"",
    "[error]   21 | };",
    "[error]   22 |",
    "[error] src/app/login/page.tsx: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 | import { Label } from \"@/components/ui/label\";",
    "[error]   10 | import { useToast } from \"@/hooks/use-toast\"; // Assuming use-toast hook is available from template",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |",
    "[error]   13 | // src/app/login/page.tsx",
    "[error]   14 | \"use client\"; // Add this directive for client-side interactivity",
    "[error] src/app/opd/page.tsx: SyntaxError: Declaration or statement expected. (13:1)",
    "[error]   11 | import { Skeleton } from \"@/components/ui/skeleton\"; // Import Skeleton for loading states",
    "[error]   12 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error] > 13 | }",
    "[error]      | ^",
    "[error]   14 |",
    "[error]   15 | // OPD Dashboard Page",
    "[error]   16 | \"use client\";",
    "[error] src/app/page.tsx: SyntaxError: 'from' expected. (1:28)",
    "[error] > 1 | import React, { useEffect }, { useState } from \"react\";",
    "[error]     |                            ^",
    "[error]   2 | \"use client\";",
    "[error]   3 | import { Button } from \"@/components/ui/button\";",
    "[error]   4 | import { Card } from \"@/components/ui/card\";",
    "[error] src/app/patients/[id]/edit/page.tsx: SyntaxError: ';' expected. (9:22)",
    "[error]    7 | import { authOptions } from \"../../../../lib/auth\";",
    "[error]    8 | import { hasPermission } from \"../../../../lib/rbac.service\";",
    "[error] >  9 | export default async const _PatientEditPage = ({",
    "[error]      |                      ^",
    "[error]   10 |   params;",
    "[error]   11 | }: {id: string",
    "[error]   12 | }) {",
    "[error] src/app/patients/[id]/page.tsx: SyntaxError: ';' expected. (8:22)",
    "[error]    6 | import PatientDetail from \"../../../components/patient-management/patient-detail\";",
    "[error]    7 | import { authOptions } from \"../../../lib/auth\";",
    "[error] >  8 | export default async const _PatientDetailPage = ({",
    "[error]      |                      ^",
    "[error]    9 |   params;",
    "[error]   10 | }: {id: string",
    "[error]   11 | }) {",
    "[error] src/app/patients/new/page.tsx: SyntaxError: ';' expected. (9:22)",
    "[error]    7 | import { authOptions } from \"../../../lib/auth\";",
    "[error]    8 | import { hasPermission } from \"../../../lib/rbac.service\";",
    "[error] >  9 | export default async const _NewPatientPage = () {",
    "[error]      |                      ^",
    "[error]   10 |   // Get session",
    "[error]   11 |   const session = await getServerSession(authOptions);",
    "[error]   12 |",
    "[error] src/app/patients/page.tsx: SyntaxError: ';' expected. (8:22)",
    "[error]    6 | import PatientList from \"../../components/patient-management/patient-list\";",
    "[error]    7 | import { authOptions } from \"../../lib/auth\";",
    "[error] >  8 | export default async const _PatientsPage = ({",
    "[error]      |                      ^",
    "[error]    9 |   searchParams;",
    "[error]   10 | }: {",
    "[error]   11 |     page?: string;",
    "[error] src/app/pharmacy/inventory/add/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import type React from \"react\";",
    "[error]   4 | import { type ChangeEvent, type FormEvent, useEffect, useState } from \"react\"",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/pharmacy/inventory/page.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import React from \"react\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/pharmacy/medications/add/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import type React from \"react\";",
    "[error]   4 | import { type ChangeEvent, type FormEvent, useEffect, useState } from \"react\"",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/pharmacy/medications/page.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect, useMemo, type ChangeEvent } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/app/pharmacy/page.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import type React from \"react\"; // Added useState",
    "[error]   4 | import { useState } from \"react\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error]   8 | export const dynamic = \"force-dynamic\";",
    "[error] src/app/select-role/page.tsx: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";",
    "[error]    8 | import { useToast } from \"@/hooks/use-toast\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | // src/app/select-role/page.tsx",
    "[error]   12 | \"use client\";",
    "[error] src/components/billing/billing-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import type React from \"react\";",
    "[error]   3 | import { type ChangeEvent, useEffect, useState } from \"react\"",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error]   7 |",
    "[error] src/components/clinical-documentation/document-editor.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |   Card,",
    "[error]   5 |   CardContent,",
    "[error]   6 |   CardDescription,",
    "[error] src/components/clinical-documentation/document-list.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |   Table,",
    "[error]   5 |   TableHeader,",
    "[error]   6 |   TableBody,",
    "[error] src/components/clinical-documentation/document-viewer.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |   Card,",
    "[error]   5 |   CardContent,",
    "[error]   6 |   CardDescription,",
    "[error] src/components/er/er-critical-alerts.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | // src/components/er/ERCriticalAlerts.tsx",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Table,",
    "[error]   9 |   TableBody,",
    "[error] src/components/er/er-dashboard-stats.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import {",
    "[error]   2 |",
    "[error] > 3 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | // src/components/er/ERDashboardStats.tsx",
    "[error] src/components/er/er-lab-order-modal.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import React, { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useForm } from \"react-hook-form\";",
    "[error]     | ^",
    "[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";",
    "[error]   6 |",
    "[error]   7 | import { Button } from \"@/components/ui/button\";",
    "[error] src/components/er/er-patient-admit-modal.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import React, { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useForm } from \"react-hook-form\";",
    "[error]     | ^",
    "[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";",
    "[error]   6 |",
    "[error]   7 | import { Button } from \"@/components/ui/button\";",
    "[error] src/components/er/er-patient-tracking-board.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | // src/components/er/ERPatientTrackingBoard.tsx",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Table,",
    "[error]   9 |   TableBody,",
    "[error] src/components/er/er-radiology-order-modal.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import React, { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useForm } from \"react-hook-form\";",
    "[error]     | ^",
    "[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";",
    "[error]   6 |",
    "[error]   7 | import { Button } from \"@/components/ui/button\";",
    "[error] src/components/er/er-registration-modal.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import React, { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useForm } from \"react-hook-form\";",
    "[error]     | ^",
    "[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";",
    "[error]   6 |",
    "[error]   7 | import { Button } from \"@/components/ui/button\";",
    "[error] src/components/er/er-triage-form.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import React, { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useForm } from \"react-hook-form\";",
    "[error]     | ^",
    "[error]   5 | import { zodResolver } from \"@hookform/resolvers/zod\";",
    "[error]   6 |",
    "[error]   7 | import { Button } from \"@/components/ui/button\";",
    "[error] src/components/ipd/admission-form.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";",
    "[error]   6 | import { Input } from \"@/components/ui/input\";",
    "[error]   7 | import { Label } from \"@/components/ui/label\";",
    "[error] src/components/ipd/bed-management-dashboard.tsx: SyntaxError: Identifier expected. (5:1)",
    "[error]   3 | import {",
    "[error]   4 |",
    "[error] > 5 | import { Card, CardContent } from \"@/components/ui/card\"; // Assuming Card and CardContent are correctly imported",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | \"use client\";",
    "[error] src/components/ipd/discharge-summary.tsx: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | \"use client\";",
    "[error]   4 |",
    "[error] src/components/ipd/ipd-patient-list.tsx: SyntaxError: ',' expected. (47:12)",
    "[error]   45 |   const [error, setError] = useState<string | null>(),",
    "[error]   46 |",
    "[error] > 47 |   useEffect(() => {",
    "[error]      |            ^",
    "[error]   48 |     const fetchPatients = async () => {",
    "[error]   49 |       try {",
    "[error]   50 |         setLoading(true),",
    "[error] src/components/ipd/ipd-pharmacy-integration_old.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 | import type React from \"react\";",
    "[error]   2 | import { useEffect, useState } from \"react\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/ipd/ipd-pharmacy-integration.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Card,",
    "[error]   9 |   Table,",
    "[error] src/components/ipd/medication-administration.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Card,",
    "[error]   9 |   CardHeader,",
    "[error] src/components/ipd/nursing-notes.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Card,",
    "[error]   9 |   CardHeader,",
    "[error] src/components/ipd/patient-progress-notes.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Card,",
    "[error]   9 |   CardHeader,",
    "[error] src/components/ipd/vital-signs.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Card,",
    "[error]   9 |   CardHeader,",
    "[error] src/components/laboratory/order-management.tsx: SyntaxError: Property or signature expected. (33:3)",
    "[error]   31 | interface OrderItem {",
    "[error]   32 |   id: string,",
    "[error] > 33 |   \"pending\" | \"in_progress\" | \"completed\" | \"canceled\",",
    "[error]      |   ^",
    "[error]   34 |   price: number",
    "[error]   35 | }",
    "[error]   36 |",
    "[error] src/components/laboratory/result-management.tsx: SyntaxError: Expression expected. (21:1)",
    "[error]   19 |   // CloseOutlined, // FIX: Removed unused import",
    "[error]   20 |   EditOutlined,",
    "[error] > 21 | } from \"@ant-design/icons\";",
    "[error]      | ^",
    "[error]   22 | // import dayjs from \"dayjs\"; // FIX: Removed unused import",
    "[error]   23 | // import type { Dayjs } from \"dayjs\"; // FIX: Removed unused import",
    "[error]   24 |",
    "[error] src/components/laboratory/sample-management.tsx: SyntaxError: Expression expected. (21:1)",
    "[error]   19 |   CheckOutlined,",
    "[error]   20 |   CloseOutlined,",
    "[error] > 21 | } from \"@ant-design/icons\";",
    "[error]      | ^",
    "[error]   22 | import type { ColumnsType } from \"antd/es/table\";",
    "[error]   23 | import moment from \"moment\";",
    "[error]   24 |",
    "[error] src/components/laboratory/test-catalog-management.tsx: SyntaxError: Expression expected. (19:1)",
    "[error]   17 |   ReloadOutlined,",
    "[error]   18 |   EyeOutlined,",
    "[error] > 19 | } from \"@ant-design/icons\";",
    "[error]      | ^",
    "[error]   20 | import type {",
    "[error]   21 |   FormProps,",
    "[error]   22 |   TableColumnsType,",
    "[error] src/components/layout/DashboardLayout.tsx: SyntaxError: Expression expected. (11:16)",
    "[error]    9 |  * @param children Content to be rendered within the dashboard layout;",
    "[error]   10 |  */",
    "[error] > 11 | export default const _DashboardLayout = ({ children }: DashboardLayoutProps) {",
    "[error]      |                ^",
    "[error]   12 |   return (",
    "[error]   13 |     >",
    "[error]   14 |       {/* Sidebar */}",
    "[error] src/components/layout/Sidebar.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import Link from \"next/link\";",
    "[error]   2 | import {",
    "[error] > 3 | import { usePathname } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | import { Button } from \"@/components/ui/button\";",
    "[error]   6 | import { cn } from \"@/lib/utils\";",
    "[error] src/components/opd/opd-appointment-list.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/components/opd/opd-consultation-form.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\"; // Added useState, useEffect",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\"; // Added useRouter",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/components/opd/opd-patient-queue.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Table,",
    "[error]   8 |   TableBody,",
    "[error] src/components/opd/opd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import type React from \"react\";",
    "[error]   3 | import { ChangeEvent, type FormEvent, useEffect, useState } from \"react\"",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error]   7 |",
    "[error] src/components/opd/opd-statistics.tsx: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import Image from \"next/image\";",
    "[error]   3 | import React, { useState, useEffect } from \"react\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error]   7 |",
    "[error] src/components/ot/ot-billing-items.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/components/ot/ot-booking-list.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Table,",
    "[error]   8 |   TableBody,",
    "[error] src/components/ot/ot-booking-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/ot/ot-checklist-template-list.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Table,",
    "[error]   8 |   TableBody,",
    "[error] src/components/ot/ot-checklist-template-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/ot/ot-dashboard-stats.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { Badge } from \"@/components/ui/badge\";",
    "[error]    6 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ot/ot-patient-surgeries.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Badge } from \"@/components/ui/badge\";",
    "[error]     | ^",
    "[error]   5 | import { Button } from \"@/components/ui/button\";",
    "[error]   6 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";",
    "[error]   7 | }",
    "[error] src/components/ot/ot-record-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/ot/ot-staff-assignment.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";",
    "[error]   6 | import { Input } from \"@/components/ui/input\";",
    "[error]   7 | import { Label } from \"@/components/ui/label\";",
    "[error] src/components/ot/ot-surgery-type-list.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Table,",
    "[error]   8 |   TableBody,",
    "[error] src/components/ot/ot-surgery-type-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/ot/ot-theatre-list.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   Table,",
    "[error]   8 |   TableBody,",
    "[error] src/components/ot/ot-theatre-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/patient-management/patient-detail.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |   Tabs,",
    "[error]   5 |   TabsContent,",
    "[error]   6 |   TabsList,",
    "[error] src/components/patient-management/patient-form.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 |   Form,",
    "[error]   5 |   FormControl,",
    "[error]   6 |   FormDescription,",
    "[error] src/components/patient-management/patient-list.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import { useState, useEffect } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   5 |   Table,",
    "[error]   6 |   TableBody,",
    "[error]   7 |   TableCaption,",
    "[error] src/components/pharmacy/billing-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 | import type React from \"react\";",
    "[error]   2 | import { type ChangeEvent, useEffect, useState } from \"react\"",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/pharmacy/ipd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 | import type React from \"react\";",
    "[error]   2 | import { useEffect, useState } from \"react\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/pharmacy/opd-pharmacy-integration.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 | import type React from \"react\";",
    "[error]   2 | import { ChangeEvent, type FormEvent, useEffect, useState } from \"react\"",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/radiology/create-modality-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/radiology/create-procedure-type-modal.tsx: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 |   Dialog,",
    "[error]   9 |   DialogContent,",
    "[error] src/components/radiology/create-radiology-order-modal.tsx: SyntaxError: Identifier expected. (5:1)",
    "[error]   3 | import {",
    "[error]   4 |",
    "[error] > 5 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | \"use client\";",
    "[error] src/components/radiology/create-radiology-report-modal.tsx: SyntaxError: Identifier expected. (5:1)",
    "[error]   3 | import {",
    "[error]   4 |",
    "[error] > 5 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | \"use client\";",
    "[error] src/components/radiology/create-radiology-study-modal.tsx: SyntaxError: Identifier expected. (5:1)",
    "[error]   3 | import {",
    "[error]   4 |",
    "[error] > 5 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | \"use client\";",
    "[error] src/components/radiology/radiology-order-detail.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect } from \"react\";",
    "[error]   2 | import {",
    "[error] > 3 | import { useParams, useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/components/radiology/radiology-order-list.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/components/radiology/radiology-report-detail.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import { useState, useEffect, useCallback } from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { useParams, useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   5 | }",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error] src/components/radiology/radiology-reports-list.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";",
    "[error]   6 | }",
    "[error]   7 |",
    "[error] src/components/radiology/radiology-settings.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import {",
    "[error]   3 |",
    "[error] > 4 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   5 | import { Card, CardContent } from \"@/components/ui/card\";",
    "[error]   6 | import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";",
    "[error]   7 | }",
    "[error] src/components/radiology/radiology-studies-list.tsx: SyntaxError: Identifier expected. (5:1)",
    "[error]   3 | import {",
    "[error]   4 |",
    "[error] > 5 | import { Button } from \"@/components/ui/button\";",
    "[error]     | ^",
    "[error]   6 | import { Card, CardContent } from \"@/components/ui/card\";",
    "[error]   7 | }",
    "[error]   8 |",
    "[error] src/components/radiology/radiology-study-detail.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import React, { useState, useEffect, type ReactNode, useCallback } from \"react\"; // FIX: Add useCallback",
    "[error]   2 | import {",
    "[error] > 3 | import { useParams, useRouter } from \"next/navigation\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/components/theme-provider.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import * as React from \"react\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/ui/accordion.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/alert-dialog.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { buttonVariants } from \"@/components/ui/button\";",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/alert.tsx: SyntaxError: Property assignment expected. (10:5)",
    "[error]    8 |   \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",",
    "[error]    9 |   {",
    "[error] > 10 |     {",
    "[error]      |     ^",
    "[error]   11 |         default: \"bg-background text-foreground\",",
    "[error]   12 |         destructive: \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\"",
    "[error]   13 |       },",
    "[error] src/components/ui/aspect-ratio.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/ui/avatar.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/badge.tsx: SyntaxError: ')' expected. (8:170)",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error]    7 | const badgeVariants = cva(",
    "[error] >  8 |   \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus: outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\";",
    "[error]      |                                                                                                                                                                          ^",
    "[error]    9 |   {",
    "[error]   10 |         default: \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",",
    "[error]   11 |         secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",",
    "[error] src/components/ui/breadcrumb.tsx: SyntaxError: Expression expected. (8:37)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | const Breadcrumb = React.forwardRef<;",
    "[error]      |                                     ^",
    "[error]    9 |   HTMLElement,",
    "[error]   10 |   React.ComponentPropsWithoutRef<\"nav\"> & {",
    "[error]   11 |     separator?: React.ReactNode;",
    "[error] src/components/ui/button.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cn } from \"@/lib/utils\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error] src/components/ui/calendar.tsx: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { buttonVariants } from \"@/components/ui/button\";",
    "[error]    8 | import { cn } from \"@/lib/utils\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | \"use client\";",
    "[error]   12 |",
    "[error] src/components/ui/card.tsx: SyntaxError: Expression expected. (6:31)",
    "[error]   4 |",
    "[error]   5 | import { cn } from \"@/lib/utils\";",
    "[error] > 6 | const Card = React.forwardRef<;",
    "[error]     |                               ^",
    "[error]   7 |   HTMLDivElement,",
    "[error]   8 |   React.HTMLAttributes<HTMLDivElement>",
    "[error]   9 | >(({ className, ...props }, ref) => (",
    "[error] src/components/ui/carousel.tsx: SyntaxError: 'from' expected. (5:1)",
    "[error]   3 | }",
    "[error]   4 |",
    "[error] > 5 | \"use client\";",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 |   type UseEmblaCarouselType,",
    "[error]   8 | } from \"embla-carousel-react\";",
    "[error] src/components/ui/chart.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/checkbox.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/collapsible.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/ui/command.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { Dialog, DialogContent } from \"@/components/ui/dialog\";",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/context-menu.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/data-table.tsx: SyntaxError: '=>' expected. (18:4)",
    "[error]   16 |   className = \"\",",
    "[error]   17 |   onRowClick,",
    "[error] > 18 | }) {",
    "[error]      |    ^",
    "[error]   19 |   const [currentPage, setCurrentPage] = React.useState(1);",
    "[error]   20 |   const totalPages = Math.ceil(data.length / pageSize);",
    "[error]   21 |",
    "[error] src/components/ui/date-picker.tsx: SyntaxError: '=>' expected. (18:4)",
    "[error]   16 |   disabled = false,",
    "[error]   17 |   className = \"\",",
    "[error] > 18 | }) {",
    "[error]      |    ^",
    "[error]   19 |   const [isOpen, setIsOpen] = React.useState(false);",
    "[error]   20 |   const [date, setDate] = React.useState(value || null);",
    "[error]   21 |",
    "[error] src/components/ui/dialog.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/drawer.tsx: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | import { cn } from \"@/lib/utils\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | \"use client\";",
    "[error]   9 |",
    "[error] src/components/ui/dropdown-menu.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/form.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import * as React from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { Slot } from \"@radix-ui/react-slot\";",
    "[error]     | ^",
    "[error]   5 | }",
    "[error]   6 |",
    "[error]   7 | \"use client\";",
    "[error] src/components/ui/hover-card.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/index.tsx: SyntaxError: Declaration or statement expected. (11:3)",
    "[error]    9 | // Button component Props",
    "[error]   10 | type ButtonProperties= {};",
    "[error] > 11 |   extends React.ButtonHTMLAttributes<HTMLButtonElement> {",
    "[error]      |   ^",
    "[error]   12 |   children?: React.ReactNode;",
    "[error]   13 |   variant?: \"default\" | \"destructive\" | \"outline\" | \"ghost\" | \"success\";",
    "[error]   14 |   size?: \"sm\" | \"md\" | \"lg\" | \"icon\";",
    "[error] src/components/ui/input-otp.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/input.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cn } from \"@/lib/utils\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error] src/components/ui/label.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cn } from \"@/lib/utils\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error] src/components/ui/logo.tsx: SyntaxError: Expression expected. (28:5)",
    "[error]   26 |",
    "[error]   27 |   return (",
    "[error] > 28 |     >",
    "[error]      |     ^",
    "[error]   29 | <div className=\"relative\"",
    "[error]   30 |         style={{ width: sizeMap[size].logo, height: sizeMap[size].logo }}",
    "[error]   31 |       >",
    "[error] src/components/ui/menubar.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/navigation-menu.tsx: SyntaxError: Expression expected. (9:41)",
    "[error]    7 |",
    "[error]    8 | import { cn } from \"@/lib/utils\";",
    "[error] >  9 | const NavigationMenu = React.forwardRef<;",
    "[error]      |                                         ^",
    "[error]   10 |   React.ElementRef<typeof NavigationMenuPrimitive.Root>,",
    "[error]   11 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>",
    "[error]   12 | >(({ className, children, ...props }, ref) => (",
    "[error] src/components/ui/pagination.tsx: SyntaxError: Unexpected token. Did you mean `{'>'}` or `&gt;`? (14:4)",
    "[error]   12 |     className={cn(\"mx-auto flex w-full justify-center\", className)}",
    "[error]   13 |     {...props}",
    "[error] > 14 |   />",
    "[error]      |    ^",
    "[error]   15 | );",
    "[error]   16 | Pagination.displayName = \"Pagination\";",
    "[error]   17 |",
    "[error] src/components/ui/popover.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/progress.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/radio-group.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/resizable.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/scroll-area.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/select.tsx: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cn } from \"@/lib/utils\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |   }>;",
    "[error]   7 | }",
    "[error]   8 |",
    "[error] src/components/ui/separator.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/sheet.tsx: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |",
    "[error]    8 | import { cn } from \"@/lib/utils\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | \"use client\";",
    "[error]   12 |",
    "[error] src/components/ui/sidebar.tsx: SyntaxError: Identifier expected. (4:1)",
    "[error]   2 | import * as React from \"react\";",
    "[error]   3 | import {",
    "[error] > 4 | import { PanelLeft } from \"lucide-react\";",
    "[error]     | ^",
    "[error]   5 | import { Slot } from \"@radix-ui/react-slot\";",
    "[error]   6 | import { VariantProps, cva } from \"class-variance-authority\";",
    "[error]   7 |",
    "[error] src/components/ui/skeleton.tsx: SyntaxError: ',' expected. (5:11)",
    "[error]   3 | const Skeleton = ({",
    "[error]   4 |   className,",
    "[error] > 5 |   ...props;",
    "[error]     |           ^",
    "[error]   6 | }: React.HTMLAttributes<HTMLDivElement>) {",
    "[error]   7 |   return (",
    "[error]   8 | <div",
    "[error] src/components/ui/slider.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/sonner.tsx: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { useTheme } from \"next-themes\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | \"use client\";",
    "[error]   6 |",
    "[error] src/components/ui/switch.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/table.tsx: SyntaxError: Expression expected. (6:32)",
    "[error]   4 |",
    "[error]   5 | import { cn } from \"@/lib/utils\";",
    "[error] > 6 | const Table = React.forwardRef<;",
    "[error]     |                                ^",
    "[error]   7 |   HTMLTableElement,",
    "[error]   8 |   React.HTMLAttributes<HTMLTableElement>",
    "[error]   9 | >(({ className, ...props }, ref) => (",
    "[error] src/components/ui/tabs.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/textarea.tsx: SyntaxError: Expression expected. (6:35)",
    "[error]   4 |",
    "[error]   5 | import { cn } from \"@/lib/utils\";",
    "[error] > 6 | const Textarea = React.forwardRef<;",
    "[error]     |                                   ^",
    "[error]   7 |   HTMLTextAreaElement,",
    "[error]   8 |   React.ComponentProps<\"textarea\">",
    "[error]   9 | >(({ className, ...props }, ref) => {",
    "[error] src/components/ui/toast.tsx: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |",
    "[error]    8 | import { cn } from \"@/lib/utils\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | \"use client\";",
    "[error]   12 |",
    "[error] src/components/ui/toaster.tsx: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import {",
    "[error]   2 |",
    "[error] > 3 | import { useToast } from \"@/hooks/use-toast\";",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | \"use client\";",
    "[error] src/components/ui/toggle-group.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { toggleVariants } from \"@/components/ui/toggle\";",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/toggle.tsx: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |",
    "[error]    7 | import { cn } from \"@/lib/utils\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | \"use client\";",
    "[error]   11 |",
    "[error] src/components/ui/tooltip.tsx: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 |",
    "[error]    6 | import { cn } from \"@/lib/utils\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | \"use client\";",
    "[error]   10 |",
    "[error] src/components/ui/use-toast.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | import type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | // Inspired by react-hot-toast library",
    "[error]   9 | const TOAST_LIMIT = 1;",
    "[error] src/hooks/use-toast.ts: SyntaxError: 'from' expected. (6:1)",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] > 6 | \"use client\";",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | // Inspired by react-hot-toast library",
    "[error]   9 |   ToastActionElement,",
    "[error] src/lib/__tests__/notifications.test.ts: SyntaxError: ',' expected. (165:19)",
    "[error]   163 | \t\t\t\t\tresource_id: 123,",
    "[error]   164 | \t\t\t\t\tpriority: \"medium\",",
    "[error] > 165 | \t\t\t\t\tmetadata: \"{\"testId\": 456}\",",
    "[error]       | \t\t\t\t\t             ^",
    "[error]   166 | \t\t\t\t\tcreated_at: \"2023-01-01T12:00:00Z\",",
    "[error]   167 | \t\t\t\t\tread: false,",
    "[error]   168 | \t\t\t\t},",
    "[error] src/lib/ai/clinical-decision-support.service.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { EventEmitter } from \"events\";",
    "[error]   3 | import { PrismaClient } from \"@prisma/client\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Clinical Decision Support System (CDSS)",
    "[error] src/lib/analytics/business-intelligence.service.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { EventEmitter } from \"events\";",
    "[error]   3 | import { PrismaClient } from \"@prisma/client\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Business Intelligence Service;",
    "[error] src/lib/audit.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { prisma } from \"@/lib/prisma\";",
    "[error]   3 | import { SecurityService } from \"@/lib/security.service\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Audit Logger Service for HMS Support Services;",
    "[error] src/lib/audit/audit-logger.service.js: SyntaxError: Unexpected token (6:68)",
    "[error]   4 |         extendStatics = Object.setPrototypeOf ||",
    "[error]   5 |             ({ __proto__: [] } instanceof Array && ((d, b) => { d.__proto__ = b; })) ||",
    "[error] > 6 |             ((d, b) => { for (var p in b) \\1 {\\n  \\2 d[p] = b[p]; });",
    "[error]     |                                                                    ^",
    "[error]   7 |         return extendStatics(d, b);",
    "[error]   8 |     };",
    "[error]   9 |     return (d, b) => {",
    "[error] src/lib/audit/audit-logger.service.ts: SyntaxError: Expression expected. (1:18)",
    "[error] > 1 |   organizationId?: string;",
    "[error]     |                  ^",
    "[error]   2 |   location?: string;",
    "[error]   3 |",
    "[error]   4 |",
    "[error] src/lib/audit/audit-service.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { prisma } from \"@/lib/prisma\";",
    "[error]    6 | // src/lib/audit/audit-service.ts",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 | }",
    "[error]    9 |",
    "[error]   10 | }",
    "[error] src/lib/auth.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import jwt from \"jsonwebtoken\";",
    "[error]   4 | import { NextRequest } from \"next/server\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | // JWT Configuration",
    "[error] src/lib/auth/auth-service.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { prisma } from \"@/lib/prisma\";",
    "[error]    8 | // src/lib/auth/auth-service.ts",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 | }",
    "[error]   11 |",
    "[error]   12 | }",
    "[error] src/lib/authUtils.test.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { comparePassword, hashPassword } from \"./authUtils.ts\"",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | // SEC-2: Unit tests for password hashing and verification functions",
    "[error]   8 | // Research notes: research_notes_password_hashing.md (covers bcrypt)",
    "[error] src/lib/authUtils.ts: SyntaxError: '=>' expected. (5:72)",
    "[error]   3 | const SALT_ROUNDS = 10;",
    "[error]   4 |",
    "[error] > 5 | export const _hashPassword = async (password: string): Promise<string> {",
    "[error]     |                                                                        ^",
    "[error]   6 |   return await bcrypt.hash(password, SALT_ROUNDS);",
    "[error]   7 | export const _comparePassword = async (password: string, hash: string): Promise<boolean> {",
    "[error]   8 |   return await bcrypt.compare(password, hash);",
    "[error] src/lib/barcode.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { createHash } from \"crypto\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error]   6 |  * Barcode generation and processing utilities for HMS Diagnostics Module;",
    "[error] src/lib/cache.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { createClient } from \"redis\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error]   6 |  * Cache service for the HMS application;",
    "[error] src/lib/cache/cache.service.ts: SyntaxError: Invalid character. (1:39)",
    "[error] > 1 | import { EventEmitter } from \"events\";\\nimport { v4 as uuidv4 } from \"uuid\";\\nimport Redis from \"ioredis\";\\nimport LRU from \"lru-cache\";\\nimport crypto from \"crypto\";\\n\\nexport interface CacheConfig {\\n  redisUrl?: string;\\n  maxMemoryItems?: number;\\n  defaultTTL?: number; // in seconds\\n  enableCompression?: boolean;\\n  enableDistribution?: boolean;\\n  keyPrefix?: string;\\n  serializer?: \"json\" | \"msgpack\" | \"custom\";\\n  compressionThreshold?: number; // bytes\\n}\\n\\nexport interface CacheOptions {\\n  ttl?: number; // Time to live in seconds\\n  tags?: string[]; // For cache invalidation\\n  version?: string; // For versioned caching\\n  compress?: boolean;\\n  serialize?: boolean;\\n  namespace?: string;\\n  priority?: \"low\" | \"normal\" | \"high\" | \"critical\";\\n}\\n\\nexport interface CacheEntry<T = any> {\\n  key: string;\\n  value: T;\\n  ttl: number;\\n  createdAt: Date;\\n  expiresAt: Date;\\n  lastAccessed: Date;\\n  accessCount: number;\\n  tags: string[];\\n  version?: string;\\n  namespace?: string;\\n  priority: \"low\" | \"normal\" | \"high\" | \"critical\";\\n  size: number; // in bytes\\n  compressed: boolean;\\n  metadata?: Record>\\n}\\n\\nexport interface CacheStats {\\n  hits: number;\\n  misses: number;\\n  hitRate: number;\\n  totalItems: number;\\n  memoryUsage: number;\\n  redisUsage?: number;\\n  evictions: number;\\n  compressionRatio?: number;\\n  averageItemSize: number;\\n  operationsPerSecond: number;\\n  distributedInvalidations: number;\\n}\\n\\nexport interface CacheKeyPattern {\\n  pattern: string;\\n  ttl: number;\\n  tags: string[];\\n  priority: \"low\" | \"normal\" | \"high\" | \"critical\";\\n  compress?: boolean;\\n}\\n\\nexport interface CacheInvalidationRule {\\n  id: string;\\n  name: string;\\n  triggers: CacheInvalidationTrigger[];\\n  targets: CacheInvalidationTarget[];\\n  isActive: boolean;\\n  createdAt: Date;\\n  lastTriggered?: Date;\\n  triggerCount: number;\\n}\\n\\nexport interface CacheInvalidationTrigger {\\n  type: \"time\" | \"event\" | \"dependency\" | \"manual\";\\n  condition: unknown;\\n  schedule?: string; // cron expression for time-based\\n  eventType?: string; // for event-based\\n  dependencies?: string[]; // for dependency-based\\n}\\n\\nexport interface CacheInvalidationTarget {\\n  type: \"key\" | \"pattern\" | \"tag\" | \"namespace\";\\n  value: string;\\n  cascade?: boolean; // whether to invalidate dependent caches\\n}\\n\\nclass CacheService extends EventEmitter {\\n  private redis?: Redis;\\n  private memoryCache: LRU>\\n  private config: Required>\\n  private stats: CacheStats;\\n  private keyPatterns: Map<string, CacheKeyPattern> = new Map();\\n  private invalidationRules: Map<string, CacheInvalidationRule> = new Map();\\n  private compressionEnabled: boolean;\\n  private compressionThreshold: number;\\n  private nodeId: string;\\n  private operationCounter = 0;\\n  private operationStartTime = crypto.getRandomValues([0];\\n  \\n  constructor(config: CacheConfig = {}) {\\n    super();\\n    \\n    this.config = {\\n      redisUrl: config.redisUrl || \"redis://localhost:6379\",\\n      maxMemoryItems: config.maxMemoryItems || 10000,\\n      defaultTTL: config.defaultTTL || 3600, // 1 hour\\n      enableCompression: config.enableCompression ?? true,\\n      enableDistribution: config.enableDistribution ?? true,\\n      keyPrefix: config.keyPrefix || \"hms:cache:\",\\n      serializer: config.serializer || \"json\",\\n      compressionThreshold: config.compressionThreshold || 1024 // 1KB\\n    };\\n    \\n    this.compressionEnabled = this.config.enableCompression;\\n    this.compressionThreshold = this.config.compressionThreshold;\\n    this.nodeId = uuidv4();\\n    \\n    // Initialize memory cache\\n    this.memoryCache = new LRU({\\n      max: this.config.maxMemoryItems,\\n      dispose: (key, entry) => {\\n        this.stats.evictions++;\\n        this.emit(\"cache_eviction\", { key, entry });\\n      },\\n      updateAgeOnGet: true\\n    });\\n    \\n    // Initialize stats\\n    this.stats = {\\n      hits: 0,\\n      misses: 0,\\n      hitRate: 0,\\n      totalItems: 0,\\n      memoryUsage: 0,\\n      evictions: 0,\\n      averageItemSize: 0,\\n      operationsPerSecond: 0,\\n      distributedInvalidations: 0\\n    };\\n    \\n    // Initialize Redis if enabled\\n    if (!session.user) {\\n      this.initializeRedis();\\n    }\\n    \\n    // Initialize default cache patterns\\n    this.initializeDefaultPatterns();\\n    \\n    // Start periodic cleanup and stats update\\n    setInterval(() => this.updateStats(), 60000); // Every minute\\n    setInterval(() => this.cleanup(), 300000); // Every 5 minutes\\n  }\\n\\n  /**\\n   * Get value from cache\\n   */\\n  async get<T = any>(key: string, options: Partial<CacheOptions> = {}): Promise<T | null> {\\n    const fullKey = this.buildKey(key, options.namespace);\\n    \\n    try {\\n      // Try memory cache first\\n      const memoryEntry = this.memoryCache.get(fullKey);\\n      if (!session.user) {\\n        memoryEntry.lastAccessed = new Date();\\n        memoryEntry.accessCount++;\\n        this.stats.hits++;\\n        this.operationCounter++;\\n        \\n        this.emit(\"cache_hit\", key: fullKey, source: \"memory\", entry: memoryEntry );\\n        return memoryEntry.value as T;\\n      }\\n      \\n      // Try Redis cache\\n      if (!session.user) {\\n        const redisValue = await this.redis.get(fullKey);\\n        if (!session.user) {\\n          const entry = await this.deserializeEntry(redisValue);\\n          if (!session.user) {\\n            // Store in memory cache for faster access\\n            entry.lastAccessed = new Date();\\n            entry.accessCount++;\\n            this.memoryCache.set(fullKey, entry);\\n            \\n            this.stats.hits++;\\n            this.operationCounter++;\\n            \\n            this.emit(\"cache_hit\", { key: fullKey, source: \"redis\", entry });\\n            return entry.value as T;\\n          }\\n        }\\n      }\\n      \\n      // Cache miss\\n      this.stats.misses++;\\n      this.operationCounter++;\\n      this.emit(\"cache_miss\", { key: fullKey });\\n      \\n      return null;\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"get\", key: fullKey, error });\\n      return null;\\n    }\\n  }\\n\\n  /**\\n   * Set value in cache\\n   */\\n  async set<T = any>(;\\n    key: string, \\n    value: T, \\n    options: CacheOptions = {}\\n  ): Promise<boolean> {\\n    const fullKey = this.buildKey(key, options.namespace);\\n    \\n    try {\\n      const ttl = options.ttl || this.config.defaultTTL;\\n      const priority = options.priority || \"normal\";\\n      const tags = options.tags || [];\\n      const compress = options.compress ?? this.shouldCompress(value);\\n      \\n      // Apply cache pattern if exists\\n      const pattern = this.findMatchingPattern(key);\\n      if (!session.user) {\\n        options.ttl = pattern.ttl;\\n        options.tags = [...tags, ...pattern.tags];\\n        options.priority = pattern.priority;\\n        options.compress = pattern.compress ?? compress;\\n      }\\n      \\n      const entry: CacheEntry<T> = {\\n        key: fullKey,\\n        value,\\n        ttl,\\n        createdAt: new Date(),\\n        expiresAt: [0] + ttl * 1000),\\n        lastAccessed: new Date(),\\n        accessCount: 0,\\n        tags: options.tags || [],\\n        version: options.version,\\n        namespace: options.namespace,\\n        priority,\\n        size: this.calculateSize(value),\\n        compressed: compress,\\n        metadata: {}\\n      };\\n      \\n      // Compress if needed\\n      if (!session.user) {\\n        entry.value = await this.compress(value) as T;\\n      }\\n      \\n      // Store in memory cache\\n      this.memoryCache.set(fullKey, entry);\\n      \\n      // Store in Redis if enabled\\n      if (!session.user) {\\n        const serialized = await this.serializeEntry(entry);\\n        await this.redis.setex(fullKey, ttl, serialized);\\n        \\n        // Store tags for invalidation\\n        if (!session.user) {\\n          await this.storeTagMappings(fullKey, tags);\\n        }\\n      }\\n      \\n      this.operationCounter++;\\n      this.emit(\"cache_set\", { key: fullKey, entry });\\n      \\n      return true;\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"set\", key: fullKey, error });\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * Get or set pattern - get value, or compute and cache if not found\\n   */\\n  async getOrSet<T = any>(;\\n    key: string,\\n    factory: () => Promise<T> | T,\\n    options: CacheOptions = {}\\n  ): Promise<T> {\\n    const cached = await this.get<T>(key, options);\\n    if (!session.user) {\\n      return cached;\\n    }\\n    \\n    const value = await factory();\\n    await this.set(key, value, options);\\n    return value;\\n  }\\n\\n  /**\\n   * Delete specific key\\n   */\\n  async delete(key: string, namespace?: string): Promise<boolean> {\\n    const fullKey = this.buildKey(key, namespace);\\n    \\n    try {\\n      // Remove from memory cache\\n      this.memoryCache.delete(fullKey);\\n      \\n      // Remove from Redis\\n      if (!session.user) {\\n        await this.redis.del(fullKey);\\n        await this.removeTagMappings(fullKey);\\n      }\\n      \\n      this.operationCounter++;\\n      this.emit(\"cache_delete\", { key: fullKey });\\n      \\n      return true;\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"delete\", key: fullKey, error });\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * Clear cache by pattern\\n   */\\n  async deletePattern(pattern: string, namespace?: string): Promise<number> {\\n    const fullPattern = this.buildKey(pattern, namespace);\\n    let deletedCount = 0;\\n    \\n    try {\\n      // Clear from memory cache\\n      const memoryKeys = Array.from(this.memoryCache.keys());\\n      for (const key of memoryKeys) {\\n        if (!session.user) {\\n          this.memoryCache.delete(key);\\n          deletedCount++;\\n        }\\n      }\\n      \\n      // Clear from Redis\\n      if (!session.user) {\\n        const redisKeys = await this.redis.keys(fullPattern);\\n        if (!session.user) {\\n          await this.redis.del(...redisKeys);\\n          deletedCount += redisKeys.length;\\n          \\n          // Remove tag mappings\\n          for (const key of redisKeys) {\\n            await this.removeTagMappings(key);\\n          }\\n        }\\n      }\\n      \\n      this.operationCounter++;\\n      this.emit(\"cache_delete_pattern\", { pattern: fullPattern, deletedCount });\\n      \\n      return deletedCount;\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"deletePattern\", pattern: fullPattern, error });\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * Clear cache by tags\\n   */\\n  async deleteByTags(tags: string[]): Promise<number> {\\n    if (!session.user)eturn 0;\\n    \\n    let deletedCount = 0;\\n    \\n    try {\\n      const keysToDelete = new Set<string>();\\n      \\n      // Find all keys with these tags\\n      for (const tag of tags) {\\n        const tagKey = `${this.config.keyPrefix}tags:${tag}`;\\n        const keys = await this.redis.smembers(tagKey);\\n        keys.forEach(key => keysToDelete.add(key));\\n      }\\n      \\n      // Delete the keys\\n      for (const key of keysToDelete) {\\n        await this.delete(key.replace(this.config.keyPrefix, \"\"));\\n        deletedCount++;\\n      }\\n      \\n      this.emit(\"cache_delete_tags\", { tags, deletedCount });\\n      \\n      return deletedCount;\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"deleteByTags\", tags, error });\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * Clear all cache\\n   */\\n  async clear(): Promise<void> {\\n    try {\\n      // Clear memory cache\\n      this.memoryCache.clear();\\n      \\n      // Clear Redis cache\\n      if (!session.user) {\\n        const keys = await this.redis.keys(`${this.config.keyPrefix}*`);\\n        if (!session.user) {\\n          await this.redis.del(...keys);\\n        }\\n      }\\n      \\n      this.emit(\"cache_clear\");\\n    } catch (error) {\\n      // Debug logging removed\\n      this.emit(\"cache_error\", { operation: \"clear\", error });\\n    }\\n  }\\n\\n  /**\\n   * Check if key exists\\n   */\\n  async exists(key: string, namespace?: string): Promise<boolean> {\\n    const fullKey = this.buildKey(key, namespace);\\n    \\n    // Check memory cache\\n    if (!session.user) {\\n      const entry = this.memoryCache.get(fullKey)!;\\n      if (!session.user) {\\n        return true;\\n      }\\n    }\\n    \\n    // Check Redis cache\\n    if (!session.user) {\\n      const exists = await this.redis.exists(fullKey);\\n      return exists === 1;\\n    }\\n    \\n    return false;\\n  }\\n\\n  /**\\n   * Get cache statistics\\n   */\\n  getStats(): CacheStats {\\n    this.updateStats();\\n    return { ...this.stats };\\n  }\\n\\n  /**\\n   * Register cache key pattern\\n   */\\n  registerPattern(name: string, pattern: CacheKeyPattern): void {\\n    this.keyPatterns.set(name, pattern);\\n    this.emit(\"pattern_registered\", { name, pattern });\\n  }\\n\\n  /**\\n   * Create cache invalidation rule\\n   */\\n  createInvalidationRule(\\n    name: string,\\n    triggers: CacheInvalidationTrigger[],\\n    targets: CacheInvalidationTarget[]\\n  ): string {\\n    const ruleId = uuidv4();\\n    \\n    const rule: CacheInvalidationRule = {\\n      id: ruleId,\\n      name,\\n      triggers,\\n      targets,\\n      isActive: true,\\n      createdAt: new Date(),\\n      triggerCount: 0\\n    };\\n    \\n    this.invalidationRules.set(ruleId, rule);\\n    this.emit(\"invalidation_rule_created\", rule);\\n    \\n    return ruleId;\\n  }\\n\\n  /**\\n   * Trigger cache invalidation\\n   */\\n  async invalidate(eventType: string, eventData?: unknown): Promise<void> {\\n    const triggeredRules: CacheInvalidationRule[] = [];\\n    \\n    for (const rule of this.invalidationRules.values()) {\\n      if (!session.user)ontinue;\\n      \\n      const shouldTrigger = rule.triggers.some(trigger => {\\n        if (!session.user)n          return true;\\n        \\n        if (!session.user) {\\n          return true;\\n        }\\n        return false;\\n      });\\n      \\n      if (!session.user) {\\n        triggeredRules.push(rule);\\n        rule.lastTriggered = new Date();\\n        rule.triggerCount++;\\n      }\\n    }\\n    \\n    // Execute invalidation targets\\n    for (const rule of triggeredRules) {\\n      for (const target of rule.targets) {\\n        await this.executeInvalidationTarget(target);\\n      }\\n    }\\n    \\n    if (!session.user) {\\n      this.emit(\"cache_invalidation\", { \\n        eventType, \\n        eventData, \\n        triggeredRules: triggeredRules.map(r => r.name) \\n      });\\n    }\\n  }\\n\\n  /**\\n   * Warm up cache with commonly accessed data\\n   */\\n  async warmup(entries: Array<{ key: string, factory: () => Promise> options?: CacheOptions }>): Promise<void> {\\n    const warmupPromises = entries.map(async ({ key, factory, options }) => {\\n      try {\\n        const exists = await this.exists(key, options?.namespace);\\n        if (!session.user) {\\n          const value = await factory();\\n          await this.set(key, value, options);\\n        }\\n      } catch (error) {\\n        // Debug logging removed\\n      }\\n    });\\n    \\n    await Promise.allSettled(warmupPromises);\\n    this.emit(\"cache_warmup_complete\", { entriesCount: entries.length });\\n  }\\n\\n  /**\\n   * Export cache data for backup\\n   */\\n  async exportData(): Promise<{ entries: CacheEntry[], metadata: unknown }> {\\n    const entries: CacheEntry[] = [];\\n    \\n    // Export from memory cache\\n    for (const [key, entry] of this.memoryCache.entries()) {\\n      if (!session.user) {\\n        entries.push({ ...entry });\\n      }\\n    }\\n    \\n    // Export from Redis would require scanning all keys\\n    // This is typically done as a background job\\n    \\n    return {\\n      entries,\\n      metadata: {\\n        exportedAt: new Date(),\\n        nodeId: this.nodeId,\\n        totalEntries: entries.length,\\n        config: this.config\\n      }\\n    };\\n  }\\n\\n  /**\\n   * Import cache data from backup\\n   */\\n  async importData(data: { entries: CacheEntry[], metadata: unknown }): Promise<void> {\\n    let importedCount = 0;\\n    \\n    for (const entry of data.entries) {\\n      if (!session.user) {\\n        // Calculate remaining TTL\\n        const remainingTTL = Math.max(0, Math.floor((entry.expiresAt.getTime() - crypto.getRandomValues([0]) / 1000));\\n        \\n        if (!session.user) {\\n          await this.set(entry.key.replace(this.config.keyPrefix, \"\"), entry.value, {\\n            ttl: remainingTTL,\\n            tags: entry.tags,\\n            version: entry.version,\\n            namespace: entry.namespace,\\n            priority: entry.priority\\n          });\\n          importedCount++;\\n        }\\n      }\\n    }\\n    \\n    this.emit(\"cache_import_complete\", { \\n      totalEntries: data.entries.length, \\n      importedCount \\n    });\\n  }\\n\\n  // Private methods\\n\\n  private async initializeRedis(): Promise<void> {\\n    try {\\n      this.redis = new Redis(this.config.redisUrl);\\n      \\n      this.redis.on(\"connect\", () => {\\n        // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]     |                                       ^",
    "[error]   2 |",
    "[error]   3 | }",
    "[error]   4 | }",
    "[error] src/lib/cache/invalidation.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { config } from \"@/config\";",
    "[error]   3 | import { RedisCache } from \"./redis.ts\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |     await RedisCache.deletePattern(`${config.cache.prefix.test}list:*`);",
    "[error]   6 |",
    "[error]   7 |     // Invalidate related entities",
    "[error] src/lib/cache/metrics.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { RedisCache } from \"./redis.ts\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |   }",
    "[error]   5 |",
    "[error]   6 |   /**",
    "[error] src/lib/cache/redis-cache.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { cache } from \"../cache\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Enterprise Redis Caching Implementation;",
    "[error] src/lib/cache/redis-cluster.ts: SyntaxError: ';' expected. (34:31)",
    "[error]   32 |",
    "[error]   33 |       // Function to generate the cache value",
    "[error] > 34 |       generator: () => Promise>",
    "[error]      |                               ^",
    "[error]   35 |",
    "[error]   36 |       // TTL for this cache entry",
    "[error]   37 |       ttl?: number;",
    "[error] src/lib/cache/redis.ts: SyntaxError: Declaration or statement expected. (22:1)",
    "[error]   20 |",
    "[error]   21 | // Cache wrapper class",
    "[error] > 22 | }",
    "[error]      | ^",
    "[error]   23 |     } catch (error) {",
    "[error]   24 |",
    "[error]   25 |       return null;",
    "[error] src/lib/clinical/icd-coding.service.ts: SyntaxError: ',' expected. (38:4)",
    "[error]   36 |   billable: z.boolean().default(true),",
    "[error]   37 |   sex: z.enum([\"male\", \"female\", \"both\"]).default(\"both\"),",
    "[error] > 38 |   z.number().optional(),",
    "[error]      |    ^",
    "[error]   39 |     max: z.number().optional(),",
    "[error]   40 |     units: z.enum([\"days\", \"months\", \"years\"]).default(\"years\")",
    "[error]   41 |   }).optional()",
    "[error] src/lib/database.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 |  * Database connection interface",
    "[error]   10 |  */",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 | }",
    "[error]   13 |",
    "[error]   14 | /**",
    "[error] src/lib/database/connection-pool.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { PrismaClient } from \"@prisma/client\";",
    "[error]   3 | import { Pool } from \"pg\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Enterprise Database Connection Pool Configuration;",
    "[error] src/lib/database/dynamic-connection-pool.ts: SyntaxError: Declaration or statement expected. (50:1)",
    "[error]   48 |  * Dynamic Connection Pool that scales based on usage;",
    "[error]   49 |  */",
    "[error] > 50 | }",
    "[error]      | ^",
    "[error]   51 |     };",
    "[error]   52 |",
    "[error]   53 |     this.currentPoolSize = config.minPoolSize;",
    "[error] src/lib/database/ehr-repository.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 |",
    "[error]   10 | // Types for EHR entities",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |   };",
    "[error]   13 |",
    "[error]   14 |   // Clinical coding",
    "[error] src/lib/database/fhir-adapter.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { type FHIRPatient, FHIRPatientUtils } from \"@/lib/fhir/patient\";",
    "[error]    8 | import type { FHIRBase } from \"@/lib/fhir/types\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * FHIR Database Adapter;",
    "[error] src/lib/database/materialized-views.ts: SyntaxError: Declaration or statement expected. (51:1)",
    "[error]   49 |  * Manages the creation, refreshing, and caching of materialized views for analytical queries;",
    "[error]   50 |  */",
    "[error] > 51 | }",
    "[error]      | ^",
    "[error]   52 |   ) {}",
    "[error]   53 |",
    "[error]   54 |   /**",
    "[error] src/lib/database/postgresql_adapter.test.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { type IDatabaseAdapter, PostgresqlAdapter } from \"./postgresql_adapter.ts\"",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | // ARCH-1: Unit Tests for PostgresqlAdapter",
    "[error]   8 | // Research notes: (General Jest/TypeScript testing practices)",
    "[error] src/lib/database/postgresql_adapter.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { Pool, type PoolClient, type QueryResult } from \"pg\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // ARCH-1: Migrate to Enterprise Database Solution (Implement PostgreSQL Adapter)",
    "[error]   6 | // Research notes: research_notes_postgresql_adapter_article1.md, research_notes_postgresql_adapter_github_scan.md, research_notes_postgresql_adapter_egomobile_repo.md",
    "[error] src/lib/database/query-optimizer.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { cache } from \"@/lib/cache\";",
    "[error]   5 | import { prisma } from \"./connection-pool.ts\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Database Query Optimizer;",
    "[error] src/lib/database/sharding-manager.ts: SyntaxError: ';' expected. (28:17)",
    "[error]   26 |",
    "[error]   27 |   // For range-based sharding",
    "[error] > 28 |   ranges?: Array>",
    "[error]      |                 ^",
    "[error]   29 |",
    "[error]   30 |   // For lookup-based sharding",
    "[error]   31 |   lookupMap?: Record>",
    "[error] src/lib/dataLoader.ts: SyntaxError: '=>' expected. (10:33)",
    "[error]    8 |  * Prevents N+1 query problems by batching database requests;",
    "[error]    9 |  */",
    "[error] > 10 | export const createLoaders = () {",
    "[error]      |                                 ^",
    "[error]   11 |   return {",
    "[error]   12 |     /**",
    "[error]   13 |      * Patient loader - batch loads patients by ID;",
    "[error] src/lib/enterprise/enterprise-api.service.ts: SyntaxError: Declaration or statement expected. (14:1)",
    "[error]   12 | import { notificationService } from \"../realtime/notification.service\";",
    "[error]   13 | import { rbacService } from \"../security/rbac.service\";",
    "[error] > 14 | }",
    "[error]      | ^",
    "[error]   15 |",
    "[error]   16 | /**",
    "[error]   17 |  * Enterprise API Service;",
    "[error] src/lib/error-handler.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Error Handler for HMS Support Services Management;",
    "[error] src/lib/error-handling/resilience.service.ts: SyntaxError: Declaration or statement expected. (39:1)",
    "[error]   37 |",
    "[error]   38 | // Custom Error Classes",
    "[error] > 39 | }",
    "[error]      | ^",
    "[error]   40 |     context: Record<string, unknown> = {},",
    "[error]   41 |     retryable = false",
    "[error]   42 |   ) {",
    "[error] src/lib/event-sourcing/event-replay.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * It provides the ability to rebuild system state by replaying events from the event store.",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |   ) {}",
    "[error]   14 |",
    "[error]   15 |   /**",
    "[error] src/lib/event-sourcing/event-store.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 |  * Event interface for domain events;",
    "[error]   10 |  */",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |   };",
    "[error]   13 | }",
    "[error]   14 |",
    "[error] src/lib/fhir/__tests__/fhir-integration.test.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { FHIRIntegrationUtils } from \"../fhir-integration\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * FHIR Integration Tests;",
    "[error] src/lib/fhir/appointment.ts: SyntaxError: 'from' expected. (10:3)",
    "[error]    8 |  */",
    "[error]    9 |",
    "[error] > 10 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   11 |   FHIRIdentifier,",
    "[error]   12 |   FHIRCodeableConcept,",
    "[error]   13 |   FHIRReference,",
    "[error] src/lib/fhir/condition.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRCodeableConcept,",
    "[error]   14 |   FHIRReference,",
    "[error] src/lib/fhir/diagnostic-report.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRCodeableConcept,",
    "[error]   14 |   FHIRReference,",
    "[error] src/lib/fhir/encounter.ts: SyntaxError: 'from' expected. (10:3)",
    "[error]    8 |  */",
    "[error]    9 |",
    "[error] > 10 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   11 |   FHIRIdentifier,",
    "[error]   12 |   FHIRCodeableConcept,",
    "[error]   13 |   FHIRReference,",
    "[error] src/lib/fhir/fhir-analytics.service.ts: SyntaxError: ';' expected. (2:55)",
    "[error]   1 |",
    "[error] > 2 | import { cacheService } from \"@/lib/cache/redis-cache\",",
    "[error]     |                                                       ^",
    "[error]   3 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\",",
    "[error]   4 |",
    "[error]   5 |",
    "[error] src/lib/fhir/fhir-integration.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { type FHIRMedicationRequest, FHIRMedicationUtils } from \"./medication.ts\";",
    "[error]    6 | import { type FHIRPatient, FHIRPatientUtils } from \"./patient.ts\";",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 |",
    "[error]    9 | /**",
    "[error]   10 |  * FHIR Integration Utilities;",
    "[error] src/lib/fhir/fhir-r4-base.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * FHIR R4 Base Implementation;",
    "[error] src/lib/fhir/fhir.service.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 | import { type FHIRPatient, FHIRPatientSearchParams, FHIRPatientUtils } from \"./patient.ts\";",
    "[error]    9 | import type { FHIRBase, FHIRBundle } from \"./types.ts\";",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |",
    "[error]   12 | /**",
    "[error]   13 |  * FHIR R4 Service Implementation;",
    "[error] src/lib/fhir/location.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRContactPoint,",
    "[error]   14 |   FHIRAddress,",
    "[error] src/lib/fhir/medication.ts: SyntaxError: 'from' expected. (10:3)",
    "[error]    8 |  */",
    "[error]    9 |",
    "[error] > 10 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   11 |   FHIRIdentifier,",
    "[error]   12 |   FHIRCodeableConcept,",
    "[error]   13 |   FHIRReference,",
    "[error] src/lib/fhir/observation.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRCodeableConcept,",
    "[error]   14 |   FHIRReference,",
    "[error] src/lib/fhir/organization.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRHumanName,",
    "[error]   14 |   FHIRContactPoint,",
    "[error] src/lib/fhir/patient.ts: SyntaxError: 'from' expected. (10:3)",
    "[error]    8 |  */",
    "[error]    9 |",
    "[error] > 10 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   11 |   FHIRIdentifier,",
    "[error]   12 |   FHIRCodeableConcept,",
    "[error]   13 |   FHIRReference,",
    "[error] src/lib/fhir/practitioner.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRHumanName,",
    "[error]   14 |   FHIRContactPoint,",
    "[error] src/lib/fhir/procedure.ts: SyntaxError: 'from' expected. (11:3)",
    "[error]    9 |  */",
    "[error]   10 |",
    "[error] > 11 |   FHIRBase,",
    "[error]      |   ^",
    "[error]   12 |   FHIRIdentifier,",
    "[error]   13 |   FHIRCodeableConcept,",
    "[error]   14 |   FHIRReference,",
    "[error] src/lib/fhir/types.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * FHIR R4 Base Types and Interfaces;",
    "[error] src/lib/graphql/federation.ts: SyntaxError: ',' expected. (43:74)",
    "[error]   41 |     metricsCollector.recordTimer(",
    "[error]   42 |       \"graphql.federation.service_response_time\",",
    "[error] > 43 |       context.startTime ? crypto.getRandomValues([0] - context.startTime : 0,",
    "[error]      |                                                                          ^",
    "[error]   44 |       {",
    "[error]   45 |         service: serviceName,",
    "[error]   46 |         operation: operationName",
    "[error] src/lib/graphql/schema-base.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { PubSub } from \"graphql-subscriptions\";",
    "[error]   3 | import { gql } from \"graphql-tag\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * GraphQL Schema Base Implementation;",
    "[error] src/lib/hr/__tests__/asset-service.test.ts: SyntaxError: ',' expected. (10:9)",
    "[error]    8 | jest.mock(\"@prisma/client\", () => {",
    "[error]    9 |   const mockPrismaClient = {",
    "[error] > 10 |     jest.fn(),",
    "[error]      |         ^",
    "[error]   11 |       findUnique: jest.fn(),",
    "[error]   12 |       findMany: jest.fn(),",
    "[error]   13 |       update: jest.fn(),",
    "[error] src/lib/hr/__tests__/biomedical-service.test.ts: SyntaxError: ',' expected. (10:9)",
    "[error]    8 | jest.mock(\"@prisma/client\", () => {",
    "[error]    9 |   const mockPrismaClient = {",
    "[error] > 10 |     jest.fn(),",
    "[error]      |         ^",
    "[error]   11 |       findUnique: jest.fn(),",
    "[error]   12 |       findMany: jest.fn(),",
    "[error]   13 |       update: jest.fn(),",
    "[error] src/lib/hr/__tests__/employee-service.test.ts: SyntaxError: ',' expected. (10:9)",
    "[error]    8 | jest.mock(\"@prisma/client\", () => {",
    "[error]    9 |   const mockPrismaClient = {",
    "[error] > 10 |     jest.fn(),",
    "[error]      |         ^",
    "[error]   11 |       findUnique: jest.fn(),",
    "[error]   12 |       findMany: jest.fn(),",
    "[error]   13 |       update: jest.fn(),",
    "[error] src/lib/hr/__tests__/payroll-service.test.ts: SyntaxError: ',' expected. (9:9)",
    "[error]    7 | jest.mock(\"@prisma/client\", () => {",
    "[error]    8 |   const mockPrisma = {",
    "[error] >  9 |     jest.fn(),",
    "[error]      |         ^",
    "[error]   10 |       findMany: jest.fn(),",
    "[error]   11 |       create: jest.fn(),",
    "[error]   12 |       update: jest.fn(),",
    "[error] src/lib/hr/asset-service.ts: SyntaxError: Declaration or statement expected. (11:1)",
    "[error]    9 |  * Optimized with caching, query improvements, and predictive maintenance;",
    "[error]   10 |  */",
    "[error] > 11 | }",
    "[error]      | ^",
    "[error]   12 |   }) {",
    "[error]   13 |     const result = await prisma.asset.create({",
    "[error]   14 |       data,",
    "[error] src/lib/hr/attendance-service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |  * Service for managing attendance records and biometric verification;",
    "[error]    7 |  */",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }) {",
    "[error]   10 |     const { employeeId, date, checkInTime, biometricVerified, notes } = data;",
    "[error]   11 |",
    "[error] src/lib/hr/auth-integration.ts: SyntaxError: ',' expected. (12:27)",
    "[error]   10 |  * This connects the HR module with the central HMS authentication system;",
    "[error]   11 |  */",
    "[error] > 12 | export const PrismaAdapter(prisma),",
    "[error]      |                           ^",
    "[error]   13 |   \"jwt\"",
    "[error]   14 |   },",
    "[error]   15 |   \"/login\"",
    "[error] src/lib/hr/biomedical-service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * Enhanced with caching, query optimization, and FHIR R5 compliance;",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |   }) {",
    "[error]   14 |     const result = await prisma.biomedicalEquipment.create({",
    "[error]   15 |       data.serialNumber,",
    "[error] src/lib/hr/biometric-service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |  * Service for biometric integration and management;",
    "[error]    7 |  */",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }) {",
    "[error]   10 |     const { employeeId, templateType, templateData, deviceId, notes } = data;",
    "[error]   11 |",
    "[error] src/lib/hr/department-service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |  * Service for managing department and position data;",
    "[error]    7 |  */",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }) {",
    "[error]   10 |     return prisma.department.create({",
    "[error]   11 |       data,",
    "[error] src/lib/hr/employee-service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * Enhanced with caching and query optimization for improved performance;",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |     }[];",
    "[error]   14 |     positions?: {",
    "[error]   15 |       positionId: string,",
    "[error] src/lib/hr/integration-service.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Integration service for connecting HR & Asset Management with other HMS modules;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   }",
    "[error]   11 |",
    "[error]   12 |   /**",
    "[error] src/lib/hr/payroll-service.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 |  * Service for managing payroll processing and calculations;",
    "[error]    9 |  */",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |   }) {",
    "[error]   12 |     const { name, startDate, endDate, paymentDate, status, notes } = data;",
    "[error]   13 |",
    "[error] src/lib/hr/salary-service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 |  * Service for managing salary structures and payroll components;",
    "[error]    7 |  */",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |     }[];",
    "[error]   10 |   }) {",
    "[error]   11 |     const { name, description, components } = data;",
    "[error] src/lib/hr/types.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Type definitions for the HR & Asset Management module;",
    "[error] src/lib/integration/gap-implementation-test.ts: SyntaxError: Declaration or statement expected. (15:1)",
    "[error]   13 |  */",
    "[error]   14 |",
    "[error] > 15 | }",
    "[error]      | ^",
    "[error]   16 |   };",
    "[error]   17 |   errors: string[],",
    "[error]   18 |   recommendations: string[]",
    "[error] src/lib/integration/integration-hub.service.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { EventEmitter } from \"events\";",
    "[error]   3 | import { PrismaClient } from \"@prisma/client\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Integration Hub Service;",
    "[error] src/lib/integration/microservices-gateway.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import { pubsub } from \"@/lib/graphql/schema-base\";",
    "[error]    8 | import { metricsCollector } from \"@/lib/monitoring/metrics-collector\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |",
    "[error]   11 | /**",
    "[error]   12 |  * Microservices Integration Gateway;",
    "[error] src/lib/ipd.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { getDB } from \"@/lib/database\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // Placeholder for IPD related database functions",
    "[error]   6 | // FIX: Define a more specific type for Admission data",
    "[error] src/lib/ipd/ipd-management.service.ts: SyntaxError: ',' expected. (24:46)",
    "[error]   22 |   admitting_diagnosis: z.string().min(1, \"Admitting diagnosis is required\"),",
    "[error]   23 |   secondary_diagnoses: z.array(z.string()).optional(),",
    "[error] > 24 |   icd10_codes: z.array(z.string()).optional();",
    "[error]      |                                              ^",
    "[error]   25 |",
    "[error]   26 |   // Care team",
    "[error]   27 |   attending_doctor_id: z.string().min(1, \"Attending doctor is required\"),",
    "[error] src/lib/middleware/error-handling.middleware.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { NextRequest, NextResponse } from \"next/server\";",
    "[error]     | ^",
    "[error]   3 | }",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error] src/lib/models/ambulance.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Maps to FHIR Device resource;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   }[];",
    "[error]   11 |   status: \"active\" | \"inactive\" | \"entered-in-error\" | \"unknown\",",
    "[error]   12 |   {",
    "[error] src/lib/models/dietary.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Maps to FHIR NutritionOrder resource;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   };",
    "[error]   11 |   encounter?: {",
    "[error]   12 |     reference: string",
    "[error] src/lib/models/feedback.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Maps to FHIR QuestionnaireResponse resource;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   };",
    "[error]   11 |   authored: string;",
    "[error]   12 |   author?: {",
    "[error] src/lib/models/housekeeping.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Maps to FHIR ServiceRequest resource;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |     }[];",
    "[error]   11 |   }[];",
    "[error]   12 |   {",
    "[error] src/lib/models/maintenance.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Maps to FHIR ServiceRequest resource;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |     }[];",
    "[error]   11 |   }[];",
    "[error]   12 |   {",
    "[error] src/lib/models/marketing.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Marketing CRM Module Models;",
    "[error] src/lib/monitoring/health-monitor.service.ts: SyntaxError: Invalid character. (2:39)",
    "[error]   1 |",
    "[error] > 2 | import { EventEmitter } from \"events\";\\nimport { v4 as uuidv4 } from \"uuid\";\\nimport { PrismaClient } from \"@prisma/client\";\\nimport os from \"os\";\\nimport { promisify } from \"util\";\\nimport { exec } from \"child_process\";\\n\\nconst execAsync = promisify(exec);\\n\\nexport interface HealthCheck {\\n  id: string;\\n  name: string;\\n  type: HealthCheckType;\\n  status: HealthStatus;\\n  lastCheck: Date;\\n  nextCheck: Date;\\n  interval: number; // in seconds\\n  timeout: number; // in seconds\\n  retryCount: number;\\n  maxRetries: number;\\n  configuration: unknown;\\n  metrics: HealthMetrics;\\n  history: HealthCheckResult[];\\n  isEnabled: boolean;\\n  tags: string[];\\n  dependencies: string[];\\n  alertRules: AlertRule[];\\n}\\n\\nexport type HealthCheckType = \\n  | \"database\"\\n  | \"redis\"\\n  | \"api_endpoint\"\\n  | \"external_service\"\\n  | \"file_system\"\\n  | \"memory\"\\n  | \"cpu\"\\n  | \"disk\"\\n  | \"network\"\\n  | \"custom\";\\n\\nexport type HealthStatus = \"healthy\" | \"degraded\" | \"unhealthy\" | \"unknown\";\\n\\nexport interface HealthCheckResult {\\n  timestamp: Date;\\n  status: HealthStatus;\\n  responseTime: number;\\n  message?: string;\\n  metrics?: Record>\\n  error?: string;\\n}\\n\\nexport interface HealthMetrics {\\n  responseTime: {\\n    current: number;\\n    average: number;\\n    min: number;\\n    max: number;\\n    p95: number;\\n    p99: number;\\n  };\\n  availability: {\\n    uptime: number; // percentage\\n    totalChecks: number;\\n    successfulChecks: number;\\n    failedChecks: number;\\n  };\\n  performance: {\\n    throughput?: number;\\n    errorRate: number;\\n    latency: number;\\n  };\\n}\\n\\nexport interface SystemHealth {\\n  overall: HealthStatus;\\n  timestamp: Date;\\n  components: ComponentHealth[];\\n  metrics: SystemMetrics;\\n  alerts: ActiveAlert[];\\n  summary: HealthSummary;\\n}\\n\\nexport interface ComponentHealth {\\n  name: string;\\n  type: HealthCheckType;\\n  status: HealthStatus;\\n  responseTime: number;\\n  lastCheck: Date;\\n  message?: string;\\n  metrics?: Record>\\n}\\n\\nexport interface SystemMetrics {\\n  cpu: {\\n    usage: number; // percentage\\n    loadAverage: number[];\\n    cores: number;\\n  };\\n  memory: {\\n    used: number; // bytes\\n    free: number; // bytes\\n    total: number; // bytes\\n    usage: number; // percentage\\n  };\\n  disk: {\\n    used: number; // bytes\\n    free: number; // bytes\\n    total: number; // bytes\\n    usage: number; // percentage\\n  };\\n  network: {\\n    inbound: number; // bytes/sec\\n    outbound: number; // bytes/sec\\n    connections: number;\\n  };\\n  application: {\\n    uptime: number; // seconds\\n    activeConnections: number;\\n    memoryHeap: number;\\n    eventLoopLag: number;\\n  };\\n}\\n\\nexport interface AlertRule {\\n  id: string;\\n  name: string;\\n  condition: AlertCondition;\\n  severity: AlertSeverity;\\n  channels: AlertChannel[];\\n  isEnabled: boolean;\\n  cooldown: number; // minutes\\n  lastTriggered?: Date;\\n}\\n\\nexport interface AlertCondition {\\n  metric: string;\\n  operator: \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"eq\" | \"ne\";\\n  threshold: number;\\n  duration: number; // seconds\\n  aggregation?: \"avg\" | \"min\" | \"max\" | \"sum\" | \"count\";\\n}\\n\\nexport type AlertSeverity = \"info\" | \"warning\" | \"error\" | \"critical\";\\n\\nexport interface AlertChannel {\\n  type: \"email\" | \"slack\" | \"webhook\" | \"sms\" | \"pagerduty\";\\n  configuration: unknown;\\n  isEnabled: boolean;\\n}\\n\\nexport interface ActiveAlert {\\n  id: string;\\n  ruleId: string;\\n  ruleName: string;\\n  severity: AlertSeverity;\\n  status: \"active\" | \"resolved\" | \"silenced\";\\n  message: string;\\n  triggeredAt: Date;\\n  resolvedAt?: Date;\\n  silencedUntil?: Date;\\n  component: string;\\n  metadata: unknown;\\n}\\n\\nexport interface HealthSummary {\\n  totalComponents: number;\\n  healthyComponents: number;\\n  degradedComponents: number;\\n  unhealthyComponents: number;\\n  unknownComponents: number;\\n  overallAvailability: number;\\n  averageResponseTime: number;\\n  activeAlerts: number;\\n  criticalAlerts: number;\\n}\\n\\nexport interface PerformanceBaseline {\\n  component: string;\\n  metric: string;\\n  baseline: number;\\n  tolerance: number; // percentage\\n  sampleSize: number;\\n  confidence: number; // percentage\\n  lastUpdated: Date;\\n}\\n\\nclass HealthMonitorService extends EventEmitter {\\n  private healthChecks: Map<string, HealthCheck> = new Map();\\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\\n  private performanceBaselines: Map<string, PerformanceBaseline> = new Map();\\n  private prisma: PrismaClient;\\n  private monitoringInterval: NodeJS.Timeout;\\n  private metricsInterval: NodeJS.Timeout;\\n  private isRunning = false;\\n  private startTime = new Date();\\n  private systemMetricsHistory: SystemMetrics[] = [];\\n  private maxHistorySize = 1000;\\n\\n  constructor() {\\n    super();\\n    this.prisma = new PrismaClient();\\n    \\n    // Initialize default health checks\\n    this.initializeDefaultChecks();\\n    \\n    // Start monitoring\\n    this.start();\\n  }\\n\\n  /**\\n   * Start health monitoring\\n   */\\n  start(): void {\\n    if (!session.user)eturn;\\n    \\n    this.isRunning = true;\\n    this.startTime = new Date();\\n    \\n    // Run health checks every 30 seconds\\n    this.monitoringInterval = setInterval(() => {\\n      this.runHealthChecks();\\n    }, 30000);\\n    \\n    // Collect system metrics every 10 seconds\\n    this.metricsInterval = setInterval(() => {\\n      this.collectSystemMetrics();\\n    }, 10000);\\n    \\n    // Initial health check\\n    setTimeout(() => this.runHealthChecks(), 1000);\\n    \\n    // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]     |                                       ^",
    "[error]   3 | }",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error] src/lib/monitoring/metrics-collector.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { cacheService } from \"../cache/redis-cache\";",
    "[error]   5 | import { getDatabaseHealth } from \"../database/connection-pool\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Enterprise Metrics Collection System;",
    "[error] src/lib/monitoring/rate-limiter.service.ts: SyntaxError: Invalid character. (1:39)",
    "[error] > 1 | import { EventEmitter } from \"events\";\\nimport { v4 as uuidv4 } from \"uuid\";\\nimport { PrismaClient } from \"@prisma/client\";\\n\\nexport interface RateLimitRule {\\n  id: string;\\n  name: string;\\n  pattern: string; // URL pattern or regex\\n  method?: string; // HTTP method\\n  windowMs: number; // Time window in milliseconds\\n  maxRequests: number; // Maximum requests per window\\n  scope: \"ip\" | \"user\" | \"organization\" | \"global\";\\n  skipSuccessfulRequests?: boolean;\\n  skipFailedRequests?: boolean;\\n  keyGenerator?: (req: unknown) => string;\\n  onLimitReached?: (req: unknown, rateLimitInfo: RateLimitInfo) => void;\\n  priority: number; // Higher priority rules are checked first\\n  isActive: boolean;\\n  metadata: {\\n    createdAt: Date;\\n    updatedAt: Date;\\n    createdBy: string;\\n    description?: string;\\n  };\\n}\\n\\nexport interface RateLimitInfo {\\n  totalHits: number;\\n  totalHitsPerWindow: number;\\n  remainingPoints: number;\\n  msBeforeNext: number;\\n  isFirstInWindow: boolean;\\n}\\n\\nexport interface APIMetrics {\\n  id: string;\\n  endpoint: string;\\n  method: string;\\n  statusCode: number;\\n  responseTime: number;\\n  requestSize: number;\\n  responseSize: number;\\n  userId?: string;\\n  organizationId?: string;\\n  ipAddress: string;\\n  userAgent?: string;\\n  timestamp: Date;\\n  rateLimitHit?: boolean;\\n  error?: string;\\n}\\n\\nexport interface EndpointStats {\\n  endpoint: string;\\n  method: string;\\n  totalRequests: number;\\n  totalErrors: number;\\n  avgResponseTime: number;\\n  minResponseTime: number;\\n  maxResponseTime: number;\\n  rateLimit90th: number;\\n  rateLimit95th: number;\\n  rateLimit99th: number;\\n  rateLimitHits: number;\\n  uniqueUsers: number;\\n  uniqueIPs: number;\\n  lastRequest: Date;\\n  statusCodes: Record>\\n}\\n\\nexport interface AlertRule {\\n  id: string;\\n  name: string;\\n  condition: AlertCondition;\\n  threshold: number;\\n  windowMs: number;\\n  actions: AlertAction[];\\n  isActive: boolean;\\n  metadata: {\\n    createdAt: Date;\\n    updatedAt: Date;\\n    createdBy: string;\\n    description?: string;\\n  };\\n}\\n\\nexport interface AlertCondition {\\n  metric: \"error_rate\" | \"response_time\" | \"request_rate\" | \"rate_limit_hits\";\\n  operator: \"gt\" | \"gte\" | \"lt\" | \"lte\" | \"eq\";\\n  scope?: \"global\" | \"endpoint\" | \"user\" | \"organization\";\\n  endpoint?: string;\\n}\\n\\nexport interface AlertAction {\\n  type: \"email\" | \"webhook\" | \"slack\" | \"log\";\\n  configuration: unknown;\\n}\\n\\nexport interface SecurityEvent {\\n  id: string;\\n  type: \"rate_limit_exceeded\" | \"suspicious_activity\" | \"brute_force\" | \"abuse_detected\";\\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\";\\n  source: {\\n    ipAddress: string;\\n    userAgent?: string;\\n    userId?: string;\\n    organizationId?: string;\\n  };\\n  details: unknown;\\n  timestamp: Date;\\n  resolved: boolean;\\n  resolvedAt?: Date;\\n  resolvedBy?: string;\\n}\\n\\nclass RateLimiterService extends EventEmitter {\\n  private rules: Map<string, RateLimitRule> = new Map();\\n  private limitStore: Map<string, Map<string, RateLimitInfo>> = new Map();\\n  private metrics: APIMetrics[] = [];\\n  private alertRules: Map<string, AlertRule> = new Map();\\n  private securityEvents: SecurityEvent[] = [];\\n  private prisma: PrismaClient;\\n  private metricsRetentionDays = 30;\\n  private cleanupInterval: NodeJS.Timeout;\\n  private statsInterval: NodeJS.Timeout;\\n  private endpointStats: Map<string, EndpointStats> = new Map();\\n\\n  constructor() {\\n    super();\\n    this.prisma = new PrismaClient();\\n    \\n    // Initialize default rules\\n    this.initializeDefaultRules();\\n    \\n    // Cleanup old data every hour\\n    this.cleanupInterval = setInterval(() => {\\n      this.cleanupOldData();\\n    }, 60 * 60 * 1000);\\n    \\n    // Update stats every 5 minutes\\n    this.statsInterval = setInterval(() => {\\n      this.updateEndpointStats();\\n    }, 5 * 60 * 1000);\\n  }\\n\\n  /**\\n   * Check rate limit for a request\\n   */\\n  async checkRateLimit(request: {\\n    url: string;\\n    method: string;\\n    ip: string;\\n    userId?: string;\\n    organizationId?: string;\\n    userAgent?: string;\\n  }): Promise<{ allowed: boolean; rateLimitInfo?: RateLimitInfo; rule?: RateLimitRule }> {\\n    try {\\n      // Find applicable rules (sorted by priority)\\n      const applicableRules = this.findApplicableRules(request.url, request.method);\\n        .sort((a, b) => b.priority - a.priority);\\n\\n      for (const rule of applicableRules) {\\n        if (!session.user)ontinue;\\n\\n        const key = this.generateKey(rule, request);\\n        const result = await this.checkRule(rule, key);\\n\\n        if (!session.user) {\\n          // Rate limit exceeded\\n          await this.handleRateLimitExceeded(rule, request, result.rateLimitInfo!);\\n          return { allowed: false, rateLimitInfo: result.rateLimitInfo, rule };\\n        }\\n      }\\n\\n      return { allowed: true };\\n    } catch (error) {\\n      // Debug logging removed\\n      // On error, allow the request\\n      return { allowed: true };\\n    }\\n  }\\n\\n  /**\\n   * Record API metrics\\n   */\\n  async recordMetrics(metrics: Omit<APIMetrics, \"id\" | \"timestamp\">): Promise<void> {\\n    const apiMetrics: APIMetrics = {\\n      ...metrics,\\n      id: uuidv4(),\\n      timestamp: new Date()\\n    };\\n\\n    this.metrics.push(apiMetrics);\\n    \\n    // Update real-time stats\\n    this.updateRealTimeStats(apiMetrics);\\n    \\n    // Check alert conditions\\n    await this.checkAlertConditions(apiMetrics);\\n    \\n    this.emit(\"metrics_recorded\", apiMetrics);\\n\\n    // Keep metrics array size manageable\\n    if (!session.user) {\\n      this.metrics = this.metrics.slice(-5000);\\n    }\\n  }\\n\\n  /**\\n   * Create rate limit rule\\n   */\\n  async createRule(ruleData: Omit<RateLimitRule, \"id\" | \"metadata\"> & {\\n    createdBy: string;\\n    description?: string;\\n  }): Promise<RateLimitRule> {\\n    const rule: RateLimitRule = {\\n      ...ruleData,\\n      id: uuidv4(),\\n      metadata: {\\n        createdAt: new Date(),\\n        updatedAt: new Date(),\\n        createdBy: ruleData.createdBy,\\n        description: ruleData.description\\n      }\\n    };\\n\\n    this.rules.set(rule.id, rule);\\n    this.emit(\"rule_created\", rule);\\n    \\n    return rule;\\n  }\\n\\n  /**\\n   * Update rate limit rule\\n   */\\n  async updateRule(ruleId: string, updates: Partial<RateLimitRule>): Promise<RateLimitRule | null> {\\n    const rule = this.rules.get(ruleId);\\n    if (!session.user)eturn null;\\n\\n    const updatedRule = {\\n      ...rule,\\n      ...updates,\\n      metadata: {\\n        ...rule.metadata,\\n        updatedAt: new Date()\\n      }\\n    };\\n\\n    this.rules.set(ruleId, updatedRule);\\n    this.emit(\"rule_updated\", updatedRule);\\n    \\n    return updatedRule;\\n  }\\n\\n  /**\\n   * Delete rate limit rule\\n   */\\n  async deleteRule(ruleId: string): Promise<boolean> {\\n    const rule = this.rules.get(ruleId);\\n    if (!session.user)eturn false;\\n\\n    this.rules.delete(ruleId);\\n    this.emit(\"rule_deleted\", { ruleId, rule });\\n    \\n    return true;\\n  }\\n\\n  /**\\n   * Create alert rule\\n   */\\n  async createAlertRule(alertData: Omit<AlertRule, \"id\" | \"metadata\"> & {\\n    createdBy: string;\\n    description?: string;\\n  }): Promise<AlertRule> {\\n    const alertRule: AlertRule = {\\n      ...alertData,\\n      id: uuidv4(),\\n      metadata: {\\n        createdAt: new Date(),\\n        updatedAt: new Date(),\\n        createdBy: alertData.createdBy,\\n        description: alertData.description\\n      }\\n    };\\n\\n    this.alertRules.set(alertRule.id, alertRule);\\n    this.emit(\"alert_rule_created\", alertRule);\\n    \\n    return alertRule;\\n  }\\n\\n  /**\\n   * Get API metrics with filters\\n   */\\n  getMetrics(filters: {\\n    startTime?: Date;\\n    endTime?: Date;\\n    endpoint?: string;\\n    method?: string;\\n    userId?: string;\\n    organizationId?: string;\\n    statusCode?: number;\\n    minResponseTime?: number;\\n    maxResponseTime?: number;\\n    limit?: number;\\n    offset?: number;\\n  } = {}): APIMetrics[] {\\n    let filteredMetrics = this.metrics;\\n\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.timestamp >= filters.startTime!);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.timestamp <= filters.endTime!);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.endpoint.includes(filters.endpoint!));\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.method === filters.method);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.userId === filters.userId);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.organizationId === filters.organizationId);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.statusCode === filters.statusCode);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.responseTime >= filters.minResponseTime!);\\n    }\\n    if (!session.user) {\\n      filteredMetrics = filteredMetrics.filter(m => m.responseTime <= filters.maxResponseTime!);\\n    }\\n\\n    // Apply pagination\\n    const offset = filters.offset || 0;\\n    const limit = filters.limit || 100;\\n    \\n    return filteredMetrics;\\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\\n      .slice(offset, offset + limit);\\n  }\\n\\n  /**\\n   * Get endpoint statistics\\n   */\\n  getEndpointStats(endpoint?: string): EndpointStats[] {\\n    if (!session.user) {\\n      const stats = this.endpointStats.get(endpoint);\\n      return stats ? [stats] : [];\\n    }\\n    \\n    return Array.from(this.endpointStats.values());\\n      .sort((a, b) => b.totalRequests - a.totalRequests);\\n  }\\n\\n  /**\\n   * Get rate limit rules\\n   */\\n  getRules(): RateLimitRule[] {\\n    return Array.from(this.rules.values());\\n      .sort((a, b) => b.priority - a.priority);\\n  }\\n\\n  /**\\n   * Get alert rules\\n   */\\n  getAlertRules(): AlertRule[] {\\n    return Array.from(this.alertRules.values());\\n  }\\n\\n  /**\\n   * Get security events\\n   */\\n  getSecurityEvents(filters: {\\n    type?: string;\\n    severity?: string;\\n    resolved?: boolean;\\n    startTime?: Date;\\n    endTime?: Date;\\n    limit?: number;\\n  } = {}): SecurityEvent[] {\\n    let events = this.securityEvents;\\n\\n    if (!session.user) {\\n      events = events.filter(e => e.type === filters.type);\\n    }\\n    if (!session.user) {\\n      events = events.filter(e => e.severity === filters.severity);\\n    }\\n    if (!session.user) {\\n      events = events.filter(e => e.resolved === filters.resolved);\\n    }\\n    if (!session.user) {\\n      events = events.filter(e => e.timestamp >= filters.startTime!);\\n    }\\n    if (!session.user) {\\n      events = events.filter(e => e.timestamp <= filters.endTime!);\\n    }\\n\\n    return events;\\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\\n      .slice(0, filters.limit || 100);\\n  }\\n\\n  /**\\n   * Resolve security event\\n   */\\n  async resolveSecurityEvent(eventId: string, resolvedBy: string): Promise<boolean> {\\n    const event = this.securityEvents.find(e => e.id === eventId);\\n    if (!session.user)eturn false;\\n\\n    event.resolved = true;\\n    event.resolvedAt = new Date();\\n    event.resolvedBy = resolvedBy;\\n\\n    this.emit(\"security_event_resolved\", event);\\n    return true;\\n  }\\n\\n  /**\\n   * Get performance summary\\n   */\\n  getPerformanceSummary(timeRange: \"hour\" | \"day\" | \"week\" = \"hour\"): {\\n    totalRequests: number;\\n    averageResponseTime: number;\\n    errorRate: number;\\n    rateLimitHits: number;\\n    topEndpoints: Array>\\n    statusCodeDistribution: Record>\\n    securityEvents: number;\\n  } {\\n    const now = new Date();\\n    const timeRangeMs = {\\n      hour: 60 * 60 * 1000,\\n      day: 24 * 60 * 60 * 1000,\\n      week: 7 * 24 * 60 * 60 * 1000\\n    }[timeRange];\\n    \\n    const startTime = new Date(now.getTime() - timeRangeMs);\\n    const recentMetrics = this.metrics.filter(m => m.timestamp >= startTime);\\n    \\n    const totalRequests = recentMetrics.length;\\n    const averageResponseTime = totalRequests > 0;\\n      ? recentMetrics.reduce((sum, m) => sum + m.responseTime, 0) / totalRequests \\n      : 0;\\n    \\n    const errorRequests = recentMetrics.filter(m => m.statusCode >= 400).length;\\n    const errorRate = totalRequests > 0 ? (errorRequests / totalRequests) * 100 : 0;\\n    \\n    const rateLimitHits = recentMetrics.filter(m => m.rateLimitHit).length;\\n    \\n    // Top endpoints\\n    const endpointCounts: Record<string, number> = {};\\n    recentMetrics.forEach(m => {\\n      const key = `/* SECURITY: Template literal eliminated */\\n      endpointCounts[key] = (endpointCounts[key] || 0) + 1;\\n    });\\n    \\n    const topEndpoints = Object.entries(endpointCounts);\\n      .map(([endpoint, requests]) => ({ endpoint, requests }))\\n      .sort((a, b) => b.requests - a.requests)\\n      .slice(0, 10);\\n    \\n    // Status code distribution\\n    const statusCodeDistribution: Record<string, number> = {};\\n    recentMetrics.forEach(m => {\\n      const statusGroup = `${Math.floor(m.statusCode / 100)}xx`;\\n      statusCodeDistribution[statusGroup] = (statusCodeDistribution[statusGroup] || 0) + 1;\\n    });\\n    \\n    const recentSecurityEvents = this.securityEvents.filter(e => e.timestamp >= startTime).length;\\n    \\n    return {\\n      totalRequests,\\n      averageResponseTime,\\n      errorRate,\\n      rateLimitHits,\\n      topEndpoints,\\n      statusCodeDistribution,\\n      securityEvents: recentSecurityEvents\\n    };\\n  }\\n\\n  // Private methods\\n\\n  private initializeDefaultRules(): void {\\n    // Global rate limit\\n    this.createRule({\\n      name: \"Global API Rate Limit\",\\n      pattern: \"/api/*\",\\n      windowMs: 15 * 60 * 1000, // 15 minutes\\n      maxRequests: 1000,\\n      scope: \"ip\",\\n      priority: 1,\\n      isActive: true,\\n      createdBy: \"system\"\\n    });\\n\\n    // Authentication endpoints\\n    this.createRule({\\n      name: \"Auth Rate Limit\",\\n      pattern: \"/api/auth/*\",\\n      windowMs: 15 * 60 * 1000, // 15 minutes\\n      maxRequests: 10,\\n      scope: \"ip\",\\n      priority: 10,\\n      isActive: true,\\n      createdBy: \"system\"\\n    });\\n\\n    // User-specific rate limit\\n    this.createRule({\\n      name: \"User API Rate Limit\",\\n      pattern: \"/api/*\",\\n      windowMs: 60 * 60 * 1000, // 1 hour\\n      maxRequests: 5000,\\n      scope: \"user\",\\n      priority: 5,\\n      isActive: true,\\n      createdBy: \"system\"\\n    });\\n  }\\n\\n  private findApplicableRules(url: string, method: string): RateLimitRule[] {\\n    return Array.from(this.rules.values()).filter(rule => {\\n      if (!session.user) {\\n        return false;\\n      }\\n      \\n      return this.matchesPattern(url, rule.pattern);\\n    });\\n  }\\n\\n  private matchesPattern(url: string, pattern: string): boolean {\\n    // Simple pattern matching with wildcards\\n    const regexPattern = pattern;\\n      .replace(/\\\\*/g, \".*\")\\n      .replace(/\\\\?/g, \".\");\\n    \\n    const regex = new RegExp(`^${regexPattern}$`);\\n    return regex.test(url);\\n  }\\n\\n  private generateKey(rule: RateLimitRule, request: unknown): string {\\n    if (!session.user) {\\n      return rule.keyGenerator(request);\\n    }\\n\\n    switch (rule.scope) {\\n      case \"ip\":\\n        return `${rule.id}:${request.ip}`;\\n      case \"user\":\\n        return `${rule.id}:user:${request.userId || request.ip}`;\\n      case \"organization\":\\n        return `${rule.id}:org:${request.organizationId || request.ip}`;\\n      case \"global\":\\n        return `${rule.id}:global`;\\n      default:\\n        return `${rule.id}:${request.ip}`;\\n    }\\n  }\\n\\n  private async checkRule(rule: RateLimitRule, key: string): Promise<{ allowed: boolean; rateLimitInfo?: RateLimitInfo }> {\\n    if (!session.user) {\\n      this.limitStore.set(rule.id, ;\\n    }\\n\\n    const ruleStore = this.limitStore.get(rule.id)!;\\n    const now = crypto.getRandomValues([0];\\n    const windowStart = now - rule.windowMs;\\n\\n    let rateLimitInfo = ruleStore.get(key);\\n    \\n    if (!session.user) {\\n      rateLimitInfo = {\\n        totalHits: 0,\\n        totalHitsPerWindow: 0,\\n        remainingPoints: rule.maxRequests,\\n        msBeforeNext: 0,\\n        isFirstInWindow: true\\n      };\\n    } else {\\n      // Reset window if expired\\n      const timeSinceWindowStart = now - (rateLimitInfo as any).windowStartTime;\\n      if (!session.user) {\\n        rateLimitInfo.totalHitsPerWindow = 0;\\n        rateLimitInfo.isFirstInWindow = true;\\n        (rateLimitInfo as any).windowStartTime = now;\\n      } else {\\n        rateLimitInfo.isFirstInWindow = false;\\n      }\\n    }\\n\\n    // Update counters\\n    rateLimitInfo.totalHits++;\\n    rateLimitInfo.totalHitsPerWindow++;\\n    rateLimitInfo.remainingPoints = Math.max(0, rule.maxRequests - rateLimitInfo.totalHitsPerWindow);\\n    rateLimitInfo.msBeforeNext = rule.windowMs - (now - ((rateLimitInfo as any).windowStartTime || now));\\n\\n    if (!session.user)windowStartTime)) {\\n      (rateLimitInfo as any).windowStartTime = now;\\n    }\\n\\n    ruleStore.set(key, rateLimitInfo);\\n\\n    const allowed = rateLimitInfo.totalHitsPerWindow <= rule.maxRequests;\\n    return { allowed, rateLimitInfo };\\n  }\\n\\n  private async handleRateLimitExceeded(\\n    rule: RateLimitRule,\\n    request: unknown,\\n    rateLimitInfo: RateLimitInfo\\n  ): Promise<void> {\\n    // Create security event\\n    const securityEvent: SecurityEvent = {\\n      id: uuidv4(),\\n      type: \"rate_limit_exceeded\",\\n      severity: \"medium\",\\n      source: {\\n        ipAddress: request.ip,\\n        userAgent: request.userAgent,\\n        userId: request.userId,\\n        organizationId: request.organizationId\\n      },\\n      details: {\\n        rule: rule.name,\\n        url: request.url,\\n        method: request.method,\\n        rateLimitInfo\\n      },\\n      timestamp: new Date(),\\n      resolved: false\\n    };\\n\\n    this.securityEvents.push(securityEvent);\\n    this.emit(\"rate_limit_exceeded\", { rule, request, rateLimitInfo, securityEvent });\\n\\n    // Call custom handler if provided\\n    if (!session.user) {\\n      rule.onLimitReached(request, rateLimitInfo);\\n    }\\n  }\\n\\n  private updateRealTimeStats(metrics: APIMetrics): void {\\n    const key = `/* SECURITY: Template literal eliminated */\\n    let stats = this.endpointStats.get(key);\\n\\n    if (!session.user) {\\n      stats = {\\n        endpoint: metrics.endpoint,\\n        method: metrics.method,\\n        totalRequests: 0,\\n        totalErrors: 0,\\n        avgResponseTime: 0,\\n        minResponseTime: Infinity,\\n        maxResponseTime: 0,\\n        rateLimit90th: 0,\\n        rateLimit95th: 0,\\n        rateLimit99th: 0,\\n        rateLimitHits: 0,\\n        uniqueUsers: 0,\\n        uniqueIPs: 0,\\n        lastRequest: new Date(),\\n        statusCodes: {}\\n      };\\n      this.endpointStats.set(key, stats);\\n    }\\n\\n    // Update stats\\n    stats.totalRequests++;\\n    if (!session.user) {\\n      stats.totalErrors++;\\n    }\\n    if (!session.user) {\\n      stats.rateLimitHits++;\\n    }\\n\\n    // Update response time stats\\n    stats.avgResponseTime = ((stats.avgResponseTime * (stats.totalRequests - 1)) + metrics.responseTime) / stats.totalRequests;\\n    stats.minResponseTime = Math.min(stats.minResponseTime, metrics.responseTime);\\n    stats.maxResponseTime = Math.max(stats.maxResponseTime, metrics.responseTime);\\n    stats.lastRequest = metrics.timestamp;\\n\\n    // Update status code distribution\\n    const statusCode = metrics.statusCode.toString();\\n    stats.statusCodes[statusCode] = (stats.statusCodes[statusCode] || 0) + 1;\\n  }\\n\\n  private async checkAlertConditions(metrics: APIMetrics): Promise<void> {\\n    for (const alertRule of this.alertRules.values()) {\\n      if (!session.user)ontinue;\\n\\n      const shouldTrigger = await this.evaluateAlertCondition(alertRule, metrics);\\n      if (!session.user) {\\n        await this.trigger/* SECURITY: Alert removed */\\n      }\\n    }\\n  }\\n\\n  private async evaluateAlertCondition(alertRule: AlertRule, metrics: APIMetrics): Promise<boolean> {\\n    const now = new Date();\\n    const windowStart = new Date(now.getTime() - alertRule.windowMs);\\n    const recentMetrics = this.metrics.filter(m => m.timestamp >= windowStart);\\n\\n    let value: number;\\n    \\n    switch (alertRule.condition.metric) {\\n      case \"error_rate\":\\n        const totalRequests = recentMetrics.length;\\n        const errorRequests = recentMetrics.filter(m => m.statusCode >= 400).length;\\n        value = totalRequests > 0 ? (errorRequests / totalRequests) * 100 : 0;\\n        break;\\n        \\n      case \"response_time\":\\n        const responseTimes = recentMetrics.map(m => m.responseTime);\\n        value = responseTimes.length > 0;\\n          ? responseTimes.reduce((sum, rt) => sum + rt, 0) / responseTimes.length \\n          : 0;\\n        break;\\n        \\n      case \"request_rate\":\\n        value = recentMetrics.length;\\n        break;\\n        \\n      case \"rate_limit_hits\":\\n        value = recentMetrics.filter(m => m.rateLimitHit).length;\\n        break;\\n        \\n      default:\\n        return false;\\n    }\\n\\n    // Apply scope filter\\n    if (!session.user) {\\n      const _scopedMetrics = recentMetrics.filter(m => m.endpoint === alertRule.condition.endpoint);\\n      // Recalculate value for scoped metrics\\n      // ... (similar logic as above but for scoped metrics)\\n    }\\n\\n    // Evaluate condition\\n    switch (alertRule.condition.operator) {\\n      case \"gt\": return value > alertRule.threshold;\\n      case \"gte\": return value >= alertRule.threshold;\\n      case \"lt\": return value < alertRule.threshold;\\n      case \"lte\": return value <= alertRule.threshold;\\n      case \"eq\": return value === alertRule.threshold;\\n      default: return false;\\n    }\\n  }\\n\\n  private async trigger/* SECURITY: Alert removed */: Promise<void> {\\n    const alert = {\\n      id: uuidv4(),\\n      ruleId: alertRule.id,\\n      ruleName: alertRule.name,\\n      condition: alertRule.condition,\\n      threshold: alertRule.threshold,\\n      triggeredAt: new Date(),\\n      metrics\\n    };\\n\\n    this.emit(\"alert_triggered\", alert);\\n\\n    // Execute alert actions\\n    for (const action of alertRule.actions) {\\n      try {\\n        await this.executeAlertAction(action, alert);\\n      } catch (error) {\\n        // Debug logging removed\\n      }\\n    }\\n  }\\n\\n  private async executeAlertAction(action: AlertAction, alert: unknown): Promise<void> {\\n    switch (action.type) {\\n      case \"log\":\\n        // RESOLVED: (Priority: Medium, Target: Next Sprint): - Automated quality improvement",
    "[error]     |                                       ^",
    "[error]   2 |",
    "[error]   3 | }",
    "[error]   4 | }",
    "[error] src/lib/notifications.ts: SyntaxError: Declaration or statement expected. (21:1)",
    "[error]   19 |  * Notification type definition",
    "[error]   20 |  */",
    "[error] > 21 | }",
    "[error]      | ^",
    "[error]   22 | }",
    "[error]   23 |",
    "[error]   24 | /**",
    "[error] src/lib/notifications/external-notification.service.ts: SyntaxError: ',' expected. (12:4)",
    "[error]   10 | // Notification Configuration Schema",
    "[error]   11 | export const NotificationConfigSchema = z.object({",
    "[error] > 12 |   z.enum([\"twilio\", \"aws_sns\", \"messagebird\"]),",
    "[error]      |    ^",
    "[error]   13 |     config: z.record(z.string()),",
    "[error]   14 |     enabled: z.boolean().default(true)",
    "[error]   15 |   }).optional(),",
    "[error] src/lib/performance/database-optimization.service.ts: SyntaxError: Declaration or statement expected. (15:1)",
    "[error]   13 |  */",
    "[error]   14 |",
    "[error] > 15 | }",
    "[error]      | ^",
    "[error]   16 |   };",
    "[error]   17 |   number,",
    "[error]   18 |     number,",
    "[error] src/lib/quality/quality-management-persistent.service.ts: SyntaxError: ';' expected. (132:87)",
    "[error]   130 |",
    "[error]   131 | // Type definitions",
    "[error] > 132 | export type QualityIndicator = z.infer<typeof QualityIndicatorSchema> & { id?: string export type QualityEvent = z.infer<typeof QualityEventSchema> & { id?: string };",
    "[error]       |                                                                                       ^",
    "[error]   133 | export type QualityAssessment = z.infer<typeof QualityAssessmentSchema> & { id?: string };",
    "[error]   134 | export type ComplianceReport = z.infer<typeof ComplianceReportSchema> & { id?: string };",
    "[error]   135 | export type ActionPlan = z.infer<typeof ActionPlanSchema> & { id?: string };",
    "[error] src/lib/quality/quality-management.service.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 |",
    "[error]   5 | import { type QualityPersistenceService, getQualityPersistenceService } from \"./quality-persistence.service\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Quality Management and Patient Safety Service;",
    "[error] src/lib/quality/quality-persistence.service.ts: SyntaxError: Declaration or statement expected. (37:1)",
    "[error]   35 | } from \"./quality-management.service\"",
    "[error]   36 |",
    "[error] > 37 | }",
    "[error]      | ^",
    "[error]   38 |     };",
    "[error]   39 |   }",
    "[error]   40 |",
    "[error] src/lib/quality/quality-service-integrated.ts: SyntaxError: Identifier expected. (3:1)",
    "[error]   1 | import {",
    "[error]   2 |",
    "[error] > 3 | import { QualityManagementService } from \"./quality-management.service\";",
    "[error]     | ^",
    "[error]   4 | import { QualityPersistenceService } from \"./quality-persistence.service\";",
    "[error]   5 | /**",
    "[error]   6 |  * Integrated Quality Management Service",
    "[error] src/lib/rbac.service.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import { AuditLogger } from \"@/lib/audit\";",
    "[error]   3 | import { AuthorizationError } from \"@/lib/errors\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error]   7 |  * Role-Based Access Control (RBAC) Service for HMS Support Services;",
    "[error] src/lib/rbac/rbac.service.ts: SyntaxError: Identifier expected. (2:1)",
    "[error]   1 | import {",
    "[error] > 2 | import { PrismaClient } from \"@prisma/client\";",
    "[error]     | ^",
    "[error]   3 |",
    "[error]   4 | import { cache } from \"@/lib/cache\";",
    "[error]   5 | import { logAuditEvent } from \"@/lib/audit\";",
    "[error] src/lib/rbac/roles.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Enterprise Role-Based Access Control (RBAC) System;",
    "[error] src/lib/realtime/notification.service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import jwt from \"jsonwebtoken\";",
    "[error]    7 | import { WebSocket, WebSocketServer } from \"ws\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |",
    "[error]   10 | /**",
    "[error]   11 |  * Enterprise Real-time Notification Service;",
    "[error] src/lib/schemas/ipd-schemas.ts: SyntaxError: Declaration or statement expected. (7:3)",
    "[error]    5 | const VitalSignsSchema = z.record(z.string(), z.any()).optional().nullable();",
    "[error]    6 | const MedicationGivenSchema = z;",
    "[error] >  7 |   .record(z.string(), z.any());",
    "[error]      |   ^",
    "[error]    8 |   .optional();",
    "[error]    9 |   .nullable();",
    "[error]   10 |",
    "[error] src/lib/security.service.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import * as crypto from \"crypto\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | /**",
    "[error]   6 |  * Security Service for HMS Support Services;",
    "[error] src/lib/security/audit.service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import winston from \"winston\";",
    "[error]   4 | import { ElasticsearchTransport } from \"winston-elasticsearch\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Enterprise Audit Logging Service;",
    "[error] src/lib/security/auth.service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 | import { cache } from \"@/lib/cache\";",
    "[error]   11 | import { decrypt, encrypt } from \"@/lib/security/encryption.service\";",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |",
    "[error]   14 | /**",
    "[error]   15 |  * Enterprise Authentication Service;",
    "[error] src/lib/security/encryption.service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import { logAuditEvent } from \"@/lib/audit\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | /**",
    "[error]   8 |  * Enterprise Field-Level Encryption Service;",
    "[error] src/lib/security/rbac.service.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import bcrypt from \"bcryptjs\";",
    "[error]   5 | import jwt from \"jsonwebtoken\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * Enterprise Role-Based Access Control (RBAC) Service;",
    "[error] src/lib/services/availability.service.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { prisma } from \"@/lib/prisma\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 | }",
    "[error]   5 |",
    "[error]   6 | /**",
    "[error] src/lib/services/integration/__tests__/hms-integration.service.test.ts: SyntaxError: ',' expected. (9:7)",
    "[error]    7 | // Mock dependencies",
    "[error]    8 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   jest.fn()",
    "[error]      |       ^",
    "[error]   10 |   },",
    "[error]   11 |   jest.fn()",
    "[error]   12 |   },",
    "[error] src/lib/services/integration/hms-integration.service.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { prisma } from \"@/lib/prisma\";",
    "[error]   5 | import { Action, RBACService, Resource } from \"@/lib/rbac.service\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | /**",
    "[error]   9 |  * HMS Integration Service for Support Services;",
    "[error] src/lib/services/support-services/ambulance/__tests__/ambulance.service.test.ts: SyntaxError: Property assignment expected. (9:3)",
    "[error]    7 | // Mock Prisma",
    "[error]    8 | vi.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   {",
    "[error]      |   ^",
    "[error]   10 |       findMany: vi.fn(),",
    "[error]   11 |       findUnique: vi.fn(),",
    "[error]   12 |       create: vi.fn(),",
    "[error] src/lib/services/support-services/ambulance/ambulance.service.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";",
    "[error]    8 | import { calculateRoute, estimateArrivalTime } from \"@/lib/services/support-services/ambulance/routing.service\";",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   }",
    "[error]   11 |",
    "[error]   12 |   /**",
    "[error] src/lib/services/support-services/dietary/__tests__/dietary.service.test.ts: SyntaxError: Property assignment expected. (9:3)",
    "[error]    7 | // Mock Prisma",
    "[error]    8 | vi.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   {",
    "[error]      |   ^",
    "[error]   10 |       findMany: vi.fn(),",
    "[error]   11 |       findUnique: vi.fn(),",
    "[error]   12 |       create: vi.fn(),",
    "[error] src/lib/services/support-services/dietary/dietary.service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { prisma } from \"@/lib/prisma\";",
    "[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }",
    "[error]   10 |",
    "[error]   11 |   /**",
    "[error] src/lib/services/support-services/feedback/__tests__/feedback.service.test.ts: SyntaxError: Property assignment expected. (9:3)",
    "[error]    7 | // Mock Prisma",
    "[error]    8 | vi.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   {",
    "[error]      |   ^",
    "[error]   10 |       findMany: vi.fn(),",
    "[error]   11 |       findUnique: vi.fn(),",
    "[error]   12 |       create: vi.fn(),",
    "[error] src/lib/services/support-services/feedback/feedback.service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { prisma } from \"@/lib/prisma\";",
    "[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }",
    "[error]   10 |",
    "[error]   11 |   /**",
    "[error] src/lib/services/support-services/housekeeping/__tests__/housekeeping.service.test.ts: SyntaxError: Property assignment expected. (9:3)",
    "[error]    7 | // Mock Prisma",
    "[error]    8 | vi.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   {",
    "[error]      |   ^",
    "[error]   10 |       findMany: vi.fn(),",
    "[error]   11 |       findUnique: vi.fn(),",
    "[error]   12 |       create: vi.fn(),",
    "[error] src/lib/services/support-services/housekeeping/housekeeping.service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { prisma } from \"@/lib/prisma\";",
    "[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }",
    "[error]   10 |",
    "[error]   11 |   /**",
    "[error] src/lib/services/support-services/maintenance/__tests__/maintenance.service.test.ts: SyntaxError: Property assignment expected. (9:3)",
    "[error]    7 | // Mock Prisma",
    "[error]    8 | vi.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   {",
    "[error]      |   ^",
    "[error]   10 |       findMany: vi.fn(),",
    "[error]   11 |       findUnique: vi.fn(),",
    "[error]   12 |       create: vi.fn(),",
    "[error] src/lib/services/support-services/maintenance/maintenance.service.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { prisma } from \"@/lib/prisma\";",
    "[error]    7 | import type { NotificationService } from \"@/lib/services/notification.service\";",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 |   }",
    "[error]   10 |",
    "[error]   11 |   /**",
    "[error] src/lib/services/support-services/marketing/__tests__/analytics.service.test.ts: SyntaxError: ',' expected. (8:7)",
    "[error]    6 | // Mock dependencies",
    "[error]    7 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  8 |   jest.fn(),",
    "[error]      |       ^",
    "[error]    9 |     findMany: jest.fn()",
    "[error]   10 |   },",
    "[error]   11 |   jest.fn(),",
    "[error] src/lib/services/support-services/marketing/__tests__/contact.service.test.ts: SyntaxError: ',' expected. (9:7)",
    "[error]    7 | // Mock dependencies",
    "[error]    8 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   jest.fn(),",
    "[error]      |       ^",
    "[error]   10 |     findUnique: jest.fn(),",
    "[error]   11 |     findMany: jest.fn(),",
    "[error]   12 |     count: jest.fn(),",
    "[error] src/lib/services/support-services/marketing/__tests__/marketing.service.test.ts: SyntaxError: ',' expected. (9:7)",
    "[error]    7 | // Mock dependencies",
    "[error]    8 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  9 |   jest.fn(),",
    "[error]      |       ^",
    "[error]   10 |     findUnique: jest.fn(),",
    "[error]   11 |     findMany: jest.fn(),",
    "[error]   12 |     count: jest.fn(),",
    "[error] src/lib/services/support-services/marketing/__tests__/segment.service.test.ts: SyntaxError: ',' expected. (8:7)",
    "[error]    6 | // Mock dependencies",
    "[error]    7 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  8 |   jest.fn(),",
    "[error]      |       ^",
    "[error]    9 |     findUnique: jest.fn(),",
    "[error]   10 |     findMany: jest.fn(),",
    "[error]   11 |     count: jest.fn(),",
    "[error] src/lib/services/support-services/marketing/__tests__/template.service.test.ts: SyntaxError: ',' expected. (8:7)",
    "[error]    6 | // Mock dependencies",
    "[error]    7 | jest.mock(\"@/lib/prisma\", () => ({",
    "[error] >  8 |   jest.fn(),",
    "[error]      |       ^",
    "[error]    9 |     findUnique: jest.fn(),",
    "[error]   10 |     findMany: jest.fn(),",
    "[error]   11 |     count: jest.fn(),",
    "[error] src/lib/services/support-services/marketing/analytics.service.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Service for managing marketing analytics;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |   async recordAnalytics(campaignId: string, data: { date: Date, metrics: unknown }, userId: string): Promise<CampaignAnalytics> {",
    "[error]   11 |     try {",
    "[error]   12 |       // Validate analytics data",
    "[error] src/lib/services/support-services/marketing/contact.service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * Service for managing marketing contacts and related operations;",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |       };",
    "[error]   14 |",
    "[error]   15 |       // Create contact in database",
    "[error] src/lib/services/support-services/marketing/index.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Marketing CRM Module Services Index;",
    "[error] src/lib/services/support-services/marketing/marketing.service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * Service for managing marketing campaigns and related operations;",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |         },",
    "[error]   14 |       });",
    "[error]   15 |",
    "[error] src/lib/services/support-services/marketing/segment.service.ts: SyntaxError: Declaration or statement expected. (10:1)",
    "[error]    8 |  * Service for managing contact segments and segmentation;",
    "[error]    9 |  */",
    "[error] > 10 | }",
    "[error]      | ^",
    "[error]   11 |         }",
    "[error]   12 |       });",
    "[error]   13 |",
    "[error] src/lib/services/support-services/marketing/template.service.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  * Service for managing marketing templates;",
    "[error]    8 |  */",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 |         }",
    "[error]   11 |       });",
    "[error]   12 |",
    "[error] src/lib/session.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import type { User } from \"@/types/user\";",
    "[error]    6 | // Define and export the shape of the session data",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 | }",
    "[error]    9 |",
    "[error]   10 | // Augment the iron-session module to include our IronSessionData definition",
    "[error] src/lib/utils.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | /**",
    "[error]   4 |  * Utility function for merging class names with Tailwind CSS;",
    "[error] src/lib/validation/schemas.ts: SyntaxError: Expression expected. (34:46)",
    "[error]   32 |   firstName: z.string().min(2, \"First name is required\"),",
    "[error]   33 |   lastName: z.string().min(2, \"Last name is required\"),",
    "[error] > 34 |   dateOfBirth: z.string().transform((str) => ,",
    "[error]      |                                              ^",
    "[error]   35 |   gender: z.nativeEnum(Gender),",
    "[error]   36 |   phone: z.string().optional(),",
    "[error]   37 |   email: z.string().email().optional(),",
    "[error] src/middleware.ts: SyntaxError: ';' expected. (2:28)",
    "[error]   1 |",
    "[error] > 2 | import crypto from \"crypto\",",
    "[error]     |                            ^",
    "[error]   3 | import { type NextRequest, NextResponse } from \"next/server\",",
    "[error]   4 | }",
    "[error]   5 |",
    "[error] src/middleware/rbac.ts: SyntaxError: Declaration or statement expected. (8:1)",
    "[error]    6 | import { logger } from \"@/lib/logger\";",
    "[error]    7 | // src/middleware/rbac.ts",
    "[error] >  8 | }",
    "[error]      | ^",
    "[error]    9 | }",
    "[error]   10 |",
    "[error]   11 | export function createRBACMiddleware(routePermission: RoutePermission): unknown {",
    "[error] src/modules/emergency-department/services/emergency-service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import { prisma } from \"@/lib/prisma\";",
    "[error]   4 | // src/modules/emergency-department/services/emergency-service.ts",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |   };",
    "[error]   7 | }",
    "[error]   8 |",
    "[error] src/modules/opd-management/services/opd-service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import { prisma } from \"@/lib/prisma\";",
    "[error]   4 | // src/modules/opd-management/services/opd-service.ts",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 | }",
    "[error]   7 |",
    "[error]   8 | }",
    "[error] src/modules/patient-registration/services/patient-service.ts: SyntaxError: Declaration or statement expected. (7:1)",
    "[error]    5 | import { prisma } from \"@/lib/prisma\";",
    "[error]    6 | // src/modules/patient-registration/services/patient-service.ts",
    "[error] >  7 | }",
    "[error]      | ^",
    "[error]    8 | }",
    "[error]    9 |",
    "[error]   10 | }",
    "[error] src/repositories/patient_repository.test.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import type { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\";",
    "[error]   5 | import { type IPatientRepository, type Patient, type PatientInputData, PatientRepository } from \"./patient_repository.ts\";",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |",
    "[error]   8 | // ARCH-3: Unit Tests for PatientRepository",
    "[error]   9 |",
    "[error] src/repositories/patient_repository.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 |",
    "[error]   4 | import type { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\"",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | // ARCH-3: Create Data Access Layer (DAL) with Repository Pattern (Initial Repositories)",
    "[error]   8 | // Research notes: (General TypeScript/Node.js data access patterns)",
    "[error] src/services/ambulance.service.ts: SyntaxError: Invalid character. (9:1)",
    "[error]    7 |   OUT_OF_SERVICE = \"OUT_OF_SERVICE\",",
    "[error]    8 |   MAINTENANCE = \"MAINTENANCE\",",
    "[error] >  9 | \\n\\nexport AmbulanceType {",
    "[error]      | ^",
    "[error]   10 |   BASIC = \"BASIC\",",
    "[error]   11 |   ADVANCED = \"ADVANCED\",",
    "[error]   12 |   CRITICAL_CARE = \"CRITICAL_CARE\",",
    "[error] src/services/audit_log_service.test.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { AuditLogService, type IAuditLogService } from \"./audit_log_service.ts\"",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // SEC-3: Unit Tests for AuditLogService (Placeholder)",
    "[error]   6 |",
    "[error] src/services/audit_log_service.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { IDatabaseAdapter } from \"../lib/database/postgresql_adapter.ts\"; // Or a dedicated logging sink",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // SEC-3: Implement Comprehensive Audit Logging (Initial Service & Integration)",
    "[error]   6 | // Research notes: research_notes_audit_logging.md",
    "[error] src/services/auth_service.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // ARCH-2: Implement Service Layer Abstraction (Initial Services)",
    "[error]   4 | // SEC-2: Complete Authentication Framework Implementation (Strengthen Password Hashing)",
    "[error] src/services/bloodbank.service.ts: SyntaxError: Invalid character. (13:1)",
    "[error]   11 |   O_POSITIVE = \"O_POSITIVE\",",
    "[error]   12 |   O_NEGATIVE = \"O_NEGATIVE\",",
    "[error] > 13 | \\n\\nexport BloodDonationStatus {",
    "[error]      | ^",
    "[error]   14 |   PENDING = \"PENDING\",",
    "[error]   15 |   COMPLETED = \"COMPLETED\",",
    "[error]   16 |   REJECTED = \"REJECTED\",",
    "[error] src/services/clinical-documentation.service.ts: SyntaxError: Declaration or statement expected. (12:1)",
    "[error]   10 |  * Service for managing clinical documentation;",
    "[error]   11 |  */",
    "[error] > 12 | }",
    "[error]      | ^",
    "[error]   13 |       where: { id: data.patientId }",
    "[error]   14 |     });",
    "[error]   15 |",
    "[error] src/services/dietary.service.ts: SyntaxError: Invalid character. (15:1)",
    "[error]   13 |   NPO = \"NPO\",",
    "[error]   14 |   CUSTOM = \"CUSTOM\",",
    "[error] > 15 | \\n\\nexport DietOrderStatus {",
    "[error]      | ^",
    "[error]   16 |   ACTIVE = \"ACTIVE\",",
    "[error]   17 |   COMPLETED = \"COMPLETED\",",
    "[error]   18 |   CANCELLED = \"CANCELLED\",",
    "[error] src/services/encryption_service_secure.test.ts: SyntaxError: ',' expected. (8:13)",
    "[error]    6 |   let encryptionService: SecureEncryptionService;",
    "[error]    7 |   const testMasterKey = crypto.randomBytes(32).toString(\"base64\"),",
    "[error] >  8 |   beforeEach(() => {",
    "[error]      |             ^",
    "[error]    9 |     encryptionService = new SecureEncryptionService(testMasterKey);",
    "[error]   10 |   });",
    "[error]   11 |",
    "[error] src/services/encryption_service_secure.ts: SyntaxError: Declaration or statement expected. (9:1)",
    "[error]    7 |  */",
    "[error]    8 |",
    "[error] >  9 | }",
    "[error]      | ^",
    "[error]   10 | }",
    "[error]   11 |",
    "[error]   12 | interface EncryptedData {",
    "[error] src/services/encryption_service.test.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import { EncryptionService, type IEncryptionService } from \"./encryption_service.ts\"",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // SEC-1: Unit Tests for EncryptionService (Placeholder)",
    "[error]   6 |",
    "[error] src/services/encryption_service.ts: SyntaxError: Declaration or statement expected. (18:1)",
    "[error]   16 |  * Legacy synchronous wrapper for backward compatibility",
    "[error]   17 |  */",
    "[error] > 18 | }",
    "[error]      | ^",
    "[error]   19 |     }",
    "[error]   20 |",
    "[error]   21 |     // For immediate backward compatibility, handle as placeholder",
    "[error] src/services/housekeeping.service.ts: SyntaxError: Invalid character. (9:1)",
    "[error]    7 |   COMPLETED = \"COMPLETED\",",
    "[error]    8 |   CANCELLED = \"CANCELLED\",",
    "[error] >  9 | \\n\\nexport HousekeepingTaskPriority {",
    "[error]      | ^",
    "[error]   10 |   LOW = \"LOW\",",
    "[error]   11 |   MEDIUM = \"MEDIUM\",",
    "[error]   12 |   HIGH = \"HIGH\",",
    "[error] src/services/integration/LaboratoryService.ts: SyntaxError: ',' expected. (13:4)",
    "[error]   11 | export const LabOrderSchema = z.object({",
    "[error]   12 |   encounterId: z.string().uuid(),",
    "[error] > 13 |   z.string().uuid(),",
    "[error]      |    ^",
    "[error]   14 |     testName: z.string().min(1),",
    "[error]   15 |     testCode: z.string().min(1),",
    "[error]   16 |     specimenType: z.string().min(1),",
    "[error] src/services/integration/PharmacyService.ts: SyntaxError: ',' expected. (13:4)",
    "[error]   11 | export const MedicationOrderSchema = z.object({",
    "[error]   12 |   encounterId: z.string().uuid(),",
    "[error] > 13 |   z.string().uuid(),",
    "[error]      |    ^",
    "[error]   14 |     name: z.string().min(1),",
    "[error]   15 |     dosage: z.string().min(1),",
    "[error]   16 |     route: z.string().min(1),",
    "[error] src/services/laboratory.service.ts: SyntaxError: ',' expected. (35:39)",
    "[error]   33 |   isVisible: z.boolean().default(true),",
    "[error]   34 |   referralTest: z.boolean().default(false),",
    "[error] > 35 |   referralLabId: z.string().optional();",
    "[error]      |                                       ^",
    "[error]   36 | });",
    "[error]   37 |",
    "[error]   38 | // Define schema for lab order",
    "[error] src/services/maintenance.service.ts: SyntaxError: Invalid character. (9:1)",
    "[error]    7 |   COMPLETED = \"COMPLETED\",",
    "[error]    8 |   CANCELLED = \"CANCELLED\",",
    "[error] >  9 | \\n\\nexport MaintenanceRequestPriority {",
    "[error]      | ^",
    "[error]   10 |   LOW = \"LOW\",",
    "[error]   11 |   MEDIUM = \"MEDIUM\",",
    "[error]   12 |   HIGH = \"HIGH\",",
    "[error] src/services/patient_service.ts: SyntaxError: Declaration or statement expected. (5:1)",
    "[error]   3 | import type { IAuditLogService } from \"./audit_log_service.ts\"; // Import AuditLogService interface",
    "[error]   4 | import type { IEncryptionService } from \"./encryption_service.ts\";",
    "[error] > 5 | }",
    "[error]     | ^",
    "[error]   6 |",
    "[error]   7 | // ARCH-2: Implement Service Layer Abstraction (Initial Services)",
    "[error]   8 | // SEC-1: Implement Field-Level Encryption for PHI (Placeholder Service)",
    "[error] src/services/patient-management.service.ts: SyntaxError: ',' expected. (44:31)",
    "[error]   42 |   vip: z.boolean().default(false),",
    "[error]   43 |   confidential: z.boolean().default(false),",
    "[error] > 44 |   notes: z.string().optional();",
    "[error]      |                               ^",
    "[error]   45 | });",
    "[error]   46 |",
    "[error]   47 | // Define schema for contact information",
    "[error] src/types/api.ts: SyntaxError: Declaration or statement expected. (2:1)",
    "[error]   1 | import type { MedicationAdministrationRecord } from \"./pharmacy.ts\";",
    "[error] > 2 | }",
    "[error]     | ^",
    "[error]   3 |",
    "[error]   4 | // src/types/api.ts",
    "[error]   5 |",
    "[error] src/types/appointment.ts: SyntaxError: Declaration or statement expected. (4:1)",
    "[error]   2 | import type { Doctor } from \"./doctor.ts\";",
    "[error]   3 | import type { Patient } from \"./patient.ts\";",
    "[error] > 4 | }",
    "[error]     | ^",
    "[error]   5 |",
    "[error]   6 | // types/appointment.ts",
    "[error]   7 | export enum AppointmentStatus {",
    "[error] src/types/billing.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // types/billing.ts",
    "[error]   4 |",
    "[error] src/types/doctor.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import type { User } from \"./user.ts\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // types/doctor.ts",
    "[error]   6 | }",
    "[error] src/types/inventory.ts: SyntaxError: Declaration or statement expected. (3:1)",
    "[error]   1 |",
    "[error]   2 | import type { BillableItem } from \"./billing.ts\";",
    "[error] > 3 | }",
    "[error]     | ^",
    "[error]   4 |",
    "[error]   5 | // types/inventory.ts",
    "[error]   6 | }",
    "[error] src/types/ipd.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // src/types/ipd.ts",
    "[error]   4 |",
    "[error] src/types/opd.ts: SyntaxError: Declaration or statement expected. (2:1)",
    "[error]   1 | import type { Patient } from \"./patient.ts\";",
    "[error] > 2 | }",
    "[error]     | ^",
    "[error]   3 |",
    "[error]   4 | // types/opd.ts",
    "[error]   5 | // import { Doctor } from \"./doctor.ts\"; // FIX: Removed unused import",
    "[error] src/types/patient.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // types/patient.ts",
    "[error]   4 |",
    "[error] src/types/pharmacy.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // src/types/pharmacy.ts",
    "[error]   4 |",
    "[error] src/types/schedule.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // types/schedule.ts",
    "[error]   4 |",
    "[error] src/types/user.ts: SyntaxError: Declaration or statement expected. (1:1)",
    "[error] > 1 | }",
    "[error]     | ^",
    "[error]   2 |",
    "[error]   3 | // types/user.ts",
    "[error]   4 |",
    "[error] src/utils/api-response.ts: SyntaxError: Declaration or statement expected. (6:1)",
    "[error]   4 | import { logger } from \"@/lib/logger\";",
    "[error]   5 | // src/utils/api-response.ts",
    "[error] > 6 | }",
    "[error]     | ^",
    "[error]   7 |   };",
    "[error]   8 | }",
    "[error]   9 |",
    "[warn] Code style issues found in the above file. Run Prettier with --write to fix.",
    "Failed to compile.",
    "Error:   \u001b[31mx\u001b[0m Unexpected token `,`. Expected identifier, string literal, numeric literal or [ for the computed key",
    "Syntax Error",
    "Error:   \u001b[31mx\u001b[0m Expected ',', got ';'",
    "Syntax Error",
    "Error:   \u001b[31mx\u001b[0m Expected ',', got ';'",
    "\u001b[2m 9\u001b[0m |     const cookieStore = await cookies(); // REVERT FIX: Add await back based on TS error",
    "Syntax Error",
    "Error:   \u001b[31mx\u001b[0m Expression expected",
    "Syntax Error",
    "Error:   \u001b[31mx\u001b[0m Expression expected",
    "\u001b[2m107\u001b[0m |             throw new Error(`Failed to register user: ${}`;",
    "Syntax Error",
    "> Build failed because of webpack errors"
  ],
  "all_warnings": [
    "To eliminate this warning, add \"type\": \"module\" to /workspace/Hospital-Management-System/package.json.",
    "(Use `node --trace-warnings ...` to show where the warning was created)",
    "Potential hardcoded secret in authUtils.test.ts",
    "Outdated package: @jest/globals (current: 29.7.0, latest: 30.0.0)",
    "Outdated package: @nx/devkit (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/eslint (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/jest (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/js (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/next (current: 20.8.2, latest: 21.2.0)",
    "Outdated package: @nx/node (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/react (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @nx/workspace (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: @opentelemetry/auto-instrumentations-node (current: 0.50.2, latest: 0.60.1)",
    "Outdated package: @opentelemetry/sdk-node (current: 0.54.2, latest: 0.202.0)",
    "Outdated package: @prisma/extension-accelerate (current: 1.3.0, latest: 2.0.1)",
    "Outdated package: @storybook/react (current: 8.6.14, latest: 9.0.11)",
    "Outdated package: @storybook/react-vite (current: 8.6.14, latest: 9.0.11)",
    "Outdated package: @types/jest (current: 29.5.14, latest: 30.0.0)",
    "Outdated package: @types/node (current: 22.15.32, latest: 24.0.3)",
    "Outdated package: bcryptjs (current: 2.4.3, latest: 3.0.2)",
    "Outdated package: caniuse-lite (current: 1.0.30001281, latest: 1.0.30001723)",
    "Outdated package: chromatic (current: 11.29.0, latest: 13.0.0)",
    "Outdated package: eslint-config-next (current: 15.3.1, latest: 15.3.3)",
    "Outdated package: eslint-plugin-sonarjs (current: 2.0.4, latest: 3.0.3)",
    "Outdated package: eslint-plugin-unicorn (current: 56.0.1, latest: 59.0.1)",
    "Outdated package: express-prom-bundle (current: 7.0.2, latest: 8.0.0)",
    "Outdated package: jest (current: 29.7.0, latest: 30.0.0)",
    "Outdated package: jest-environment-jsdom (current: 29.7.0, latest: 30.0.0)",
    "Outdated package: jose (current: 5.10.0, latest: 6.0.11)",
    "Outdated package: lint-staged (current: 15.5.2, latest: 16.1.2)",
    "Outdated package: lucide-react (current: 0.503.0, latest: 0.516.0)",
    "Outdated package: node-cron (current: 3.0.3, latest: 4.1.0)",
    "Outdated package: nx (current: 20.2.2, latest: 21.2.0)",
    "Outdated package: react-resizable-panels (current: 2.1.9, latest: 3.0.3)",
    "Outdated package: redis (current: 4.7.1, latest: 5.5.6)",
    "Outdated package: storybook (current: 8.6.14, latest: 9.0.11)",
    "Outdated package: tailwind-merge (current: 2.6.0, latest: 3.3.1)",
    "Outdated package: tailwindcss (current: 3.4.17, latest: 4.1.10)",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "API route may be missing proper exports: route.ts",
    "Large deletion detected: 38078 lines",
    "Large deletion detected: 74855 lines",
    "No exports/classes found in src/services/patient_service.ts",
    "No exports/classes found in src/services/patient_service.ts",
    "No exports/classes found in src/services/auth_service.ts",
    "No exports/classes found in src/services/auth_service.ts",
    "No exports/classes found in src/lib/auth.ts",
    "No exports/classes found in src/lib/auth.ts",
    "No exports/classes found in src/lib/database.ts",
    "No exports/classes found in src/lib/database.ts"
  ]
}