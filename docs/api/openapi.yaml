# OpenAPI Documentation for Support Services Management Module

openapi: 3.0.0
info:
  title: Hospital Management System - Support Services API
  description: API documentation for the Support Services Management module of the Hospital Management System
  version: 1.0.0
  contact:
    name: HMS Development Team
    email: dev@hms.example.com
  license:
    name: Proprietary
    url: https://hms.example.com/license

servers:
  - url: https://api.hms.example.com/v1
    description: Production server
  - url: https://staging-api.hms.example.com/v1
    description: Staging server
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Housekeeping
    description: Housekeeping management operations
  - name: Maintenance
    description: Maintenance management operations
  - name: Dietary
    description: Dietary management operations
  - name: Ambulance
    description: Ambulance management operations
  - name: Feedback
    description: Feedback and complaint management operations
  - name: Marketing
    description: Marketing CRM operations
  - name: Integration
    description: Integration with HMS core system

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    # Common schemas
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
      required:
        - code
        - message
    
    PaginationParams:
      type: object
      properties:
        page:
          type: integer
          description: Page number (1-based)
          default: 1
          minimum: 1
        limit:
          type: integer
          description: Number of items per page
          default: 10
          minimum: 1
          maximum: 100
    
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Number of items per page
            totalItems:
              type: integer
              description: Total number of items
            totalPages:
              type: integer
              description: Total number of pages
      required:
        - data
        - pagination
    
    # Housekeeping schemas
    HousekeepingRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the housekeeping request
        locationId:
          type: string
          format: uuid
          description: ID of the location where housekeeping is needed
        requestType:
          type: string
          enum: [CLEANING, DISINFECTION, LINEN_CHANGE, WASTE_DISPOSAL, SPILL_CLEANUP, OTHER]
          description: Type of housekeeping request
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          description: Priority level of the request
        description:
          type: string
          description: Detailed description of the request
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the housekeeping task
        status:
          type: string
          enum: [PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED]
          description: Current status of the request
        notes:
          type: string
          description: Additional notes about the request
        requestedById:
          type: string
          format: uuid
          description: ID of the user who requested the housekeeping
        assignedToId:
          type: string
          format: uuid
          description: ID of the staff member assigned to the task
        completedById:
          type: string
          format: uuid
          description: ID of the staff member who completed the task
        completedAt:
          type: string
          format: date-time
          description: Time when the task was completed
        createdAt:
          type: string
          format: date-time
          description: Time when the request was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the request was last updated
      required:
        - locationId
        - requestType
        - priority
        - scheduledTime
    
    HousekeepingRequestCreate:
      type: object
      properties:
        locationId:
          type: string
          format: uuid
          description: ID of the location where housekeeping is needed
        requestType:
          type: string
          enum: [CLEANING, DISINFECTION, LINEN_CHANGE, WASTE_DISPOSAL, SPILL_CLEANUP, OTHER]
          description: Type of housekeeping request
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          description: Priority level of the request
        description:
          type: string
          description: Detailed description of the request
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the housekeeping task
        notes:
          type: string
          description: Additional notes about the request
        requestedById:
          type: string
          format: uuid
          description: ID of the user who requested the housekeeping
      required:
        - locationId
        - requestType
        - priority
        - scheduledTime
        - requestedById
    
    HousekeepingRequestUpdate:
      type: object
      properties:
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          description: Priority level of the request
        description:
          type: string
          description: Detailed description of the request
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the housekeeping task
        status:
          type: string
          enum: [PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED]
          description: Current status of the request
        notes:
          type: string
          description: Additional notes about the request
    
    HousekeepingAnalytics:
      type: object
      properties:
        totalRequests:
          type: integer
          description: Total number of housekeeping requests
        statusDistribution:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                enum: [PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED]
              count:
                type: integer
          description: Distribution of requests by status
        requestTypeDistribution:
          type: array
          items:
            type: object
            properties:
              requestType:
                type: string
                enum: [CLEANING, DISINFECTION, LINEN_CHANGE, WASTE_DISPOSAL, SPILL_CLEANUP, OTHER]
              count:
                type: integer
          description: Distribution of requests by type
        priorityDistribution:
          type: array
          items:
            type: object
            properties:
              priority:
                type: string
                enum: [LOW, MEDIUM, HIGH, URGENT]
              count:
                type: integer
          description: Distribution of requests by priority
      required:
        - totalRequests
        - statusDistribution
        - requestTypeDistribution
        - priorityDistribution
    
    # Maintenance schemas
    MaintenanceRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the maintenance request
        assetId:
          type: string
          format: uuid
          description: ID of the asset requiring maintenance
        requestType:
          type: string
          enum: [CORRECTIVE, PREVENTIVE, EMERGENCY, INSPECTION]
          description: Type of maintenance request
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          description: Priority level of the request
        description:
          type: string
          description: Detailed description of the request
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the maintenance task
        status:
          type: string
          enum: [PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED]
          description: Current status of the request
        notes:
          type: string
          description: Additional notes about the request
        requestedById:
          type: string
          format: uuid
          description: ID of the user who requested the maintenance
        departmentId:
          type: string
          format: uuid
          description: ID of the department requesting maintenance
        assignedToId:
          type: string
          format: uuid
          description: ID of the technician assigned to the task
        startedAt:
          type: string
          format: date-time
          description: Time when work started
        completedById:
          type: string
          format: uuid
          description: ID of the technician who completed the task
        completedAt:
          type: string
          format: date-time
          description: Time when the task was completed
        laborHours:
          type: number
          format: float
          description: Hours spent on the maintenance task
        partsUsed:
          type: array
          items:
            type: object
            properties:
              partId:
                type: string
                format: uuid
              quantity:
                type: integer
          description: Parts used in the maintenance
        estimatedDuration:
          type: integer
          description: Estimated duration in minutes
        createdAt:
          type: string
          format: date-time
          description: Time when the request was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the request was last updated
      required:
        - assetId
        - requestType
        - priority
        - scheduledTime
    
    MaintenanceAsset:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the asset
        name:
          type: string
          description: Name of the asset
        type:
          type: string
          enum: [HVAC, ELECTRICAL, PLUMBING, MEDICAL_EQUIPMENT, IT_EQUIPMENT, FURNITURE, VEHICLE, OTHER]
          description: Type of asset
        status:
          type: string
          enum: [OPERATIONAL, UNDER_MAINTENANCE, OUT_OF_SERVICE, RETIRED]
          description: Current status of the asset
        location:
          type: string
          description: Location of the asset
        serialNumber:
          type: string
          description: Serial number of the asset
        model:
          type: string
          description: Model of the asset
        manufacturer:
          type: string
          description: Manufacturer of the asset
        purchaseDate:
          type: string
          format: date
          description: Date when the asset was purchased
        warrantyExpiryDate:
          type: string
          format: date
          description: Date when the warranty expires
        lastMaintenanceDate:
          type: string
          format: date-time
          description: Date of the last maintenance
        nextMaintenanceDate:
          type: string
          format: date-time
          description: Scheduled date for the next maintenance
        createdAt:
          type: string
          format: date-time
          description: Time when the asset was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the asset was last updated
      required:
        - name
        - type
        - status
    
    # Dietary schemas
    DietaryRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the dietary request
        patientId:
          type: string
          format: uuid
          description: ID of the patient
        mealType:
          type: string
          enum: [BREAKFAST, LUNCH, DINNER, SNACK]
          description: Type of meal
        dietType:
          type: string
          enum: [REGULAR, VEGETARIAN, VEGAN, DIABETIC, GLUTEN_FREE, LOW_SODIUM, LIQUID, SOFT, CUSTOM]
          description: Type of diet
        customDietDetails:
          type: string
          description: Details for custom diet
        allergies:
          type: array
          items:
            type: string
            enum: [NUTS, DAIRY, EGGS, WHEAT, SOY, FISH, SHELLFISH, OTHER]
          description: Food allergies
        preferences:
          type: array
          items:
            type: string
            enum: [NO_SPICY, NO_GARLIC, NO_ONION, NO_RED_MEAT, OTHER]
          description: Food preferences
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the meal
        status:
          type: string
          enum: [PENDING, PREPARING, READY, DELIVERED, COMPLETED, CANCELLED]
          description: Current status of the request
        notes:
          type: string
          description: Additional notes about the request
        requestedById:
          type: string
          format: uuid
          description: ID of the user who requested the meal
        locationId:
          type: string
          format: uuid
          description: ID of the location for delivery
        preparedById:
          type: string
          format: uuid
          description: ID of the staff member who prepared the meal
        preparedAt:
          type: string
          format: date-time
          description: Time when the meal was prepared
        deliveredById:
          type: string
          format: uuid
          description: ID of the staff member who delivered the meal
        deliveredAt:
          type: string
          format: date-time
          description: Time when the meal was delivered
        createdAt:
          type: string
          format: date-time
          description: Time when the request was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the request was last updated
      required:
        - patientId
        - mealType
        - dietType
        - scheduledTime
    
    DietaryMenu:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the menu
        name:
          type: string
          description: Name of the menu
        dietType:
          type: string
          enum: [REGULAR, VEGETARIAN, VEGAN, DIABETIC, GLUTEN_FREE, LOW_SODIUM, LIQUID, SOFT, CUSTOM]
          description: Type of diet
        mealType:
          type: string
          enum: [BREAKFAST, LUNCH, DINNER, SNACK]
          description: Type of meal
        description:
          type: string
          description: Description of the menu
        nutritionalInfo:
          type: object
          properties:
            calories:
              type: integer
            protein:
              type: integer
            carbs:
              type: integer
            fat:
              type: integer
          description: Nutritional information
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              description:
                type: string
              category:
                type: string
                enum: [APPETIZER, MAIN_COURSE, SIDE_DISH, DESSERT, BEVERAGE]
          description: Menu items
        isActive:
          type: boolean
          description: Whether the menu is active
        createdAt:
          type: string
          format: date-time
          description: Time when the menu was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the menu was last updated
      required:
        - name
        - dietType
        - mealType
        - isActive
    
    # Ambulance schemas
    AmbulanceTrip:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the ambulance trip
        requestType:
          type: string
          enum: [EMERGENCY, NON_EMERGENCY, TRANSFER, DISCHARGE, SCHEDULED]
          description: Type of ambulance request
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          description: Priority level of the request
        pickupLocation:
          type: string
          description: Pickup location
        dropoffLocation:
          type: string
          description: Dropoff location
        patientId:
          type: string
          format: uuid
          description: ID of the patient
        scheduledTime:
          type: string
          format: date-time
          description: Scheduled time for the trip
        status:
          type: string
          enum: [PENDING, ASSIGNED, EN_ROUTE_TO_PICKUP, AT_PICKUP, EN_ROUTE_TO_DROPOFF, COMPLETED, CANCELLED]
          description: Current status of the trip
        notes:
          type: string
          description: Additional notes about the trip
        requestedById:
          type: string
          format: uuid
          description: ID of the user who requested the ambulance
        ambulanceId:
          type: string
          format: uuid
          description: ID of the assigned ambulance
        crew:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string
              role:
                type: string
                enum: [DRIVER, PARAMEDIC, EMT, NURSE, DOCTOR]
          description: Assigned crew members
        contactName:
          type: string
          description: Contact person name
        contactPhone:
          type: string
          description: Contact person phone
        medicalEquipmentNeeded:
          type: array
          items:
            type: string
            enum: [OXYGEN, STRETCHER, WHEELCHAIR, MONITOR, VENTILATOR, DEFIBRILLATOR, OTHER]
          description: Medical equipment needed for the trip
        specialInstructions:
          type: string
          description: Special instructions for the trip
        currentLatitude:
          type: number
          format: float
          description: Current latitude of the ambulance
        currentLongitude:
          type: number
          format: float
          description: Current longitude of the ambulance
        startedAt:
          type: string
          format: date-time
          description: Time when the trip started
        completedAt:
          type: string
          format: date-time
          description: Time when the trip was completed
        createdAt:
          type: string
          format: date-time
          description: Time when the request was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the request was last updated
      required:
        - requestType
        - priority
        - pickupLocation
        - dropoffLocation
        - scheduledTime
    
    Ambulance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the ambulance
        registrationNumber:
          type: string
          description: Registration number of the ambulance
        type:
          type: string
          enum: [BASIC_LIFE_SUPPORT, ADVANCED_LIFE_SUPPORT, PATIENT_TRANSPORT, NEONATAL, MOBILE_ICU]
          description: Type of ambulance
        status:
          type: string
          enum: [AVAILABLE, ASSIGNED, IN_SERVICE, UNDER_MAINTENANCE, OUT_OF_SERVICE]
          description: Current status of the ambulance
        capacity:
          type: integer
          description: Capacity of the ambulance
        features:
          type: array
          items:
            type: string
          description: Features of the ambulance
        lastMaintenanceDate:
          type: string
          format: date-time
          description: Date of the last maintenance
        nextMaintenanceDate:
          type: string
          format: date-time
          description: Scheduled date for the next maintenance
        currentLatitude:
          type: number
          format: float
          description: Current latitude of the ambulance
        currentLongitude:
          type: number
          format: float
          description: Current longitude of the ambulance
        createdAt:
          type: string
          format: date-time
          description: Time when the ambulance was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the ambulance was last updated
      required:
        - registrationNumber
        - type
        - status
    
    # Feedback schemas
    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the feedback
        patientId:
          type: string
          format: uuid
          description: ID of the patient
        departmentId:
          type: string
          format: uuid
          description: ID of the department
        feedbackType:
          type: string
          enum: [GENERAL, CARE_QUALITY, STAFF, FACILITIES, FOOD, CLEANLINESS, OTHER]
          description: Type of feedback
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating (1-5)
        comments:
          type: string
          description: Feedback comments
        status:
          type: string
          enum: [NEW, REVIEWED, RESPONDED, CLOSED]
          description: Current status of the feedback
        isAnonymous:
          type: boolean
          description: Whether the feedback is anonymous
        contactEmail:
          type: string
          format: email
          description: Contact email
        contactPhone:
          type: string
          description: Contact phone
        reviewedById:
          type: string
          format: uuid
          description: ID of the user who reviewed the feedback
        reviewedAt:
          type: string
          format: date-time
          description: Time when the feedback was reviewed
        createdAt:
          type: string
          format: date-time
          description: Time when the feedback was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the feedback was last updated
      required:
        - feedbackType
        - rating
    
    Complaint:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the complaint
        patientId:
          type: string
          format: uuid
          description: ID of the patient
        departmentId:
          type: string
          format: uuid
          description: ID of the department
        complaintType:
          type: string
          enum: [SERVICE_QUALITY, BILLING, STAFF_BEHAVIOR, FACILITIES, MEDICAL_CARE, PRIVACY, OTHER]
          description: Type of complaint
        description:
          type: string
          description: Complaint description
        severity:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          description: Severity level of the complaint
        status:
          type: string
          enum: [OPEN, INVESTIGATING, RESOLVED, CLOSED]
          description: Current status of the complaint
        isAnonymous:
          type: boolean
          description: Whether the complaint is anonymous
        contactEmail:
          type: string
          format: email
          description: Contact email
        contactPhone:
          type: string
          description: Contact phone
        preferredContactMethod:
          type: string
          enum: [EMAIL, PHONE, MAIL, NONE]
          description: Preferred contact method
        incidentDate:
          type: string
          format: date-time
          description: Date of the incident
        assignedToId:
          type: string
          format: uuid
          description: ID of the user assigned to handle the complaint
        resolvedAt:
          type: string
          format: date-time
          description: Time when the complaint was resolved
        createdAt:
          type: string
          format: date-time
          description: Time when the complaint was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the complaint was last updated
      required:
        - complaintType
        - description
        - severity
    
    # Marketing schemas
    MarketingCampaign:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the campaign
        name:
          type: string
          description: Name of the campaign
        description:
          type: string
          description: Description of the campaign
        type:
          type: string
          enum: [AWARENESS, PROMOTION, EVENT, EDUCATION, OUTREACH, OTHER]
          description: Type of campaign
        status:
          type: string
          enum: [PLANNED, ACTIVE, PAUSED, COMPLETED, CANCELLED]
          description: Current status of the campaign
        startDate:
          type: string
          format: date-time
          description: Start date of the campaign
        endDate:
          type: string
          format: date-time
          description: End date of the campaign
        budget:
          type: number
          format: float
          description: Budget for the campaign
        targetAudience:
          type: string
          description: Target audience for the campaign
        goals:
          type: string
          description: Goals of the campaign
        channels:
          type: array
          items:
            type: string
            enum: [EMAIL, SMS, SOCIAL_MEDIA, PRINT, RADIO, TV, DIRECT_MAIL, PHONE, OTHER]
          description: Marketing channels used
        createdById:
          type: string
          format: uuid
          description: ID of the user who created the campaign
        createdAt:
          type: string
          format: date-time
          description: Time when the campaign was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the campaign was last updated
      required:
        - name
        - type
        - status
        - startDate
        - endDate
    
    MarketingContact:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the contact
        firstName:
          type: string
          description: First name of the contact
        lastName:
          type: string
          description: Last name of the contact
        email:
          type: string
          format: email
          description: Email of the contact
        phone:
          type: string
          description: Phone number of the contact
        type:
          type: string
          enum: [PATIENT, REFERRER, PARTNER, OTHER]
          description: Type of contact
        status:
          type: string
          enum: [ACTIVE, INACTIVE, UNSUBSCRIBED]
          description: Current status of the contact
        address:
          type: string
          description: Address of the contact
        city:
          type: string
          description: City of the contact
        state:
          type: string
          description: State of the contact
        zipCode:
          type: string
          description: ZIP code of the contact
        dateOfBirth:
          type: string
          format: date
          description: Date of birth of the contact
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
          description: Gender of the contact
        preferredContactMethod:
          type: string
          enum: [EMAIL, PHONE, MAIL, NONE]
          description: Preferred contact method
        marketingConsent:
          type: boolean
          description: Whether the contact has given marketing consent
        notes:
          type: string
          description: Notes about the contact
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the contact
        createdAt:
          type: string
          format: date-time
          description: Time when the contact was created
        updatedAt:
          type: string
          format: date-time
          description: Time when the contact was last updated
      required:
        - firstName
        - lastName
        - type
        - status
        - marketingConsent

security:
  - bearerAuth: []

paths:
  # Housekeeping endpoints
  /support-services/housekeeping:
    get:
      summary: Get all housekeeping requests
      description: Retrieve a paginated list of housekeeping requests with optional filters
      operationId: getHousekeepingRequests
      tags:
        - Housekeeping
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [PENDING, ASSIGNED, IN_PROGRESS, COMPLETED, CANCELLED]
        - name: priority
          in: query
          description: Filter by priority
          schema:
            type: string
            enum: [LOW, MEDIUM, HIGH, URGENT]
        - name: requestType
          in: query
          description: Filter by request type
          schema:
            type: string
            enum: [CLEANING, DISINFECTION, LINEN_CHANGE, WASTE_DISPOSAL, SPILL_CLEANUP, OTHER]
        - name: locationId
          in: query
          description: Filter by location ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/HousekeepingRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new housekeeping request
      description: Create a new housekeeping request
      operationId: createHousekeepingRequest
      tags:
        - Housekeeping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HousekeepingRequestCreate'
      responses:
        '201':
          description: Request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /support-services/housekeeping/{id}:
    get:
      summary: Get a housekeeping request by ID
      description: Retrieve a specific housekeeping request by its ID
      operationId: getHousekeepingRequestById
      tags:
        - Housekeeping
      parameters:
        - name: id
          in: path
          description: ID of the housekeeping request
          required: true
          schema:
            type: string
            format: uuid
        - name: fhir
          in: query
          description: Whether to return the request in FHIR format
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingRequest'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a housekeeping request
      description: Update an existing housekeeping request
      operationId: updateHousekeepingRequest
      tags:
        - Housekeeping
      parameters:
        - name: id
          in: path
          description: ID of the housekeeping request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HousekeepingRequestUpdate'
      responses:
        '200':
          description: Request updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a housekeeping request
      description: Delete a housekeeping request by its ID
      operationId: deleteHousekeepingRequest
      tags:
        - Housekeeping
      parameters:
        - name: id
          in: path
          description: ID of the housekeeping request
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Request deleted successfully
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /support-services/housekeeping/{id}/assign:
    post:
      summary: Assign a housekeeping request
      description: Assign a housekeeping request to a staff member
      operationId: assignHousekeepingRequest
      tags:
        - Housekeeping
      parameters:
        - name: id
          in: path
          description: ID of the housekeeping request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  type: string
                  format: uuid
                  description: ID of the staff member to assign
              required:
                - staffId
      responses:
        '200':
          description: Request assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Request or staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /support-services/housekeeping/{id}/complete:
    post:
      summary: Complete a housekeeping request
      description: Mark a housekeeping request as completed
      operationId: completeHousekeepingRequest
      tags:
        - Housekeeping
      parameters:
        - name: id
          in: path
          description: ID of the housekeeping request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                staffId:
                  type: string
                  format: uuid
                  description: ID of the staff member completing the request
                notes:
                  type: string
                  description: Completion notes
              required:
                - staffId
      responses:
        '200':
          description: Request completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /support-services/housekeeping/analytics:
    get:
      summary: Get housekeeping analytics
      description: Retrieve analytics data for housekeeping requests
      operationId: getHousekeepingAnalytics
      tags:
        - Housekeeping
      parameters:
        - name: fromDate
          in: query
          description: Start date for analytics
          schema:
            type: string
            format: date-time
        - name: toDate
          in: query
          description: End date for analytics
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HousekeepingAnalytics'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Additional endpoints for other modules would follow the same pattern
  # Maintenance endpoints
  # Dietary endpoints
  # Ambulance endpoints
  # Feedback endpoints
  # Marketing endpoints
  # Integration endpoints
