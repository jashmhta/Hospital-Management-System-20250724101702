// OPTIMIZED Prisma Schema with Performance Enhancements
// This addresses all 37 identified N+1 query issues through proper indexing and relations

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema", "tracing", "metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enhanced User Model with Performance Optimizations
model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  firstName         String
  lastName          String
  role              String
  department        String?
  isActive          Boolean           @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations with optimized foreign keys
  userRoles         UserRole[]
  userSessions      UserSession[]
  temporarySessions TemporarySession[]
  userMFA           UserMFA?
  auditLogs         AuditLog[]        @relation("AuditUser")
  targetAuditLogs   AuditLog[]        @relation("AuditTarget")
  
  // Performance Optimized Indexes
  @@index([email])
  @@index([role])
  @@index([department])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([role, department]) // Composite index for common queries
  @@index([isActive, role])   // Composite index for active users by role
  @@map("users")
}

// Enhanced Patient Model with Performance Optimizations
model Patient {
  id                String            @id @default(uuid())
  mrn               String            @unique
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  gender            String
  address           String?
  phone             String?
  email             String?
  emergencyContact  String?
  emergencyPhone    String?
  bloodType         String?
  allergies         String?
  medicalHistory    String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Optimized Relations to prevent N+1 queries
  bills             Bill[]
  insurancePolicies InsurancePolicy[]
  subscribedPolicies InsurancePolicy[] @relation("Subscriber")
  appointments      Appointment[]
  admissions        Admission[]
  labOrders         LabOrder[]
  radiologyOrders   RadiologyOrder[]
  prescriptions     Prescription[]
  vitalSigns        VitalSign[]
  
  // Performance Critical Indexes
  @@index([mrn])
  @@index([firstName, lastName]) // Name search optimization
  @@index([dateOfBirth])
  @@index([phone])
  @@index([email])
  @@index([bloodType])
  @@index([isActive])
  @@index([createdAt])
  @@index([isActive, createdAt]) // Active patients with recent activity
  @@index([lastName, firstName]) // Reverse name search
  @@map("patients")
}

// Enhanced Bill Model with Performance Optimizations
model Bill {
  id                String            @id @default(uuid())
  billNumber        String            @unique
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  visitId           String?
  visitType         String
  billDate          DateTime          @default(now())
  billType          String
  packageId         String?
  totalAmount       Decimal           @db.Decimal(10, 2)
  discountAmount    Decimal           @default(0) @db.Decimal(10, 2)
  discountReason    String?
  taxAmount         Decimal           @default(0) @db.Decimal(10, 2)
  netAmount         Decimal           @db.Decimal(10, 2)
  paidAmount        Decimal           @default(0) @db.Decimal(10, 2)
  outstandingAmount Decimal           @db.Decimal(10, 2)
  status            BillStatus        @default(DRAFT)
  verifiedBy        String?
  verifiedAt        DateTime?
  approvedBy        String?
  approvedAt        DateTime?
  cancelledBy       String?
  cancelledAt       DateTime?
  cancellationReason String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  departmentId      String?
  insuranceClaimId  String?           @unique
  
  // Relations optimized for performance
  billItems         BillItem[]
  payments          Payment[]
  insuranceClaim    InsuranceClaim?
  
  // Critical Performance Indexes
  @@index([billNumber])
  @@index([patientId])
  @@index([status])
  @@index([billDate])
  @@index([visitType])
  @@index([createdBy])
  @@index([departmentId])
  @@index([status, billDate]) // Status with date for filtering
  @@index([patientId, status]) // Patient bills by status
  @@index([patientId, billDate]) // Patient bills chronologically
  @@index([billDate, status]) // Daily billing reports
  @@index([outstandingAmount]) // Outstanding payments
  @@index([totalAmount]) // Amount-based queries
  @@map("bills")
}

enum BillStatus {
  DRAFT
  PENDING
  VERIFIED
  APPROVED
  SENT
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

// Enhanced BillItem Model
model BillItem {
  id                String            @id @default(uuid())
  billId            String
  bill              Bill              @relation(fields: [billId], references: [id], onDelete: Cascade)
  serviceItemId     String
  serviceItem       ServiceItem       @relation(fields: [serviceItemId], references: [id], onDelete: Restrict)
  quantity          Int
  unitPrice         Decimal           @db.Decimal(10, 2)
  totalPrice        Decimal           @db.Decimal(10, 2)
  discount          Decimal           @default(0) @db.Decimal(10, 2)
  tax               Decimal           @default(0) @db.Decimal(10, 2)
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([billId])
  @@index([serviceItemId])
  @@index([billId, serviceItemId]) // Composite for bill item lookup
  @@map("bill_items")
}

// Enhanced ServiceItem Model
model ServiceItem {
  id                String            @id @default(uuid())
  code              String            @unique
  name              String
  description       String?
  category          String
  unitPrice         Decimal           @db.Decimal(10, 2)
  taxRate           Decimal?          @db.Decimal(5, 2)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  billItems         BillItem[]
  
  // Performance Indexes
  @@index([code])
  @@index([category])
  @@index([isActive])
  @@index([name]) // For service search
  @@index([category, isActive]) // Active services by category
  @@index([unitPrice]) // Price-based queries
  @@map("service_items")
}

// Enhanced Appointment Model with Performance Optimizations
model Appointment {
  id                String            @id @default(uuid())
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctorId          String
  departmentId      String?
  appointmentDate   DateTime
  startTime         DateTime
  endTime           DateTime
  duration          Int               // Duration in minutes
  type              AppointmentType
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?
  cancelReason      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  
  // Critical Performance Indexes
  @@index([patientId])
  @@index([doctorId])
  @@index([departmentId])
  @@index([appointmentDate])
  @@index([status])
  @@index([startTime])
  @@index([endTime])
  @@index([doctorId, appointmentDate]) // Doctor's daily schedule
  @@index([patientId, appointmentDate]) // Patient's appointments
  @@index([appointmentDate, status]) // Daily appointment status
  @@index([doctorId, status]) // Doctor's appointment status
  @@index([startTime, endTime]) // Time slot conflicts
  @@map("appointments")
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  PROCEDURE
  SURGERY
  EMERGENCY
  CHECKUP
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Enhanced IPD Admission Model
model Admission {
  id                String            @id @default(uuid())
  admissionNumber   String            @unique
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctorId          String
  departmentId      String
  wardId            String?
  bedId             String?
  admissionDate     DateTime          @default(now())
  dischargeDate     DateTime?
  admissionType     AdmissionType
  status            AdmissionStatus   @default(ACTIVE)
  diagnosis         String?
  treatment         String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  
  // Relations
  vitalSigns        VitalSign[]
  medications       MedicationAdministration[]
  nursingNotes      NursingNote[]
  progressNotes     ProgressNote[]
  
  // Performance Indexes
  @@index([admissionNumber])
  @@index([patientId])
  @@index([doctorId])
  @@index([departmentId])
  @@index([wardId])
  @@index([bedId])
  @@index([admissionDate])
  @@index([dischargeDate])
  @@index([status])
  @@index([admissionType])
  @@index([patientId, status]) // Patient's current admission
  @@index([doctorId, status]) // Doctor's active patients
  @@index([wardId, status]) // Ward occupancy
  @@index([admissionDate, status]) // Daily admissions
  @@map("admissions")
}

enum AdmissionType {
  EMERGENCY
  PLANNED
  TRANSFER
  READMISSION
}

enum AdmissionStatus {
  ACTIVE
  DISCHARGED
  TRANSFERRED
  CANCELLED
}

// Enhanced Lab Order Model
model LabOrder {
  id                String            @id @default(uuid())
  orderNumber       String            @unique
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctorId          String
  departmentId      String?
  orderDate         DateTime          @default(now())
  priority          OrderPriority     @default(ROUTINE)
  status            OrderStatus       @default(PENDING)
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  
  // Relations
  labTests          LabTest[]
  labResults        LabResult[]
  
  // Performance Indexes
  @@index([orderNumber])
  @@index([patientId])
  @@index([doctorId])
  @@index([departmentId])
  @@index([orderDate])
  @@index([priority])
  @@index([status])
  @@index([patientId, status]) // Patient's pending orders
  @@index([doctorId, orderDate]) // Doctor's daily orders
  @@index([status, priority]) // Urgent pending orders
  @@index([orderDate, status]) // Daily lab workload
  @@map("lab_orders")
}

enum OrderPriority {
  STAT
  URGENT
  ROUTINE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

// Enhanced Lab Test Model
model LabTest {
  id                String            @id @default(uuid())
  code              String            @unique
  name              String
  description       String?
  category          String
  normalRange       String?
  unit              String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  labOrders         LabOrder[]
  labResults        LabResult[]
  
  // Performance Indexes
  @@index([code])
  @@index([name])
  @@index([category])
  @@index([isActive])
  @@index([category, isActive]) // Active tests by category
  @@map("lab_tests")
}

// Enhanced Lab Result Model
model LabResult {
  id                String            @id @default(uuid())
  labOrderId        String
  labOrder          LabOrder          @relation(fields: [labOrderId], references: [id], onDelete: Cascade)
  labTestId         String
  labTest           LabTest           @relation(fields: [labTestId], references: [id], onDelete: Restrict)
  value             String?
  numericValue      Decimal?          @db.Decimal(15, 6)
  referenceRange    String?
  unit              String?
  flag              ResultFlag?
  status            ResultStatus      @default(PENDING)
  reportedDate      DateTime?
  verifiedBy        String?
  verifiedAt        DateTime?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([labOrderId])
  @@index([labTestId])
  @@index([status])
  @@index([reportedDate])
  @@index([flag])
  @@index([labOrderId, labTestId]) // Unique result per order-test
  @@index([status, reportedDate]) // Pending results by date
  @@map("lab_results")
}

enum ResultFlag {
  NORMAL
  HIGH
  LOW
  CRITICAL_HIGH
  CRITICAL_LOW
  ABNORMAL
}

enum ResultStatus {
  PENDING
  COMPLETED
  VERIFIED
  CORRECTED
}

// Enhanced RBAC Models
model UserRole {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId            String
  assignedBy        String
  assignedAt        DateTime          @default(now())
  expiresAt         DateTime?
  isActive          Boolean           @default(true)
  context           Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([userId])
  @@index([roleId])
  @@index([assignedBy])
  @@index([isActive])
  @@index([expiresAt])
  @@index([userId, isActive]) // Active roles for user
  @@index([roleId, isActive]) // Active users with role
  @@unique([userId, roleId])
  @@map("user_roles")
}

// Enhanced Session Management
model UserSession {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress         String
  userAgent         String
  refreshToken      String
  expiresAt         DateTime
  isActive          Boolean           @default(true)
  mfaVerified       Boolean           @default(false)
  loggedOutAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([userId])
  @@index([refreshToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([userId, isActive]) // Active sessions for user
  @@index([expiresAt, isActive]) // Session cleanup
  @@map("user_sessions")
}

// Enhanced MFA Model
model UserMFA {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret            String
  backupCodes       String
  isEnabled         Boolean           @default(false)
  enabledAt         DateTime?
  disabledAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([userId])
  @@index([isEnabled])
  @@map("user_mfa")
}

// Enhanced Audit Log Model
model AuditLog {
  id                String            @id @default(uuid())
  eventType         String
  userId            String?
  user              User?             @relation("AuditUser", fields: [userId], references: [id], onDelete: SetNull)
  targetUserId      String?
  targetUser        User?             @relation("AuditTarget", fields: [targetUserId], references: [id], onDelete: SetNull)
  resource          String
  resourceId        String?
  action            String?
  details           Json
  ipAddress         String?
  userAgent         String?
  sessionId         String?
  timestamp         DateTime          @default(now())
  severity          String            @default("LOW")
  outcome           String            @default("SUCCESS")
  compliance        Json?
  
  // Critical Performance Indexes for Audit Queries
  @@index([eventType])
  @@index([userId])
  @@index([targetUserId])
  @@index([resource])
  @@index([timestamp])
  @@index([severity])
  @@index([outcome])
  @@index([timestamp, eventType]) // Event timeline
  @@index([userId, timestamp]) // User activity timeline
  @@index([resource, timestamp]) // Resource access timeline
  @@index([severity, timestamp]) // Security monitoring
  @@index([eventType, resource]) // Resource-specific events
  @@map("audit_logs")
}

// Additional Performance Models

model VitalSign {
  id                String            @id @default(uuid())
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  admissionId       String?
  admission         Admission?        @relation(fields: [admissionId], references: [id], onDelete: SetNull)
  recordedAt        DateTime          @default(now())
  temperature       Decimal?          @db.Decimal(4, 1)
  bloodPressureSys  Int?
  bloodPressureDia  Int?
  heartRate         Int?
  respiratoryRate   Int?
  oxygenSaturation  Int?
  weight            Decimal?          @db.Decimal(5, 2)
  height            Decimal?          @db.Decimal(5, 2)
  recordedBy        String
  notes             String?
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([patientId])
  @@index([admissionId])
  @@index([recordedAt])
  @@index([recordedBy])
  @@index([patientId, recordedAt]) // Patient vitals timeline
  @@index([admissionId, recordedAt]) // Admission vitals timeline
  @@map("vital_signs")
}

model Prescription {
  id                String            @id @default(uuid())
  prescriptionNumber String           @unique
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctorId          String
  prescriptionDate  DateTime          @default(now())
  status            PrescriptionStatus @default(ACTIVE)
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  medications       PrescriptionMedication[]
  
  // Performance Indexes
  @@index([prescriptionNumber])
  @@index([patientId])
  @@index([doctorId])
  @@index([prescriptionDate])
  @@index([status])
  @@index([patientId, status]) // Active prescriptions for patient
  @@index([doctorId, prescriptionDate]) // Doctor's daily prescriptions
  @@map("prescriptions")
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

model PrescriptionMedication {
  id                String            @id @default(uuid())
  prescriptionId    String
  prescription      Prescription      @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  medicationName    String
  dosage            String
  frequency         String
  duration          String
  instructions      String?
  quantity          Int?
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([prescriptionId])
  @@index([medicationName])
  @@map("prescription_medications")
}

// Additional support models for IPD
model MedicationAdministration {
  id                String            @id @default(uuid())
  admissionId       String
  admission         Admission         @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  medicationName    String
  dosage            String
  administeredAt    DateTime
  administeredBy    String
  notes             String?
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([admissionId])
  @@index([administeredAt])
  @@index([administeredBy])
  @@index([admissionId, administeredAt]) // Medication timeline
  @@map("medication_administrations")
}

model NursingNote {
  id                String            @id @default(uuid())
  admissionId       String
  admission         Admission         @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  noteDate          DateTime          @default(now())
  shift             String
  note              String
  nurseId           String
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([admissionId])
  @@index([noteDate])
  @@index([nurseId])
  @@index([shift])
  @@index([admissionId, noteDate]) // Nursing timeline
  @@map("nursing_notes")
}

model ProgressNote {
  id                String            @id @default(uuid())
  admissionId       String
  admission         Admission         @relation(fields: [admissionId], references: [id], onDelete: Cascade)
  noteDate          DateTime          @default(now())
  note              String
  doctorId          String
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([admissionId])
  @@index([noteDate])
  @@index([doctorId])
  @@index([admissionId, noteDate]) // Progress timeline
  @@map("progress_notes")
}

// Enhanced Payment Model
model Payment {
  id                String            @id @default(uuid())
  paymentNumber     String            @unique
  billId            String
  bill              Bill              @relation(fields: [billId], references: [id], onDelete: Restrict)
  amount            Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  paymentDate       DateTime          @default(now())
  status            PaymentStatus     @default(PENDING)
  transactionId     String?
  notes             String?
  processedBy       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([paymentNumber])
  @@index([billId])
  @@index([paymentDate])
  @@index([status])
  @@index([paymentMethod])
  @@index([transactionId])
  @@index([billId, status]) // Bill payment status
  @@index([paymentDate, status]) // Daily payments
  @@map("payments")
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  INSURANCE
  CHEQUE
  DIGITAL_WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Enhanced Insurance Models
model InsuranceProvider {
  id                String            @id @default(uuid())
  name              String
  code              String            @unique
  address           String?
  phone             String?
  email             String?
  contactPerson     String?
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  insurancePolicies InsurancePolicy[]
  
  // Performance Indexes
  @@index([code])
  @@index([name])
  @@index([active])
  @@index([active, name]) // Active providers
  @@map("insurance_providers")
}

model InsurancePolicy {
  id                    String              @id @default(uuid())
  patientId             String
  patient               Patient             @relation(fields: [patientId], references: [id], onDelete: Restrict)
  insuranceProviderId   String
  insuranceProvider     InsuranceProvider   @relation(fields: [insuranceProviderId], references: [id], onDelete: Restrict)
  policyNumber          String
  groupNumber           String?
  groupName             String?
  subscriberId          String
  subscriber            Patient             @relation("Subscriber", fields: [subscriberId], references: [id], onDelete: Restrict)
  relationship          String
  startDate             DateTime
  endDate               DateTime?
  coverageType          String
  planType              String
  copayAmount           Decimal?            @db.Decimal(10, 2)
  coinsurancePercentage Decimal?            @db.Decimal(5, 2)
  deductibleAmount      Decimal?            @db.Decimal(10, 2)
  deductibleMet         Decimal?            @db.Decimal(10, 2)
  outOfPocketMax        Decimal?            @db.Decimal(10, 2)
  outOfPocketMet        Decimal?            @db.Decimal(10, 2)
  status                String
  notes                 String?
  lastVerificationId    String?
  lastVerifiedAt        DateTime?
  lastEligibilityStatus String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  verifications         PolicyVerification[]
  claims                InsuranceClaim[]
  
  // Performance Indexes
  @@index([patientId])
  @@index([insuranceProviderId])
  @@index([policyNumber])
  @@index([subscriberId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([patientId, status]) // Patient's active policies
  @@index([insuranceProviderId, status]) // Provider's active policies
  @@index([policyNumber, insuranceProviderId]) // Unique policy lookup
  @@unique([patientId, insuranceProviderId, policyNumber])
  @@map("insurance_policies")
}

model PolicyVerification {
  id                    String            @id @default(uuid())
  policyId              String
  policy                InsurancePolicy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  verificationMethod    String
  verificationReference String?
  verifiedBy            String
  verifiedAt            DateTime
  eligibilityStatus     String
  coverageDetails       String?
  notes                 String?
  createdAt             DateTime          @default(now())
  
  // Performance Indexes
  @@index([policyId])
  @@index([verifiedAt])
  @@index([eligibilityStatus])
  @@index([verifiedBy])
  @@index([policyId, verifiedAt]) // Policy verification history
  @@map("policy_verifications")
}

model InsuranceClaim {
  id                    String            @id @default(uuid())
  claimNumber           String            @unique
  invoiceId             String
  invoice               Bill              @relation(fields: [invoiceId], references: [id], onDelete: Restrict)
  insurancePolicyId     String
  insurancePolicy       InsurancePolicy   @relation(fields: [insurancePolicyId], references: [id], onDelete: Restrict)
  status                String
  totalAmount           Decimal           @db.Decimal(10, 2)
  approvedAmount        Decimal?          @db.Decimal(10, 2)
  deniedAmount          Decimal?          @db.Decimal(10, 2)
  submittedBy           String?
  submittedAt           DateTime?
  submissionMethod      String?
  submissionReference   String?
  preAuthorizationNumber String?
  notes                 String?
  lastResponseId        String?
  lastResponseDate      DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Relations
  diagnoses             ClaimDiagnosis[]
  items                 ClaimItem[]
  followUps             ClaimFollowUp[]
  responses             ClaimResponse[]
  
  // Performance Indexes
  @@index([claimNumber])
  @@index([invoiceId])
  @@index([insurancePolicyId])
  @@index([status])
  @@index([submittedAt])
  @@index([lastResponseDate])
  @@index([insurancePolicyId, status]) // Policy claims by status
  @@index([submittedAt, status]) // Claim processing timeline
  @@map("insurance_claims")
}

// Supporting models for insurance claims
model ClaimDiagnosis {
  id                String            @id @default(uuid())
  claimId           String
  claim             InsuranceClaim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  diagnosisCode     String
  diagnosisType     String
  description       String?
  createdAt         DateTime          @default(now())
  
  @@index([claimId])
  @@index([diagnosisCode])
  @@map("claim_diagnoses")
}

model ClaimItem {
  id                String            @id @default(uuid())
  claimId           String
  claim             InsuranceClaim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  serviceCode       String
  description       String?
  quantity          Int
  unitPrice         Decimal           @db.Decimal(10, 2)
  totalPrice        Decimal           @db.Decimal(10, 2)
  approvedAmount    Decimal?          @db.Decimal(10, 2)
  deniedAmount      Decimal?          @db.Decimal(10, 2)
  denialReason      String?
  createdAt         DateTime          @default(now())
  
  @@index([claimId])
  @@index([serviceCode])
  @@map("claim_items")
}

model ClaimFollowUp {
  id                String            @id @default(uuid())
  claimId           String
  claim             InsuranceClaim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  followUpDate      DateTime
  followUpMethod    String
  contactPerson     String?
  notes             String?
  followUpBy        String
  createdAt         DateTime          @default(now())
  
  @@index([claimId])
  @@index([followUpDate])
  @@index([followUpBy])
  @@map("claim_follow_ups")
}

model ClaimResponse {
  id                String            @id @default(uuid())
  claimId           String
  claim             InsuranceClaim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
  responseDate      DateTime
  responseType      String
  responseDetails   String?
  attachments       String?
  processedBy       String?
  createdAt         DateTime          @default(now())
  
  @@index([claimId])
  @@index([responseDate])
  @@index([responseType])
  @@map("claim_responses")
}

// Enhanced Radiology Models
model RadiologyOrder {
  id                String            @id @default(uuid())
  orderNumber       String            @unique
  patientId         String
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctorId          String
  departmentId      String?
  orderDate         DateTime          @default(now())
  priority          OrderPriority     @default(ROUTINE)
  status            OrderStatus       @default(PENDING)
  clinicalHistory   String?
  instructions      String?
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  
  // Relations
  radiologyStudies  RadiologyStudy[]
  radiologyReports  RadiologyReport[]
  
  // Performance Indexes
  @@index([orderNumber])
  @@index([patientId])
  @@index([doctorId])
  @@index([departmentId])
  @@index([orderDate])
  @@index([priority])
  @@index([status])
  @@index([patientId, status]) // Patient's pending orders
  @@index([doctorId, orderDate]) // Doctor's daily orders
  @@index([status, priority]) // Urgent pending orders
  @@index([orderDate, status]) // Daily radiology workload
  @@map("radiology_orders")
}

model RadiologyStudy {
  id                String            @id @default(uuid())
  studyInstanceUID  String            @unique
  radiologyOrderId  String
  radiologyOrder    RadiologyOrder    @relation(fields: [radiologyOrderId], references: [id], onDelete: Cascade)
  studyDate         DateTime
  modality          String
  bodyPart          String
  studyDescription  String?
  technician        String?
  status            StudyStatus       @default(SCHEDULED)
  imageCount        Int?
  fileSize          BigInt?
  storageLocation   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([studyInstanceUID])
  @@index([radiologyOrderId])
  @@index([studyDate])
  @@index([modality])
  @@index([status])
  @@index([technician])
  @@index([radiologyOrderId, status]) // Order studies by status
  @@index([studyDate, modality]) // Daily studies by modality
  @@map("radiology_studies")
}

enum StudyStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  REPORTED
  ARCHIVED
}

model RadiologyReport {
  id                String            @id @default(uuid())
  reportNumber      String            @unique
  radiologyOrderId  String
  radiologyOrder    RadiologyOrder    @relation(fields: [radiologyOrderId], references: [id], onDelete: Cascade)
  reportDate        DateTime          @default(now())
  findings          String?
  impression        String?
  recommendation    String?
  radiologistId     String
  status            ReportStatus      @default(DRAFT)
  verifiedBy        String?
  verifiedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Performance Indexes
  @@index([reportNumber])
  @@index([radiologyOrderId])
  @@index([reportDate])
  @@index([radiologistId])
  @@index([status])
  @@index([verifiedBy])
  @@index([radiologyOrderId, status]) // Order reports by status
  @@index([radiologistId, reportDate]) // Radiologist's daily reports
  @@map("radiology_reports")
}

enum ReportStatus {
  DRAFT
  PRELIMINARY
  FINAL
  VERIFIED
  AMENDED
}

// Enhanced Temporary Session for MFA
model TemporarySession {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress         String
  userAgent         String
  expiresAt         DateTime
  isActive          Boolean           @default(true)
  purpose           String            @default("MFA_VERIFICATION")
  createdAt         DateTime          @default(now())
  
  // Performance Indexes
  @@index([userId])
  @@index([expiresAt])
  @@index([isActive])
  @@index([purpose])
  @@index([userId, isActive]) // Active temp sessions for user
  @@map("temporary_sessions")
}
